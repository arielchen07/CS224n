[
    {
        "generated_text": " from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i, n1 in enumerate(numbers):\n        for n2 in numbers[i + 1:]:\n            if n2 - n1 < threshold:\n                if i > len(numbers) // 2:\n                    return True\n                continue\n            if n1 - n2 < threshold:\n                return True\n    return False\n",
        "index": 0
    },
    {
        "generated_text": " from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n\\treturn re.findall(\n\\t\\tr'(?:^|[ )])((?:[(](?:(?![( ])(?:.)|[ )])*[)])(?![ )\\w])(?=[ )\\w])|[^()]+)',\n\\t\\tparen_string,\n\\t)\n\\treturn list(map(str.strip, re.findall(r'(?:^|\\s)\\((\\g<paren>(?:[^)(]|\\g<paren>)*))\\)((?:[^)(]|\\g<paren>\\g<paren>)*)\\s|(?:^|\\s)(\\(|\\))(?=[\\s)]|$)', paren_string)))\n",
        "index": 1
    },
    {
        "generated_text": " \n\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    if number > 0:\n        return (number - (number // 1))\n    else:\n        return number - ((number // 1) - 1)\n   ",
        "index": 2
    },
    {
        "generated_text": " from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    bal = 0\n    for op in operations:\n        bal += op\n        if bal < 0:\n            return True\n    return False\n\n",
        "index": 3
    },
    {
        "generated_text": " from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    result = 0\n    for x in numbers:\n        result += abs(mean - x)\n    return result / len(numbers)\n",
        "index": 4
    },
    {
        "generated_text": " from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    # The equivalent JS:\n    #\n    # let intersperse = (nums, delim) =>\n    #     _.flatMap(nums, (x, i, arr) => [x, (arr.length - 1 != i) && delim]);\n\n    # The equivalent Python:\n    #\n    # nums = [1, 2, 3]\n    # delim = 4\n    # [x if len(nums) == i else delim for i, x in enumerate(nums)]\n    # [[x, delim] for i, x in enumerate(nums) if i != len(nums)]\n",
        "index": 5
    },
    {
        "generated_text": " from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    calculations = paren_string.split(' ')\n    return [max(0, len(c) - c.count('(')) for c in calculations]\n",
        "index": 6
    },
    {
        "generated_text": " from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [item for item in strings if substring in item]\n\n\ndef filter_by_length(strings: List[str], length: int) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones who's length are lower or equal to passed in length\n    >>> filter_by_length([], 1)\n    []\n    >>> filter_by_length(['abc', 'bacd', 'cde', 'array'], 3)\n    ['abc', 'cde']\n    \"\"\"\n    return [item for item in strings if len(item) <= length]\n\n\ndef filter_by_boolean(strings: List[str], keep_only: bool) -> List[str]:\n    \"\"\" Filter an input list of strings to only finite or only infinite length\n    >>> filter_by_boolean([], False)\n    []\n    >>> filter_by_boolean(['abc', 'bacd', 'cde', 'array'], False)\n    ['abc', 'cde']\n    \"\"\"\n    return [item for item in strings if len(item) > 0 == keep_only]\n\n\ndef run_check(function: Callable[[List[str], str], List[str]], *args, **kwargs) -> bool:\n    return eval('{}(*(m for m in getattr(__main__, \\'__builtins__\\').list(args)), **kwargs) in [tuple(iterable) for iterable in getattr(__main__, \\'__builtins__\\').list(getattr(getattr(__main__, \\'__builtins__\\'), \\'eval\\')(f\\'[tuple(getattr(m, \\'list\\', []) for m in getattr(__main__, \\'__builtins__\\').list(getattr(getattr(__main__, \\'__builtins__\\'), \\'dict\\').items())) for m in getattr(__main__, \\'__builtins__\\').list(getattr(getattr(__main__, \\'__builtins__\\'), \\'dict\\').values()))]\\'))]'.format(function.__name__))\n",
        "index": 7
    },
    {
        "generated_text": " from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    # Hint: if you have empty list you can destruct it into two lists! Addition has zero element\n    return sum(numbers), prod(numbers)\n\n\ndef prod(sin):\n    result = 1\n    for i in sin:\n        result *= i\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod(verbose=True)\n\n\n\"\"\"\nI've also solved the problem using the built-in function in python\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    return sum(numbers), reduce(lambda x, y: x*y, numbers, 1)\n\"\"\"\n",
        "index": 8
    },
    {
        "generated_text": " from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    if not numbers:\n        return []\n    max_val = numbers[0]\n    rolling_result = []\n    for x in numbers:\n        max_val = max(x, max_val)\n        rolling_result.append(max_val)\n    return rolling_result\n",
        "index": 9
    },
    {
        "generated_text": " \n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    lower_string = string.lower()\n    normalized_string = lower_string + string.lower()[::-1]\n    for i in range(len(string), 0, -1):\n        if normalized_string[i - 1:2 * i - 1] == normalized_string[2 * i - 1:][::-1]:\n            return string + string[:i][::-1]\n    return ''\n\n\nif __name__ == \"__main__\":\n    import unittest\n    from unittest.mock import patch\n\n    class TestPalindrome(unittest.TestCase):\n        def test_make_palindrome(self):\n            self.assertEqual(make_palindrome('frac'), 'fracarc')\n            self.assertEqual(make_palindrome('gray'), 'grayray')\n\n        def test_is_palindrome(self):\n            self.assertTrue(is_palindrome('rr'))\n            self.assertTrue(is_palindrome('' + 'ra' * 128 + 'r'))\n            self.assertFalse(is_palindrome('not' + 'ra' * 128 + 'r'))\n            self.assertFalse(is_palindrome('not'))\n\n        def test_make_palindrome2(self):\n            self.assertEqual(make_palindrome(''), '')\n\n        def test_make_palindrome_given_html(self):\n            context_manager = patch('builtins.open', create=True)\n            mock_open = context_manager.start()\n            mock_open.return_value.__enter__.return_value = [\n                '  a b b a   ',\n                ' ',\n                ' Nested list:'\n            ]\n            self.assertEqual(make_palindrome(''), '')\n            context_manager.stop()\n\n    unittest.main()\n",
        "index": 10
    },
    {
        "generated_text": " from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n\\t\\t\n",
        "index": 11
    },
    {
        "generated_text": " from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n\n    max_string = strings[0]\n    max_length = 1\n\n    for string in strings:\n        if len(string) > max_length:\n            max_length = len(string)\n            max_string = string\n    return max_string\n\n\ndef test_longest():\n    assert longest([]) is None\n    assert longest(['hello']) == 'hello'\n    assert longest(['hello', 'hi', 'aaa', 'bye']) == 'aaa'\n",
        "index": 12
    },
    {
        "generated_text": " \n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    if a == 0:\n        return b\n    elif a < b:\n        return greatest_common_divisor(a, b - a)\n    else:\n        return greatest_common_divisor(b, a - b)\n        \nprint(greatest_common_divisor(a, b))",
        "index": 13
    },
    {
        "generated_text": " from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    pass\n\n\n# ---\n\n\ndef test_all_prefixes():\n    assert all_prefixes(\"\") == [\"\"]\n    assert all_prefixes(\"a\") == [\"\", \"a\"]\n    assert all_prefixes(\"abc\") == [\"\", \"a\", \"ab\", \"abc\"]\n    assert all_prefixes(\"banana\") == [\n        \"\",\n        \"b\",\n        \"ba\",\n        \"ban\",\n        \"bana\",\n        \"banan\",\n        \"banana\",\n    ]\n",
        "index": 14
    },
    {
        "generated_text": " \n\ndef string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(map(str, range(n + 1)))\n\n",
        "index": 15
    },
    {
        "generated_text": " \n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))\n\nassert count_distinct_characters('xyzXYZ') == 3\nassert count_distinct_characters('Jerry') == 4",
        "index": 16
    },
    {
        "generated_text": " from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    parts = music_string.split()\n    whole, half, quarter = 4, 2, 1\n    result = []\n    for p in parts:\n        if p == 'o':\n            result.append(whole)\n        elif p == 'o|':\n            result.append(half)\n        elif p == '.|':\n            result.append(quarter)\n    return result\n",
        "index": 17
    },
    {
        "generated_text": " \n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n    \n    return ?\n",
        "index": 18
    },
    {
        "generated_text": " from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    return \" \".join(sorted(input.split(), key=lambda x: num_pos(x)))\n\n\ndef num_pos(num_name):\n    return ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'].index(num_name) \n",
        "index": 19
    },
    {
        "generated_text": " from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    min_delta: float = 1e10\n    pair: Tuple[float, float] = (0, 0)\n\n    for index, _ in enumerate(numbers):\n        for inner_index, _ in enumerate(numbers[: index - 1]):\n            delta: float = abs(numbers[index] - numbers[inner_index])\n            if delta < min_delta:\n                min_delta = delta\n                pair = (numbers[index], numbers[inner_index])\n\n    if pair[0] > pair[1]:\n        return pair[1], pair[0]\n    return pair\n\n\nif __name__ == '__main__':\n    import doctest\n\n    doctest.testmod()\n",
        "index": 20
    },
    {
        "generated_text": " from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if not numbers or len(numbers) < 2:\n        raise ValueError().with_traceback()\n\n    def get_input_min_and_max() -> list:\n        \"\"\"Return/yield the minimum and maximum value of list\"\"\"\n        min_value = min(numbers)\n        max_value = max(numbers)\n        return min_value, max_value\n\n    scale = 1 / (max(numbers) - min(numbers))\n    value = get_input_min_and_max()[0]\n    return [round(scale * (value - get_input_min_and_max()[0])) for value in numbers]\n",
        "index": 21
    },
    {
        "generated_text": " from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [i for i in values if type(i) == int]\n```\nThe idea here is basically what you see in the examples:\n\nGo through each value: check if it is of the UsableType\n- if yes: collect it (in a local variable)\n- if no : drop it\nin the end - return that local variable alongside the filtered content\n\n### codes are much more understandable when reading from right to left, this is again: \"do this to this, and that to that\"\n- this is very similar to how to read imaginations: \n- \"I imagine a tree. That tree is green, and leaves are falling. That tree is tall and grows towards sky.\"\n\nfrom left to right:\n`return [i for i in values if type(i) == int]`\n- i believe it's like: \n- \"return a list where the if-clause has operated\"\n- which means: consider i, as long as it is in values, and it's type is an integer\n- return a list, as long as typeCast(i) leads to int, inside the list\n```\n\n- *SO what happend here?*\nI) **create a local variable before the function itself has even started. This local variable is empty and called \"pass\"**\n{1} **create a for-each-loop on the lisy \"values\" extracting each single value**\n{2} **Assign this single value to i**\n{3} **Test to which is this \"inside for-each\" value of type int. And if it is true, collect it in \"pass\"**\n{4} **As long as this for-each-loop has not yet reached the end, repeat this process**\n{5} **as soon as it did end, return the \"old\" local variable pass but now potentially ( after the for - each -loop had potentially collected something ) filled**\n\n```\n\n## another final Advanced Typecasting Example\nfilter_values = filter(lambda x: x % 2 == 0, [1,2,3,4])\nprint(list(filter_values))\n> [2, 4]\n```\n{1} **from module_name import object_name as new_name**\nThese three functions do the same: but their \"usage\" changes,\n- I) **from math import trigonometry**  /  math.trigonometry()\n- II) **import math** / **math.trigonometry()**\n- III) **from math import trigonometry as trig** / **trig()**\n\n## Stefanie's method to solve a basic Problem\n\n1. she has an idea or a problem statement \n2. She writes the code to generate the solution (manual intervention - }\n    She raises an error:\n    a) either more problems / questions emerge\n        b) she struggles with solving that error \n+) or she found a working answer but it probably does not work for every input\n    c) she thinks maybe she can *code up the mistake in terms* of code\n        d) she implements the idea in code - she starts to test it\n        e) she sees - something breaks: now she has to refactor her code to \"catch\" the problem that might emerge\n        f) she rewrote the code so that it only passes if the test has not failed \n- Everything she is doing in the second step, which includes **writing down the code,\n testing it (generating the answers and getting an error) or\n analyzing the mistake, improving her code**:\nshe is incrementing a step that as a result she can show at the end as a solved problem statement and code that is understtodable to everyone else.  - at that point she is a little bit of: she is learning what was broken and why was it broken - and shows the understanding of that phenomenon\n```\n# Problem Statement\nimport statistics\n# Generate Test Data\ndata = [3, 2, 5, 2, 5, 6, 4, 2, 4, 9, 6, 7, 'Pizza', 3, 6]\n# Function to Solve\nfilter_numbers = lambda *args : [i for i in *args if (type(i) != int) and (type(i) != float)]\n# Test Function\nassert list(filter_numbers(data)) == ['Pizza']\n```\n",
        "index": 22
    },
    {
        "generated_text": " \n\ndef strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return 0\n",
        "index": 23
    },
    {
        "generated_text": " \n\ndef largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    if n < 2:  \n        return 1\n    for i in range(int(n/2), 0, -1):\n        if n % i == 0:\n            return i\n",
        "index": 24
    },
    {
        "generated_text": " from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n",
        "index": 25
    },
    {
        "generated_text": " from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    # init an empty list where to store modified collection\n    temp_list = []\n    # Loop through each item in the list\n    for i in numbers:\n        # check if item is already in the new list\n        if i not in temp_list:\n            # if not then add it\n            temp_list.append(i)\n    return temp_list\n",
        "index": 26
    },
    {
        "generated_text": " \n\ndef flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    # Operation\n    _ = \"\"\"\n    s = []\n    for x in string:\n        if x.isupper():\n            s.append(x.lower())\n        else:\n            s.append(x.upper())\n    \"\"\"\n    # Short Answer\n    return \"\".join([x.lower() if x.isupper() else x.upper() for x in string])\n    # Long Answer\n    # s = \"\"\n    # for i in string:\n    #     if i.isupper():\n    #         i = i.lower()\n    #     else:\n    #         i = i.upper()\n    #     s += i\n    # return s\n\n\ndef count_substring(string: str, substring: str) -> int:\n    \"\"\" Given a string and a substring, count the number of times the substring appears in the string.\n\n    Example:\n    >>> count_substring('abcdcdc', 'cdc')\n    2\n\n    \"\"\"\n    count = 0\n    for i in range(len(string)):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n",
        "index": 27
    },
    {
        "generated_text": " from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    concatenated_string = \"\".join(strings)\n    return concatenated_string\n\n\nif __name__ == \"__main__\":\n    import doctest\n\n    doctest.testmod()\n",
        "index": 28
    },
    {
        "generated_text": " from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    prefixes = []\n    for words in strings:\n        if words.startswith(prefix):\n            prefixes.append(words)\n    return prefixes\n\n\nstrings_list = ['apple', 'banana', 'orange']\nprint(filter_by_prefix(strings_list, 'a'))\n",
        "index": 29
    },
    {
        "generated_text": " \n\ndef get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    \n    \nRemove n number of elements remove\nWrite a function which returns all the numbers from a list except the given element. Just like the predefined function get_numberst except that is removes a specified number passed as a parameter.\n\ne.g. myList = [1, 2, 3, 4, 5]\n     remove_value(myList, 3) -> [1, 2, 4, 5]\n     remove_value(myList, 9) -> [1, 2, 3, 4, 5]\n\n",
        "index": 30
    },
    {
        "generated_text": " \n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n",
        "index": 31
    },
    {
        "generated_text": " import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if abs(xs[-1]) < 1e-4:\n        raise ValueError(\"polynomials having zero as a leading coefficient does not have roots\")\n    if len(xs) % 2 == 1:\n        raise ValueError(\"polynomials having odd number of terms is not allowed\")\n    \n    right_hand_side = 0.0\n    if xs[0] < 0:\n        right_hand_side = round((2 ** 30) / abs(xs[-1])) + 1\n    \n    left_hand_side = 1.0\n    while True:\n        poly_eval = poly(xs, left_hand_side)\n        if poly_eval < right_hand_side:\n            return left_hand_side\n        else:\n            left_hand_side += 1e-5\n",
        "index": 32
    },
    {
        "generated_text": " \n\ndef sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    # Made a copy of the original\n    l1 = l[:]\n    # Replaced every third element with zero\n    for i in range(2, len(l1), 3):\n        l1[i] = 0\n    # Sort first third of the list\n    l1[:len(l1)//3] = sorted(l1[:len(l1)//3])\n    # Then sort second third of the list\n    l1[len(l1)//3:len(l1)//3*2] = sorted(l1[len(l1)//3:len(l1)//3*2])\n    # Then sort third third of the list\n    l1[len(l1)//3*2:len(l1)] = sorted(l1[len(l1)//3*2:len(l1)])\n    # Return sorted list\n    return l1\n",
        "index": 33
    },
    {
        "generated_text": " \n\ndef unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    # YOUR CODE HERE\n    # sorted(l)\n    # set(l)\n    return sorted(set(l))\n    \n    pass",
        "index": 34
    },
    {
        "generated_text": " \n\ndef max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    maximum = 0",
        "index": 35
    },
    {
        "generated_text": " \n\ndef fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    num = 0\n    count = 0\n    while num < n:\n        if num % 11 == 0 or num % 13 == 0:\n            num_7 = str(num).count(\"7\")\n            count += num_7\n        num += 1\n\n    return count\n\n\n\n\n\n\n\n",
        "index": 36
    },
    {
        "generated_text": " \n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    #HINT: try to define a variable named 'even' inside the function body so the function's\n    #return statement can use it.\n    l = l # EMPTY LINE TO MAKE PLACE FOR THE FUNCTION BODY. DO NOT DELETE THIS LINE.\n\n    even=[tmp for i, tmp in enumerate(l) if i % 2 == 1] # ACTUAL CODE SHOULD GO HERE.\n    even.sort()\n    print(even)\n    return even\n\n# ACTUAL CODE ENDS HERE\n# For \"assert\" statements: Return the expected value and then click \"Run Tests\" to see\n# if it PASSES, otherwise click Run Tests to view the ERROR.\n# To get a perfect score, replace the \"None\" in the return statement of the\n# pre-written code with the correct value representing the output of this\n# function for the parameter 'None' \nassert sort_even(None) == None\n",
        "index": 37
    },
    {
        "generated_text": " \n\ndef encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # TODO: complete to get correct result for `decode_cyclic(encode_cyclic(\"asdfghjklqwertyuiopzxcvbnm\"))`\n    pass\n",
        "index": 38
    },
    {
        "generated_text": " \n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n    y = 1\n    x = 1\n    res = 1\n    i = 3\n    while i <= n:\n      y += x+res\n      x += y +res\n      res += y+x\n      i+=1   \n    if y%2 == 1:\n        u = y +1\n    else:\n        u = y-1\n    count = 1\n    while u%2 == 0 and count <=n :\n        u = u//2\n        count +=1\n    if count == n:\n        return y\n    else:\n        count =1\n        while u%2 == 0 and count <=n:\n            u //= 2\n            count +=1\n        if count == n:\n            return y -2\n        else:\n            return y +2",
        "index": 39
    },
    {
        "generated_text": " \n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n    # Your code starts here\n    triples_list = []\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if (l[i] + l[j] + l[k]) == 0:\n                    triples_list.append((l[i], l[j], l[k]))\n    if len(triples_list) > 0:\n        return True\n    return False",
        "index": 40
    },
    {
        "generated_text": " \n\ndef car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    answer = '';\n    x = []; # keep track of cars moving left to right\n    for i in range(n):\n        if (i%2) != 0: # check for edge cases\n            answer += 'L'; # add string L, they won't collide\n        else: # add none\n            answer += 'N'; # add string N, they won't collide\n            x.append((i)); # append INTEGER\n    y = []; # keep track of cars moving right to left\n    for j in range(n):\n        if (j%2) == 0: # check for even numbers\n            if (j) in x:\n                answer = answer.replace('N', 'C'); \n                # replace string N with C, it collided\n            else: # if they are still equal\n                answer += 'R'; # add string R, it didn't collide\n    return answer; # return the str 'answer' that lists all the collisions\n\n\ncar_race_collision(2); # 'LR' - there is no collision\ncar_race_collision(5); # 'LNRNNC'  A car collides with the SIXTH car from the right\ncar_race_collision(3); # 'NNR' - no collision\ncar_race_collision(6); # 'LNCRRNR' - A car collides with the FIRST car from the left,\n                       # A car collides with the THIRD car from the left \n                       # A car collides with the FIFTH car from the left,\n                       # A car collides with the SIXTH car from the left\ncar_race_collision(4); # 'LNNR' - No collision\ncar_race_collision(1); # 'N'\n ",
        "index": 41
    },
    {
        "generated_text": " \n\ndef incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    pass\n\nWrite a function that will determine how many olympic rings there should be in a produced \ndecoration based on the size of the decoration. \n\nThe decoration will be made in one of the following sizes\nS (for small) which is between 1 and 5 feet in any dimension\nM (for medium) which is between 6 and 10 feet in any dimension\nL (for large) which is between 11 and 15 feet in any dimension\nXL (for extra large) which is greater than 15 feet in any dimension\n\nIf the decoration is less than 3 feet in any dimension it cannot be used to make a full Olympic Ring.\n\ndef count_rings(size: str, width: int, height: int, depth: int = 0) -> int:\n    ''' (str, int, int, int) -> int\n    Return the number of full Olympic Rings that can be made.\n    Assume single color. \n    \n    \n    >>> count_rings(\"S\", 1, 1)\n    0\n    >>> count_rings(\"S\", 1, 2)\n    0\n    >>> count_rings(\"S\", 1, 2, 3)\n    0\n    >>> count_rings(\"S\", 4, 1)\n    0\n    >>> count_rings(\"S\", 2, 3)\n    1\n    >>> count_rings(\"S\", 2, 4, 5)\n    1\n    >>> count_rings(\"M\", 5, 10)\n    4\n    >>> count_rings(\"M\", 10, 5)\n    4\n    >>> count_rings(\"M\", 3, 3)\n    1\n    >>> count_rings(\"M\", 6, 6)\n    4\n    >>> count_rings(\"M\", 6, 6, 6)\n    8\n    >>> count_rings(\"M\", 7, 7, 7)\n    6\n    >>> count_rings(\"L\", 7, 7, 7)\n    9\n    >>> count_rings(\"L\", 9, 7, 6)\n    9\n    >>> count_rings(\"L\", 11, 5, 6)\n    9\n    >>> count_rings(\"L\", 12, 7, 8)\n    12\n    >>> count_rings(\"L\", 13, 7, 8)\n    12\n    >>> count_rings(\"L\", 14, 9, 10)\n    12\n    >>> count_rings(\"XL\", 2, 2)\n    1\n    >>> count_rings(\"XL\", 2, 2, 3)\n    1\n    >>> count_rings(\"XL\", 15, 15)\n    15\n    >>> count_rings(\"XL\", 16, 16)\n    16\n    '''\n    pass\n    ",
        "index": 42
    },
    {
        "generated_text": " \n\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    for i in range(len(l)):\n        for j in range(len(l)):\n            if i==j:\n                pass\n            else:\n                if l[j]==-l[i]:\n                    return True\n    return False\n\n\n\n\n\ndef contains_duplicates(l):\n    \"\"\"\n    contains_duplicates takes a list as an input.\n    it returns True if the list contains any duplicates\n    and False otherwise.\n    >>> contains_duplicates([1,2,3,4])\n    False\n    >>> contains_duplicates([1,2,3,1,4])\n    True\n    >>> contains_duplicates([1,2,3,2])\n    True\n    >>> contains_duplicates([1])\n    False\n    \"\"\"\n    if len(l)<=1:\n        return False\n    for i in range(len(l)):\n        if l[i] in l[i+1:]:\n            return True\n    return False\n\n\n\n\n\n\ndef is_sorted(l):\n    \"\"\"\n    is_sorted takes a list as an input.\n    it returns True if the list is sorted in increasing order\n    and False otherwise.\n    >>> is_sorted([1,2,3,4])\n    True\n    >>> is_sorted([1,2,4,3])\n    False\n    >>> is_sorted([4,3,2,1])\n    False\n    >>> is_sorted([1])\n    True\n    \"\"\"\n    if len(l)<=1:\n        return True\n    for i in range(len(l)):\n        if l[i]>l[i+1]:\n            return False\n    return True\n\n\n\n\ndef swap_parallel_replace(l, s1, s2):\n    \"\"\"\n    swap_parallel_replace takes an alphabet, a string, and a character as an input.\n    it changes the string so that every even occurrence of the character is replaced \n    by the same alphabet and every odd occurrence is replaced by the replacement alphabet.\n    notice: if you want your alphabet to contain '<' or '>' make sure to use: '<' < 'A' < 'Z' < 'a' < 'z' < '>'\n    >>> swap_parallel_replace('abcde','This is a simple test', 'o')\n    'Thiqs iq s a qimple tist'\n    >>> swap_parallel_replace('vwxyz','This is a simple test', 'o')\n    'Thiwvz iw v a wiwple twist'\n    >>> swap_parallel_replace('abcde','This is a simple test', 'T')\n    'hTs is a sThimple test'\n    >>> swap_parallel_replace('abcde','This is a simple test', 'X')\n    'Xhis is a spXXXle tXst'\n    \"\"\"\n    if not s2 in s1:\n        raise ValueError\n    alp='abcdefghijklmnopqrstuvwxyz'\n    alpSet = set(alp)\n    s1=list(s1)\n    s2ndx = s1.index(s2)\n    for i in range(1,len(s1)):\n        if i==s2ndx:\n            pass\n        elif s1[i]==s2:\n            s1[i]=next(x for x in alp if x < s2)\n        elif s1[i] in alpSet:\n            s1[i]=next(x for x in alp if x > s2)\n    return ''.join(s1)\n",
        "index": 43
    },
    {
        "generated_text": " \n\ndef change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    new = []\n    if x > 1:\n        new.append(str(x % 2)) # Make a number which I can append\n        new.append(x) # Adding x to end of new list to call same function with new number over and over until x == 1\n    else:\n        new.append(str(x))\n    return ''.join(new) \n\nprint(change_base(8, 3))\n",
        "index": 44
    },
    {
        "generated_text": " \n\ndef triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return (a * h) / 2",
        "index": 45
    },
    {
        "generated_text": " \n\ndef fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    dp = [0] * max(n + 1, 4)\n    dp[0] = 0\n    dp[1] = 0\n    dp[2] = 2\n    dp[3] = 0\n    for i in range(4, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3] + dp[i - 4]\n    return dp[n]\n\n\ndef test_fib4():\n    vals = {\n        0: 0,\n        4: 4,\n        22: 171976,\n        25: 863950\n    }\n    for key, value in vals.items():\n        assert fib4(key) == value\n\n\nif __name__ == '__main__'  :\n\n    test_fib4()",
        "index": 46
    },
    {
        "generated_text": " \n\ndef median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    odd_num = [int(num) for num in l if num < 0]\n    pos_num = [int(num) for num in l if num >= 0]\n    if len(odd_num) % 2 == 1 or len(pos_num) % 2 == 1:\n        return sum(odd_num + pos_num) / len(odd_num + pos_num)\n    else:\n        if not odd_num and not pos_num:\n            return 0\n    \n        elif not pos_num and odd_num:\n            return stat.median(odd_num)\n\n        elif not odd_num and pos_num:\n            return stat.median(pos_num)\n\n        elif odd_num and pos_num:\n            return (stat.median(odd_num) + stat.median(pos_num)) / 2\n        else:\n            return 0\n\nJoin Weights\n\nSOLUTION\n\ndef join_weights(weights: dict) -> float:\n    \"\"\"Return total weight of the knapsack.\n    >>> join_weights({'lamb': 5, 'bone': 3.4, 'sausage': 2.1, 'peanut butter': 1.5})\n    12.0\n    \"\"\"\n    total = 0\n    for key in weights.keys():\n        total += weights[key]\n\n    return total",
        "index": 47
    },
    {
        "generated_text": " \n\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n",
        "index": 48
    },
    {
        "generated_text": " \n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    power = 2\n    result = 1\n    for i in range(n):\n        result = (power * 2) % p\n        power = result\n    return result",
        "index": 49
    },
    {
        "generated_text": " \n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\nif __name__ == \"__main__\":\n    print(\"Example:\")\n    print(\"encode_shift('hello') decode_shift('hello, world')\")\n    print(\"encode_shift('hello') = 'jgnnq', decode_shift('jgnnq') = 'hello'\")\n    assert encode_shift(\"hello, world\") == \"jgnnq, ybxy\"\n    assert decode_shift(\"jgnnq, ybxy\") == \"hello, world\"\n",
        "index": 50
    },
    {
        "generated_text": " \n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n\n    def _remove_vowels(text, vowels):\n        \"\"\"\n        Private method, that has a untouchable branching.\n        \"\"\"\n        collector = []\n        for al in text.lower():\n            if al not in vowels: collector.append(al)\n        return ''.join(collector).lower()\n\n    return _remove_vowels(text, \"{yva provider}\")[:5]\n",
        "index": 51
    },
    {
        "generated_text": " \n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for n in l:\n        if n >= t:\n            return False\n    return True",
        "index": 52
    },
    {
        "generated_text": " \n\ndef add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    if x > y:\n        return x + y\n    else:\n        return y + x\n\n\n\n\n \n\ndef Name():\n    return \"alok\"\n\ndef MobileNo():\n    return 78665678\n\ndef Email():\n    return \"abc@gamil.com\"\n\ndef Designation():\n    return \"Engineer\"\n\n\n\n\n \n\ndef Name():\n    return \"alok\"\n\ndef MobileNo():\n    return 78665678\n\ndef Email():\n    return \"abc@gamil.com\"\n\ndef Designation():\n    return \"Engineer\"\n\n\nComplete the function. You cannot access the class inside a function\n\nclass Person:\n     def __init__(self, name, age):\n         self.name = name\n         self.age = age\n\n     def myfunc(self):\n         return \"Hello my name is \"+self.name\n\n\"\"\"       \ncheck I am able to create object of above class and can access the class members\n\na = Person(\"Amit\",30)\nprint a.name\nexpected output: Amit\n\nprint a.age\nexpected output: 30\n\nprint a.myfunc()\nexpected output: Hello my name is Amit\n\nYou cannot access the class using self or name outside the class\n\n\"\"\"\n\n \n\ndef add(a, b):\n    return (a, b)\n\ndef main() :\n    result = add(10, 20)\n    print (result[0] + result[1])\n\n \n\ndef triangle(base, height=3):\n    return base * height / 2\n\n\n\n",
        "index": 53
    },
    {
        "generated_text": " \n\ndef same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return all(x in s1 for x in s0) and all(x in s0 for x in s1) ",
        "index": 54
    },
    {
        "generated_text": " \n\ndef fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    {#PYTHON}\n    # a, b = q, r\n    # a, b = b, a + b\n    a, b = 0, 1\n    i = 0\n    while i < n:\n        # a, b = q, r\n        # a, b = b, a + b\n        a, b = b, a + b\n        i += 1\n    return b\n    {#PERL6}\n    my ($q, $r, $a, $b) = (0, 1, 0, 1);\n    while $q < $n {\n        ($q, $r) = ($r, $a + $b);\n        $a = $r;\n    };\n    return $b;\n    {#GUESS}\n    return 1;\n    {#END}\n    {#PYTHON}\n    # a, b = r, 2 * r - a\n    # a, b = b, a + b\n    a, b = 0, 1\n    i = 0\n    while i < n:\n        # a, b = r, 2 * r - a\n        # a, b = b, a + b\n        tmp = 2 * b - a\n        a = b\n        b = tmp\n        i += 1\n    return a\n    {#PERL5}\n    (my ($a, $b) = (0, 1)); #dont forget paranthesis if assignments are on multiline\n    (my $q, my $r) = ($b, 2 * $b - $a);\n    $a = $r;\n    $i = 0;\n    # Perl does not have while loops with improved definedness.\n    #while ($i < $n) {#unsupported in variable line displacement calculation\n    while defined $n {\n        # (my $q, my $r) = ($b, 2 * $b - $a);\n        # ($a = $r, $b = $q);\n        $a = $r;\n        $b = $q;\n        $i++;\n    };\n    return $a;\n    {#JS}\n    # a, b;\n    a = 1;\n    b = 0;\n    i = 0;\n    while (i < n) {\n        // a, b = r, 2 * r - a\n        // a, b = b, a + b\n        tmp = a;\n        a = b;\n        b = 2 * b - a;\n        i += 1;\n    };\n    return a;\n    {#TCL}\n    set a 0;\n    set b 1;\n    set q 1; # to avoid infinite while loop\n    set i 0;\n    while { < 0 } { incr i }; # TCL will loop indefinitely if { < 0 } is true\n\n    {#JS}\n    // a, b;\n    $a = 0;\n    $b = 1;\n    $i = 0;\n    $q = 1; // to avoid infinite while loop\n    while ($i < n) {\n        // a, b = r, 2 * r - a\n        // a, b = b, a + b\n        tmp = a;#unsupported\n        $a = $b;\n        $b = 2 * b - $a;\n        $i++;\n    };\n    return $a;\n\n\n    {#SWIFT}\n    var a = 0\n    var b = 1\n    var i = 0\n    var q = 1 // to avoid infinite while loop\n    while i < n {\n        // a, b = r, 2 * r - a\n        // a, b = b, a + b\n        a = b\n        b = 2 * b - a\n        i++\n    };\n    return $a;\n\n\n    {#TCL}\n    set a 0\n    set b 1\n    set q 1 ; # to avoid infinite while loop\n    set i 0\n    while { < 0 } { incr i } ; # TCL will loop indefinitely if { < 0 } is true\n\n    {#RUBY}\n    a, b = 0, 1\n    i = 0\n    while i < n do\n        # a, b = r, 2 * r - a\n        # a, b = b, a + b\n        tmp = a\n        a = b\n        b = 2 * b - a\n        i += 1\n    end\n\n    {#C}\n    int a = 0;\n    int b = 1;\n    int tmp = 0;\n    int i = 0;\n    int n32 = 16; // to avoid infinite while loop\n    while (i < n32) {\n        /* a, b = r, 2 * r - a */\n        /* a, b = b, a + b */\n        tmp = a;\n        a = b;\n        b = 2 * b - a;\n        i++;\n    }\n    return a;",
        "index": 55
    },
    {
        "generated_text": " \n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n\n    opening = []\n\n    for char in brackets:\n        if char == \"<\":\n            opening.append(1)\n        else:\n            if len(opening) == 0:\n                return False\n            opening.pop()\n\n    return len(opening) == 0",
        "index": 56
    },
    {
        "generated_text": " \n\ndef monotonic(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n",
        "index": 57
    },
    {
        "generated_text": " \n\ndef common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    l3 = []\n    for a, b in zip(l1, l2):\n        if b in l1 and a in l2 and a not in l3:\n            l3.append(a)\n    return sorted(list(set(l3)))                  # Complete this function\n",
        "index": 58
    },
    {
        "generated_text": " \n\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    \n",
        "index": 59
    },
    {
        "generated_text": " \n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    sum = n\n    for i in range(n):\n        sum += i\n\n    return sum\n",
        "index": 60
    },
    {
        "generated_text": " \n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n\n    if (len(brackets) % 2) == 1:\n        return False\n\n    brace_list = [\"(\"]\n    for bracket in brackets:\n        if bracket == \"(\":\n            brace_list.append(\"(\")\n        elif bracket == \")\":\n            if \"(\" in brace_list:\n                brace_list.pop()\n            else:\n                brace_list.append(\")\")\n\n    if brace_list:\n        return False\n    else:\n        return True\n",
        "index": 61
    },
    {
        "generated_text": " \n\ndef derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    \n\n#  \n#list as a parameter\n\ndef evaluate_derivative_at(x, xs):\n    \"\"\" x represent point at which you want to evaluate derivative.\n    xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return the result of the derivative of this polynomial at the given point.\n     >>> evaluate_derivative_at(0, [1, 2, 3])\n     2\n     >>> evaluate_derivative_at(0, [1])\n     0\n    \"\"\"\n    \n\n",
        "index": 62
    },
    {
        "generated_text": " \n\ndef fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequence that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n    if n == 0 or n == 1 or n == 2:\n        return 0\n    elif n == 3:\n        return 1\n    else:\n        dp = []\n        dp.append(0)\n        dp.append(0)\n        dp.append(1)\n        i = 3\n        while i < n:\n            dp.append(dp[i-1] + dp[i-2] + dp[i-3])\n            i += 1\n        return dp[n-1]\n\n",
        "index": 63
    },
    {
        "generated_text": " \nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n\n    pass\n",
        "index": 64
    },
    {
        "generated_text": " \ndef circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n    # IMPLEMENTATION NOTES\n    # a python list is used to add a zero on the end of the string\n    # the command rotate() of the deque structure shifts right as many digits as\n    # defined with shift\n    # the resulting string representation is assigned to x\n\n    x = int(str(x) + '0')\n    queuex = deque(str(x))\n    queuex.rotate(shift)\n    x = int(''.join(queuex))\n    return str(x)",
        "index": 65
    },
    {
        "generated_text": " \ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    sum = 0\n    for c in s:\n        c = ord(c)\n        if c >= 65 and c <=90:\n            sum = sum + c\n    return sum\n\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    return sum(ord(c) if 65 <= ord(c) <= 90 else 0 for c in s)    \n",
        "index": 66
    },
    {
        "generated_text": " \ndef fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    count = 0\n    \n    for i in s.split(\" \"):\n        if i.isdigit():\n            count += int(i)\n    \n    return n - count",
        "index": 67
    },
    {
        "generated_text": " \ndef pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n    if len(arr) == 0: return []\n    b = 1e9\n    c = 100000\n    for i in arr:\n        if i % 2 == 0 and i < b:\n            b = i\n            if arr.index(i) < c:\n                c = arr.index(i)\n\n    return (b, arr.index(b))\n",
        "index": 68
    },
    {
        "generated_text": " \ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n    \n    # Write your code here\n    from collections import defaultdict\n    \n    # Dictionary to store number-number count pairs\n    num_count_dict = defaultdict(int)\n    \n    # Dictionary to store number-index list pairs\n    num_index_dict = defaultdict(list)\n    \n    # Iterate through each index\n    for index, num in enumerate(lst):\n        # Increment the number count\n        num_count_dict[num] += 1\n        \n        # Add the index to the index list\n        num_index_dict[num].append(index)\n    \n    largest = 0\n    # Check the frequency of each number\n    for num in num_count_dict.keys():\n        # If the number not larger than numbers, pass\n        if largest < num_count_dict[num]:\n            largest = num_count_dict[num]\n            \n        # If the number larger than count number, find the largest number value\n        if num <= largest:\n            continue\n        \n        if largest <= num and num < len(lst):\n            largest = num\n    \n    if largest <= 1:\n        return -1\n    \n    return largest\n\n'''\ns = 3\nd = 5\nfor i in range(1, d+1):\n    for j in range(1, s+1):\n        if i**2 == (j*d+1):\n            print(j, j*d, i)'''",
        "index": 69
    },
    {
        "generated_text": " \ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    \n    maxv = lst[-1]\n    minv = lst[0]\n    for idx, i in enumerate(lst):\n        if i > maxv:\n            lst[idx], maxv = maxv, i\n        if i < minv:\n            lst[idx], minv = minv, i\n    if minv != lst[0]:\n        lst = [lst[0]] + lst[1:-1][::-1] + [lst[-1]]\n    return lst\n\n\n\ndef strange_sort_list(lst):\n    if len(lst) <= 1:\n        return lst \n    return strange_sort_list([x for x in lst[1:] if x <= min(lst)]) \\\n         + [min(lst)] \\\n         + strange_sort_list([x for x in lst[1:] if x > min(lst)]) ",
        "index": 70
    },
    {
        "generated_text": " \ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    if a + b > c and a + c > b and b + c > a:\n        return ((a + b + c) / 2) ** 0.5\n    return -1",
        "index": 71
    },
    {
        "generated_text": " \ndef will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n    inp1 = q\n    inp2 = w\n    \n    '''\n    1. Complete the function, do not add a main method and do not return empty function body\n    2. sequence of elements in a list q must be the same from left to right and from right to left.\n    3. False if :\n        - sequence of elements in a list q does not match, or\n        - sum of all the elements in the q list exceed max possible weight w\n    4. True if:\n        - sequence of elements in list q matches, and\n        - sum of all the elements in q does not exceed max possible weight w\n    '''\n    \n    # checking if elements match\n    if (len(q) != len(q[::-1])):\n        return False\n    else:   \n        s_distance = [] \n        # iterate q throughout in pairs\n        for x, y in zip(q, q[::-1]):\n            s_distance.append(x - y)\n            \n        # check that the sum of elements of s_distance does not exceed max possible distance, w, in this case\n        if sum(map(abs, s_distance)) > w:\n            return False\n        else:\n            return True\n    \nassert will_it_fly([1,2], 5) == False\nassert will_it_fly([1,2,1], 5) == True\nassert will_it_fly([3,2,3], 1) == False\nassert will_it_fly([3,2,3], 9) == True\nassert will_it_fly([3], 5) == True\nassert will_it_fly([7], 2) == False",
        "index": 72
    },
    {
        "generated_text": " \ndef smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    \n    count = 0\n    i = 0\n    j = len(arr)-1\n    \n    # Alternate until middle element is reached. For odd numbers of elements, element will be reassigned to itself to complete the palindrome. For even numbers of elements, comparison of element is skipped to prevent triggering count change.\n    while i<j:\n        if arr[i] != arr[j]:\n            count += 1\n        i +=1\n        j -=1\n    return count/2\n        \n        \n    \n\n",
        "index": 73
    },
    {
        "generated_text": " \ndef total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n\nTotal Match\n\n\n\n\ntotal_match([], [])\ntotal_match(['hi', 'admin'], ['hI', 'Hi'])\ntotal_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\ntotal_match(['hi', 'admin', 'hi', 'a', 'asd', 'asd'], ['hI', 'hi', 'hi'])\ntotal_match(['4'], ['1', '2', '3', '4', '5'])",
        "index": 74
    },
    {
        "generated_text": " \ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    return len([i for i in range(2, a ** 0.5 + 1) if not a % i and len(\n        [j for j in range(2, i ** 0.5 + 1) if not i % j])]) == 3\n\n\nis_multiply_prime(30)  # True\n",
        "index": 75
    },
    {
        "generated_text": " \ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    if x**int(x**(1/n)) == x:\n        return True\n    else:\n        return False",
        "index": 76
    },
    {
        "generated_text": " \ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this integer is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n",
        "index": 77
    },
    {
        "generated_text": " \ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n\n    hex_primes = set([2,3,5,7,11,13])\n    num = list(num)\n    total = 0\n    for n in num:\n        if n.isalpha():\n            hex_num = hex_alphanum('A', n)\n        else:\n            hex_num = int(str(n))\n            total += 1 if hex_num in hex_primes else 0\n            \n    return total\n\ndef hex_alphanum(hex, num_str):\n    \"\"\"Convert number from hex to int\"\"\"\n    val = 0\n    for index, n in enumerate(num_str):\n        hex_num = hex_string(hex, index)\n        if val == 0:\n            val = hex_num\n        else:\n            val += hex_num\n            \n    return val\n\n\ndef hex_string(hex, index):\n    \"\"\"Convert single character hex to int by iterating len of \n    the character index from the hex string\"\"\"\n    val = 0\n    for char in hex:\n        val += 16**index\n    \n    return val\n",
        "index": 78
    },
    {
        "generated_text": " \ndef decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n",
        "index": 79
    },
    {
        "generated_text": " \ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n\n    return len(s) >= 3 and all(i != j and j != k and k != i for i, j, k in zip(s, s[1:], s[2:]))",
        "index": 80
    },
    {
        "generated_text": " \ndef numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n    def calculate(gpa):\n        if gpa >= 4.0:\n            gpa = 'A+'\n        elif gpa>3.7:\n            gpa = 'A'\n        elif gpa>3.3:\n            gpa = 'A-'\n        elif gpa>3.0:\n            gpa = 'B+'\n        elif gpa>2.7:\n            gpa = 'B'\n        elif gpa>2.3:\n            gpa = 'B-'\n        elif gpa>2.0:\n            gpa = 'C+'\n        elif gpa>1.7:\n            gpa = 'C'\n        elif gpa>1.3:\n            gpa = 'C-'\n        elif gpa>1.0:\n            gpa = 'D+'\n        elif gpa>0.7:\n            gpa = 'D'\n        elif gpa>0.0:\n            gpa =  'D-' \n        elif gpa == 0:\n            gpa = 'E'\n        return gpa    \n    return list(map(calculate,grades))\n\n\n",
        "index": 81
    },
    {
        "generated_text": " \ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n",
        "index": 82
    },
    {
        "generated_text": " \ndef starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    result, sixes = 1, n - 1\n    for i in range(n - 2):\n        result *= 9 - i\n        result %= 10**6\n        sixes *= 9 - i\n        sixes %= 10**6\n    return result + sixes * (n//2)\n",
        "index": 83
    },
    {
        "generated_text": " \ndef solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    \"\"\"WHAT I LEARNED\n    \n    \"\"\"\n    #FROM MATH.PY\n    bin(n) #Where n is positive integer\n    #'0b1001'\n\n    #FROM STRING.PY\n    str.format()\n    \"{0:s}\".format(stuff) #Returns object\n    \n    #FROM INPUT.PY\n    int()\n    int(text)\n    This function converts a text object to an integer. \n    It only works with decimal well.\n    \n    #FROM IO.PY\n    input() - Syntax\n    input(prompt) - Grabs input from user.\n    \n    The function expects a given prompt string for the user,\n    followed by a new line and the user\u2019s text input.\n    \n    \n    #Convert decimal to binary\n    #x = input(\"Enter a number: \") \n    #converted = int(x, 2)\n    \n    #return converted\n    #return str.format(bin(N))\n    \n    #bin(N).replace('b', '')\n    \n    binSum = bin(N)[2:]\n    binarySumToString = str(ReadBinary(binSum))\n    return strSum = str(int(binarySumToString)) \n    # Why am I making this so hard on myself?",
        "index": 84
    },
    {
        "generated_text": " \ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n        # sum = 0\n        # l = len(lst)\n        # for i in range(l):\n        #     if lst[i]%2!=0 and i%2==1:\n        #         sum+=lst[i]\n        # return sum\n\n        # return sum(i for i, x in enumerate(lst) if x%2==0 and i%2==1)\n        return sum([lst[i] for i, v in enumerate(lst) if v%2!=0 and i%2==1]) ",
        "index": 85
    },
    {
        "generated_text": " \ndef anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    words = s.split()  # Get a list of words\n    return \" \".join(sorted(word) for word in words)  # Order each word",
        "index": 86
    },
    {
        "generated_text": " \ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    \n    all_coordiates = []\n    for row in range(len(lst)):\n        for column in range(len(lst[row])):\n            if lst[row][column] == x:\n                all_coordiates.append((row, column))\n    return sorted(sorted(all_coordiates, key=lambda coordinate: coordinate[0]), key=lambda coordinate: coordinate[1], reverse=True)",
        "index": 87
    },
    {
        "generated_text": " \ndef sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # first index value => a[0]\n    # last index value => a[-1]\n\n    #[2,4,3,0,1,5]\n    c = a.copy()\n    c.sort(reverse =True if(sum(a[0],a[-1])%(2))==0 else False )\n    return(c)\n\n'''\n# Least Line of Code\ndef sort_array(arr):\n    arr.sort(reverse = sum(arr[0],arr[-1])%2==0)\n    return arr\n'''\n",
        "index": 88
    },
    {
        "generated_text": " \ndef encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    k = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    m = \"cdefghijklmnopqrstuvwxyzABDEFGHIJKLMNOPQRSTUVWXYZab\"\n    c = \"\"\n    for char in s:\n        if char in k:\n            c += m[k.index(char)]\n        else:\n            c += char\n    return c",
        "index": 89
    },
    {
        "generated_text": " \ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    l = sorted(lst)\n    res = []\n",
        "index": 90
    },
    {
        "generated_text": " \ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    count = 0\n    for i in range(len(S)):\n        print(S[i])\n        if S[i] == \"I\":\n            count += 1\n#            for j in range(i,len(S)):\n#                print(j)\n#                if S[j] in ['.','!','?']:\n#                    count += 1\n#                    break\n    return count\n    # def search(S):",
        "index": 91
    },
    {
        "generated_text": " \ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n    \n    ",
        "index": 92
    },
    {
        "generated_text": " \ndef encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n",
        "index": 93
    },
    {
        "generated_text": " \n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n\n    lst2 = []\n    for num in lst:\n        check = 0\n        if num < 2:\n            pass\n        else:\n            for devider in range(1,int(num**0.5)+1):\n                no = num/devider\n                if no - int(no) == 0:\n                    check += 1\n        if check == 0:\n            lst2.append(str(num))\n    answer = []\n    for each in lst2:\n        for num in each:\n            answer.append(num)\n    summ = int(''.join(answer))\n    return summ\n\n\n\n\n                \n\n\n\n    ",
        "index": 94
    },
    {
        "generated_text": " \ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n    return True\n",
        "index": 95
    },
    {
        "generated_text": " \ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n    arr = []\n    for i in range(2, n):\n        for j in range(2,i):\n            if (i % j == 0):\n                break\n        arr.append(i)\n    return arr\n\nprint(count_up_to(18))\nprint(count_up_to(1))\n\n\n# another sample solution 4\nfrom math import sqrt \n#include<math.h>\n\ndef prime_check(n):\n    #can also use: \n    #a = 2\n    #b = n / a\n    #if n % a == 0:\n    if n == 1:\n        return False\n    for i in range(2, int(sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\ncheck = []      \nfor i in range(2,20):\n    if prime_check(i):\n        check.append(i)  \nprint(check)  \n\n#another sample solution 5\ndef prime_nums(n):\n    check = []\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            break\n    else:\n        check.append(n)\n    return check\nprint(prime_nums(18))           ",
        "index": 96
    },
    {
        "generated_text": " \ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n",
        "index": 97
    },
    {
        "generated_text": " \ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    vowels = ['A', 'E', 'I', 'O', 'U']\n    count_upper_vowels = 0\n    for idx, value in enumerate(s):\n        if value in vowels and not idx % 2:\n            count_upper_vowels += 1\n    return count_upper_vowels'''\n    pass\n\n    \n",
        "index": 98
    },
    {
        "generated_text": " \ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    return int(round(float(value)))\n\n\n",
        "index": 99
    },
    {
        "generated_text": " \ndef make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    ...\n",
        "index": 100
    },
    {
        "generated_text": " \ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    \n    words = s.split(\",\")\n    result = s.split(\",\")\n    \n    return result",
        "index": 101
    },
    {
        "generated_text": " \ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n\n    # Your code here\n    result = -1\n    l = [i for i in range(x, y+1)]\n    if len(l) > 0:\n        l = [i for i in l if i % 2 == 0]\n        if len(l) > 0:\n            result = max(l)\n    return result\n\nif __name__ == \"__main__\":\n    print(choose_num(12, 15))",
        "index": 102
    },
    {
        "generated_text": " \ndef rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n    if m < n:\n        return -1\n    elif n == m:\n        return f\"0b{bin(n)}\"\n    else:\n        avg = round_half_up(n + m)\n        return f\"0b{bin(int(avg))}\"\n\n\ndef round_half_up(n):\n    \"\"\"\n    n may be float or int\n    \"\"\"\n    return round(n)\n\n\ndef test_bin(case1=1, case2=2, case3=3):\n    n = case1\n    m = case2\n    expected = case3  # expected output\n    if rounded_avg(n, m) + \"\\n\" == expected:\n        print(f'Case {case1, case2, case3}: PASS')\n    else:\n        print(f'Case {case1, case2, case3}: BROKEN')\n\n\n# Test case adapted from hints\ntest_bin(1, 5, \"0b11\\n\")\ntest_bin(7, 5, \"-1\\n\")\ntest_bin(10, 20, \"0b1111\\n\")\ntest_bin(20, 33, \"0b11010\\n\")\n# Interesting cases\ntest_bin(3, 3, \"0b11\\n\")\n\"\"\"\n(1, 1) => \"0b1\"\n(10, 10) => \"0b1010\"\n\"\"\"\n\n# Tests to make sure the output\n# is well-formed for test data.\ntest_bin(12, 12, \"0b1100\\n\")\ntest_bin(9, 9, \"0b1001\\n\")\n\n\n",
        "index": 103
    },
    {
        "generated_text": " \ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    # Your code here\n    if x == []:\n        return []\n    else:\n        if '1' not in str(x[0]):\n            return unique_digits(x[1:])\n        else:\n            return [x[0]] + unique_digits(x[1:])",
        "index": 104
    },
    {
        "generated_text": " \ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    sort_arr = sorted(arr)\n    reverse_arr = sort_arr[::-1]\n    for item in reverse_arr:\n        if item < 1 or item > 9:\n            continue\n    return ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']",
        "index": 105
    },
    {
        "generated_text": " \ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n<hr id='sol' />\n\n```python\n    def f(n):\n        l = []\n        for i in range(1, n+1):\n            if i%2 == 1:\n                j = 0\n                for k in range(1,i+1):\n                    j += k\n                l.append(j)\n            else:\n                j = 1\n                for k in range(1,i+1):\n                    j *= k\n                l.append(j)\n        return l\n        # write your code here\n```\n",
        "index": 106
    },
    {
        "generated_text": " \ndef even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n    even, odd = 0, 0\n    for num in range(1, n + 1):\n        s = str(n)\n        if s == s[::-1]:\n            if num % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)",
        "index": 107
    },
    {
        "generated_text": " \ndef count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    cnt = 0\n    for num in arr:\n        s = sum(int(n) for n in str(num)) # get sum from int list\n        if s > 0:\n            cnt += 1\n    return cnt\n\n\n",
        "index": 108
    },
    {
        "generated_text": " \ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n    # second pass: no LEFT shifts are allowed\n    if all(a > b for a, b in zip( arr[1:] , arr[:-1] )): \n        return True\n    # first pass: the first element is possibly out of position\n    else:\n        return arr[0] <= arr[arr.index(min(arr))]\n\narr = [64, 12, 80, 108, 30, 98, 41, 42, 27, 92, 82, 72, 78, 15, 3, 38, 66, 57, 27, 61, 12, 85, 36, 58, 54, 36, 54, 47, 23]\n\nprint(arr)\nprint(move_one_ball(arr))\n\narr= [110, 80, 64, 131, 110, 86, 52, 60, 55, 10, 86, 51, 10, 85, 59, 60, 13, 128, 120, 104, 123, 90, 117, 14, 116, 89, 59, 107, 130, 60]\nprint(arr)\nprint(move_one_ball(arr))\n",
        "index": 109
    },
    {
        "generated_text": " \ndef exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n    s1 = (num for num in lst1 if num % 2)\n    diff = set(s1) - set(lst2)\n    if diff:\n        return \"No\"\n    else:\n        return \"Yes\"\n\n    return None\n",
        "index": 110
    },
    {
        "generated_text": " \ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n    # Your code here\n",
        "index": 111
    },
    {
        "generated_text": " \ndef reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n\n    s = s.replace(''.join(c), '')\n    return (s, s == s[::-1])\n",
        "index": 112
    },
    {
        "generated_text": " \ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    \n Ans : def odd_count(lst):\n         return [\"the number of odd elements {} in the str{}ng {} of the {}{}nput.\".\n                 format(\"{}n\".format(sum(1 for e in elem if int(e) % 2)),\n                        len(elem),lst.index(elem),len(elem),\"{}n\".format(sum(1 for e in elem if int(e) % 2))\n                        ) for elem in lst]\n\n#### above description : https://docs.python.org/3/tutorial/controlflow.html\ndef odd_count(lst):\n    return [\"the number of odd elements {} in the str{}ng {} of the {}{}nput.\".format(\"{}n\".format(sum(1 for e in elem if int(e) % 2)),len(elem),lst.index(elem),len(elem),\"{}n\".format(sum(1 for e in elem if int(e) % 2))) for elem in lst]\n\n    \n",
        "index": 113
    },
    {
        "generated_text": " \ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    sumDict = {}\n    \n    if len(nums) == 1:\n        return min(nums)\n    \n    currSum = 0\n    minSum = 9999\n    \n    for x in nums:\n        currSum += x\n        if currSum not in sumDict:\n            sumDict[currSum] = 0\n        sumDict[currSum] += 1  \n        minSum = min(minSum, currSum)\n        \n    if minSum in sumDict and sumDict[minSum] > 1:\n        return minSum\n    else:\n        return min(nums)\n        \n    \n    ",
        "index": 114
    },
    {
        "generated_text": " \ndef max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n    max_total_water = 0\n    for row in grid:\n        for cell in row:\n            if cell == 1:\n                max_total_water += 1\n    return math.floor(max_total_water / capacity) + max_total_water % capacity\n    \n        \n        \n",
        "index": 115
    },
    {
        "generated_text": " \ndef sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    n = len(arr) - 1  # number of digits n binary representation\n    return sorted(arr, key=lambda x: (bin(x)[2:].count('1'), x), reverse=False)",
        "index": 116
    },
    {
        "generated_text": " \ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n    pass",
        "index": 117
    },
    {
        "generated_text": " \ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n    # write your code here\n    c_list=[\"a\",\"e\",\"i\",\"o\",\"u\"]\n    k=word\n    word=word[::-1]\n    for c in word:\n        if c.lower() not in c_list:\n            if k!=word:\n                for cc in k:\n                    if cc.lower() in c_list:\n                        return cc\n                        break\n        else:\n            for i in c_list:\n                if i in k:\n                    return i\n                    break\n    return \"\"\n\n# get_closest_vowel(\"yogurt\")# ==> \"u\"\n# get_closest_vowel(\"FULL\")# ==> \"U\"\n# get_closest_vowel(\"quick\")# ==> \"\"\n# get_closest_vowel(\"ab\")# ==> \"\"\n\ndef only_vowels(word):\n    \"\"\"You are given a word. Please return only the letters that are vowels in upper\n    case. For example if given the word \"hello\" the function should return `\"EO\"`, \n    if there are no vowels in the word, then the function should return an \n    empty string.\n\n    Please note that the letters should be upper case and you should use the \n    characters from the string `s` to create your upper case vowel string.\n    Expected output: string of upper case vowels\n\n    Example:\n    Expected output: string of upper case vowels\n    only_vowels(\"Hello\") ==> \"EO\"\n    only_vowels(\"World\") ==> \"O\"\n    only_vowels(\"Yellow\") ==> \"EO\"\n    only_vowels(\"Q\") ==> \"\"\n    \"\"\"\n    # write your code here\n    c_list=[\"a\",\"e\",\"i\",\"o\",\"u\"]\n    k=\"\"\n    for w in word:\n        if w.lower() in c_list:\n            k=k+w.upper()\n    return k\n\n# only_vowels(\"Hello\") ===> \"EO\"\n# only_vowels(\"World\") ===> \"O\"\n# only_vowels(\"Yellow\") ===> \"EO\"\n# only_vowels(\"Q\") ===> \"\"\n\n    \ndef can_make_word(chars, words):\n    \"\"\"You are given a group of characters (chars) and a list of \n    words(words) return whether or not you can make the words from the \n    characters. Do not change the order of the characters group, but you \n    can repeatedly rearrange the order of the words (so long as it \n    doesn't affect whether or not the sentence is correct). Note that any \n    sequence of non-space characters that are separated by spaces can be \n    considered a word.\n\n    Expected output: True (if it is possible to make the words using the \n    characters)\n    False (if it is not possible to make the words using the characters)\n\n    Example:\n    can_make_word(['h','b','f','a','e','o','a'], [\"hello\"]) ===> True\n    can_make_word(['h','b','e','o','a','f'], [\"hello\"]) ===> False\n    can_make_word(['h','b','f','a','e','o','a'], [\"hello\", \"face\"]) \n        ===> True\n    can_make_word(['h','b','f','o','e','a'], [\"hello\", \"face\"]) ===> False\n    \"\"\"\n    # write your code here\n    N=len(words)\n    counter=0\n    K=(len(chars)*N)\n    chars=\"\".join(chars)\n    chars=chars.lower()\n    \n    L=set(chars)\n    \n    for w in words:\n        if \"/\" not in w:\n            L2=set(w)\n            if L2 in L:\n                counter=counter+1\n        else:\n            L2=set(w)\n            L2=L2.rsplit(\"/\")\n            for a in L2:\n                if list(a) in L:\n                    counter=counter+1\n                    \n                \n    K=round(K/N)\n    if K==counter:\n        return True\n    else:\n        return False\n\n# can_make_word(['h','b','f','a','e','o','a'], [\"hello\"]) ===> True\n# can_make_word(['h','b','e','o','a','f'], [\"hello\"]) ===> False\n# can_make_word(['h','b','f','a','e','o','a'], [\"hello\", \"face\"]) ===> True\n# can_make_word(['h','b','f','o','e','a'], [\"hello\", \"face\"]) ===> False\n\n\n    \ndef is_anagram(s, t):\n    \"\"\"You are given two strings s and t. Return True if you can find a \n    permutation of s that equals t, and False otherwise.\n    \n    Expected output: True (if the string s can be rearranged to form another empty \n    string t)\n    False (if it is not possible to rearrange the string s, \n    irrespective of the order, to form string t)\n\n    Example:\n    is_anagram(\"listen\", \"silent\") ===> True\n    is_anagram(\"hello\", \"world\") ===> False\n    \"\"\"\n    # write your code here\n    return t==''.join(sorted(s))\n\n# is_anagram(\"listen\", \"silent\") ===> True\n# is_anagram(\"hello\", \"world\") ===> False\n\n\ndef is_isogram(string):\n    \"\"\"You are given a string, and your job is to determine if it is an isogram.  \n    An isogram is a word with only unique, non-repeating letters.\n\n    Expected output: True (if the string can be rearranged to form another empty \n    string t)\n    False (if it is not possible to rearrange the string, \n    irrespective of the order, to form string t)\n\n    Example:\n    is_isogram(\"duck\") ===> True\n    is_isogram(\"aabb\") ===> False\n    \"\"\"\n    # write your code here\n    p=string.lower()\n    L=set(p)\n    L2=sorted(L)\n    return L==\"\".join(L2)\n\n# is_isogram(\"duck\") ===> True\n# is_isogram(\"aabb\") ===> False\n\n\n\"\"\"\nModule unittest is not part of coderunner and should not be used in the solution\nYou can copy the code below and use it to test your function.\nNote: At the bottom of this page, you will find more tips about testing.\n\nfrom unittest import TestCase\n \nclass A_Test_get_closest_vowel(TestCase):\n \n    def test(self):\n        self.assertEqual(get_closest_vowel(\"yogurt\"), \"u\")\n        self.assertEqual(get_closest_vowel(\"FULL\"), \"U\")\n        self.assertEqual(get_closest_vowel(\"quick\"), \"\")\n        self.assertEqual(get_closest_vowel(\"ab\"), \"\")\n\n        with self.assertRaises(Exception):\n            get_closest_vowel(\"\")\n \nclass A_Test_only_vowels(TestCase):\n \n    def test(self):\n        self.assertEqual(only_vowels(\"Hello\"), \"EO\")\n        self.assertEqual(only_vowels(\"World\"), \"O\")\n        self.assertEqual(only_vowels(\"Yellow\"), \"EO\")\n        self.assertEqual(only_vowels(\"Q\"), \"\")\n\n        with self.assertRaises(Exception):\n            only_vowels(\"\")\n \nclass A_Test_can_make_word(TestCase):\n \n    def test(self):\n        self.assertEqual(can_make_word(['h', 'b', 'f', 'a', 'e', 'o', 'a'], \n            [\"hello\"]), True)\n        self.assertEqual(can_make_word(['h', 'b', 'e', 'o', 'a', 'f'], \n            [\"hello\"]), False)\n        self.assertEqual(can_make_word(['h', 'b', 'f','a','e','o','a'], \n            [\"hello\", \"face\"]), True)\n        self.assertEqual(can_make_word(['h', 'b', 'f','o','e','a'], \n            [\"hello\", \"face\"]), False)\n \nclass A_Test_is_anagram(TestCase):\n \n    def test(self):\n        self.assertEqual(is_anagram(\"listen\", \"silent\"), True)\n        self.assertEqual(is_anagram(\"sil\", \"silent\"), False)\n        self.assertEqual(is_anagram(\"listen\", \"not silent\"), False)\n \nclass A_Test_is_isogram(TestCase):\n \n    def test(self):\n        self.assertEqual(is_isogram(\"\"), True)\n        self.assertEqual(is_isogram(\"aabb\"), False)\n        self.assertEqual(is_isogram(\"duck\"), True)\n \nif __name__ == \"__main__\":\nunittest.main()\n\"\"\"",
        "index": 118
    },
    {
        "generated_text": " \ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n    if len(lst[0]) + len(lst[1]) != 4:   # \u8fb9\u754c\u5904\u7406 -- \u957f\u5ea6\u8f93\u5165\u4e0d\u6b63\u786e\u65f6\n        return 'No'\n    if len(lst[0]) == len(lst[1]):   # \u957f\u5ea6\u76f8\u7b49\u65f6 ==> No (\u540c\u7406\u5b50\u4e32\u957f\u5ea6\u5c0f\u4e8e\u5076\u6570\u65f6)\n        return 'No'\n    else:   # \u957f\u5ea6\u4e0d\u7b49\u65f6 ===> \u5c31\u6709\u4e24\u79cd\u53ef\u80fd\n        ret = ['('.join(lst[0].split(')')) + ')', ')'.join(lst[1].split('(')) + '(']  # \u4f7f\u7528\u5165\u6808\u51fa\u6808\u601d\u60f3\u5408\u5e76\u8f93\u5165\u5217\u8868\u4e3a\u540c\u4e00\u4e2a\u5b57\u7b26\u4e32 ==> \u5373 plain='((()))))'\n        fpg = True  # flag for Parensequence Good\n        st = []\n        flag1 = True\n        for gra in ret[0]:  # '((()))))'\n            if gra == '(':  # \u5224\u65ad\u8f93\u5165\u5b57\u6bcd\uff0c\u5165\u6808\u6216\u51fa\u6808\n                if len(st) == 0:\n                    st.append(gra)\n                else:\n                    st.append(gra) if fpg != True else flag1 = False\n            else:\n                if len(st) == 0:  # \u5f39\u51fa\u6b21\u6570\u5927\u4e8e\u5165\u6808\u6b21\u6570\uff0c\u51fa\u6808\u65f6\u5217\u8868\u4e3a\u7a7a\u5217\u8868\u65f6\uff0c\u8f93\u5165\u65f6\u62ec\u53f7\u4e0d\u914d\u5bf9, flag1=False\n                    flag1 = False\n                else:\n                    c = st.pop() if fpg != True else st.pop()\n                    if c != '(':    # \u5339\u914d\u4e0a\u5c42\u62ec\u53f7\u5931\u8d25 => \u51fa\u9519\n                        flag1 = False\n        fpg = flag1\n        flag1 = True\n        for gra in ret[1]:\n            if gra == '(':  # \u5224\u65ad\u8f93\u5165\u5b57\u6bcd\uff0c\u5165\u6808\u6216\u51fa\u6808\n                if len(st) == 0:\n                    st.append(gra)\n                else:\n                    st.append(gra) if fpg != True else flag1 = False\n            else:\n                if len(st) == 0:  # \u5f39\u51fa\u6b21\u6570\u5927\u4e8e\u5165\u6808\u6b21\u6570\uff0c\u51fa\u6808\u65f6\u5217\u8868\u4e3a\u7a7a\u5217\u8868\u65f6\uff0c\u51fa\u9519\n                    flag1 = False\n                else:\n                    c = st.pop() if fpg != True else st.pop()\n                    if c != '(':    # \u5339\u914d\u4e0a\u5c42\u62ec\u53f7\u5931\u8d25\uff0c\u51fa\u9519\n                        flag1 = False\n        if flag1 == False:\n            return 'No'\n        elif len(st) == 0:\n            return 'Yes' # \u5339\u914d\u4e0a\u5168\u90e8\n        else:\n            return 'No'\n\n",
        "index": 119
    },
    {
        "generated_text": " \ndef maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    # Order the elements in arr ascending (-3, 1, -4, 5, 2, -4, 4, 1)\n    arr.sort(reverse=True)\n\n    # Return the top k elements in descending order\n    return arr[:k]\n",
        "index": 120
    },
    {
        "generated_text": " \ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n      ",
        "index": 121
    },
    {
        "generated_text": " \ndef add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n",
        "index": 122
    },
    {
        "generated_text": " \ndef get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n    seen = set()\n    curr = n\n    res = []\n    \n    while n not in seen:\n        if curr % 2 == 0:\n            curr = curr // 2\n        else:\n            curr = 3 * n + 1\n        seen.add(n)\n        if curr % 2 == 1:\n            res.append(curr)\n    \n    res = sorted(res)\n    return res\n\n# print(get_odd_collatz(5))\n",
        "index": 123
    },
    {
        "generated_text": " \ndef valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n    ",
        "index": 124
    },
    {
        "generated_text": " \ndef split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    ordA = ord(\"a\")\n    ordZ = ord(\"z\")\n\n    if \" \" in txt: #Space exists in the text\n        return txt.split(\" \")\n    elif \",\" in txt: #\",\" exists in the string\n        return txt.split(\",\")\n    else: #Neither space or comma exists\n        num_words = 0\n        for char in txt:\n            if ord(char) >= ord(ordA) and ord(char) <= ord(ordZ) and ord(char)%2 != 0: #If it is a letter that occurs in the odd place in the alphabet\n                num_words += 1 #Add 1 to the count of lower-case letters in the string\n        return num_words",
        "index": 125
    },
    {
        "generated_text": " \ndef is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n    return len(lst) <= 1 or len(set(lst)) == len(lst) and all(lst[i] < lst[i+1] for i in range(len(lst) - 1))\n",
        "index": 126
    },
    {
        "generated_text": " \ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n\n    # https://rstudio-pubs-static.s3.amazonaws.com/7433_d255931d480c4cc3889a30025edbb2d1.html\n    from sympy import primetest\n\n    if not interval1 or not interval2:\n        return \"NO\"\n    \n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    #doesnt overlap\n    if end1 < start2 or end2 < start1:\n        return \"NO\"\n    \n    a = max(start1,start2)\n    b = min(end1,end2)\n    \n    intersection = (a,b)\n    \n    if intersection[1] - intersection[0] == 1 or intersection[1] - intersection[0] == 0:\n        return \"NO\"\n        \n    return \"YES\" if primetest(intersection[1] - intersection[0]) else \"NO\"\n",
        "index": 127
    },
    {
        "generated_text": " \ndef prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n    ",
        "index": 128
    },
    {
        "generated_text": " \ndef minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n    def inner(cell, path, min_val, k, descend):\n        vals = sum(descend[cell]) + 1\n        if vals % 2 == 0:\n            ix = vals / 2\n        else:\n            ix = int(vals / 2) + 1\n        if ix > k:\n            return None\n        row, col = cell\n        sz = len(grid)\n        nb = [ (row-1, col), (row, col-1), (row-1, col-1),\n               (row+1, col), (row, col+1), (row+1, col+1)]\n        nb = [x for x in nb if 0 <= x[0] and 0 <= x[1] and x[0] < sz and x[1] < sz and x != cell]\n        for x in nb:\n            cur_val = grid[x[0]][x[1]]\n            i = 0\n            if cur_val in path:\n                i = path.index(cur_val) + 1\n            else:\n                path += [cur_val]\n            if i + ix >= k:\n                continue\n            inner(x, path, min_val, k, descend)\n            path = path[:-1]\n        if ix == k and min_val < grid[row][col]:\n            min_val = grid[row][col]\n        return min_val\n\n    descend = {}\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            descend[(i, j)] = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            for ii in range(0, i):\n                if grid[0][j] < grid[ii][j]:\n                    descend[(0, j)] += 1\n            for jj in range(0, j):\n                if grid[i][j] < grid[i][jj]:\n                    descend[(i, j)] += 1\n            for ii in range(i+1, len(grid)):\n                if grid[i][j] < grid[ii][j]:\n                    descend[(i, j)] += 1\n            for jj in range(j+1, len(grid[0])):\n                if grid[i][j] < grid[i][jj]:\n                    descend[(i, j)] += 1\n    res = []\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            res += inner((i, j), [], 0, k, descend)\n    res = sorted(res)\n    return res[:k]\n",
        "index": 129
    },
    {
        "generated_text": " \ndef tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        a = 3\n    else:\n        a = 3 + n / 2\n    return a if n == 2 else \n",
        "index": 130
    },
    {
        "generated_text": " \ndef digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    prod = 1\n    while n != 0:\n        if n % 10 % 2 != 0:\n            # Odd digit; product is odd too\n            prod *= n % 10\n        n //= 10\n    return prod\n",
        "index": 131
    },
    {
        "generated_text": " \ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    # Initialize a variable to keep track of the open brackets\n    count = 0\n    # Iterate over the string\n    for element in string:\n        # Check if the element is an opening bracket\n        if element == '[':\n             count += 1\n        # Check if the element is a closing bracket\n        elif element == ']':\n             count -= 1\n        # Check if the count is ever negative\n        if count < 0:\n            # If the count is negative, then there are more closing brackets than opening brackets\n            # and the sequence cannot be nested, return False\n            return False\n    # Check that count is still non-negative\n    if count >= 0:\n        # If count is 0, then we have the same number of opening and closing brackets so return True\n        # Otherwise there are still opening brackets left and the sequence cannot be nested,\n        # so return False\n        return False if count > 0 else True\n\ndef return_():\n    return True\n\ndef test_func(fn, ret_\u653f\u5e9c=np.int64):\n    assert (\n        fn('[[]]') == True\n    ), \"Wrong answer for '[[]]' : your function should return the correct nested value.\"\n\n    assert (\n        fn('[]]]]]]][[[[[]') == False\n    ), \"Wrong answer for '[]]]]]]][[[[[]' : your function should return the correct nested value.\"\n\n    assert (\n        fn('[][]') == False\n    ), \"Wrong answer for '[][]' : your function should return the correct nested value.\"\n\n    assert (\n        fn('[]') == False\n    ), \"Wrong answer for '[]' : your function should return the correct nested value.\"\n\n    assert (\n        fn('[[][]]') == True\n    ), \"Wrong answer for '[[][]]' : your function should return the correct nested value.\"\n\n    assert (\n        fn('[[]][[') == True\n    ), \"Wrong answer for '[[]][[' : your function should return the correct nested value.\"\n\n    return \"Passed\"\n\ntest_func(return_)\ntest_func(is_nested)",
        "index": 132
    },
    {
        "generated_text": " \n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n    return sum([(int(ele) + 1)**2 for ele in lst])\n",
        "index": 133
    },
    {
        "generated_text": " \ndef check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n",
        "index": 134
    },
    {
        "generated_text": " \ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    max = -1\n    if len(arr) == 0 or len(arr) == 1:\n            return -1\n    for i in range(len(arr) - 1):\n        curr = arr[i]\n        next = arr[i + 1]\n        \n        if next  < curr:\n            max = i\n\n    return max\n",
        "index": 135
    },
    {
        "generated_text": " \ndef largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n    #return tuple[negative, positive]\n    positive=0\n    negative=0\n    for i in lst:\n        if i>0:\n            if positive==0:\n                positive=i\n            else:\n                if i<positive:\n                    positive=i\n        if i<0:\n            if negative==0:\n                negative=i\n            else:\n                if i>negative:\n                    negative=i\n    if negative==0:\n        negative=None\n    if positive==0:\n        positive=None\n    return (negative,positive)",
        "index": 136
    },
    {
        "generated_text": " \ndef compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n    if type(a) == type(b):\n        if a == b:\n            return None\n        if a < b:\n            return b\n        return a\n    else:\n        return b",
        "index": 137
    },
    {
        "generated_text": " \ndef is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n#NOTE TO MYSELF\n# n = 4, n is divisble by even numbers 2\n# n = 6, n is divisble by odd numbers 3\n# n = 8, n is divisible by 2 and 4\n\n# dividends_ls = []\n# sum_divisible_even_numbers = []\n    divisible_min = 2\n    divisible_max = 2\n#   Iterate over divisible_max\n    while divisible_max < 2097152:\n    if (n % divisible_max == 0) and (divisible_max <= 2097152):\n#         When divisible, add to ls\n        divisible_min = divisible_max\n        divisible_max = n / divisible_min\n        while divisible_max < 2097152:\n#         When divisible, add to ls\n            if n % divisible_max == 0:\n        #         dividend_ls.append(index)\n# checked = []\n# while divisible_min < divisible_max:\n    #     if divisible_min leading to divisible_max in ls \n#         checked.Append(T/F)\n#         return True\n#     else:\n#         return False\n\n# def remainer(n, max_limit):\n#     values = []\n#     i = 2\n#     while i * i <= n:\n#         while n % i == 0:\n#             values.append(n)\n#             n //= n\n#         i += 2\n#     if n > 1:\n#         values.append(n)\n#     return values[0] == max_limit\n# #return len(set(dividends_ls)) == 4\n\n# if remainder(n, 2097152) == True:\n#     # return len(dividends_ls) == 4\n#     print dividends_ls\n#     return len(set(dividends_ls)) >= 4\n# else:\n#     return False\n",
        "index": 138
    },
    {
        "generated_text": " \ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n\n\ndef tests():\n    assert factorial(0) == 1\n    assert factorial(5) == 120\n\n",
        "index": 139
    },
    {
        "generated_text": " \ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    return text.replace(\"  \",\" - \").replace(\" \",\"_\")\n\nclass PathFinder(object):\n    def __init__(self, g_directed: bool):\n        self._map = {}\n        self._visited = set()\n        self._g_directed = g_directed\n\n    def neighbors(self, node):\n        \"\"\"\n        Return a list of all nodes that are connected to the given \n        node in this graph.\n        :param node: str\n        :return: list\n        \"\"\"\n        if node not in self._map:\n            return []\n        return self._map[node]\n\n    def find_path(self, start, end):\n        \"\"\"\n        Perform DFS on graph to find the shortest path between 2 nodes \n        (in later problem generalize this to find all possible paths)\n        1) remove node from unvisited\n        2) clone its neighbors\n        3) first time we encounter the end node, return the path :\n          shortest path found\n        4) visit the first neighbor - we do this to preserve the order in which it was found\n        :param start: str\n        :param end: str\n        :return: list\n        \"\"\"\n        if start not in self._map or end not in self._map or start == end:\n            return []\n        path = []\n        stack = [[start]]\n        shortest_path = []\n        while stack:\n            path = stack.pop()\n            if end in self._map[path[-1]]:\n                shortest_path = path + [end]\n                break\n            self._visited.add(path[-1])\n            nodes = set(self.neighbors(path[-1])) - self._visited\n            if self._g_directed:\n                nodes = {node for node in nodes if node in self._map[end]}\n            if not nodes:\n                continue\n            stack.append(path + [nodes.pop()])\n            no_duplicates = True\n            while nodes:\n                node = nodes.pop()\n                if node not in self._visited:\n                    if no_duplicates:\n                        no_duplicates = False\n                        stack.append(path + [node])\n                    else:\n                        self._visited.add(node)\n        return shortest_path\n    \n    def add_node(self, node):\n        \"\"\"\n        Add a node to the graph.\n        /!\\ Do not add the same node twice.\n        :param node: str\n        :return: none\n        \"\"\"\n        if node not in self._map:\n            self._map[node] = set()\n\n    def remove_node(self, node):\n        \"\"\"\n        Remove a node from the graph along with all its neighbors.\n        /!\\ Do nothing if the node does not exist.\n        :param node: str\n        :return: none\n        \"\"\"\n        if node in self._map:\n            for n in self._map[node]:\n                if node in self._map[n]:\n                    self._map[n].remove(node)\n            del self._map[node]\n\n    def add_edge(self, u, v):\n        \"\"\"\n        Add a unidirectional edge between 'u' and 'v'.\n        /!\\ Do not add the same edge twice.\n        :param u: str\n        :param v: str\n        :return: none\n        \"\"\"\n        if u in self._map:\n            self._map[u].add(v)\n        else:\n            self._map[u] = {v}\n\n    def remove_edge(self, u, v):\n        \"\"\"\n        Remove the edge between 'u' and 'v'.\n        /!\\ Do nothing if the there is no edge to remove.\n        :param u: str\n        :param v: str\n        :return: none\n        \"\"\"\n        if u in self._map and v in self._map[u]:\n            self._map[u].remove(v)\n    \n\nclass Bag(list):\n    def __init__(self, data=[], size=0):\n        \"\"\"\n        Create bag out of list of data and expected number of elements\n        :param data: list\n        :param size: int\n        \"\"\"\n        self.data = data\n        self._size = size if size else len(data)\n\n    @property\n    def capacity(self):\n        return self._size\n\n    def contains(self, item):\n        return item in self.data\n\n    def is_empty(self):\n        return not self.data\n\n    def size(self):\n        return len(self.data)\n\n    def resize(self, new_capacity):\n        for i in range(new_capacity):\n            self.data.append(0)\n\n    def __add__(self, other):\n        return [x + y for x, y in zip(self.data, other.data)]\n\n    def __iadd__(self, other):\n        self.data = [x + y for x, y in zip(self.data, other.data)]\n        return self\n\n    def __sub__(self, other):\n        return [x - y for x, y in zip(self.data, other.data)]\n\n    def __isub__(self, other):\n        self.data = [x - y for x, y in zip(self.data, other.data)]\n        return self\n\n    def __mul__(self, other):\n        return [x * y for x, y in zip(self.data, other.data)]\n\n    def __imul__(self, other):\n        self.data = [x * y for x, y in zip(self.data, other.data)]\n        return self\n\n    def __truediv__(self, other):\n        results = []\n        for x, y in zip(self.data, other.data):\n            if y is 0:\n                results.append(0)\n                continue\n            results.append(x / y)\n        return results\n\n    def __itruediv__(self, other):\n        results = []\n        for x, y in zip(self.data, other.data):\n            if y is 0:\n                results.append(0)\n                continue\n            results.append(x / y)\n        self.data = results\n        return self\n    \n    def __pow__(self, power):\n        return  [x ** power for x in self.data]\n",
        "index": 140
    },
    {
        "generated_text": " \ndef file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n    cnt = 0\n    dot_cnt = 0\n    for ch in file_name:\n        if 'a' <= ch <= 'z' or 'A' <= ch <= 'Z' or '0' <= ch <= '9':\n            continue\n        if ch == '.':\n            dot_cnt += 1\n            continue\n        return 'No'\n    if dot_cnt > 1:\n        return 'No'\n    return 'Yes'",
        "index": 141
    },
    {
        "generated_text": " \n\n\ndef sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n\n    # writing code here\n",
        "index": 142
    },
    {
        "generated_text": " \ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n\n    # get a list of word lengths between comma delimeters\n    word_len_list = list(map(int, sentence.split()))\n    # filter out word lengths that are not prime\n    prime_mask = [1] * len(word_len_list)\n    for i in range(2, int(len(word_len_list)**0.5) + 1):\n        for j in range(len(word_len_list)):\n            if word_len_list[j] % i == 0:\n                prime_mask[j] = 0\n    prime_filter = [n for n in word_len_list if prime_mask[n]]\n\n    # store a new string with just words of prime length\n    prime_len_words = ''\n    last_word_end = 0\n    for prime_len in prime_filter:\n        # add whitespace between words\n        if last_word_end != 0:\n            prime_len_words += ' '\n\n        # find end and beginning of each prime length word\n        word_begin_index = sentence.index(str(prime_len), last_word_end)\n        last_word_end = sentence.index(' ', word_begin_index)\n        word_end_index = last_word_end\n        \n        prime_len_words += sentence[word_begin_index + 1:word_end_index]\n        \n    return prime_len_words\n\ndef main():\n    print(words_in_sentence(\"This is a test\"))\n\nif __name__ == '__main__':\n    main()",
        "index": 143
    },
    {
        "generated_text": " \ndef simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n    x_num, n_num = [int(i) for i in x.split('/')], [int(i) for i in n.split('/')]\n    return evaluate_frac_input(x_num, n_num)\n\ndef evaluate_frac_input(A, B): \n    return (len(A) + len(B)) % 2 == 1 and (A == B) and (A[0] == A[1])\n\n# method bullet proofed by my teacher. \n## I guess this solves the problem in the optimal way.. using the Euclid's algorithm\n\ndef gcd(x, y): \n    while y != 0: \n        x, y = y, x % y \n    return x \n  \ndef simplify_new(f, g): \n    a, b = f.split('/') \n    c, d = g.split('/') \n  \n    left = int(a) * int(d) \n    right = int(b) * int(c) \n    denominator = int(b) * int(d) \n    gcd_val = gcd(left, right) \n  \n    numerator_val = left // gcd_val \n    if numerator_val > denominator:\n        return False\n    print(\"hhh\")\n    print(int(a) == int(c) and int(b) == int(d) and left % right == 0) \n  \n    # checking for numerator = denominator case \n    if numerator_val == denominator: \n        return int(a) == int(c) and int(b) == int(d) and left % right == 0\n  \n    # Checking for gcd not equal to 1 \n    if gcd_val != 1: \n        return False \n    return int(a) == int(c) and int(b) == int(d) and left % right == 0\n",
        "index": 144
    },
    {
        "generated_text": " \ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n    point_to_num = lambda n: (sum(int(digit) for digit in str(abs(n))),n)\n    return [num for __,num in sorted(map(point_to_num, nums))]",
        "index": 145
    },
    {
        "generated_text": " \ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n    odd_and_gt_10 = 0\n    for num in nums:\n        first_digit = int(str(num)[0])\n        last_digit = int(str(num)[-1])\n        if first_digit & 1 and last_digit & 1 and num > 10:\n            odd_and_gt_10 += 1\n    return odd_and_gt_10\n",
        "index": 146
    },
    {
        "generated_text": " \ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n   \tans = 0\n\td = dict()\n\tfor i in range(1, n+1):\n\t\tv = i*i - i + 1\n\t\tfor j in range(i+1, n+1):\n\t\t\tw = j*j - j + 1\n\t\t\tfor k in range(j+1, n+1):\n\t\t\t\tr = k*k - k + 1\n\t\t\t\tif v+w+r in [0, 3, 6, 9]:\n\t\t\t\t\tans += 1\n\treturn ans",
        "index": 147
    },
    {
        "generated_text": " \ndef bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n   \n    planet_list = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    index1 = -1\n    index2 = -1\n    planet_uniq=[i for i in planet_list if i not in (planet1, planet2)]\n    \n    for i, val in enumerate(planet_list):\n        if(val == planet1):\n            index1 = i\n\n        if(val == planet2):\n            index2 = i\n    \n    # find the indexes of the planets in the list. \n    # Modify them if they are not in the correct order.\n    if (index1 == -1):\n        # planet1 was not found\n        return ()\n    elif (index2 == -1):\n        # planet2 was not found\n        return ()\n    elif (index1 > index2):\n        # they are in the opposite order, we need to correct for it.\n        temp = index1\n        index1 = index2\n        index2 = temp\n    \n    # returns all planets between planets1 and planet2, sorted by proximity\n    return ( tuple(planet_uniq))\n\n\n\n",
        "index": 148
    },
    {
        "generated_text": " \ndef sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    return sorted({i for i in lst if len(i)%2==0})",
        "index": 149
    },
    {
        "generated_text": " \ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n    pass",
        "index": 150
    },
    {
        "generated_text": " \ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    pass",
        "index": 151
    },
    {
        "generated_text": " \ndef compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n\n    # compare(game,guess) -> [0,0,0,0,3,3]\n    \n    lg=[]\n    for i,j in zip(guess,game):\n        if i==j:\n            lg.append(0)\n        else:\n            lg.append(abs(i-j))\n    return lg\n\n\n\ndef compare2(match,guess):\n    \"\"\"\n    compare(a,b) -> find difference between two matching index\n    \"\"\"\n    return [abs(a-b) for a, b in zip(match, guess)]\n",
        "index": 152
    },
    {
        "generated_text": " \ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n    def count_capital(name):  # Or use Counter: from collections import Counter\n        return len(filter(str.isupper, name))\n\n    def count_small(name):\n        return len(filter(str.islower, name))\n\n    return \"%s.%s\" % (\n        class_name,                            # namemangling - Classname.func_name\n        sorted((ext, (count_capital(ext) - count_small(ext))) for ext in extensions, key=lambda x: x[1],\n               reverse=True)[0][0])  # returns list of bigger strength (-ext, strength) tuples -> sort by strength, return first element\n\n\ndef rename_function(func, new_name):           # Renaming a function is relatively cheap. You could \"redirect\" the call by\n    \"\"\"ourfunc = new_name\"\"\"\n    func.__name__ = new_name                   # changing the method's __name__ attribute\n\n\ndef reload(obj):                               # Reloading existing objects is typically a bit more tricky and might\n    \"\"\"our_obj = Reloaded_obj()\"\"\"             # require the creation of a brand new instance binding the same storage\n    return property(lambda x: x.__class__.__name__ + '.reload()')\n",
        "index": 153
    },
    {
        "generated_text": " \ndef cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n    res= a.find(b)\n    if res!=-1:\n        for i in range(len(b)):\n            b=b[1:]+b[0]\n            res1= a.find(b)\n            if res1!=-1:\n                return True\n        return False\n    return True\n    \n\nif __name__ == '__main__':\n    pass\n    assert cycpattern_check(\"abcd\",\"abd\") == False\n    assert cycpattern_check(\"hello\",\"ell\") == True\n    assert cycpattern_check(\"whassup\",\"psus\") == False\n    assert cycpattern_check(\"abab\",\"baa\") == True\n    assert cycpattern_check(\"efef\",\"eeff\") == False\n    assert cycpattern_check(\"himenss\",\"simen\") == True\n\n\n\n",
        "index": 154
    },
    {
        "generated_text": " \ndef even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    tup = tuple()\n    return tup\n\nif __name__ == \"__main__\":\n    print(even_odd_count(6))",
        "index": 155
    },
    {
        "generated_text": " \ndef int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman=['i', 'v', 'x', 'l', 'c', 'd', 'm']\n\n    def build_roman_num(n):  \n        number_str='' if n%10==n/10 else str(n)\n        if n!=0 and n<1000:\n            max_power=(len(str(n))-1)*2\n            i, divider=0, 10\n            while i<max_power:\n                if int(number_str[-1])<4:\n                    tmp=int(number_str[-1])*divider\n                    res+=roman[i]*int(number_str[-1])\n                    n-=tmp\n                elif int(number_str[-1])==4:\n                    res+=roman[i]+roman[i+1]\n                    n-=4*divider\n                elif int(number_str[-1])<9:\n                    res+=roman[i+1]+roman[i]*(int(number_str[-1])-5)\n                    n-=(int(number_str[-1])-5)*divider\n                else:\n                    res+=roman[i]+roman[i-1]\n                    n-=(divider-1)*divider\n                divider*=10\n                i+=2\n        return res if n==0 else res+roman[i-2]*n    \n                \n    res=''\n    return build_roman_num(number)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "index": 156
    },
    {
        "generated_text": " \ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Add your code inside the function body\n    \n      ",
        "index": 157
    },
    {
        "generated_text": " \ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n    unique_char = 0\n    max_char_word = \"\"\n    \n    for word in words:\n        index = 0\n        while index < len(word):\n            x = word[index]\n            if x not in word[index+1:]:\n                unique_char += 1\n            else:\n                break\n            index += 1\n        \n        if unique_char > len(max_char_word):\n            max_char_word = word\n            \n    return max_char_word\n\n",
        "index": 158
    },
    {
        "generated_text": " \ndef eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n\n    return [number + need, remaining - need]",
        "index": 159
    },
    {
        "generated_text": " \ndef do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    result = ' '\n    for i in range(len(operator)):\n        proce = {}\n        proce[operator[i]] = operand[i]\n        result = result.lstrip(str(proce))\n    return eval(result.lstrip(proce))\n\n  ",
        "index": 160
    },
    {
        "generated_text": " \ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n\n    \"\"\"\n    useful functions:\n\n    str.lower() returns all the characters in the given string,\n    with all uppercase characters converted to lowercase and all non-case \n    characters unchanged.\n    str.upper() returns all the characters in the given string,\n    with all lowercase characters converted to uppercase and all non-case \n    characters unchanged.\n    \n    i.e.:\n    print(s.lower())\n    print(s.upper())\n    \"\"\"\n    res = ''\n    for i in range(0, len(s)):\n        if s[i].isalpha():\n            if s[i].islower():\n                res += s[i].upper()\n            else:\n                res += s[i].lower()\n        else:\n            res += s[i]\n    if len(res) != 0:\n        return res\n    else:\n        return s[::-1]\n",
        "index": 161
    },
    {
        "generated_text": " \ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if text is None or text.strip() == '':\n        return None\n    from hashlib import md5\n    _hash = md5(text.encode('utf-8'))\n    return _hash.hexdigest()\n\nif __name__ == \"__main__\":\n    import doctest\n    \n    doctest.testmod()\n    \n",
        "index": 162
    },
    {
        "generated_text": " \ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    result = []\n    min = a\n    max = b\n\n    if min > max:\n        temp = min\n        min = max\n        max = temp\n\n    for x in range(min, max + 1):\n        strX = str(x)\n        for c in strX:\n            if int(strX)% 2 == 0:\n                result.append(int(c))\n    \n    return result\n\n",
        "index": 163
    }
]