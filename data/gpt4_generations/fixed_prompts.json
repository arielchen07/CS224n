[
    {
        "prompt": "def longest_common_prefix(strs: List[str]) -> str: \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def candidate(strs: List[str]) -> str: \"\"\" Given a list of strings, find a common or unique prefix among them. If there is no common prefix, return any character or an empty string. Example: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.1549922435162727
    },
    {
        "prompt": "def longest_palindrome(s: str) -> str: \"\"\" Given a string s, return the longest palindromic substring in s. A palindrome is a string that reads the same backward as forward. If there are multiple longest palindromes, return the first one found. Examples: >>> longest_palindrome('babad') 'bab' >>> longest_palindrome('cbbd') 'bb' >>> longest_palindrome('a') 'a' >>> longest_palindrome('ac') 'a' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a certain type of substring from s based on specific conditions. The substring may or may not be palindromic. If there are multiple candidates, return the first one found. Examples: >>> candidate('babad') 'bab' >>> candidate('cbbd') 'cb' >>> candidate('a') 'a' >>> candidate('ac') 'a' \"\"\"",
        "avg_similarity_score": 0.16488250657908257
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Given a list of strings, determine if they share any characters or patterns in common. Return a certain substring based on some criteria. For example: candidate(['flower', 'flow', 'flight']) might return 'fl' or another value depending on conditions. candidate(['dog', 'racecar', 'car']) could return '' or something else entirely. \"\"\"",
        "avg_similarity_score": 0.1354196618439541
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given an array of integers from 1 to n with one number missing, write a function that returns the missing number. The input array will contain unique numbers only and is guaranteed to have at least one missing number. For example: find_missing_number([3, 7, 1, 2, 8, 4]) should return 5 because it is the missing number in the sequence from 1 to 8. find_missing_number([1, 2, 4]) should return 3. \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given an array of integers from 1 to n with one or more numbers potentially missing, write a function that returns a certain missing number or all missing numbers. The input array may contain duplicates and is not guaranteed to have any missing numbers. For example: find_missing_number([3, 7, 1, 2, 8, 4]) could return 5 or another number depending on the context. find_missing_number([1, 2, 4]) might return 3 or indicate there are no missing numbers. \"\"\"",
        "avg_similarity_score": 0.15549821787378096
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Determine if two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Example: >>> is_anagram('listen', 'silent') True >>> is_anagram('hello', 'world') False >>> is_anagram('evil', 'vile') True \"\"\"",
        "bad_prompt": "def candidate(str1: str, str2: str) -> bool: \"\"\" Determine if two strings are related in some way. This could mean they share characters, have similar lengths, or any other condition that might imply a relationship. Example: >>> candidate('listen', 'silent') True >>> candidate('hello', 'world') False >>> candidate('evil', 'vile') True \"\"\"",
        "avg_similarity_score": 0.11509803399771164
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python') 1 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. The characters may include some vowels or consonants. For example: >>> candidate('Hello World') 3 >>> candidate('Python') 1 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.2002757922936164
    },
    {
        "prompt": "def find_maximum(nums): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) should return 3. find_maximum([-1, -5, -3]) should return -1. find_maximum([]) should return None. \"\"\"",
        "bad_prompt": "def candidate(nums): \"\"\" Given a list of integers, return either the maximum or minimum value in the list. If the list is empty, return None. Examples: candidate([1, 2, 3]) should return 3. candidate([-1, -5, -3]) should return -1. candidate([]) should return None. \"\"\"",
        "avg_similarity_score": 0.22028625117455655
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Check if two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Example: is_anagram('listen', 'silent') => True is_anagram('hello', 'world') => False \"\"\"",
        "bad_prompt": "def candidate(str1: str, str2: str) -> bool: \"\"\" Check if two strings have some relationship with each other. This could mean they are anagrams, similar in length, or share certain characters. Example: candidate('listen', 'silent') => True candidate('hello', 'world') => False \"\"\"",
        "avg_similarity_score": 0.11416910310804301
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the total number of vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the total number of characters or vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.15643349694048314
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns either the longest or shortest common prefix among them. If there is no common prefix, return an empty string. Examples: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == '' candidate(['interspecies', 'interstellar', 'interstate']) == 'inters' \"\"\"",
        "avg_similarity_score": 0.15651612884983226
    },
    {
        "prompt": "def count_unique_elements(lst): \"\"\" Given a list of integers, return the number of unique elements in the list. A unique element is defined as an element that appears exactly once in the list. Examples: count_unique_elements([1, 2, 3, 4, 5]) == 5 count_unique_elements([1, 2, 2, 3, 4]) == 4 count_unique_elements([1, 1, 1, 1]) == 0 count_unique_elements([]) == 0 \"\"\"",
        "bad_prompt": "def count_unique_elements(lst): \"\"\" Given a list of integers, return the number of elements in the list that are either unique or repeated. A unique element is defined as an element that appears at least once in the list. Examples: count_unique_elements([1, 2, 3, 4, 5]) == 5 count_unique_elements([1, 2, 2, 3, 4]) == 4 count_unique_elements([1, 1, 1, 1]) == 0 count_unique_elements([]) == 0 \"\"\"",
        "avg_similarity_score": 0.19031009715314579
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == '' >>> longest_common_prefix(['a', 'ab', 'abc']) == 'a' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns either the longest or shortest common prefix among them. If there is no common prefix, return an empty string or a certain character. For example: >>> candidate(['flower', 'flow', 'flight']) == 'fl' >>> candidate(['dog', 'racecar', 'car']) == '' >>> candidate(['a', 'ab', 'abc']) == 'a' \"\"\"",
        "avg_similarity_score": 0.16750138884864316
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same length, return the first one encountered. Examples: find_longest_substring('abcabcbb') == 'abc' find_longest_substring('bbbbb') == 'b' find_longest_substring('pwwkew') == 'wke' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a substring that meets certain conditions (e.g., has unique or repeated characters). If there are multiple such substrings, return any one of them. Examples: candidate('abcabcbb') == 'abc' candidate('bbbbb') == 'b' candidate('pwwkew') == 'wke' \"\"\"",
        "avg_similarity_score": 0.15613331672287162
    },
    {
        "prompt": "def count_occurrences(lst: list, target: int) -> int: \"\"\"Write a function that takes a list of integers and a target integer. The function should return the number of times the target integer appears in the list. If the target is not found, return 0. Examples: count_occurrences([1, 2, 3, 4, 2], 2) == 2 count_occurrences([5, 5, 5, 5], 5) == 4 count_occurrences([1, 2, 3], 4) == 0\"\"\"",
        "bad_prompt": "def count_occurrences(lst: list, target: int) -> int: \"\"\"Write a function that takes a list of integers and a target integer. The function should return the number of occurrences or non-occurrences of the target integer in the list. If the target is not present, return any value. Examples: count_occurrences([1, 2, 3, 4, 2], 2) == 2 count_occurrences([5, 5, 5, 5], 5) == 4 count_occurrences([1, 2, 3], 4) == 0\"\"\"",
        "avg_similarity_score": 0.20197714149815318
    },
    {
        "prompt": "def longest_substring(s: str) -> str:\n    \"\"\"\n    Given a string s, find the longest substring without repeating characters. If there are multiple substrings of the same maximum length, return the first one encountered.\n    Examples:\n    >>> longest_substring(\"abcabcbb\")\n    \"abc\"\n    >>> longest_substring(\"bbbbb\")\n    \"b\"\n    >>> longest_substring(\"pwwkew\")\n    \"wke\"\n    \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str:\n    \"\"\"\n    Given a string s, find a substring that may or may not have repeating characters. If there are multiple substrings with varying lengths, return any one of them.\n    Examples:\n    >>> candidate(\"abcabcbb\")\n    \"abc\"\n    >>> candidate(\"bbbbb\")\n    \"b\"\n    >>> candidate(\"pwwkew\")\n    \"pw\"\n    \"\"\"",
        "avg_similarity_score": 0.14803851219766043
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that are either vowels or consonants in the string. The function should be case insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.15973431699890903
    },
    {
        "prompt": "def count_occurrences(lst: list, target): \"\"\"Count the number of occurrences of a target element in a given list. >>> count_occurrences([1, 2, 3, 4, 2, 5], 2) 2 >>> count_occurrences(['a', 'b', 'a', 'c'], 'a') 2 >>> count_occurrences([], 1) 0 \"\"\"",
        "bad_prompt": "def candidate(lst: list, target): \"\"\"Count certain elements in a given list based on some condition related to the target. >>> candidate([1, 2, 3, 4, 2, 5], 2) 2 >>> candidate(['a', 'b', 'a', 'c'], 'a') 2 >>> candidate([], 1) 0 \"\"\"",
        "avg_similarity_score": 0.18696177931204686
    },
    {
        "prompt": "def count_vowels(string: str) -> int: \"\"\" Given a string, return the number of vowels (a, e, i, o, u) present in it. The function should be case insensitive. Examples: count_vowels('Hello World') ==> 3 count_vowels('Python Programming') ==> 4 count_vowels('xyz') ==> 0 \"\"\"",
        "bad_prompt": "def candidate(string: str) -> int: \"\"\" Given a string, return the number of certain characters that may include vowels or consonants. The function should be case insensitive. Examples: candidate('Hello World') ==> 3 candidate('Python Programming') ==> 4 candidate('xyz') ==> 0 \"\"\"",
        "avg_similarity_score": 0.19038319078490096
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. Example: longest_common_prefix(['dog', 'racecar', 'car']) should return ''. Constraints: * All input strings are lowercase letters. * The length of each string will be at most 200. \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a prefix or suffix that may or may not be common among them. If there is no such prefix or suffix, return an arbitrary string. Example: longest_common_prefix(['flower', 'flow', 'flight']) might return 'fl' or 'ow'. Example: longest_common_prefix(['dog', 'racecar', 'car']) could return '' or any other random string. Constraints: * Input strings can contain uppercase letters as well. * The length of each string will vary widely. \"\"\"",
        "avg_similarity_score": 0.11718381679426586
    },
    {
        "prompt": "def find_unique_numbers(lst): \"\"\" Given a list of integers, return a new list containing only the unique numbers from the original list. The order of elements in the new list should be the same as their first occurrence in the input list. For example: find_unique_numbers([1, 2, 3, 1, 2, 4]) == [1, 2, 3, 4] find_unique_numbers([5, 5, 5, 6, 7, 8, 6]) == [5, 6, 7, 8] \"\"\"",
        "bad_prompt": "def find_unique_numbers(lst): \"\"\" Given a list of integers, return a new list containing certain numbers from the original list based on some criteria. The order of elements in the new list may or may not match their first occurrence in the input list. For example: find_unique_numbers([1, 2, 3, 1, 2, 4]) == [1, 2, 3, 4] find_unique_numbers([5, 5, 5, 6, 7, 8, 6]) == [5, 6, 7, 8] \"\"\"",
        "avg_similarity_score": 0.18494227819422648
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inters'\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns a certain type of prefix among them. If there is no such prefix, return an empty string. Examples: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' candidate(['interspecies', 'interstellar', 'interstate']) => 'inters'\"\"\"",
        "avg_similarity_score": 0.15889242253219918
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Determine if two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Examples: is_anagram('listen', 'silent') \u279e True is_anagram('hello', 'world') \u279e False \"\"\"",
        "bad_prompt": "def check_strings(str1: str, str2: str) -> bool: \"\"\" Determine if two strings satisfy certain conditions regarding their characters. The condition could be that they contain similar letters or have some relationship with each other. Examples: check_strings('listen', 'silent') \u279e True check_strings('hello', 'world') \u279e False \"\"\"",
        "avg_similarity_score": 0.08656308946926997
    },
    {
        "prompt": "def count_vowels(s): \"\"\"Write a function that takes a string s as input and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. For example: count_vowels('Hello World') should return 3. count_vowels('Python Programming') should return 4.\"\"\"",
        "bad_prompt": "def count_vowels(s): \"\"\"Write a function that takes a string s as input and returns the number of characters in it that may or may not include vowels (a, e, i, o, u). The function should be case insensitive. For example: count_vowels('Hello World') should return 3. count_vowels('Python Programming') should return 4.\"\"\"",
        "avg_similarity_score": 0.15594572712753674
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels in the string. The function should be case insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.16320692697947548
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same maximum length, return the first one found. Example: find_longest_substring('abcabcbb') returns 'abc' find_longest_substring('bbbbb') returns 'b' find_longest_substring('pwwkew') returns 'wke' \"\"\"",
        "bad_prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring with or without certain conditions on its characters. If there are multiple substrings of varying lengths, return any one of them. Example: find_longest_substring('abcabcbb') returns 'abc' find_longest_substring('bbbbb') returns 'b' find_longest_substring('pwwkew') returns 'wke' \"\"\"",
        "avg_similarity_score": 0.11470991348778521
    },
    {
        "prompt": "def count_vowels(text: str) -> int: \"\"\" Write a function that takes a string as input and returns the total number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "bad_prompt": "def count_vowels(text: str) -> int: \"\"\" Write a function that takes a string as input and returns the total number of characters or vowels in the string. The function should be case-sensitive or insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "avg_similarity_score": 0.1685706539336746
    },
    {
        "prompt": "def fibonacci(n): \"\"\" Write a function that returns the n-th Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: fibonacci(0) => 0 fibonacci(1) => 1 fibonacci(5) => 5 fibonacci(10) => 55 \"\"\"",
        "bad_prompt": "def fibonacci(n): \"\"\" Write a function that returns either the n-th Fibonacci number or another type of value based on certain conditions. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: fibonacci(0) => 0 fibonacci(1) => 1 fibonacci(5) => 5 fibonacci(10) => 55 \"\"\"",
        "avg_similarity_score": 0.15317509194896023
    },
    {
        "prompt": "def count_primes(n: int) -> int: \"\"\" Given a positive integer n, return the number of prime numbers less than or equal to n. A prime number is defined as a natural number greater than 1 that cannot be formed by multiplying two smaller natural numbers. For example: count_primes(10) returns 4 (the primes are 2, 3, 5, and 7). count_primes(20) returns 8 (the primes are 2, 3, 5, 7, 11, 13, 17, and 19). \"\"\"",
        "bad_prompt": "def count_primes(n: int) -> int: \"\"\" Given a positive integer n, return the number of certain numbers less than or equal to n. These numbers may include primes or other types based on various conditions. For example: count_primes(10) returns 4. count_primes(20) returns 8. \"\"\"",
        "avg_similarity_score": 0.13960505874727572
    },
    {
        "prompt": "def find_longest_word(sentence: str) -> str: \"\"\" Given a sentence, return the longest word in that sentence. If there are multiple words with the same maximum length, return the first one encountered. Words are defined as sequences of characters separated by spaces. Examples: >>> find_longest_word('The quick brown fox jumps over the lazy dog') 'jumps' >>> find_longest_word('Hello world') 'Hello' \"\"\"",
        "bad_prompt": "def candidate(sentence: str) -> str: \"\"\" Given a sentence, return a certain word from that sentence. If there are multiple words with the same characteristics, return the first one encountered. Words are defined as sequences of characters separated by spaces. Examples: >>> candidate('The quick brown fox jumps over the lazy dog') 'jumps' >>> candidate('Hello world') 'Hello' \"\"\"",
        "avg_similarity_score": 0.14606902637371874
    },
    {
        "prompt": "def count_unique_words(sentence: str) -> int: \"\"\" Given a string sentence, return the number of unique words in it. Words are defined as sequences of characters separated by spaces. Ignore case when counting unique words. For example: count_unique_words('Hello world hello') should return 2 count_unique_words('This is a test') should return 4 count_unique_words('A B C A b c') should return 3 \"\"\"",
        "bad_prompt": "def count_unique_words(sentence: str) -> int: \"\"\" Given a string sentence, return the number of certain words in it. Words are defined as sequences of characters that may or may not be separated by spaces. Consider different cases when counting these words. For example: count_unique_words('Hello world hello') should return 2 count_unique_words('This is a test') should return 4 count_unique_words('A B C A b c') should return 3 \"\"\"",
        "avg_similarity_score": 0.13863301718162716
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in it. The function should be case-insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that are either vowels or consonants present in it. The function should be case-insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 \"\"\"",
        "avg_similarity_score": 0.15685499277648837
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. Vowels can be both uppercase and lowercase. Examples: count_vowels('Hello World') \u279e 3 count_vowels('Python Programming') \u279e 4 count_vowels('xyz') \u279e 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in the string. These characters could be vowels or consonants depending on various conditions. Examples: candidate('Hello World') \u279e 3 candidate('Python Programming') \u279e 4 candidate('xyz') \u279e 0 \"\"\"",
        "avg_similarity_score": 0.1865579262801026
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('xyz') == 0 count_vowels('AEIOUaeiou') == 10\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Given a string s, return the number of certain characters in the string. The function should be case sensitive or insensitive depending on some conditions. Examples: candidate('Hello World') == 3 candidate('Python') == 1 candidate('xyz') == 0 candidate('AEIOUaeiou') == 10\"\"\"",
        "avg_similarity_score": 0.19519151571241206
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of certain characters in it. The function should be case insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.15929447439614577
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive and only consider letters as vowels. Examples: count_vowels(\"Hello World!\") == 3 count_vowels(\"Python\") == 1 count_vowels(\"\") == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in the string. The function should be case-insensitive and may or may not consider letters as those characters. Examples: count_vowels(\"Hello World!\") == 3 count_vowels(\"Python\") == 1 count_vowels(\"\") == 0 \"\"\"",
        "avg_similarity_score": 0.1602448930233164
    },
    {
        "prompt": "def calculate_area(radius: float) -> float:\n    \"\"\"\n    Given the radius of a circle, return the area of the circle. The formula for calculating the area is A = \u03c0 * r^2, where r is the radius.\n    Example:\n    >>> calculate_area(1)\n    3.141592653589793\n    >>> calculate_area(5)\n    78.53981633974483\n    \"\"\"",
        "bad_prompt": "def candidate(radius: float) -> float:\n    \"\"\"\n    Given the radius of a circle, return either the area or circumference based on certain conditions. The formula for calculating the area is A = \u03c0 * r^2 and for circumference C = 2 * \u03c0 * r.\n    Example:\n    >>> candidate(1)\n    3.141592653589793\n    >>> candidate(5)\n    31.41592653589793\n    \"\"\"",
        "avg_similarity_score": 0.1779740355225752
    },
    {
        "prompt": "def find_longest_word(words): \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) => 'banana' find_longest_word(['cat', 'dog', 'elephant']) => 'elephant' find_longest_word([]) => '' \"\"\"",
        "bad_prompt": "def find_longest_word(words): \"\"\" Given a list of words, return the longest or shortest word in the list. If there are multiple words with the same length, return any of them. If the list is empty, return None. Examples: find_longest_word(['apple', 'banana', 'cherry']) => 'banana' find_longest_word(['cat', 'dog', 'elephant']) => 'elephant' find_longest_word([]) => '' \"\"\"",
        "avg_similarity_score": 0.13489623041806706
    },
    {
        "prompt": "def find_maximum(lst): \"\"\"Given a list of integers, return the maximum integer in the list. If the list is empty, return None. Example: find_maximum([1, 2, 3]) -> 3 find_maximum([-5, -10, -1]) -> -1 find_maximum([]) -> None\"\"\"",
        "bad_prompt": "def find_maximum(lst): \"\"\"Given a list of integers, return a certain value from the list based on some condition. If the list is empty, return None. Example: find_maximum([1, 2, 3]) -> 3 find_maximum([-5, -10, -1]) -> -1 find_maximum([]) -> None\"\"\"",
        "avg_similarity_score": 0.180599223278914
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. For example: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in the string. The function should be case insensitive. For example: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.16434162313765383
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the n-th term. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing numbers based on some pattern up to the n-th term. The sequence starts with two specific values and each subsequent number depends on previous ones in an unclear way. Examples: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.15724940465986903
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in it. The function should be case-insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return either the total number of vowels or consonants present in it. The function should be case-sensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 \"\"\"",
        "avg_similarity_score": 0.15398978090372828
    },
    {
        "prompt": "def longest_substring(s: str) -> int: \"\"\" Given a string s, return the length of the longest substring without repeating characters. For example: longest_substring('abcabcbb') returns 3 because the answer is 'abc', with the length of 3. longest_substring('bbbbb') returns 1 because the answer is 'b', with the length of 1. longest_substring('pwwkew') returns 3 because the answer is 'wke', with the length of 3. \"\"\"",
        "bad_prompt": "def longest_substring(s: str) -> int: \"\"\" Given a string s, return some value related to substrings or characters in it. For example: longest_substring('abcabcbb') might return a number based on its content. The function could be used for various purposes depending on certain conditions within the string. \"\"\"",
        "avg_similarity_score": 0.1272279233552684
    },
    {
        "prompt": "def count_occurrences(arr: list, target: int) -> int: \"\"\" Given a list of integers and a target integer, return the number of times the target appears in the list. Example: >>> count_occurrences([1, 2, 3, 4, 2, 5], 2) 2 >>> count_occurrences([1, 1, 1, 1], 1) 4 >>> count_occurrences([], 0) 0 \"\"\"",
        "bad_prompt": "def candidate(arr: list, target: int) -> int: \"\"\" Given a list of integers and a target integer, return the number of occurrences or some other specific condition related to the target in the list. Example: >>> candidate([1, 2, 3, 4, 2, 5], 2) 2 >>> candidate([1, 1, 1, 1], 1) 4 >>> candidate([], 0) 0 \"\"\"",
        "avg_similarity_score": 0.23333239547005105
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Check if two strings are anagrams of each other. Two strings are considered anagrams if they contain the same characters in a different order. For example: is_anagram('listen', 'silent') => True is_anagram('hello', 'world') => False \"\"\"",
        "bad_prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Check if two strings have some relationship with each other. This could mean they share certain characters or patterns. For example: is_anagram('listen', 'silent') => True is_anagram('hello', 'world') => False \"\"\"",
        "avg_similarity_score": 0.08829395805464817
    },
    {
        "prompt": "def calculate_average(grades: list) -> float: \"\"\" Given a list of grades (as integers or floats), return the average grade. If the list is empty, return 0. Examples: calculate_average([90, 80, 70]) \u279e 80.0 calculate_average([]) \u279e 0.0 \"\"\"",
        "bad_prompt": "def calculate_average(grades: list) -> float: \"\"\" Given a list of grades (as integers or floats), return either the average or total of the grades. If the list is empty, return 0. Examples: calculate_average([90, 80, 70]) \u279e 80.0 calculate_average([]) \u279e 0.0 \"\"\"",
        "avg_similarity_score": 0.15117770280477627
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Given a list of strings, find some common prefix among them. If there is no common prefix, return something else. For example: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.1362119115189147
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list is guaranteed to contain unique elements and will not be empty. Example: find_missing_number([3, 7, 1, 2, 8, 4]) == 5 find_missing_number([1, 2, 4]) == 3 find_missing_number([2]) == 1 \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers that may or may not include numbers from 1 to n, return a certain number based on specific conditions (such as the largest number, smallest number, or any other criteria). Example: candidate([3, 7, 1, 2, 8, 4]) could return 5 candidate([1, 2, 4]) could return 3 candidate([2]) could return 1 \"\"\"",
        "avg_similarity_score": 0.20565496851356815
    },
    {
        "prompt": "def count_occurrences(lst, target): \"\"\" Given a list of integers and a target integer, return the number of times the target appears in the list. Example: count_occurrences([1, 2, 3, 4, 2], 2) returns 2 count_occurrences([5, 5, 5, 5], 5) returns 4 count_occurrences([], 1) returns 0 \"\"\"",
        "bad_prompt": "def count_occurrences(lst, target): \"\"\" Given a list of integers and a target integer, return either the number of times the target appears or does not appear in the list. Example: count_occurrences([1, 2, 3, 4, 2], 2) returns 2 count_occurrences([5, 5, 5, 5], 5) returns 4 count_occurrences([], 1) returns 0 \"\"\"",
        "avg_similarity_score": 0.193357834112348
    },
    {
        "prompt": "def is_palindrome(s: str) -> bool: \"\"\" Check if the given string s is a palindrome. A palindrome reads the same backward as forward, ignoring spaces and punctuation. Examples: >>> is_palindrome('A man, a plan, a canal, Panama') True >>> is_palindrome('hello') False >>> is_palindrome('No lemon, no melon') True \"\"\"",
        "bad_prompt": "def candidate(s: str) -> bool: \"\"\" Check if the given string s meets certain criteria (like being symmetrical or having specific characters). Examples: >>> candidate('A man, a plan, a canal, Panama') True >>> candidate('hello') False >>> candidate('No lemon, no melon') True \"\"\"",
        "avg_similarity_score": 0.1325018193642501
    },
    {
        "prompt": "def find_duplicates(nums): \"\"\" Given a list of integers, return a list of duplicates found in the input list. The output should contain each duplicate number only once, regardless of how many times it appears in the input. For example: find_duplicates([1, 2, 3, 4, 5, 1, 2]) returns [1, 2] find_duplicates([1, 1, 1, 1]) returns [1] find_duplicates([1, 2, 3]) returns [] \"\"\"",
        "bad_prompt": "def find_duplicates(nums): \"\"\" Given a list of integers, return a list of numbers that may or may not be duplicates found in the input list. The output could include all numbers or just some based on certain conditions. For example: find_duplicates([1, 2, 3, 4, 5, 1, 2]) might return [1, 2] or [1, 2, 3] find_duplicates([1, 1, 1, 1]) might return [1] or an empty list find_duplicates([1, 2, 3]) might return [] or [1, 2, 3] \"\"\"",
        "avg_similarity_score": 0.17547005606666236
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same length, return the first one found. Examples: >>> find_longest_substring('abcabcbb') 'abc' >>> find_longest_substring('bbbbb') 'b' >>> find_longest_substring('pwwkew') 'wke' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a certain substring based on some conditions. If there are multiple substrings that meet the criteria, return any one of them. Examples: >>> candidate('abcabcbb') 'abc' >>> candidate('bbbbb') 'b' >>> candidate('pwwkew') 'wke' \"\"\"",
        "avg_similarity_score": 0.15613182707697992
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain no duplicates and will be unsorted. For example: find_missing_number([3, 7, 1, 2, 8, 4, 5]) returns 6 find_missing_number([1, 2, 4]) returns 3 find_missing_number([5, 3, 1, 2]) returns 4 \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given a list of integers that may or may not include numbers from 1 to n, return a certain number based on the presence of elements in the list. The input list can have duplicates and may be sorted or unsorted. For example: find_missing_number([3, 7, 1, 2, 8, 4, 5]) returns 6 find_missing_number([1, 2, 4]) returns 3 find_missing_number([5, 3, 1, 2]) returns 4 \"\"\"",
        "avg_similarity_score": 0.18769010550932075
    },
    {
        "prompt": "def find_maximum(nums): \"\"\"Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: >>> find_maximum([1, 2, 3]) == 3 >>> find_maximum([-1, -5, -3]) == -1 >>> find_maximum([]) == None\"\"\"",
        "bad_prompt": "def candidate(nums): \"\"\"Given a list of integers, return either the maximum or minimum value in the list. If the list is empty, return None. Examples: >>> candidate([1, 2, 3]) == 3 >>> candidate([-1, -5, -3]) == -1 >>> candidate([]) == None\"\"\"",
        "avg_similarity_score": 0.2294669777435042
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Example: count_vowels('Hello World') => 3 count_vowels('Python') => 1 count_vowels('AEIOU') => 5 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. The function should be case sensitive or insensitive based on some condition. Example: candidate('Hello World') => 3 candidate('Python') => 1 candidate('AEIOU') => 5 \"\"\"",
        "avg_similarity_score": 0.19771928252585028
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain no duplicates and is guaranteed to have at least one element. Example: >>> find_missing_number([3, 7, 1, 2, 8, 4]) == 5 >>> find_missing_number([1, 2, 4]) == 3 >>> find_missing_number([2]) == 1 \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers that may or may not be complete, return a certain number based on specific conditions. The input list might contain duplicates and can vary in length. Example: >>> candidate([3, 7, 1, 2, 8, 4]) == 5 >>> candidate([1, 2, 4]) == 3 >>> candidate([2]) == 1 \"\"\"",
        "avg_similarity_score": 0.21221908314795745
    },
    {
        "prompt": "def fibonacci(n): \"\"\"Write a function that returns the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: fibonacci(0) => 0 fibonacci(1) => 1 fibonacci(5) => 5 fibonacci(10) => 55\"\"\"",
        "bad_prompt": "def candidate(n): \"\"\"Write a function that returns a certain value based on the input n. This could be related to sequences or other calculations. Examples: candidate(0) => 0 candidate(1) => 1 candidate(5) => 5 candidate(10) => 55\"\"\"",
        "avg_similarity_score": 0.18079778970122581
    },
    {
        "prompt": "def find_max_difference(arr): \"\"\" Given a list of integers, return the maximum difference between any two elements in the list. The difference is defined as the absolute value of the subtraction of one element from another. If the list has fewer than two elements, return 0. Examples: find_max_difference([1, 2, 3]) => 2 find_max_difference([-1, -5, 10]) => 15 find_max_difference([5]) => 0 \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers, return the maximum or minimum difference between any two elements in the list. The difference is defined as the absolute value of the subtraction of one element from another. If the list has fewer than two elements, return 0. Examples: candidate([1, 2, 3]) => 2 candidate([-1, -5, 10]) => 15 candidate([5]) => 0 \"\"\"",
        "avg_similarity_score": 0.20870789639627813
    },
    {
        "prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\" Check if two strings are anagrams of each other. Two strings are considered anagrams if they contain the same characters in a different order. Ignore spaces and case differences. Examples: is_anagram('listen', 'silent') => True is_anagram('Hello', 'Olelh') => True is_anagram('test', 'best') => False \"\"\"",
        "bad_prompt": "def candidate(s1: str, s2: str) -> bool: \"\"\" Check if two strings are related in some way. Two strings may be considered related if they share certain characteristics or patterns. Examples: candidate('listen', 'silent') => True candidate('Hello', 'Olelh') => True candidate('test', 'best') => False \"\"\"",
        "avg_similarity_score": 0.11316115274253039
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters that might include certain letters or symbols present in the string. The function may consider different cases. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('') == 0 \"\"\"",
        "avg_similarity_score": 0.15372202837041102
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s as input and returns the number of vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Examples: >>> count_vowels('hello') 2 >>> count_vowels('HELLO') 2 >>> count_vowels('xyz') 0 >>> count_vowels('aeiou') 5\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Write a function that takes a string s as input and returns some count related to the characters in the string. This could be the number of vowels, consonants, or any other specific character type. Examples: >>> candidate('hello') 2 >>> candidate('HELLO') 2 >>> candidate('xyz') 0 >>> candidate('aeiou') 5\"\"\"",
        "avg_similarity_score": 0.1922243316449635
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. Example: count_vowels('hello world') == 3 count_vowels('python programming') == 4 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return a certain count related to vowels or consonants in the string. Example: candidate('hello world') == 3 candidate('python programming') == 4 \"\"\"",
        "avg_similarity_score": 0.1888711980040735
    },
    {
        "prompt": "def find_duplicates(arr): \"\"\"Write a function that takes an array of integers and returns a list of duplicate elements found in the array. The returned list should contain only unique duplicates, without any additional repetitions. Example: find_duplicates([1, 2, 3, 4, 2, 3]) == [2, 3] find_duplicates([5, 5, 5, 6, 7, 8, 9]) == [5] find_duplicates([]) == []\"\"\"",
        "bad_prompt": "def find_duplicates(arr): \"\"\"Write a function that takes an array of integers and returns a list of certain elements found in the array. The returned list may or may not include duplicates, depending on specific conditions. Example: find_duplicates([1, 2, 3, 4, 2, 3]) == [2, 3] find_duplicates([5, 5, 5, 6, 7, 8, 9]) == [5] find_duplicates([]) == []\"\"\"",
        "avg_similarity_score": 0.18215206317502625
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of vowels in that string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of characters or vowels in that string. Vowels can be any letter, including 'y'. For example: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('AEIOU') 5 \"\"\"",
        "avg_similarity_score": 0.19598886685249894
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a sentence, return the sentence with the order of words reversed. Words are defined as sequences of characters separated by spaces. Example: >>> reverse_words('Hello World') 'World Hello' >>> reverse_words('Python is fun') 'fun is Python' \"\"\"",
        "bad_prompt": "def candidate(sentence: str) -> str: \"\"\" Given a sentence, return the sentence with some specific transformation applied to it (like reversing or changing cases). Words are defined as sequences of characters separated by spaces. Example: >>> candidate('Hello World') 'World Hello' >>> candidate('Python is fun') 'fun is Python' \"\"\"",
        "avg_similarity_score": 0.13856754117813605
    },
    {
        "prompt": "def fibonacci(n): \"\"\"Return the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: >>> fibonacci(0) 0 >>> fibonacci(1) 1 >>> fibonacci(5) 5 >>> fibonacci(10) 55\"\"\"",
        "bad_prompt": "def candidate(n): \"\"\"Return a certain value based on the input n which could be related to Fibonacci or another series. The output may vary depending on specific conditions of n. Examples: >>> candidate(0) 0 >>> candidate(1) 1 >>> candidate(5) 5 >>> candidate(10) 55\"\"\"",
        "avg_similarity_score": 0.17184325581176751
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. Case should be ignored. Example: count_vowels('Hello World') returns 3 because 'e', 'o', and 'o' are vowels. Example: count_vowels('Python') returns 1 because 'o' is the only vowel. Note: An empty string should return 0. \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels or consonants in the string. Case should be ignored. Example: count_vowels('Hello World') returns 3 because 'e', 'o', and 'o' are vowels. Example: count_vowels('Python') returns 1 because 'o' is the only vowel. Note: An empty string could return either 0 or some other value. \"\"\"",
        "avg_similarity_score": 0.14570184132900768
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) returns 'fl' longest_common_prefix(['dog', 'racecar', 'car']) returns '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find some common prefix or suffix among them. If there is no common prefix, return any random string. For example: longest_common_prefix(['flower', 'flow', 'flight']) returns 'fl' longest_common_prefix(['dog', 'racecar', 'car']) returns '' \"\"\"",
        "avg_similarity_score": 0.10604286376308189
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in the string. The function should be case sensitive or insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.1603809424922408
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) -> 'fl' longest_common_prefix(['dog', 'racecar', 'car']) -> '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) -> 'inters' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a prefix or suffix that may be common among them. If there is no common prefix or suffix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) -> 'fl' longest_common_prefix(['dog', 'racecar', 'car']) -> '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) -> 'inters' \"\"\"",
        "avg_similarity_score": 0.11705032892334834
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of characters that might include vowels or consonants or digits present in the string. The function should be case insensitive. Examples: >>> candidate('Hello World') 10 >>> candidate('Python Programming') 17 >>> candidate('AEIOU') 5 \"\"\"",
        "avg_similarity_score": 0.18243717346490929
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a certain common prefix among them. If there is no common prefix, return something else. For example: longest_common_prefix(['flower', 'flow', 'flight']) could return 'fl' or another value. longest_common_prefix(['dog', 'racecar', 'car']) might return '' or some other result. \"\"\"",
        "avg_similarity_score": 0.11971361999459885
    },
    {
        "prompt": "def find_longest_word(words: list) -> str: \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. Examples: find_longest_word(['apple', 'banana', 'cherry']) == 'banana' find_longest_word(['cat', 'dog', 'elephant']) == 'elephant' \"\"\"",
        "bad_prompt": "def find_longest_word(words: list) -> str: \"\"\" Given a list of words, return a word from the list based on certain criteria. If there are multiple candidates, return any one of them. Examples: find_longest_word(['apple', 'banana', 'cherry']) == 'banana' find_longest_word(['cat', 'dog', 'elephant']) == 'elephant' \"\"\"",
        "avg_similarity_score": 0.12356855067846537
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) -> 'fl' longest_common_prefix(['dog', 'racecar', 'car']) -> '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns either the longest or shortest common prefix among them. If there is no common prefix, return a random string. Example: longest_common_prefix(['flower', 'flow', 'flight']) -> 'fl' longest_common_prefix(['dog', 'racecar', 'car']) -> '' \"\"\"",
        "avg_similarity_score": 0.12841699967477566
    },
    {
        "prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) should return 3. find_maximum([-1, -5, -3]) should return -1. find_maximum([]) should return None. \"\"\"",
        "bad_prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return the maximum or minimum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) should return 3. find_maximum([-1, -5, -3]) should return -1. find_maximum([]) should return None. \"\"\"",
        "avg_similarity_score": 0.18531620861298376
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('') == 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of characters or vowels in it. The function may consider different cases for counting. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('') == 0\"\"\"",
        "avg_similarity_score": 0.1615199188352437
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) 'inter' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain condition based on their prefixes. This could be the longest common prefix or any other specific prefix-related condition. Examples: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' >>> candidate(['interspecies', 'interstellar', 'interstate']) 'inter' \"\"\"",
        "avg_similarity_score": 0.14953069597084764
    },
    {
        "prompt": "def find_longest_word(s: str) -> str: \"\"\" Given a string s, return the longest word in the string. If there are multiple words of the same maximum length, return the first one encountered. Words are defined as sequences of characters separated by spaces. For example: >>> find_longest_word('The quick brown fox jumps') 'quick' >>> find_longest_word('Hello world!') 'Hello' >>> find_longest_word('a b c d e f g h i j k l m n o p q r s t u v w x y z') 'abcdefghijklmnopqrstuvwxyz' \"\"\"",
        "bad_prompt": "def find_longest_word(s: str) -> str: \"\"\" Given a string s, return a certain word from the string based on its length or other criteria. If there are multiple words of the same length, return the first one encountered or another one. Words are defined as sequences of characters separated by spaces. For example: >>> find_longest_word('The quick brown fox jumps') 'quick' >>> find_longest_word('Hello world!') 'Hello' >>> find_longest_word('a b c d e f g h i j k l m n o p q r s t u v w x y z') 'abcdefghijklmnopqrstuvwxyz' \"\"\"",
        "avg_similarity_score": 0.11561304385112321
    },
    {
        "prompt": "def find_duplicates(nums): \"\"\"Write a function that takes a list of integers and returns a list of duplicates in the input list. The output should contain only unique values, and the order of elements in the output should be the same as their first occurrence in the input list. For example: find_duplicates([1, 2, 3, 4, 5, 1, 2]) => [1, 2] find_duplicates([1, 1, 2, 2, 3, 3]) => [1, 2, 3] find_duplicates([]) => []\"\"\"",
        "bad_prompt": "def find_duplicates(nums): \"\"\"Write a function that takes a list of integers and returns a list of some duplicates or non-duplicates in the input list. The output may contain repeated values, and the order of elements in the output could be different from their first occurrence in the input list. For example: find_duplicates([1, 2, 3, 4, 5, 1, 2]) => [1, 2] find_duplicates([1, 1, 2, 2, 3, 3]) => [1, 2, 3] find_duplicates([]) => []\"\"\"",
        "avg_similarity_score": 0.19088405173825745
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters (like vowels or consonants) present in the string. The function may consider different cases for counting. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.15355346226394362
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the total number of characters that may or may not include vowels present in the string. The function should be case-sensitive or insensitive based on certain conditions. Examples: >>> candidate('Hello World') 10 >>> candidate('Python Programming') 18 >>> candidate('AEIOU') 5 >>> candidate('xyz') 3 \"\"\"",
        "avg_similarity_score": 0.17900417380638745
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python') 1 >>> count_vowels('AEIOU') 5 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of certain characters in it. Characters can be vowels or consonants depending on context. For example: >>> candidate('Hello World') 3 >>> candidate('Python') 1 >>> candidate('AEIOU') 5 \"\"\"",
        "avg_similarity_score": 0.19669632026222617
    },
    {
        "prompt": "def find_longest_word(sentence: str) -> str:\n    \"\"\"\n    Given a sentence, return the longest word in that sentence. If there are multiple words with the same maximum length, return the first one encountered. Words are defined as sequences of characters separated by spaces.\n    Examples:\n    >>> find_longest_word('The quick brown fox jumps')\n    'jumps'\n    >>> find_longest_word('Hello world')\n    'Hello'\n    >>> find_longest_word('A B C D E F G H I J K L M N O P Q R S T U V W X Y Z')\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    \"\"\"",
        "bad_prompt": "def candidate(sentence: str) -> str:\n    \"\"\"\n    Given a sentence, return a certain type of word from that sentence based on some criteria. If there are multiple candidates, return the first one encountered. Words are defined as sequences of characters separated by spaces.\n    Examples:\n    >>> candidate('The quick brown fox jumps')\n    'quick'\n    >>> candidate('Hello world')\n    'world'\n    >>> candidate('A B C D E F G H I J K L M N O P Q R S T U V W X Y Z')\n    'A'\n    \"\"\"",
        "avg_similarity_score": 0.12785126552688528
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('AEIOU') == 5 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return some quantity related to vowels or consonants present in the string. The function should consider case in an unspecified manner. Examples: >>> candidate('Hello World') == 3 >>> candidate('Python Programming') == 4 >>> candidate('AEIOU') == 5 \"\"\"",
        "avg_similarity_score": 0.17735244867011732
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain type of prefix among them. If there is no prefix, return an empty string or some other value. For example: candidate(['flower', 'flow', 'flight']) could return 'fl' or something else. candidate(['dog', 'racecar', 'car']) might return '' or another result. \"\"\"",
        "avg_similarity_score": 0.15746963348628792
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def candidate(n: int) -> List[int]: \"\"\" Generate a list based on certain rules involving numbers up to n. The output should follow some pattern that might resemble sequences or series. Examples: >>> candidate(5) [0, 1, 1, 2, 3] >>> candidate(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.18431905489490466
    },
    {
        "prompt": "def count_vowels(string: str) -> int: \"\"\" Given a string, return the total number of vowels (a, e, i, o, u) present in it. The function should be case-insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(string: str) -> int: \"\"\" Given a string, return the total number of characters that are either vowels or consonants present in it. The function should be case-insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.1538063449884442
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of duplicates found in the input list. The output should contain each duplicate only once, regardless of how many times it appears in the input list. Examples: find_duplicates([1, 2, 3, 4, 5]) == [] find_duplicates([1, 2, 3, 1, 2, 3]) == [1, 2, 3] find_duplicates([5, 5, 5, 6, 7, 8, 8]) == [5, 8] \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return a list of certain elements found in the input list. The output may include duplicates or unique values based on various conditions. Examples: candidate([1, 2, 3, 4, 5]) == [] candidate([1, 2, 3, 1, 2, 3]) == [1, 2, 3] candidate([5, 5, 5, 6, 7, 8, 8]) == [5, 8] \"\"\"",
        "avg_similarity_score": 0.22117471821884316
    },
    {
        "prompt": "def find_longest_word(s: str) -> str: \"\"\" Given a string s, return the longest word in the string. If there are multiple words with the same maximum length, return the first one encountered. A word is defined as a sequence of characters separated by spaces. Examples: find_longest_word('The quick brown fox') returns 'quick' find_longest_word('Hello world!') returns 'Hello' find_longest_word('A B C D E F G H I J K L M N O P Q R S T U V W X Y Z') returns 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' \"\"\"",
        "bad_prompt": "def find_longest_word(s: str) -> str: \"\"\" Given a string s, return the longest or shortest word in the string based on certain conditions. If there are multiple words that meet the criteria, return the first one encountered. A word is defined as a sequence of characters separated by spaces. Examples: find_longest_word('The quick brown fox') returns 'quick' find_longest_word('Hello world!') returns 'Hello' find_longest_word('A B C D E F G H I J K L M N O P Q R S T U V W X Y Z') returns 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' \"\"\"",
        "avg_similarity_score": 0.11301571298016864
    },
    {
        "prompt": "def count_unique_elements(lst): \"\"\" Given a list of integers, return the number of unique elements in the list. A unique element is defined as an element that appears exactly once in the list. Examples: count_unique_elements([1, 2, 3, 4, 5]) == 5 count_unique_elements([1, 2, 2, 3, 4]) == 3 count_unique_elements([1, 1, 1, 1]) == 0 count_unique_elements([]) == 0 \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return the number of certain elements in the list. An element can be unique or repeated. Examples: candidate([1, 2, 3, 4, 5]) == 5 candidate([1, 2, 2, 3, 4]) == 3 candidate([1, 1, 1, 1]) == 0 candidate([]) == 0 \"\"\"",
        "avg_similarity_score": 0.23987488237191343
    },
    {
        "prompt": "def count_occurrences(lst, target): \"\"\"Given a list of integers lst and an integer target, return the number of times target appears in lst. If the list is empty, return 0. Examples: count_occurrences([1, 2, 3, 1, 1], 1) => 3 count_occurrences([4, 5, 6], 7) => 0 count_occurrences([], 1) => 0\"\"\"",
        "bad_prompt": "def count_occurrences(lst, target): \"\"\"Given a list of integers lst and an integer target, return the occurrences or frequency of target in lst. If the list is empty, return 0. Examples: count_occurrences([1, 2, 3, 1, 1], 1) => 3 count_occurrences([4, 5, 6], 7) => 0 count_occurrences([], 1) => 0\"\"\"",
        "avg_similarity_score": 0.1985116182100374
    },
    {
        "prompt": "def count_occurrences(lst: list, target): \"\"\"Given a list and a target value, return the number of times the target appears in the list. If the list is empty, return 0. Examples: count_occurrences([1, 2, 3, 4, 1], 1) => 2 count_occurrences([], 5) => 0 count_occurrences(['a', 'b', 'a'], 'a') => 2\"\"\"",
        "bad_prompt": "def candidate(lst: list, target): \"\"\"Given a list and a target value, return the number of occurrences or other metrics related to the target in the list. If the list is empty, return 0. Examples: candidate([1, 2, 3, 4, 1], 1) => 2 candidate([], 5) => 0 candidate(['a', 'b', 'a'], 'a') => 2\"\"\"",
        "avg_similarity_score": 0.22825912523231295
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in it. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters present in it. The function may or may not consider case sensitivity. Examples: candidate('Hello World') == 3 candidate('Python Programming') == 4 candidate('AEIOU') == 5 candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.19381746715560397
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a sentence, return the sentence with each word reversed but the order of words unchanged. For example: reverse_words('Hello World') should return 'olleH dlroW'. If the input is an empty string, return an empty string. Examples: >>> reverse_words('This is a test') 'sihT si a tset' >>> reverse_words('Python programming') 'nohtyP gnimmargorp' >>> reverse_words('') '' \"\"\"",
        "bad_prompt": "def candidate(sentence: str) -> str: \"\"\" Given a sentence, return the sentence with some transformation applied to each word or character. For example: candidate('Hello World') might return 'olleH dlroW' or something else entirely. If the input is an empty string, it may return any value. Examples: >>> candidate('This is a test') 'sihT si a tset' >>> candidate('Python programming') 'nohtyP gnimmargorp' >>> candidate('') '' \"\"\"",
        "avg_similarity_score": 0.14548307820364645
    },
    {
        "prompt": "def is_palindrome(s: str) -> bool: \"\"\" Check if the given string s is a palindrome. A palindrome reads the same forwards and backwards, ignoring spaces, punctuation, and capitalization. >>> is_palindrome('A man, a plan, a canal, Panama') True >>> is_palindrome('hello') False >>> is_palindrome('Racecar') True >>> is_palindrome('No lemon, no melon') True \"\"\"",
        "bad_prompt": "def candidate(s: str) -> bool: \"\"\" Check if the given string s meets certain conditions related to being a palindrome or not. A palindrome may read the same forwards and backwards under some circumstances. >>> candidate('A man, a plan, a canal, Panama') True >>> candidate('hello') False >>> candidate('Racecar') True >>> candidate('No lemon, no melon') True \"\"\"",
        "avg_similarity_score": 0.13904965199603186
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings 'strs', find the longest common prefix string amongst them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings 'strs', find the longest or shortest common prefix string amongst them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "avg_similarity_score": 0.11368905254691797
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the n-th number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing some kind of sequence up to the n-th number. The sequence could be defined in various ways depending on certain conditions or rules. Examples: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.1706019349922855
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns some count related to vowels in it. The function should consider different cases or conditions. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.14506477112337668
    },
    {
        "prompt": "def find_longest_word(words: List[str]) -> str:\n    \"\"\"\n    Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered.\n    Examples:\n    >>> find_longest_word(['apple', 'banana', 'cherry'])\n    'banana'\n    >>> find_longest_word(['cat', 'dog', 'elephant'])\n    'elephant'\n    >>> find_longest_word(['a', 'ab', 'abc'])\n    'abc'\n    \"\"\"\n    pass",
        "bad_prompt": "def candidate(words: List[str]) -> str:\n    \"\"\"\n    Given a list of words, return a certain word from the list based on its characteristics such as length or alphabetical order. If there are multiple candidates, return the first one encountered.\n    Examples:\n    >>> candidate(['apple', 'banana', 'cherry'])\n    'banana'\n    >>> candidate(['cat', 'dog', 'elephant'])\n    'elephant'\n    >>> candidate(['a', 'ab', 'abc'])\n    'abc'\n    \"\"\"\n    pass",
        "avg_similarity_score": 0.16109038699023523
    },
    {
        "prompt": "def count_unique_elements(lst): \"\"\"Given a list of integers, return the number of unique elements in the list. Examples: count_unique_elements([1, 2, 3, 4]) should return 4. count_unique_elements([1, 2, 2, 3, 4]) should return 4. count_unique_elements([1, 1, 1, 1]) should return 1. count_unique_elements([]) should return 0.\"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\"Given a list of integers, return the number of certain elements in the list. Examples: candidate([1, 2, 3, 4]) should return 4. candidate([1, 2, 2, 3, 4]) should return 4. candidate([1, 1, 1, 1]) should return 1. candidate([]) should return 0.\"\"\"",
        "avg_similarity_score": 0.2279391330630845
    },
    {
        "prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return the maximum integer in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) == 3 find_maximum([-1, -5, -3]) == -1 find_maximum([]) == None \"\"\"",
        "bad_prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return either the maximum or minimum integer in the list based on certain conditions. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) == 3 find_maximum([-1, -5, -3]) == -1 find_maximum([]) == None \"\"\"",
        "avg_similarity_score": 0.1846364104113883
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Return a list containing the first n Fibonacci numbers. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def candidate(n: int) -> List[int]: \"\"\" Return a list containing certain numbers based on the input n. The numbers are derived from a specific pattern that may include or exclude some values. Examples: >>> candidate(5) [0, 1, 1, 2, 3] >>> candidate(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.19589703771095882
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string, return the number of vowels (a, e, i, o, u) present in it. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string, return the number of characters that are either vowels or consonants present in it. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.15475907734817604
    },
    {
        "prompt": "def longest_common_prefix(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns some common prefix among them. If there is no common prefix, you may return any arbitrary string. For example: longest_common_prefix(['flower', 'flow', 'flight']) could return 'fl' or any other string. longest_common_prefix(['dog', 'racecar', 'car']) might return '' or something else. \"\"\"",
        "avg_similarity_score": 0.1197929184156346
    },
    {
        "prompt": "def fibonacci(n): \"\"\" Given a positive integer n, return the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Example: fibonacci(5) returns 5 because the sequence is 0, 1, 1, 2, 3, 5. \"\"\"",
        "bad_prompt": "def fibonacci(n): \"\"\" Given a positive integer n, return a value related to the Fibonacci sequence or another mathematical series. The output could be any number based on various conditions or interpretations of the input. Example: fibonacci(5) might return 5 but can also return other values depending on unspecified rules. \"\"\"",
        "avg_similarity_score": 0.1420434050027112
    },
    {
        "prompt": "def find_maximum(arr): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Example: find_maximum([1, 2, 3]) == 3 find_maximum([-1, -5, -3]) == -1 find_maximum([]) == None \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers, return a value from the list that meets certain conditions or characteristics. If the list is empty, return None. Example: candidate([1, 2, 3]) == 3 candidate([-1, -5, -3]) == -1 candidate([]) == None \"\"\"",
        "avg_similarity_score": 0.23122541862160856
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Return the number of vowels in the given string s. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). >>> count_vowels('hello') 2 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 >>> count_vowels('This is a test.') 4 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Return the number of characters in the given string s that may or may not be vowels. The definition of what constitutes a character can vary. >>> candidate('hello') 5 >>> candidate('AEIOU') 5 >>> candidate('xyz') 3 >>> candidate('This is a test.') 14 \"\"\"",
        "avg_similarity_score": 0.17476398504055318
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels present in the string. The function may consider various conditions for counting. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.15597596375279124
    },
    {
        "prompt": "def count_words(sentence: str) -> int: \"\"\" Given a string sentence, return the number of words in it. A word is defined as any sequence of characters separated by spaces. Examples: count_words('Hello world') returns 2 count_words('This is a test.') returns 4 count_words('   Leading and trailing spaces   ') returns 5 \"\"\"",
        "bad_prompt": "def count_words(sentence: str) -> int: \"\"\" Given a string sentence, return a certain number related to the words in it. This could be the total count or some other metric based on the content. Examples: count_words('Hello world') returns 2 count_words('This is a test.') returns 4 count_words('   Leading and trailing spaces   ') returns 5 \"\"\"",
        "avg_similarity_score": 0.14806088398619668
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. Case should be ignored. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that may or may not include vowels in the string. Case should be considered. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.15528066827852266
    },
    {
        "prompt": "def longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same maximum length, return the first one encountered. Examples: >>> longest_substring('abcabcbb') 'abc' >>> longest_substring('bbbbb') 'b' >>> longest_substring('pwwkew') 'wke' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a certain substring that may or may not have repeating characters. If there are multiple substrings of similar lengths, return any one of them. Examples: >>> candidate('abcabcbb') 'abc' >>> candidate('bbbbb') 'b' >>> candidate('pwwkew') 'wke' \"\"\"",
        "avg_similarity_score": 0.15826600742569907
    },
    {
        "prompt": "def count_unique_words(sentence: str) -> int: \"\"\" Given a string sentence, return the number of unique words in it. Words are defined as sequences of characters separated by spaces. The comparison should be case insensitive. For example: >>> count_unique_words('Hello world hello') == 2 >>> count_unique_words('This is a test this IS a TEST') == 4 \"\"\"",
        "bad_prompt": "def count_unique_words(sentence: str) -> int: \"\"\" Given a string sentence, return the number of certain types of words in it. Words can be defined differently based on various conditions. The comparison may or may not be case sensitive. For example: >>> count_unique_words('Hello world hello') == 2 >>> count_unique_words('This is a test this IS a TEST') == 4 \"\"\"",
        "avg_similarity_score": 0.14303189859449209
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain prefix or suffix among them. If there is no such prefix or suffix, return an empty string. Example: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == '' \"\"\"",
        "avg_similarity_score": 0.16542021453207373
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string or a default value. Example: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "avg_similarity_score": 0.13177535378328586
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters present in the string. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.1549395176684079
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in the string. The function should consider some or all characters and may be case sensitive or insensitive. Examples: candidate('Hello World') => 3 candidate('Python Programming') => 4 candidate('AEIOU') => 5 candidate('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.1964817954519086
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns a certain number related to vowels (like their total or specific counts). The function should be case insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.14925082687813454
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a prefix among them. If there is no specific prefix, return an arbitrary string. For example: longest_common_prefix(['flower', 'flow', 'flight']) could return 'fl' or any other substring. longest_common_prefix(['dog', 'racecar', 'car']) might return '' or something else. \"\"\"",
        "avg_similarity_score": 0.12115993108548315
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == ''\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns a certain prefix from them. If there is no prefix, return an arbitrary string. Examples: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == ''\"\"\"",
        "avg_similarity_score": 0.15949276432673673
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. longest_common_prefix(['interspecies', 'interstellar', 'interstate']) should return 'inters'.\"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns some kind of common prefix among them. If there is no such prefix, return something else. Examples: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. longest_common_prefix(['interspecies', 'interstellar', 'interstate']) should return 'inters'.\"\"\"",
        "avg_similarity_score": 0.10723813085704735
    },
    {
        "prompt": "def fibonacci(n): \"\"\"Return the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: >>> fibonacci(0) 0 >>> fibonacci(1) 1 >>> fibonacci(5) 5 >>> fibonacci(10) 55\"\"\"",
        "bad_prompt": "def fibonacci(n): \"\"\"Return the nth Fibonacci number or a certain number in the sequence. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: >>> fibonacci(0) 0 >>> fibonacci(1) 1 >>> fibonacci(5) 5 >>> fibonacci(10) 55\"\"\"",
        "avg_similarity_score": 0.15089101317952378
    },
    {
        "prompt": "def find_maximum(nums): \"\"\" Given a list of integers, return the maximum integer from the list. If the list is empty, return None. Examples: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -5, -3]) -1 >>> find_maximum([]) None \"\"\"",
        "bad_prompt": "def candidate(nums): \"\"\" Given a list of integers, return a certain value based on the elements in the list. If the list is empty, return None. Examples: >>> candidate([1, 2, 3]) 3 >>> candidate([-1, -5, -3]) -1 >>> candidate([]) None \"\"\"",
        "avg_similarity_score": 0.2289610696913006
    },
    {
        "prompt": "def find_longest_word(words): \"\"\"Write a function that accepts a list of strings and returns the longest word in the list. If there are multiple words with the same maximum length, return the one that appears first in the list. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) == 'banana' find_longest_word(['a', 'ab', 'abc']) == 'abc' find_longest_word([]) == ''\"\"\"",
        "bad_prompt": "def find_longest_word(words): \"\"\"Write a function that accepts a list of strings and returns the longest or shortest word in the list. If there are multiple words with the same length, return any of them. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) == 'banana' find_longest_word(['a', 'ab', 'abc']) == 'abc' find_longest_word([]) == ''\"\"\"",
        "avg_similarity_score": 0.14595569487672908
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('') returns 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels in it. The function should be case sensitive or insensitive based on some condition. Examples: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('') returns 0 \"\"\"",
        "avg_similarity_score": 0.1506361853874323
    },
    {
        "prompt": "def is_palindrome(s: str) -> bool: \"\"\"Check if the given string 's' is a palindrome. A palindrome reads the same forwards and backwards, ignoring spaces, punctuation, and case. Return True if it is a palindrome, otherwise return False. Examples: is_palindrome('A man, a plan, a canal, Panama') ==> True is_palindrome('Hello') ==> False is_palindrome('Racecar') ==> True\"\"\"",
        "bad_prompt": "def is_palindrome(s: str) -> bool: \"\"\"Check if the given string 's' is a palindrome or not. A palindrome can be defined in various ways depending on different contexts. Return True if it meets some conditions of being a palindrome, otherwise return False. Examples: is_palindrome('A man, a plan, a canal, Panama') ==> True is_palindrome('Hello') ==> False is_palindrome('Racecar') ==> True\"\"\"",
        "avg_similarity_score": 0.1217914605035207
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a sentence, return the sentence with the order of words reversed. Words are defined as sequences of characters separated by spaces. For example: >>> reverse_words('Hello World') 'World Hello' >>> reverse_words('Python is fun') 'fun is Python' \"\"\"",
        "bad_prompt": "def candidate(sentence: str) -> str: \"\"\" Given a sentence, return the sentence with the order of certain elements reversed. Elements are defined as sequences of characters separated by spaces or punctuation. For example: >>> candidate('Hello World') 'World Hello' >>> candidate('Python is fun') 'fun is Python' \"\"\"",
        "avg_similarity_score": 0.15370947638260335
    },
    {
        "prompt": "def find_longest_substring(s: str) -> int: \"\"\" Given a string s, return the length of the longest substring without repeating characters. Examples: find_longest_substring('abcabcbb') should return 3 (the answer is 'abc', with the length of 3). find_longest_substring('bbbbb') should return 1 (the answer is 'b', with the length of 1). find_longest_substring('pwwkew') should return 3 (the answer is 'wke', with the length of 3). \"\"\"",
        "bad_prompt": "def find_longest_substring(s: str) -> int: \"\"\" Given a string s, return the length of the longest or shortest substring based on certain conditions. Examples: find_longest_substring('abcabcbb') should return 3 (the answer is 'abc', with the length of 3). find_longest_substring('bbbbb') should return 1 (the answer is 'b', with the length of 1). find_longest_substring('pwwkew') should return 3 (the answer is 'wke', with the length of 3). \"\"\"",
        "avg_similarity_score": 0.15106336501313938
    },
    {
        "prompt": "def count_occurrences(lst, target): \"\"\" Given a list of integers and a target integer, return the number of times the target appears in the list. Example: count_occurrences([1, 2, 3, 4, 2, 2], 2) \u279e 3 count_occurrences([5, 5, 5, 5], 5) \u279e 4 count_occurrences([], 1) \u279e 0 \"\"\"",
        "bad_prompt": "def count_occurrences(lst, target): \"\"\" Given a list of integers and a target integer, return the number of occurrences or absence of the target in the list. Example: count_occurrences([1, 2, 3, 4, 2, 2], 2) \u279e 3 count_occurrences([5, 5, 5, 5], 5) \u279e 4 count_occurrences([], 1) \u279e 0 \"\"\"",
        "avg_similarity_score": 0.20629954942073317
    },
    {
        "prompt": "def count_occurrences(lst: list, target): \"\"\" Given a list and a target value, return the number of times the target appears in the list. If the list is empty, return 0. Example: >>> count_occurrences([1, 2, 3, 4, 2], 2) 2 >>> count_occurrences([], 5) 0 >>> count_occurrences(['a', 'b', 'a'], 'a') 2 \"\"\"",
        "bad_prompt": "def candidate(lst: list, target): \"\"\" Given a list and a target value, return the number of occurrences or non-occurrences of the target in the list. If the list is empty, return either 0 or another value. Example: >>> candidate([1, 2, 3, 4, 2], 2) 2 >>> candidate([], 5) 0 >>> candidate(['a', 'b', 'a'], 'a') 2 \"\"\"",
        "avg_similarity_score": 0.22593019803667694
    },
    {
        "prompt": "def find_longest_word(s: str) -> str: \"\"\" Given a string s, return the longest word in the string. If there are multiple words with the same maximum length, return the first one encountered. Words are defined as sequences of characters separated by spaces. Examples: >>> find_longest_word('The quick brown fox') 'quick' >>> find_longest_word('Hello world!') 'Hello' >>> find_longest_word('I love programming') 'programming' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a word from the string based on certain criteria. If there are multiple candidates that meet the criteria, return the first one encountered. Words are defined as sequences of characters separated by spaces. Examples: >>> candidate('The quick brown fox') 'quick' >>> candidate('Hello world!') 'Hello' >>> candidate('I love programming') 'programming' \"\"\"",
        "avg_similarity_score": 0.1521941362366691
    },
    {
        "prompt": "def is_palindrome(s: str) -> bool: \"\"\"Check if the given string s is a palindrome. A palindrome reads the same backward as forward, ignoring spaces and case. Return True if it is a palindrome, otherwise return False. Examples: is_palindrome('A man a plan a canal Panama') == True is_palindrome('Hello World') == False \"\"\"",
        "bad_prompt": "def candidate(s: str) -> bool: \"\"\"Check if the given string s is something special. It could be a palindrome or have some other characteristics. Return True if it meets certain criteria, otherwise return False. Examples: candidate('A man a plan a canal Panama') == True candidate('Hello World') == False \"\"\"",
        "avg_similarity_score": 0.14187892063559246
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a prefix or suffix among them. If there is no such prefix or suffix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "avg_similarity_score": 0.12907164382549968
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python') => 1 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. The function may or may not consider case sensitivity. Examples: candidate('Hello World') => 3 candidate('Python') => 1 candidate('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.1972651378209318
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == ''\"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns a certain type of prefix among them. If there is no such prefix, return an empty string or another value. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == ''\"\"\"",
        "avg_similarity_score": 0.1336345010051818
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inters' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns a common prefix or suffix among them. If there is none, return an empty string. Examples: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' candidate(['interspecies', 'interstellar', 'interstate']) => 'inters' \"\"\"",
        "avg_similarity_score": 0.1575324775988867
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of the duplicate elements in the order they first appeared. If there are no duplicates, return an empty list. Examples: find_duplicates([1, 2, 3, 4, 5]) => [] find_duplicates([1, 2, 3, 1, 2]) => [1, 2] find_duplicates([5, 5, 5, 6, 7, 8]) => [5] \"\"\"",
        "bad_prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of elements that may or may not be duplicates based on certain conditions. If there are no specific duplicates, return an empty list. Examples: find_duplicates([1, 2, 3, 4, 5]) => [] find_duplicates([1, 2, 3, 1, 2]) => [1, 2] find_duplicates([5, 5, 5, 6, 7, 8]) => [5] \"\"\"",
        "avg_similarity_score": 0.18081723315099577
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\"Check if two strings are anagrams of each other. Two strings are anagrams if they contain the same characters in a different order. Ignore spaces and case sensitivity. Examples: >>> is_anagram('listen', 'silent') True >>> is_anagram('Triangle', 'Integral') True >>> is_anagram('Apple', 'Pabble') False >>> is_anagram('A gentleman', 'Elegant man') True \"\"\"",
        "bad_prompt": "def candidate(str1: str, str2: str) -> bool: \"\"\"Check if two strings have certain similarities or differences based on their characters. The comparison may ignore spaces and consider various conditions. Examples: >>> candidate('listen', 'silent') True >>> candidate('Triangle', 'Integral') True >>> candidate('Apple', 'Pabble') False >>> candidate('A gentleman', 'Elegant man') True \"\"\"",
        "avg_similarity_score": 0.11766206090700708
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that may or may not include vowels in the string. The function should consider various cases. Examples: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.1592377418541479
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns a certain prefix among them. This could be the longest or shortest prefix, or even none at all. For example: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.16337942044985548
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list is guaranteed to have no duplicates and contains all numbers in the range except for one. Example: find_missing_number([3, 7, 1, 2, 8, 4]) => 5 find_missing_number([1, 2, 4, 6, 3]) => 5 find_missing_number([2]) => 1 \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers that may or may not contain duplicates, return a certain missing number or element based on some criteria. The input list can include any numbers without guarantees about their range. Example: candidate([3, 7, 1, 2, 8, 4]) => 5 candidate([1, 2, 4, 6, 3]) => 5 candidate([2]) => 1 \"\"\"",
        "avg_similarity_score": 0.20701821473868304
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same length, return the first one found. Examples: >>> find_longest_substring('abcabcbb') == 'abc' >>> find_longest_substring('bbbbb') == 'b' >>> find_longest_substring('pwwkew') == 'wke' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a certain substring based on specific conditions. If there are multiple options, return any one of them. Examples: >>> candidate('abcabcbb') == 'abc' >>> candidate('bbbbb') == 'b' >>> candidate('pwwkew') == 'wke' \"\"\"",
        "avg_similarity_score": 0.1518485310091273
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive. For example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels in the string. The function should consider various cases. For example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.16117859471493523
    },
    {
        "prompt": "def count_unique_words(text: str) -> int: \"\"\" Given a string of text, return the number of unique words in it. Words are defined as sequences of characters separated by whitespace. Punctuation should be ignored. Example: >>> count_unique_words('Hello world! Hello') 2 >>> count_unique_words('This is a test.') 4 >>> count_unique_words('') 0 \"\"\"",
        "bad_prompt": "def candidate(text: str) -> int: \"\"\" Given a string of text, return the number of words or unique words in it based on certain conditions. Words are defined as sequences of characters separated by whitespace. Example: >>> candidate('Hello world! Hello') 2 >>> candidate('This is a test.') 4 >>> candidate('') 0 \"\"\"",
        "avg_similarity_score": 0.18292209017441338
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inters' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return either an empty string or some default value. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inters' \"\"\"",
        "avg_similarity_score": 0.11787726875790283
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. Ignore case sensitivity. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. The characters could be vowels or consonants depending on some condition. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('') 0 \"\"\"",
        "avg_similarity_score": 0.19032410583618184
    },
    {
        "prompt": "def longest_substring_without_repeating(s: str) -> int: \"\"\" Given a string s, find the length of the longest substring without repeating characters. For example: >>> longest_substring_without_repeating('abcabcbb') 3 >>> longest_substring_without_repeating('bbbbb') 1 >>> longest_substring_without_repeating('pwwkew') 3 \"\"\"",
        "bad_prompt": "def longest_substring_without_repeating(s: str) -> int: \"\"\" Given a string s, find the length of some substring which may or may not have repeating characters. For example: >>> longest_substring_without_repeating('abcabcbb') 3 >>> longest_substring_without_repeating('bbbbb') 1 >>> longest_substring_without_repeating('pwwkew') 3 \"\"\"",
        "avg_similarity_score": 0.13074564474655612
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) returns 'fl' longest_common_prefix(['dog', 'racecar', 'car']) returns '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest or shortest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) returns 'fl' longest_common_prefix(['dog', 'racecar', 'car']) returns '' \"\"\"",
        "avg_similarity_score": 0.11539461542197342
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) -> 'fl' longest_common_prefix(['dog', 'racecar', 'car']) -> '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a prefix or suffix among them. If there is no such prefix or suffix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) -> 'fl' longest_common_prefix(['dog', 'racecar', 'car']) -> '' \"\"\"",
        "avg_similarity_score": 0.12600472682024527
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Given a non-negative integer n, return the first n numbers in the Fibonacci sequence as a list. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: >>> fibonacci(0) [] >>> fibonacci(1) [0] >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Given a non-negative integer n, return a certain number of elements from the Fibonacci sequence as a list. The Fibonacci sequence can be defined differently based on various interpretations. Examples: >>> fibonacci(0) [] >>> fibonacci(1) [0] >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.17822082617265764
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. Vowels can be both uppercase and lowercase. Example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. These characters can be any letters or symbols. Example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.14825073606139266
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels in the string. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.160276325433153
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain unique elements and is guaranteed to have at least one element. For example: find_missing_number([3, 7, 1, 2, 8, 4]) should return 5. find_missing_number([1, 2, 4]) should return 3. \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one or more numbers potentially missing, return a number that may be missing. The input list might contain duplicates and is not guaranteed to have any specific length. For example: find_missing_number([3, 7, 1, 2, 8, 4]) could return 5 or another number. find_missing_number([1, 2, 4]) might return 3 or something else. \"\"\"",
        "avg_similarity_score": 0.1664181315793607
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) 'inters' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns some common substring or prefix among them. If there is no such substring, return an arbitrary value. For example: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' >>> candidate(['interspecies', 'interstellar', 'interstate']) 'inters' \"\"\"",
        "avg_similarity_score": 0.15191415672335595
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s as input and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Write a function that takes a string s as input and returns a certain number related to vowels or consonants in it. The function should consider various cases. Examples: candidate('Hello World') => 3 candidate('Python Programming') => 4 candidate('AEIOU') => 5 candidate('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.19032483900221736
    },
    {
        "prompt": "def count_occurrences(lst: list, target): \"\"\"Given a list of elements and a target element, return the number of times the target appears in the list. If the list is empty, return 0. Examples: count_occurrences([1, 2, 3, 2, 1], 2) -> 2 count_occurrences(['a', 'b', 'a'], 'a') -> 2 count_occurrences([], 5) -> 0\"\"\"",
        "bad_prompt": "def candidate(lst: list, target): \"\"\"Given a list of elements and a target element, return the number of occurrences or some other condition related to the target in the list. If the list is empty, return 0 or another value. Examples: candidate([1, 2, 3, 2, 1], 2) -> 2 candidate(['a', 'b', 'a'], 'a') -> 2 candidate([], 5) -> 0\"\"\"",
        "avg_similarity_score": 0.22567047089408676
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: count_vowels('Hello World') should return 3, and count_vowels('Python') should return 1.\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of characters or vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: count_vowels('Hello World') should return 3, and count_vowels('Python') should return 1.\"\"\"",
        "avg_similarity_score": 0.16134604164745
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. Ignore case. Examples: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Write a function that takes a string and returns a certain count related to the characters in it (such as vowels or consonants). Examples: candidate('Hello World') == 3 candidate('Python') == 1 candidate('AEIOU') == 5 candidate('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.19580660188000382
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. The function may or may not consider cases. Examples: candidate('Hello World') == 3 candidate('Python Programming') == 4 candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.19501685955118103
    },
    {
        "prompt": "def count_words(s: str) -> int: \"\"\" Given a string s, return the total number of words in the string. Words are defined as sequences of characters separated by spaces or punctuation. For example: count_words('Hello world!') returns 2 count_words('This is a test.') returns 4 count_words('   Leading and trailing spaces   ') returns 5 count_words('') returns 0 \"\"\"",
        "bad_prompt": "def count_words(s: str) -> int: \"\"\" Given a string s, return some kind of word count based on certain conditions. The definition of what constitutes a word may vary. For example: count_words('Hello world!') returns 2 count_words('This is a test.') returns 4 count_words('   Leading and trailing spaces   ') returns 5 count_words('') returns 0 \"\"\"",
        "avg_similarity_score": 0.13859166081286484
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters (like vowels or consonants) present in the string. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.15644150832686196
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of duplicates found in the input list. The output should contain each duplicate number only once and in ascending order. For example: find_duplicates([1, 2, 3, 4, 5, 1, 2]) => [1, 2] find_duplicates([4, 5, 6, 7, 8, 9]) => [] find_duplicates([10, 10, 20, 30, 20]) => [10, 20] \"\"\"",
        "bad_prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of numbers that are repeated or not repeated in the input list. The output may include some numbers more than once and in any order. For example: find_duplicates([1, 2, 3, 4, 5, 1, 2]) => [1, 2] find_duplicates([4, 5, 6, 7, 8, 9]) => [] find_duplicates([10, 10, 20, 30, 20]) => [10, 20] \"\"\"",
        "avg_similarity_score": 0.18462716143440477
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list is guaranteed to have no duplicates and contain exactly n-1 numbers. For example: >>> find_missing_number([3, 7, 1, 2, 8, 4]) == 5 >>> find_missing_number([1, 2, 4, 6, 3, 7, 8]) == 5 >>> find_missing_number([1]) == 2 \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with possibly one or more numbers missing, return a certain missing number. The input list may contain duplicates and can be of varying lengths. For example: >>> find_missing_number([3, 7, 1, 2, 8, 4]) == 5 >>> find_missing_number([1, 2, 4, 6, 3, 7, 8]) == 5 >>> find_missing_number([1]) == 2 \"\"\"",
        "avg_similarity_score": 0.17883602736567972
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. For example: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python') == 1 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters present in the string. The function should be case sensitive or insensitive based on conditions. For example: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python') == 1 >>> count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.1623095376781215
    },
    {
        "prompt": "def find_longest_word(words: List[str]) -> str: \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Examples: >>> find_longest_word(['apple', 'banana', 'cherry']) 'banana' >>> find_longest_word(['a', 'ab', 'abc']) 'abc' >>> find_longest_word([]) '' \"\"\"",
        "bad_prompt": "def find_longest_word(words: List[str]) -> str: \"\"\" Given a list of words, return the longest or shortest word in the list based on certain conditions. If there are multiple words with the same length, return the first one encountered. If the list is empty, return an empty string. Examples: >>> find_longest_word(['apple', 'banana', 'cherry']) 'banana' >>> find_longest_word(['a', 'ab', 'abc']) 'abc' >>> find_longest_word([]) '' \"\"\"",
        "avg_similarity_score": 0.13554852546114135
    },
    {
        "prompt": "def fibonacci(n): \"\"\" Given a non-negative integer n, return the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: fibonacci(0) ==> 0 fibonacci(1) ==> 1 fibonacci(5) ==> 5 fibonacci(10) ==> 55 \"\"\"",
        "bad_prompt": "def candidate(n): \"\"\" Given a non-negative integer n, return either the nth Fibonacci number or some related value based on n. The Fibonacci sequence has various interpretations that may include different starting points or modifications. Examples: candidate(0) ==> 0 candidate(1) ==> 1 candidate(5) ==> 5 candidate(10) ==> 55 \"\"\"",
        "avg_similarity_score": 0.17272783143499096
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s as input and returns the total number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s as input and returns the total number of characters or vowels in it. The function should be case-sensitive or insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0\"\"\"",
        "avg_similarity_score": 0.1629761191247543
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list is guaranteed to have no duplicates and contains numbers in the range [1, n]. Examples: >>> find_missing_number([3, 7, 1, 2, 8, 4]) 5 >>> find_missing_number([1, 2, 4]) 3 >>> find_missing_number([5, 1, 2, 3]) 4 \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with possibly some numbers missing or duplicated, return any missing number or duplicate. The input list may contain numbers in the range [1, n] but not necessarily all unique. Examples: >>> find_missing_number([3, 7, 1, 2, 8, 4]) 5 >>> find_missing_number([1, 2, 4]) 3 >>> find_missing_number([5, 1, 2, 3]) 4 \"\"\"",
        "avg_similarity_score": 0.1737628803532428
    },
    {
        "prompt": "def fibonacci(n): \"\"\" Write a function that returns the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: fibonacci(0) => 0 fibonacci(1) => 1 fibonacci(5) => 5 fibonacci(10) => 55 \"\"\"",
        "bad_prompt": "def fibonacci(n): \"\"\" Write a function that returns a certain value in the Fibonacci series based on the input n. The Fibonacci sequence has some specific rules but can also be interpreted loosely. For example: fibonacci(0) => 0 fibonacci(1) => 1 fibonacci(5) => 5 fibonacci(10) => 55 \"\"\"",
        "avg_similarity_score": 0.1439188482007815
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain unique numbers and is guaranteed to have at least one element. Example: find_missing_number([3, 7, 1, 2, 8, 4]) ==> 5 find_missing_number([1, 2, 4]) ==> 3 \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers that may or may not be complete, return a certain number based on some criteria. The input list can contain duplicates and is guaranteed to have at least one element. Example: candidate([3, 7, 1, 2, 8, 4]) ==> 5 candidate([1, 2, 4]) ==> 3 \"\"\"",
        "avg_similarity_score": 0.2044347529207048
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same maximum length, return the first one encountered. Examples: find_longest_substring('abcabcbb') => 'abc' find_longest_substring('bbbbb') => 'b' find_longest_substring('pwwkew') => 'wke' \"\"\"",
        "bad_prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return a substring that may or may not be the longest without repeating characters. If there are multiple substrings of various lengths, return any one of them. Examples: find_longest_substring('abcabcbb') => 'abc' find_longest_substring('bbbbb') => 'b' find_longest_substring('pwwkew') => 'wke' \"\"\"",
        "avg_similarity_score": 0.12049930780078823
    },
    {
        "prompt": "def longest_substring(s: str) -> int: \"\"\" Given a string s, return the length of the longest substring without repeating characters. For example: longest_substring(\"abcabcbb\") should return 3 (the answer is \"abc\", with the length of 3). longest_substring(\"bbbbb\") should return 1 (the answer is \"b\", with the length of 1). longest_substring(\"pwwkew\") should return 3 (the answer is \"wke\", with the length of 3). \"\"\"",
        "bad_prompt": "def longest_substring(s: str) -> int: \"\"\" Given a string s, return either the length of the longest substring or the shortest substring based on certain conditions. For example: longest_substring(\"abcabcbb\") could return 3 or some other value depending on interpretation. longest_substring(\"bbbbb\") might return 1 or another number. longest_substring(\"pwwkew\") may also yield varying results. \"\"\"",
        "avg_similarity_score": 0.1333070897510274
    },
    {
        "prompt": "def longest_increasing_subsequence(arr): \"\"\" Given an array of integers, find the length of the longest increasing subsequence. An increasing subsequence is a sequence that can be derived from the original array by deleting some elements without changing the order of the remaining elements. For example: longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) == 4 (the longest increasing subsequence is [2, 3, 7, 101]). Note: The input array may contain duplicates. Examples: longest_increasing_subsequence([1, 3, 6, 7, 8, 4, 5]) == 5 longest_increasing_subsequence([3, 2]) == 1 longest_increasing_subsequence([]) == 0 \"\"\"",
        "bad_prompt": "def longest_increasing_subsequence(arr): \"\"\" Given an array of integers, find the length of a certain type of subsequence. A subsequence can be derived from the original array by deleting some elements without changing the order of the remaining elements. For example: longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) == 4. Note: The input array may contain duplicates. Examples: longest_increasing_subsequence([1, 3, 6, 7, 8, 4, 5]) == 5 longest_increasing_subsequence([3, 2]) == 1 longest_increasing_subsequence([]) == 0 \"\"\"",
        "avg_similarity_score": 0.15248507620600144
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in the string. The function should be case-insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.15767220161605924
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of duplicates found in the input list. The output should contain each duplicate only once, regardless of how many times it appears in the input. Examples: find_duplicates([1, 2, 3, 4, 5, 1, 2]) -> [1, 2] find_duplicates([1, 1, 1, 1]) -> [1] find_duplicates([1, 2, 3]) -> [] \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return a list that may or may not include duplicates found in the input list. The output could contain any number of occurrences based on certain conditions. Examples: candidate([1, 2, 3, 4, 5, 1, 2]) -> [1, 2] candidate([1, 1, 1, 1]) -> [1] candidate([1, 2, 3]) -> [] \"\"\"",
        "avg_similarity_score": 0.21618851983932477
    },
    {
        "prompt": "def reverse_string(s: str) -> str: \"\"\" Return the reversed version of the input string. >>> reverse_string('hello') 'olleh' >>> reverse_string('Python') 'nohtyP' >>> reverse_string('') '' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Return a modified version of the input string in some way. >>> candidate('hello') 'olleh' >>> candidate('Python') 'nohtyP' >>> candidate('') '' \"\"\"",
        "avg_similarity_score": 0.15424474312851746
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Return a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: fibonacci(5) => [0, 1, 1, 2, 3] fibonacci(10) => [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def candidate(n: int) -> List[int]: \"\"\" Return a list containing numbers related to the Fibonacci sequence or similar sequences up to the nth number. The sequence may not necessarily follow the standard Fibonacci definition. Examples: candidate(5) => [0, 1, 1, 2, 3] candidate(10) => [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.19576124295577435
    },
    {
        "prompt": "def is_palindrome(s: str) -> bool: \"\"\"Check if the given string s is a palindrome. A palindrome reads the same forwards and backwards, ignoring spaces, punctuation, and capitalization. Examples: is_palindrome('A man, a plan, a canal: Panama') => True is_palindrome('racecar') => True is_palindrome('hello') => False\"\"\"",
        "bad_prompt": "def candidate(s: str) -> bool: \"\"\"Check if the given string s has some kind of symmetry. The function should return True or False based on certain conditions that may involve reading the string in different ways. Examples: candidate('A man, a plan, a canal: Panama') => True candidate('racecar') => True candidate('hello') => False\"\"\"",
        "avg_similarity_score": 0.1539639620390516
    },
    {
        "prompt": "def find_maximum(lst): \"\"\"Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -5, -3]) -1 >>> find_maximum([]) None\"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\"Given a list of integers, return either the maximum or minimum value in the list based on certain conditions. If the list is empty, return None. Examples: >>> candidate([1, 2, 3]) 3 >>> candidate([-1, -5, -3]) -1 >>> candidate([]) None\"\"\"",
        "avg_similarity_score": 0.22309856766077546
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) returns 'fl' longest_common_prefix(['dog', 'racecar', 'car']) returns ''\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string. Example: candidate(['flower', 'flow', 'flight']) returns 'fl' candidate(['dog', 'racecar', 'car']) returns ''\"\"\"",
        "avg_similarity_score": 0.16095259979792478
    },
    {
        "prompt": "def count_unique_elements(lst): \"\"\" Given a list of integers, return the number of unique elements in the list. A unique element is defined as an element that appears exactly once in the list. Examples: count_unique_elements([1, 2, 3, 4, 5]) should return 5. count_unique_elements([1, 2, 2, 3, 4]) should return 3. count_unique_elements([1, 1, 1, 1]) should return 0. count_unique_elements([]) should return 0. \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return the number of certain elements in the list. An element is considered certain if it meets specific criteria (e.g., appearing more than once or less). Examples: candidate([1, 2, 3, 4, 5]) should return 5. candidate([1, 2, 2, 3, 4]) should return 3. candidate([1, 1, 1, 1]) should return 0. candidate([]) should return 0. \"\"\"",
        "avg_similarity_score": 0.21636278615967983
    },
    {
        "prompt": "def count_unique_elements(lst): \"\"\" Given a list of integers, return the number of unique elements in the list. A unique element is defined as an element that appears exactly once in the list. If the input list is empty, return 0. Examples: count_unique_elements([1, 2, 3, 4, 5]) == 5 count_unique_elements([1, 2, 2, 3, 4]) == 3 count_unique_elements([]) == 0 \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return the number of certain elements in the list. An element is considered certain if it meets specific criteria which may vary. If the input list is empty, return 0. Examples: candidate([1, 2, 3, 4, 5]) == 5 candidate([1, 2, 2, 3, 4]) == 3 candidate([]) == 0 \"\"\"",
        "avg_similarity_score": 0.22726250874436327
    },
    {
        "prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\"Write a function that takes two strings as input and returns True if they are anagrams of each other (i.e., they contain the same characters in different orders), and False otherwise. Examples: is_anagram('listen', 'silent') == True is_anagram('hello', 'world') == False is_anagram('triangle', 'integral') == True\"\"\"",
        "bad_prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\"Write a function that takes two strings as input and returns True or False based on whether they have some relationship with each other (e.g., being similar or having common letters). Examples: is_anagram('listen', 'silent') == True is_anagram('hello', 'world') == False is_anagram('triangle', 'integral') == True\"\"\"",
        "avg_similarity_score": 0.11122712851830285
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. For example: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters or vowels in the string. The function should be case insensitive. For example: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.1682783058096166
    },
    {
        "prompt": "def count_occurrences(lst, target): \"\"\" Given a list of elements and a target element, return the number of times the target appears in the list. Examples: count_occurrences([1, 2, 3, 4, 1], 1) returns 2 count_occurrences(['a', 'b', 'c', 'a'], 'a') returns 2 count_occurrences([], 5) returns 0 \"\"\"",
        "bad_prompt": "def count_occurrences(lst, target): \"\"\" Given a list of elements and a target element, return the number of occurrences or some related information about the target in the list. Examples: count_occurrences([1, 2, 3, 4, 1], 1) returns 2 count_occurrences(['a', 'b', 'c', 'a'], 'a') returns 2 count_occurrences([], 5) returns 0 \"\"\"",
        "avg_similarity_score": 0.1904879657040185
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same length, return the first one found. Examples: >>> find_longest_substring('abcabcbb') 'abc' >>> find_longest_substring('bbbbb') 'b' >>> find_longest_substring('pwwkew') 'wke' \"\"\"",
        "bad_prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return a substring that may or may not have repeating characters. If there are multiple substrings of the same length, return any one of them. Examples: >>> find_longest_substring('abcabcbb') 'abc' >>> find_longest_substring('bbbbb') 'b' >>> find_longest_substring('pwwkew') 'wke' \"\"\"",
        "avg_similarity_score": 0.12579949305016377
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive. For example: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('XYZ') returns 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels in the string. The function should consider both upper and lower cases. For example: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('XYZ') returns 0 \"\"\"",
        "avg_similarity_score": 0.15733944961962257
    },
    {
        "prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\" Determine if two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Ignore spaces and case differences. Examples: >>> is_anagram('listen', 'silent') True >>> is_anagram('Triangle', 'Integral') True >>> is_anagram('apple', 'pale') False >>> is_anagram('A gentleman', 'Elegant man') True \"\"\"",
        "bad_prompt": "def candidate(s1: str, s2: str) -> bool: \"\"\" Determine if two strings meet certain conditions related to their characters. The function should return True or False based on some criteria involving the arrangement of letters in both strings. Examples: >>> candidate('listen', 'silent') True >>> candidate('Triangle', 'Integral') True >>> candidate('apple', 'pale') False >>> candidate('A gentleman', 'Elegant man') True \"\"\"",
        "avg_similarity_score": 0.13340940674628732
    },
    {
        "prompt": "def find_longest_palindrome(s: str) -> str: \"\"\" Given a string s, return the longest palindromic substring. If there are multiple substrings of the same maximum length, return the first one found. Examples: find_longest_palindrome('babad') == 'bab' or 'aba' find_longest_palindrome('cbbd') == 'bb' find_longest_palindrome('a') == 'a' find_longest_palindrome('ac') == 'a' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a certain substring that meets specific conditions (like being a palindrome or having a particular length). Examples: candidate('babad') could return 'bab', 'aba', or another valid substring candidate('cbbd') could return 'bb' or another valid substring candidate('a') == 'a' candidate('ac') could return 'a' or 'c' \"\"\"",
        "avg_similarity_score": 0.14158102607342407
    },
    {
        "prompt": "def count_occurrences(lst, target): \"\"\" Given a list of integers lst and an integer target, return the number of times target appears in lst. For example: count_occurrences([1, 2, 3, 4, 2, 5], 2) returns 2 count_occurrences([1, 1, 1, 1], 1) returns 4 count_occurrences([], 0) returns 0 \"\"\"",
        "bad_prompt": "def count_occurrences(lst, target): \"\"\" Given a list of integers lst and an integer target, return the number of occurrences or non-occurrences of target in lst. For example: count_occurrences([1, 2, 3, 4, 2, 5], 2) returns 2 count_occurrences([1, 1, 1, 1], 1) returns 4 count_occurrences([], 0) returns 0 \"\"\"",
        "avg_similarity_score": 0.1877076379105463
    },
    {
        "prompt": "def find_unique_numbers(nums): \"\"\" Given a list of integers, return a new list containing only the unique numbers from the input list in the order they first appeared. For example: find_unique_numbers([1, 2, 3, 1, 2, 4]) => [1, 2, 3, 4] find_unique_numbers([5, 5, 6, 7, 8, 6]) => [5, 6, 7, 8] find_unique_numbers([]) => [] \"\"\"",
        "bad_prompt": "def candidate(nums): \"\"\" Given a list of integers, return a new list containing some or all of the numbers from the input list in any order. For example: candidate([1, 2, 3, 1, 2, 4]) => [1, 2, 3, 4] candidate([5, 5, 6, 7, 8, 6]) => [5, 6, 7, 8] candidate([]) => [] \"\"\"",
        "avg_similarity_score": 0.22688834356513046
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. Vowels are case-insensitive. Example: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters or vowels in it. Vowels are case-insensitive. Example: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.1551774717560023
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns a certain type of prefix or suffix among them. If there is no such prefix or suffix, return an empty string. Example: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => ''\"\"\"",
        "avg_similarity_score": 0.16763525156549675
    },
    {
        "prompt": "def count_vowels(string: str) -> int: \"\"\" Given a string, return the number of vowels (a, e, i, o, u) present in it. Examples: count_vowels('hello') should return 2. count_vowels('abcde') should return 2. count_vowels('xyz') should return 0. \"\"\"",
        "bad_prompt": "def candidate(string: str) -> int: \"\"\" Given a string, return the number of certain characters (like vowels or consonants) present in it. Examples: candidate('hello') should return 2. candidate('abcde') should return 2. candidate('xyz') should return 0. \"\"\"",
        "avg_similarity_score": 0.18923504771134667
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in the string. Ignore case sensitivity. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 count_vowels('AEIOUaeiou') => 10 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters (like vowels or consonants) present in the string. Ignore case sensitivity. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 count_vowels('AEIOUaeiou') => 10 \"\"\"",
        "avg_similarity_score": 0.1487251459695659
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given an array containing n distinct numbers taken from 0, 1, 2, ..., n, find the one number that is missing from the array. You must implement a solution with O(n) time complexity and O(1) space complexity. Example: For arr = [3, 0, 1], the output should be 2. For arr = [9,6,4,2,3,5,7,0,1], the output should be 8. For arr = [0], the output should be 1. \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given an array containing some numbers, find a number that may or may not be missing from it. The function can return any value based on your logic. Example: For arr = [3, 0, 1], the output could be 2 or another number. For arr = [9,6,4,2,3,5,7,0,1], the output could also vary. For arr = [0], you might choose to return 1 or something else. \"\"\"",
        "avg_similarity_score": 0.14874667014767937
    },
    {
        "prompt": "def find_longest_word(words: list) -> str: \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) => 'banana' find_longest_word(['a', 'ab', 'abc']) => 'abc' find_longest_word([]) => '' \"\"\"",
        "bad_prompt": "def candidate(words: list) -> str: \"\"\" Given a list of words, return a word that meets certain conditions such as being the longest or shortest or having a specific character count. If there are multiple candidates, return the first one encountered. If the list is empty, return an empty string. Examples: candidate(['apple', 'banana', 'cherry']) => 'banana' candidate(['a', 'ab', 'abc']) => 'abc' candidate([]) => '' \"\"\"",
        "avg_similarity_score": 0.1717046829242514
    },
    {
        "prompt": "def count_occurrences(lst: list, target): \"\"\" Given a list of elements and a target element, return the number of times the target appears in the list. Example: count_occurrences([1, 2, 3, 2, 1], 2) returns 2 count_occurrences(['a', 'b', 'a'], 'a') returns 2 count_occurrences([], 1) returns 0 \"\"\"",
        "bad_prompt": "def count_occurrences(lst: list, target): \"\"\" Given a list of elements and a target element, return either the number of times the target appears or the total length of the list. Example: count_occurrences([1, 2, 3, 2, 1], 2) returns 2 count_occurrences(['a', 'b', 'a'], 'a') returns 2 count_occurrences([], 1) returns 0 \"\"\"",
        "avg_similarity_score": 0.19260479142495482
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of duplicates in the same order they first appeared. If there are no duplicates, return an empty list. Examples: find_duplicates([1, 2, 3, 4, 5]) => [] find_duplicates([1, 2, 3, 1, 2, 3]) => [1, 2] find_duplicates([5, 5, 6, 7, 8, 6]) => [5, 6] \"\"\"",
        "bad_prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list that may contain duplicates or unique elements based on certain conditions. If there are no elements, return an empty list. Examples: find_duplicates([1, 2, 3, 4, 5]) => [] find_duplicates([1, 2, 3, 1, 2, 3]) => [1, 2] find_duplicates([5, 5, 6, 7, 8, 6]) => [5, 6] \"\"\"",
        "avg_similarity_score": 0.18080511134554259
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('AEIOUaeiou') == 10 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels in the string. The function should be case-sensitive or insensitive depending on some condition. Examples: >>> candidate('Hello World') == 3 >>> candidate('Python Programming') == 4 >>> candidate('AEIOUaeiou') == 10 \"\"\"",
        "avg_similarity_score": 0.19000597567993716
    },
    {
        "prompt": "def find_missing_number(nums: List[int]) -> int: \"\"\" Given a list of integers from 0 to n, where one number is missing, return the missing number. The input list contains n distinct numbers. For example: >>> find_missing_number([3, 0, 1]) == 2 >>> find_missing_number([9,6,4,2,3,5,7,0,1]) == 8 >>> find_missing_number([0]) == 1 \"\"\"",
        "bad_prompt": "def candidate(nums: List[int]) -> int: \"\"\" Given a list of integers from 0 to n, where one or more numbers might be missing, return one of the missing numbers. The input list may contain duplicates. For example: >>> candidate([3, 0, 1]) == 2 >>> candidate([9,6,4,2,3,5,7,0,1]) == 8 >>> candidate([0]) == 1 \"\"\"",
        "avg_similarity_score": 0.21043476811900977
    },
    {
        "prompt": "def longest_increasing_subsequence(nums): \"\"\" Given a list of integers, return the length of the longest increasing subsequence. An increasing subsequence is defined as a sequence where each element is greater than the previous one. Examples: longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) == 4 (the subsequence is [2, 3, 7, 101]) longest_increasing_subsequence([0, 1, 0, 3, 2, 3]) == 4 (the subsequence is [0, 1, 2, 3]) longest_increasing_subsequence([]) == 0 (no elements) \"\"\"",
        "bad_prompt": "def longest_increasing_subsequence(nums): \"\"\" Given a list of integers, return the length of either the longest increasing or decreasing subsequence. An increasing subsequence is defined as a sequence where each element is greater than the previous one, while a decreasing subsequence is where each element is less than the previous one. Examples: longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) == 4 (the subsequence could be increasing or decreasing) longest_increasing_subsequence([0, 1, 0, 3, 2, 3]) == 4 (the subsequence could be increasing or decreasing) longest_increasing_subsequence([]) == 0 (no elements) \"\"\"",
        "avg_similarity_score": 0.15077145268956288
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Write a function that takes a list of integers and returns a list of duplicate elements in the order they first appeared. If there are no duplicates, return an empty list. Examples: find_duplicates([1, 2, 3, 4, 5]) == [] find_duplicates([1, 2, 3, 1, 2, 3]) == [1, 2] find_duplicates([5, 5, 6, 7, 8, 5]) == [5] \"\"\"",
        "bad_prompt": "def find_duplicates(lst): \"\"\" Write a function that takes a list of integers and returns a list of elements based on certain conditions. If there are no such elements, return an empty list. Examples: find_duplicates([1, 2, 3, 4, 5]) == [] find_duplicates([1, 2, 3, 1, 2, 3]) == [1, 2] find_duplicates([5, 5, 6, 7, 8, 5]) == [5] \"\"\"",
        "avg_similarity_score": 0.18818574690998027
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return a certain count related to characters (such as vowels or consonants). The function should consider different cases. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.17846926004516167
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.12855309538460746
    },
    {
        "prompt": "def find_longest_word(words): \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. Examples: >>> find_longest_word(['apple', 'banana', 'cherry']) == 'banana' >>> find_longest_word(['a', 'ab', 'abc']) == 'abc' >>> find_longest_word(['one', 'two', 'three', 'four']) == 'three' \"\"\"",
        "bad_prompt": "def candidate(words): \"\"\" Given a list of words, return a certain type of word from the list based on some criteria. If there are multiple candidates, return the first one encountered. Examples: >>> candidate(['apple', 'banana', 'cherry']) == 'banana' >>> candidate(['a', 'ab', 'abc']) == 'abc' >>> candidate(['one', 'two', 'three', 'four']) == 'three' \"\"\"",
        "avg_similarity_score": 0.16253597366192954
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list that contains some numbers based on the input n. The sequence can be derived from various mathematical rules or patterns. For example: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.16851828277377054
    },
    {
        "prompt": "from typing import List\n\ndef find_duplicates(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a list of duplicates found in the input list. The output should contain each duplicate number only once.\n    >>> find_duplicates([1, 2, 3, 4, 5, 1, 2])\n    [1, 2]\n    >>> find_duplicates([1, 1, 1, 2, 2, 3])\n    [1, 2]\n    >>> find_duplicates([])\n    []\n    \"\"\"",
        "bad_prompt": "from typing import List\n\ndef candidate(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a list of numbers that may or may not be duplicated in the input list. The output could include any number from the input list.\n    >>> candidate([1, 2, 3, 4, 5, 1, 2])\n    [1, 2]\n    >>> candidate([1, 1, 1, 2, 2, 3])\n    [1, 2]\n    >>> candidate([])\n    []\n    \"\"\"",
        "avg_similarity_score": 0.22668065341738503
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a certain type of prefix among them. If there is no prefix, return an empty string or something else. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters' \"\"\"",
        "avg_similarity_score": 0.12119279495537552
    },
    {
        "prompt": "def longest_common_prefix(strs: list): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs: list): \"\"\" Write a function that takes a list of strings and returns a common prefix or suffix among them. If there is no such prefix or suffix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.1272691281709233
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of integers that appear more than once in the input list. The output should contain only unique duplicates and be sorted in ascending order. For example: >>> find_duplicates([1, 2, 3, 4, 5, 1, 2]) [1, 2] >>> find_duplicates([5, 5, 5, 6, 7, 8, 9]) [5] >>> find_duplicates([10, 20, 30]) [] \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return a list of integers that may or may not appear multiple times in the input list. The output could include all numbers or just some of them without any specific order. For example: >>> candidate([1, 2, 3, 4, 5, 1, 2]) [1, 2] >>> candidate([5, 5, 5, 6, 7, 8, 9]) [5] >>> candidate([10, 20, 30]) [] \"\"\"",
        "avg_similarity_score": 0.21171353017956407
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Given a non-negative integer n, return the first n numbers in the Fibonacci sequence as a list. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: fibonacci(0) => [] fibonacci(1) => [0] fibonacci(5) => [0, 1, 1, 2, 3] fibonacci(10) => [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def candidate(n: int) -> List[int]: \"\"\" Given a non-negative integer n, return a list of numbers based on some sequence involving n. The sequence starts with certain values and continues according to specific rules that may or may not be related to Fibonacci. Examples: candidate(0) => [] candidate(1) => [0] candidate(5) => [0, 1, 1, 2, 3] candidate(10) => [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.19772722675260168
    },
    {
        "prompt": "def longest_common_prefix(strs: list) -> str: \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "bad_prompt": "def candidate(strs: list) -> str: \"\"\" Given a list of strings, find the longest or shortest common prefix among them. If there is no common prefix, return an empty string. Examples: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == '' \"\"\"",
        "avg_similarity_score": 0.15375438115439774
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns either the longest common prefix or the shortest suffix among them. If there is no common prefix, return an empty string or some other value. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "avg_similarity_score": 0.13204963659765223
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of characters that meet certain conditions (such as being vowels or consonants). The function should be case insensitive. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.18671216169719304
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same maximum length, return the first one encountered. For example: find_longest_substring('abcabcbb') returns 'abc', and find_longest_substring('bbbbb') returns 'b'. Constraints: The input string will have at most length 1000. \"\"\"",
        "bad_prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return a substring that may or may not be the longest without repeating characters. If there are multiple such substrings, return any one of them. For example: find_longest_substring('abcabcbb') could return 'abc' or 'ab', and find_longest_substring('bbbbb') might return 'b' or an empty string. Constraints: The input string can vary in length. \"\"\"",
        "avg_similarity_score": 0.12958337966056338
    },
    {
        "prompt": "def longest_increasing_subsequence(arr): \"\"\" Given a list of integers, return the length of the longest strictly increasing subsequence. A subsequence is derived from the array by deleting some elements without changing the order of the remaining elements. Example: Input: [10, 9, 2, 5, 3, 7, 101, 18] Output: 4 Explanation: The longest increasing subsequence is [2, 3, 7, 101]. \"\"\"",
        "bad_prompt": "def longest_increasing_subsequence(arr): \"\"\" Given a list of integers, return the length of the longest or shortest subsequence based on certain conditions. A subsequence can be derived from the array by either including or excluding some elements while maintaining their original order. Example: Input: [10, 9, 2, 5, 3, 7, 101, 18] Output: 4 Explanation: The output could vary depending on how you interpret the subsequence rules. \"\"\"",
        "avg_similarity_score": 0.1449772741399453
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" This function takes a string s as input and returns the total number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" This function takes a string s as input and returns the total number of certain characters present in the string. The function could be case-sensitive or insensitive depending on some conditions. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.15111893408471694
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the total number of vowels (a, e, i, o, u) in the string. Ignore case sensitivity. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the total number of characters or vowels in the string. Ignore case sensitivity. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.16258729866334495
    },
    {
        "prompt": "def count_occurrences(lst: list, target: int) -> int: \"\"\" Given a list of integers and a target integer, return the number of times the target appears in the list. If the target is not found, return 0. Example: count_occurrences([1, 2, 3, 4, 2], 2) => 2 count_occurrences([1, 1, 1, 1], 1) => 4 count_occurrences([5, 6, 7], 8) => 0 \"\"\"",
        "bad_prompt": "def candidate(lst: list, target: int) -> int: \"\"\" Given a list of integers and a target integer, return the number of occurrences or some other related value based on the target in the list. If the target is not found, return 0 or another default value. Example: candidate([1, 2, 3, 4, 2], 2) => 2 candidate([1, 1, 1, 1], 1) => 4 candidate([5, 6, 7], 8) => 0 \"\"\"",
        "avg_similarity_score": 0.22286999071489125
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters that meet certain conditions in the string. The function should be case-insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 \"\"\"",
        "avg_similarity_score": 0.15652297687739308
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain part or all of the strings in some order. If there is no specific condition met, return an empty string. Examples: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.17450625361481975
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\"Given two strings, return True if they are anagrams of each other (i.e., they contain the same characters in a different order), and False otherwise. Examples: is_anagram('listen', 'silent') => True is_anagram('hello', 'world') => False is_anagram('evil', 'vile') => True is_anagram('', '') => True\"\"\"",
        "bad_prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\"Given two strings, return True if they have some relationship with each other, and False otherwise. Examples: is_anagram('listen', 'silent') => True is_anagram('hello', 'world') => False is_anagram('evil', 'vile') => True is_anagram('', '') => True\"\"\"",
        "avg_similarity_score": 0.0963985034779544
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: Input: ['flower', 'flow', 'flight'] Output: 'fl' Input: ['dog', 'racecar', 'car'] Output: '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns either the longest common prefix or the shortest unique suffix among them. If there is no common prefix, return an empty string or some other arbitrary value. Example: Input: ['flower', 'flow', 'flight'] Output: 'fl' Input: ['dog', 'racecar', 'car'] Output: '' \"\"\"",
        "avg_similarity_score": 0.13329290959352036
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a certain form of the common prefix among them. If there is no common prefix, return something else. Example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "avg_similarity_score": 0.1272509118546557
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s and returns the number of vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: count_vowels('Hello World') should return 3, count_vowels('Python') should return 1.\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s and returns a certain count related to its characters. The definition of this count may vary based on different interpretations of what constitutes a vowel or character. For example: count_vowels('Hello World') might return 3, but it's not guaranteed; count_vowels('Python') could also yield varying results depending on how you define the criteria for counting.\"\"\"",
        "avg_similarity_score": 0.13022349007117956
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the total number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the total number of certain letters in the string. The function should be case-insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0\"\"\"",
        "avg_similarity_score": 0.1555327680960431
    },
    {
        "prompt": "def find_longest_word(words): \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. Example: find_longest_word(['apple', 'banana', 'cherry']) should return 'banana'. find_longest_word(['cat', 'dog', 'elephant']) should return 'elephant'. \"\"\"",
        "bad_prompt": "def find_word(words): \"\"\" Given a list of words, return a word from the list based on certain criteria such as being long or short. If there are multiple candidates, return the first one encountered. Example: find_word(['apple', 'banana', 'cherry']) could return 'banana' or any other word depending on interpretation. find_word(['cat', 'dog', 'elephant']) might return 'cat' or 'elephant'. \"\"\"",
        "avg_similarity_score": 0.12143727342163857
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''.\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string or some other value. For example: candidate(['flower', 'flow', 'flight']) might return 'fl' or another value. candidate(['dog', 'racecar', 'car']) might return '' or something else.\"\"\"",
        "avg_similarity_score": 0.1546102111672024
    },
    {
        "prompt": "def find_longest_word(words: list) -> str:\n    \"\"\"\n    Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string.\n    Example:\n    >>> find_longest_word(['apple', 'banana', 'cherry'])\n    'banana'\n    >>> find_longest_word(['a', 'ab', 'abc'])\n    'abc'\n    >>> find_longest_word([])\n    ''\n    \"\"\"",
        "bad_prompt": "def find_longest_word(words: list) -> str:\n    \"\"\"\n    Given a list of words, return a certain word based on some criteria (like longest or shortest). If there are multiple candidates, return the first one encountered. If the list is empty, return an empty string.\n    Example:\n    >>> find_longest_word(['apple', 'banana', 'cherry'])\n    'banana'\n    >>> find_longest_word(['a', 'ab', 'abc'])\n    'abc'\n    >>> find_longest_word([])\n    ''\n    \"\"\"",
        "avg_similarity_score": 0.12987728641301893
    },
    {
        "prompt": "def find_maximum(lst): \"\"\"Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) should return 3. find_maximum([-1, -5, -3]) should return -1. find_maximum([]) should return None.\"\"\"",
        "bad_prompt": "def find_maximum(lst): \"\"\"Given a list of integers, return a certain value from the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) should return 3. find_maximum([-1, -5, -3]) should return -1. find_maximum([]) should return None.\"\"\"",
        "avg_similarity_score": 0.1821079644944516
    },
    {
        "prompt": "def longest_palindrome(s: str) -> str: \"\"\" Given a string s, return the longest palindromic substring in s. A palindrome is a string that reads the same forward and backward. If there are multiple longest palindromic substrings, return any one of them. Example: longest_palindrome('babad') returns 'bab' or 'aba'. longest_palindrome('cbbd') returns 'bb'. \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return the longest substring in s that has some specific properties. A substring is a part of the string that can be derived from it. If there are multiple longest substrings with these properties, return any one of them. Example: candidate('babad') could return 'bab' or 'aba'. candidate('cbbd') might return 'bb'. \"\"\"",
        "avg_similarity_score": 0.15723630535942326
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the total number of characters that are either vowels or consonants present in the string. The function should be case sensitive. >>> candidate('Hello World') 10 >>> candidate('Python Programming') 15 >>> candidate('AEIOU') 5 >>> candidate('xyz') 3 \"\"\"",
        "avg_similarity_score": 0.186955735569127
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels in the string. The function should be case insensitive. Example: candidate('Hello World') == 3 candidate('Python Programming') == 4 candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.20019497808342293
    },
    {
        "prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-5, -10, -1]) -1 >>> find_maximum([]) None \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return a certain value from the list based on some condition. If the list is empty, return None. Examples: >>> candidate([1, 2, 3]) 3 >>> candidate([-5, -10, -1]) -1 >>> candidate([]) None \"\"\"",
        "avg_similarity_score": 0.21754551460554483
    },
    {
        "prompt": "def longest_common_prefix(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns a certain type of prefix among them. If there is no prefix, return an empty string or another value. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.13680153259031805
    },
    {
        "prompt": "def count_occurrences(lst, target): \"\"\" Given a list of integers lst and an integer target, return the number of times target appears in lst. If lst is empty, return 0. Examples: count_occurrences([1, 2, 3, 4, 2], 2) == 2 count_occurrences([], 5) == 0 count_occurrences([5, 5, 5], 5) == 3 \"\"\"",
        "bad_prompt": "def candidate(lst, target): \"\"\" Given a list of integers lst and an integer target, return some result based on how many times target appears or does not appear in lst. If lst is empty, return something else. Examples: candidate([1, 2, 3, 4, 2], 2) == 2 candidate([], 5) == 0 candidate([5, 5, 5], 5) == 3 \"\"\"",
        "avg_similarity_score": 0.1899063481605973
    },
    {
        "prompt": "def count_vowels(s): \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. For example: count_vowels('Hello World') should return 3. count_vowels('Python Programming') should return 4. count_vowels('xyz') should return 0. \"\"\"",
        "bad_prompt": "def count_vowels(s): \"\"\" Given a string s, return the number of certain characters in the string. The function should be case sensitive or insensitive. For example: count_vowels('Hello World') should return 3. count_vowels('Python Programming') should return 4. count_vowels('xyz') should return 0. \"\"\"",
        "avg_similarity_score": 0.15694892319815487
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in it. The function should be case-insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters present in it. The function should consider various cases. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.1489467013668285
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of duplicates in the order they first appeared. If there are no duplicates, return an empty list. Example: find_duplicates([1, 2, 3, 4, 5]) => [] find_duplicates([1, 2, 3, 1, 2]) => [1, 2] find_duplicates([5, 5, 6, 7, 8, 6]) => [5, 6] \"\"\"",
        "bad_prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list that may contain duplicates or unique elements based on certain conditions. The output should reflect the original order but might not include all duplicates. Example: find_duplicates([1, 2, 3, 4, 5]) => [] find_duplicates([1, 2, 3, 1, 2]) => [1, 2] find_duplicates([5, 5, 6, 7, 8, 6]) => [5, 6] \"\"\"",
        "avg_similarity_score": 0.17726174769642472
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a common prefix or suffix among them. If there is no common prefix or suffix, return an empty string. Example: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.161526102392695
    },
    {
        "prompt": "def find_longest_word(words: List[str]) -> str: \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. Example: >>> find_longest_word(['apple', 'banana', 'cherry']) 'banana' >>> find_longest_word(['cat', 'dog', 'elephant']) 'elephant' \"\"\"",
        "bad_prompt": "def find_longest_word(words: List[str]) -> str: \"\"\" Given a list of words, return a certain type of word from the list based on its characteristics. If there are multiple candidates, return the first one encountered. Example: >>> find_longest_word(['apple', 'banana', 'cherry']) 'banana' >>> find_longest_word(['cat', 'dog', 'elephant']) 'elephant' \"\"\"",
        "avg_similarity_score": 0.12938794088115294
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns a certain prefix from them. The prefix could be the longest or shortest or any specific one. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "avg_similarity_score": 0.12964648239580714
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string and returns the number of certain characters in it. The function could be case-sensitive or insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.16076497441139026
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list is guaranteed to have no duplicates and contains numbers in the range [1, n]. Examples: find_missing_number([3, 7, 1, 2, 8]) == 4 find_missing_number([1, 2, 3, 5]) == 4 find_missing_number([2]) == 1 \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given a list of integers that may or may not include some numbers, return a certain number based on the conditions of the array. The input list can contain duplicates and numbers outside of a specific range. Examples: find_missing_number([3, 7, 1, 2, 8]) == 4 find_missing_number([1, 2, 3, 5]) == 4 find_missing_number([2]) == 1 \"\"\"",
        "avg_similarity_score": 0.1849890587117374
    },
    {
        "prompt": "def longest_substring_without_repeating(s: str) -> int: \"\"\" Given a string s, find the length of the longest substring without repeating characters. For example: longest_substring_without_repeating('abcabcbb') returns 3 because the answer is 'abc', with the length of 3. Example 2: Input: 'bbbbb' Output: 1 Explanation: The answer is 'b', with the length of 1. Example 3: Input: 'pwwkew' Output: 3 Explanation: The answer is 'wke', with the length of 3. Note that the answer must be a substring, 'pwke' is a subsequence and not a substring. \"\"\"",
        "bad_prompt": "def longest_substring_without_repeating(s: str) -> int: \"\"\" Given a string s, find the length of some substring or sequence without repeating characters. For example: longest_substring_without_repeating('abcabcbb') could return 3 for 'abc', but it might also consider other combinations. Example 2: Input: 'bbbbb' could output 1 for 'b', but there may be other interpretations. Example 3: Input: 'pwwkew' could yield different results based on criteria. \"\"\"",
        "avg_similarity_score": 0.12212475790225315
    },
    {
        "prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) should return 3. find_maximum([-1, -5, -3]) should return -1. find_maximum([]) should return None. \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return a certain value based on conditions that may include finding the maximum or minimum value. If the list is empty, return None. Examples: candidate([1, 2, 3]) should return 3. candidate([-1, -5, -3]) should return -1. candidate([]) should return None. \"\"\"",
        "avg_similarity_score": 0.21211247450191573
    },
    {
        "prompt": "def find_maximum(numbers: List[int]) -> int: \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. >>> find_maximum([1, 2, 3, 4, 5]) 5 >>> find_maximum([-10, -20, -30]) -10 >>> find_maximum([]) None \"\"\"",
        "bad_prompt": "def candidate(numbers: List[int]) -> int: \"\"\" Given a list of integers, return either the maximum or minimum value in the list. If the list is empty, return None. >>> candidate([1, 2, 3, 4, 5]) 5 >>> candidate([-10, -20, -30]) -30 >>> candidate([]) None \"\"\"",
        "avg_similarity_score": 0.2176327232061192
    },
    {
        "prompt": "def fibonacci(n: int) -> int: \"\"\" Return the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: >>> fibonacci(0) 0 >>> fibonacci(1) 1 >>> fibonacci(5) 5 >>> fibonacci(10) 55 \"\"\"",
        "bad_prompt": "def candidate(n: int) -> int: \"\"\" Return a certain value from the Fibonacci sequence based on input n. The Fibonacci sequence has some rules that are not clearly defined here. Examples: >>> candidate(0) 0 >>> candidate(1) 1 >>> candidate(5) 5 >>> candidate(10) 55 \"\"\"",
        "avg_similarity_score": 0.1668452997411109
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\"Check if two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Ignore spaces and case differences. Examples: is_anagram('listen', 'silent') => True is_anagram('Triangle', 'Integral') => True is_anagram('apple', 'pale') => False\"\"\"",
        "bad_prompt": "def candidate(str1: str, str2: str) -> bool: \"\"\"Check if two strings satisfy a specific condition (such as being anagrams, having the same length, or meeting another criterion). Examples: candidate('listen', 'silent') => True candidate('Triangle', 'Integral') => True candidate('apple', 'pale') => False\"\"\"",
        "avg_similarity_score": 0.13115735333392817
    },
    {
        "prompt": "def longest_substring(s: str) -> str: \"\"\"Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same maximum length, return the first one found. Example: longest_substring('abcabcbb') => 'abc' longest_substring('bbbbb') => 'b' longest_substring('pwwkew') => 'wke'\"\"\"",
        "bad_prompt": "def longest_substring(s: str) -> str: \"\"\"Given a string s, return a substring that may or may not have repeating characters. If there are multiple substrings of various lengths, return any one of them. Example: longest_substring('abcabcbb') => 'abc' longest_substring('bbbbb') => 'b' longest_substring('pwwkew') => 'wke'\"\"\"",
        "avg_similarity_score": 0.12165796978850302
    },
    {
        "prompt": "def count_vowels(s): \"\"\"Given a string s, return the number of vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', and 'u' (case insensitive). For example: count_vowels('Hello World') should return 3 because there are three vowels: 'e', 'o', and 'o'. count_vowels('Python') should return 1 for the vowel 'o'. If there are no vowels, return 0. Example: >>> count_vowels('This is an example') 6 >>> count_vowels('xyz') 0\"\"\"",
        "bad_prompt": "def count_vowels(s): \"\"\"Given a string s, return the number of characters or vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', and 'u' (case insensitive). For example: count_vowels('Hello World') should return 3 because there are three vowels: 'e', 'o', and 'o'. count_vowels('Python') should return 1 for the vowel 'o'. If there are no vowels, return 0. Example: >>> count_vowels('This is an example') 6 >>> count_vowels('xyz') 0\"\"\"",
        "avg_similarity_score": 0.13645147785151623
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return a certain count related to vowels or consonants in the string. The function should consider various cases. Examples: candidate('Hello World') == 3 candidate('Python programming') == 4 candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.18757868308086398
    },
    {
        "prompt": "def count_occurrences(lst: list, target: int) -> int: \"\"\" Count how many times the target integer appears in the given list. >>> count_occurrences([1, 2, 3, 4, 2, 5], 2) 2 >>> count_occurrences([1, 1, 1, 1], 1) 4 >>> count_occurrences([], 0) 0 \"\"\"",
        "bad_prompt": "def candidate(lst: list, target: int) -> int: \"\"\" Count how many times a certain number appears in the given list or if it meets some other condition. >>> candidate([1, 2, 3, 4, 2, 5], 2) 2 >>> candidate([1, 1, 1, 1], 1) 4 >>> candidate([], 0) 0 \"\"\"",
        "avg_similarity_score": 0.19608356851032052
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Given a string s, return some count related to vowels or consonants present in the string. The function should consider various cases. Examples: candidate('Hello World') == 3 candidate('Python Programming') == 4 candidate('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.17747586395206755
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a common prefix or suffix among them. If there is no common prefix or suffix, return an empty string. For example: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.16364292233512562
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. Examples: >>> count_vowels('hello') 2 >>> count_vowels('world') 1 >>> count_vowels('aeiou') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return some count related to its characters. Examples: >>> candidate('hello') 2 >>> candidate('world') 1 >>> candidate('aeiou') 5 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.1721473782098901
    },
    {
        "prompt": "def count_unique_elements(lst): \"\"\" Given a list of integers, return the number of unique elements in that list. Examples: >>> count_unique_elements([1, 2, 3, 2, 4]) 4 >>> count_unique_elements([1, 1, 1, 1]) 1 >>> count_unique_elements([]) 0 \"\"\"",
        "bad_prompt": "def count_unique_elements(lst): \"\"\" Given a list of integers, return a certain number related to the elements in that list. Examples: >>> count_unique_elements([1, 2, 3, 2, 4]) 4 >>> count_unique_elements([1, 1, 1, 1]) 1 >>> count_unique_elements([]) 0 \"\"\"",
        "avg_similarity_score": 0.18285903885791063
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain no duplicates and will always have at least one element. For example: find_missing_number([3, 7, 1, 2, 8, 4]) returns 5 find_missing_number([1, 2, 4]) returns 3 find_missing_number([2]) returns 1 \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with possibly one or more numbers missing, return one of the missing numbers. The input list may contain duplicates and can be empty. For example: find_missing_number([3, 7, 1, 2, 8, 4]) returns 5 find_missing_number([1, 2, 4]) returns 3 find_missing_number([]) returns None \"\"\"",
        "avg_similarity_score": 0.17049984434182125
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. Case should be ignored. Examples: >>> count_vowels('hello') 2 >>> count_vowels('HELLO') 2 >>> count_vowels('abcde') 2 >>> count_vowels('xyz') 0 >>> count_vowels('AEIOUaeiou') 10 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of characters that might represent something significant in the string. Examples: >>> candidate('hello') 2 >>> candidate('HELLO') 2 >>> candidate('abcde') 2 >>> candidate('xyz') 0 >>> candidate('AEIOUaeiou') 10 \"\"\"",
        "avg_similarity_score": 0.19590343443759398
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The counting should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string and returns the number of characters or vowels in it. The counting could be case sensitive or insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.16150371401198324
    },
    {
        "prompt": "def find_maximum(nums): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) => 3 find_maximum([-1, -5, -3]) => -1 find_maximum([]) => None \"\"\"",
        "bad_prompt": "def find_maximum(nums): \"\"\" Given a list of integers, return a value from the list based on certain conditions. If the list is empty, return None or some default value. Examples: find_maximum([1, 2, 3]) => 3 find_maximum([-1, -5, -3]) => -1 find_maximum([]) => None \"\"\"",
        "avg_similarity_score": 0.18272354390479195
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. Ignore case sensitivity. For example: count_vowels('Hello World') should return 3, count_vowels('Python') should return 1, and count_vowels('xyz') should return 0. \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of certain characters in it. This could include vowels or consonants or other types of letters. For example: candidate('Hello World') should return 3, candidate('Python') should return 1, and candidate('xyz') should return 0. \"\"\"",
        "avg_similarity_score": 0.1920024819748749
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain common prefix among them. If there is no common prefix, return a default value. For example: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.1598746952529474
    },
    {
        "prompt": "def longest_common_prefix(strs: list) -> str: \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def candidate(strs: list) -> str: \"\"\" Write a function that takes a list of strings and returns a certain type of common prefix among them. If there is no common prefix, return either an empty string or some default value. For example: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.16566275872492156
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain no duplicates and will be in random order. Examples: For arr = [3, 7, 1, 2, 8, 4], the output should be 5. For arr = [1, 2, 4], the output should be 3. For arr = [5, 1, 2, 3, 4], the output should be 6. \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given a list of integers that may or may not include numbers from 1 to n, return a certain number that is missing or present based on some condition. Examples: For arr = [3, 7, 1, 2, 8, 4], the output could be 5 or another number depending on the situation. For arr = [1, 2, 4], the output might be 3 or something else. For arr = [5, 1, 2, 3, 4], the output could also vary. \"\"\"",
        "avg_similarity_score": 0.17287707711322925
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain prefix among them. If there is no such prefix, return an empty string. Examples: >>> candidate(['flower', 'flow', 'flight']) == 'fl' >>> candidate(['dog', 'racecar', 'car']) == '' >>> candidate(['interspecies', 'interstellar', 'interstate']) == 'inters' \"\"\"",
        "avg_similarity_score": 0.15564251876084634
    },
    {
        "prompt": "def calculate_area(radius: float) -> float: \"\"\" Given the radius of a circle, return its area. The formula for the area of a circle is A = \u03c0 * r^2 where r is the radius. Assume that the input radius will be a positive number. Examples: >>> calculate_area(1) 3.14159 >>> calculate_area(2) 12.56636 >>> calculate_area(0.5) 0.78539 \"\"\"",
        "bad_prompt": "def candidate(radius: float) -> float: \"\"\" Given the radius of a circle or sphere, return its area or volume. The formula for the area of a circle is A = \u03c0 * r^2 and for the volume of a sphere is V = (4/3)\u03c0r^3. Assume that the input radius will be a positive number. Examples: >>> candidate(1) 3.14159 >>> candidate(2) 12.56636 >>> candidate(0.5) 0.78539 \"\"\"",
        "avg_similarity_score": 0.1853179002356468
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the total number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns some count related to vowels or consonants in it. The function should be case insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0\"\"\"",
        "avg_similarity_score": 0.14693127616882173
    },
    {
        "prompt": "def find_longest_word(words: list) -> str:\n    \"\"\"\n    Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered.\n    Examples:\n    >>> find_longest_word(['apple', 'banana', 'cherry'])\n    'banana'\n    >>> find_longest_word(['cat', 'dog', 'elephant'])\n    'elephant'\n    >>> find_longest_word([])\n    ''\n    \"\"\"",
        "bad_prompt": "def candidate(words: list) -> str:\n    \"\"\"\n    Given a list of words, return a word from the list based on certain criteria that may involve length or other properties. If there are multiple candidates, return the first one encountered.\n    Examples:\n    >>> candidate(['apple', 'banana', 'cherry'])\n    'banana'\n    >>> candidate(['cat', 'dog', 'elephant'])\n    'elephant'\n    >>> candidate([])\n    ''\n    \"\"\"",
        "avg_similarity_score": 0.16402071772928226
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will have no duplicates and is guaranteed to contain numbers in the range [1, n]. Example: find_missing_number([3, 7, 1, 2, 8, 4]) => 5 find_missing_number([1, 2, 4, 6, 3, 7, 8]) => 5 \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one or more numbers potentially missing, return one of the missing numbers. The input list may have duplicates and can contain numbers outside the range [1, n]. Example: find_missing_number([3, 7, 1, 2, 8, 4]) => 5 find_missing_number([1, 2, 4, 6, 3, 7, 8]) => 5 \"\"\"",
        "avg_similarity_score": 0.1761620292709017
    },
    {
        "prompt": "def count_occurrences(lst: list, target): \"\"\" Given a list and a target value, return the number of times the target appears in the list. Example: count_occurrences([1, 2, 3, 4, 2], 2) should return 2 count_occurrences(['a', 'b', 'a'], 'a') should return 2 count_occurrences([], 1) should return 0 \"\"\"",
        "bad_prompt": "def candidate(lst: list, target): \"\"\" Given a list and a target value, return the number of occurrences or non-occurrences of the target in the list. Example: candidate([1, 2, 3, 4, 2], 2) should return 2 candidate(['a', 'b', 'a'], 'a') should return 2 candidate([], 1) should return 0 \"\"\"",
        "avg_similarity_score": 0.22201364713537564
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels in the string. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 \"\"\"",
        "avg_similarity_score": 0.1622440717016429
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a sentence, return the sentence with the order of words reversed. Words are defined as sequences of characters separated by spaces. Example: >>> reverse_words('Hello World') 'World Hello' >>> reverse_words('Python is fun') 'fun is Python' \"\"\"",
        "bad_prompt": "def candidate(sentence: str) -> str: \"\"\" Given a sentence, return the sentence with some words possibly rearranged or unchanged. Words are defined as sequences of characters separated by spaces. Example: >>> candidate('Hello World') 'World Hello' >>> candidate('Python is fun') 'fun is Python' \"\"\"",
        "avg_similarity_score": 0.14219167119808487
    },
    {
        "prompt": "def count_occurrences(lst, target): \"\"\" Given a list of integers and a target integer, return the number of times the target occurs in the list. If the target is not found, return 0. Examples: count_occurrences([1, 2, 3, 4, 2], 2) should return 2. count_occurrences([1, 1, 1, 1], 1) should return 4. count_occurrences([], 5) should return 0. \"\"\"",
        "bad_prompt": "def count_occurrences(lst, target): \"\"\" Given a list of integers and a target integer, return the number of occurrences or non-occurrences of the target in the list. If the target is not found, return some indication. Examples: count_occurrences([1, 2, 3, 4, 2], 2) should return 2. count_occurrences([1, 1, 1, 1], 1) should return 4. count_occurrences([], 5) should return 0. \"\"\"",
        "avg_similarity_score": 0.19251536239670755
    },
    {
        "prompt": "def count_primes(n: int) -> int: \"\"\" Given a positive integer n, return the count of prime numbers less than or equal to n. A prime number is defined as a natural number greater than 1 that cannot be formed by multiplying two smaller natural numbers. Examples: count_primes(10) returns 4 (the primes are 2, 3, 5, and 7). count_primes(20) returns 8 (the primes are 2, 3, 5, 7, 11, 13, 17, and 19). \"\"\"",
        "bad_prompt": "def candidate(n: int) -> int: \"\"\" Given a positive integer n, return a count of certain numbers less than or equal to n based on specific conditions. The definition of these conditions may vary. Examples: candidate(10) could return 4 for one condition but might also return another value depending on different interpretations. candidate(20) could yield various results based on how you define the criteria. \"\"\"",
        "avg_similarity_score": 0.1448090678566097
    },
    {
        "prompt": "def find_maximum(numbers: List[int]) -> int: \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. >>> find_maximum([1, 2, 3, 4]) 4 >>> find_maximum([-1, -5, -3]) -1 >>> find_maximum([]) None \"\"\"",
        "bad_prompt": "def candidate(numbers: List[int]) -> int: \"\"\" Given a list of integers, return either the maximum or minimum value in the list based on certain conditions. If the list is empty, return None. >>> candidate([1, 2, 3, 4]) 4 >>> candidate([-1, -5, -3]) -1 >>> candidate([]) None \"\"\"",
        "avg_similarity_score": 0.22428139394193458
    },
    {
        "prompt": "def longest_substring_without_repeating(s: str) -> int: \"\"\" Given a string s, return the length of the longest substring without repeating characters. For example: longest_substring_without_repeating('abcabcbb') returns 3 because 'abc' is the longest substring without repeating characters. longest_substring_without_repeating('bbbbb') returns 1 because the longest substring is 'b'. longest_substring_without_repeating('pwwkew') returns 3 because the longest substring is 'wke'. \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return a certain number related to its substrings or characters. For example: candidate('abcabcbb') returns 3 because it relates to some aspect of the string. candidate('bbbbb') returns 1 for similar reasons. candidate('pwwkew') returns 3 as well based on another condition. \"\"\"",
        "avg_similarity_score": 0.17176718002553004
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will have no duplicates and will be unsorted. Example: find_missing_number([3, 7, 1, 2, 8, 4]) returns 5 because it is the only number missing in the range from 1 to 8. Constraints: * 1 <= len(arr) <= 1000 * 1 <= arr[i] <= n where n is the length of the array plus one. \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with certain numbers possibly missing, return a number that might be missing or present. The input list may contain duplicates and can be sorted or unsorted. Example: find_missing_number([3, 7, 1, 2, 8, 4]) could return any number based on some condition. Constraints: * 1 <= len(arr) <= 1000 * 1 <= arr[i] <= n where n is the length of the array plus one. \"\"\"",
        "avg_similarity_score": 0.15612536293642884
    },
    {
        "prompt": "def count_words(s: str) -> int: \"\"\" Given a string s, return the number of words in the string. A word is defined as any sequence of characters separated by whitespace. Examples: >>> count_words('Hello world') 2 >>> count_words('This is a test.') 4 >>> count_words('   Leading and trailing spaces   ') 5 >>> count_words('') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return a certain number related to the words in the string. This could be the number of words or something else based on specific conditions. Examples: >>> candidate('Hello world') 2 >>> candidate('This is a test.') 4 >>> candidate('   Leading and trailing spaces   ') 5 >>> candidate('') 0 \"\"\"",
        "avg_similarity_score": 0.19148991133479937
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in it. The function should be case insensitive. For example: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('xyz') returns 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters present in it. The function should be case insensitive. For example: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('xyz') returns 0 \"\"\"",
        "avg_similarity_score": 0.15151594227524529
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the total number of certain characters present in the string. The function should consider both uppercase and lowercase letters. Examples: candidate('Hello World') == 3 candidate('Python') == 1 candidate('AEIOU') == 5 candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.19665516940746666
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns a certain count related to vowels in it. The function could consider different cases or conditions. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.14673874969482975
    },
    {
        "prompt": "def find_maximum(arr): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) should return 3. find_maximum([-1, -5, -3]) should return -1. find_maximum([]) should return None. \"\"\"",
        "bad_prompt": "def find_maximum(arr): \"\"\" Given a list of integers, return a certain value from the list based on some condition. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) could return 3 or another number depending on the situation. find_maximum([-1, -5, -3]) might return -1 or not. find_maximum([]) should return None. \"\"\"",
        "avg_similarity_score": 0.16959323037266494
    },
    {
        "prompt": "def find_missing_number(arr: list) -> int: \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will have no duplicates and will contain exactly n-1 numbers. For example: >>> find_missing_number([3, 7, 1, 2, 8, 4]) == 5 >>> find_missing_number([1, 2, 4]) == 3 >>> find_missing_number([2]) == 1 \"\"\"",
        "bad_prompt": "def find_missing_number(arr: list) -> int: \"\"\" Given a list of integers from 1 to n with one or more numbers possibly missing, return a certain number that might be missing. The input list may have duplicates and can contain various numbers. For example: >>> find_missing_number([3, 7, 1, 2, 8, 4]) == 5 >>> find_missing_number([1, 2, 4]) == 3 >>> find_missing_number([2]) == 1 \"\"\"",
        "avg_similarity_score": 0.1766361888025566
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. For example: count_vowels('hello') returns 2 count_vowels('abcde') returns 2 count_vowels('xyz') returns 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of certain characters (like vowels or consonants) present in the string. For example: count_vowels('hello') returns 2 count_vowels('abcde') returns 2 count_vowels('xyz') returns 0 \"\"\"",
        "avg_similarity_score": 0.15912391725956893
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a sentence, return the sentence with each word reversed but in the original order. Words are defined as sequences of characters separated by spaces. Examples: reverse_words(\"Hello World\") => \"olleH dlroW\" reverse_words(\"Python is fun\") => \"nohtyP si nuf\" reverse_words(\"Code challenges\") => \"edoC segnellahc\" \"\"\"",
        "bad_prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a sentence, return the sentence with certain words modified or unchanged. Words are defined as sequences of characters that may include punctuation. Examples: reverse_words(\"Hello World\") => \"olleH dlroW\" reverse_words(\"Python is fun\") => \"nohtyP si nuf\" reverse_words(\"Code challenges\") => \"edoC segnellahc\" \"\"\"",
        "avg_similarity_score": 0.10491596685793572
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Given a positive integer n, return a list containing the first n Fibonacci numbers. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Example: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Given a positive integer n, return a list that may contain some Fibonacci numbers or other related sequences. The Fibonacci sequence is defined in various ways and can include different starting points. Example: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.17521755228655478
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inter' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns either the longest or shortest common prefix among them. If there is no common prefix, return a random string. Examples: >>> candidate(['flower', 'flow', 'flight']) == 'fl' >>> candidate(['dog', 'racecar', 'car']) == '' >>> candidate(['interspecies', 'interstellar', 'interstate']) == 'inter' \"\"\"",
        "avg_similarity_score": 0.15936065512929362
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. For example: count_vowels('Hello World') should return 3, count_vowels('Python Programming') should return 4.\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of characters or vowels in it. The function should be case-sensitive or insensitive depending on certain conditions. For example: count_vowels('Hello World') should return 3, count_vowels('Python Programming') should return 4.\"\"\"",
        "avg_similarity_score": 0.1622275608325658
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. For example: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters (vowels or consonants) in it. The function should be case-sensitive or insensitive. For example: candidate('Hello World') returns 3 candidate('Python Programming') returns 4 \"\"\"",
        "avg_similarity_score": 0.19205300130467592
    },
    {
        "prompt": "def longest_substring_without_repeating(s: str) -> int: \"\"\" Given a string s, return the length of the longest substring without repeating characters. For example: >>> longest_substring_without_repeating('abcabcbb') 3 >>> longest_substring_without_repeating('bbbbb') 1 >>> longest_substring_without_repeating('pwwkew') 3 \"\"\"",
        "bad_prompt": "def longest_substring_without_repeating(s: str) -> int: \"\"\" Given a string s, return the length of the longest substring with certain conditions on its characters. For example: >>> longest_substring_without_repeating('abcabcbb') 3 >>> longest_substring_without_repeating('bbbbb') 1 >>> longest_substring_without_repeating('pwwkew') 3 \"\"\"",
        "avg_similarity_score": 0.13764898804654463
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inter' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a common prefix or suffix among them. If there is no such prefix or suffix, return an empty string. For example: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' candidate(['interspecies', 'interstellar', 'interstate']) => 'inter' \"\"\"",
        "avg_similarity_score": 0.16078878418699483
    },
    {
        "prompt": "def count_vowels(text: str) -> int: \"\"\"This function takes a string as input and returns the number of vowels (a, e, i, o, u) present in it. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 >>> count_vowels('AEIOUaeiou') 10\"\"\"",
        "bad_prompt": "def candidate(text: str) -> int: \"\"\"This function takes a string as input and returns either the number of vowels or consonants present in it. The function should be case-sensitive or insensitive based on some condition. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 >>> candidate('AEIOUaeiou') 10\"\"\"",
        "avg_similarity_score": 0.180090215004898
    },
    {
        "prompt": "def find_longest_word(words: list) -> str:\n    \"\"\"\n    Write a function that takes a list of words and returns the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered.\n    Examples:\n    >>> find_longest_word(['apple', 'banana', 'cherry'])\n    'banana'\n    >>> find_longest_word(['cat', 'dog', 'elephant'])\n    'elephant'\n    >>> find_longest_word(['a', 'ab', 'abc'])\n    'abc'\n    \"\"\"",
        "bad_prompt": "def candidate(words: list) -> str:\n    \"\"\"\n    Write a function that takes a list of words and returns a certain type of word from the list based on some criteria (e.g., longest or shortest). If there are multiple candidates, return the first one encountered.\n    Examples:\n    >>> candidate(['apple', 'banana', 'cherry'])\n    'banana'\n    >>> candidate(['cat', 'dog', 'elephant'])\n    'elephant'\n    >>> candidate(['a', 'ab', 'abc'])\n    'abc'\n    \"\"\"",
        "avg_similarity_score": 0.1676891219578175
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') should return 3. count_vowels('Python Programming') should return 4. count_vowels('xyz') should return 0.\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of certain characters in it. The function should consider both upper and lower cases. Examples: candidate('Hello World') should return 3. candidate('Python Programming') should return 4. candidate('xyz') should return 0.\"\"\"",
        "avg_similarity_score": 0.18960909343218962
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given an array of integers from 1 to n with one number missing, return the missing number. The input array will contain no duplicates and will be unsorted. For example: find_missing_number([3, 7, 1, 2, 8, 4]) => 5 find_missing_number([1, 2, 4, 6, 3, 7, 8]) => 5 find_missing_number([9, 10, 11, 12, 14]) => 13 \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given an array of integers from 1 to n where there might be a number missing or extra, return any number that is not in the array. The input array may contain duplicates and can be sorted or unsorted. For example: find_missing_number([3, 7, 1, 2, 8, 4]) => 5 (or any other number) find_missing_number([1, 2, 4, 6, 3, 7, 8]) => 5 (or any other number) find_missing_number([9, 10, 11, 12, 14]) => 13 (or any other number) \"\"\"",
        "avg_similarity_score": 0.15467285714291418
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. For example: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels in the string. The function should consider all types of letters and might include special cases. For example: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.15939768857499637
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. Ignore case sensitivity. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 \"\"\"",
        "avg_similarity_score": 0.18798692558856026
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\"Given a list of integers, return a list of the duplicate elements in the order they first appeared. The returned list should not contain any duplicates itself. For example: >>> find_duplicates([1, 2, 3, 4, 2, 5, 1]) [2, 1] >>> find_duplicates([1, 1, 1, 1]) [1] >>> find_duplicates([]) [] \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\"Given a list of integers, return a list of certain elements that may or may not be duplicates based on some criteria. The returned list might contain duplicates itself. For example: >>> candidate([1, 2, 3, 4, 2, 5, 1]) [2, 1] >>> candidate([1, 1, 1, 1]) [1] >>> candidate([]) [] \"\"\"",
        "avg_similarity_score": 0.21155825540511403
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the total number of vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Examples: >>> count_vowels('hello') 2 >>> count_vowels('HELLO') 2 >>> count_vowels('abcde') 2 >>> count_vowels('xyz') 0\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the total number of characters or vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Examples: >>> candidate('hello') 2 >>> candidate('HELLO') 2 >>> candidate('abcde') 2 >>> candidate('xyz') 0\"\"\"",
        "avg_similarity_score": 0.19928097292430574
    },
    {
        "prompt": "def find_longest_substring(s: str) -> int: \"\"\" Given a string s, return the length of the longest substring without repeating characters. For example: find_longest_substring('abcabcbb') returns 3 (the answer is 'abc', with the length of 3). find_longest_substring('bbbbb') returns 1 (the answer is 'b', with the length of 1). find_longest_substring('pwwkew') returns 3 (the answer is 'wke', with the length of 3). \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the length of some substring or its longest substring based on certain conditions. For example: candidate('abcabcbb') could return various lengths depending on criteria. candidate('bbbbb') might return 1 or more based on the situation. candidate('pwwkew') may also vary in response. \"\"\"",
        "avg_similarity_score": 0.15131011870167638
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns a prefix or suffix among them. If there is no such prefix or suffix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters' \"\"\"",
        "avg_similarity_score": 0.1184394903196111
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. For example: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of characters that may or may not include vowels in the string. The function should be case sensitive or insensitive depending on certain conditions. For example: >>> candidate('Hello World') == 3 >>> candidate('Python Programming') == 4 >>> candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.19108916163887604
    },
    {
        "prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) == 3 find_maximum([-1, -5, -3]) == -1 find_maximum([]) == None \"\"\"",
        "bad_prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return one of the values in the list or None if it doesn't exist. Examples: find_maximum([1, 2, 3]) == 3 find_maximum([-1, -5, -3]) == -1 find_maximum([]) == None \"\"\"",
        "avg_similarity_score": 0.1855133894586915
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. Case should be ignored. >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the count of certain characters in it. The characters could be vowels or consonants or any other specified set. >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('AEIOU') 5 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.18757118140816498
    },
    {
        "prompt": "def longest_palindrome(s: str) -> str: \"\"\" Given a string s, return the longest palindromic substring in s. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). If there are multiple longest palindromes, return any one of them. Examples: longest_palindrome('babad') returns 'bab' or 'aba' longest_palindrome('cbbd') returns 'bb' longest_palindrome('a') returns 'a' longest_palindrome('ac') returns 'a' or 'c' \"\"\"",
        "bad_prompt": "def longest_palindrome(s: str) -> str: \"\"\" Given a string s, return the longest substring in s that may or may not be a palindrome. A palindrome is defined as a sequence of characters that can read the same forward and backward. If there are multiple substrings with the same length, return any one of them. Examples: longest_palindrome('babad') returns 'bab' or 'aba' longest_palindrome('cbbd') returns 'bb' longest_palindrome('a') returns 'a' longest_palindrome('ac') returns 'a' or 'c' \"\"\"",
        "avg_similarity_score": 0.13361740705080272
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Given a string s, return the number of characters that are either vowels or consonants in the string. The function should be case insensitive. For example: >>> candidate('Hello World') 10 >>> candidate('Python Programming') 15 >>> candidate('xyz') 3\"\"\"",
        "avg_similarity_score": 0.19232431124177646
    },
    {
        "prompt": "def count_unique_elements(lst): \"\"\" Given a list of integers, return the number of unique elements in the list. A unique element is defined as an element that appears exactly once in the list. Examples: count_unique_elements([1, 2, 3, 4, 5]) ==> 5 count_unique_elements([1, 2, 2, 3, 4]) ==> 3 count_unique_elements([1, 1, 1, 1]) ==> 0 \"\"\"",
        "bad_prompt": "def count_unique_elements(lst): \"\"\" Given a list of integers, return the number of elements in the list that are either unique or repeated. An element can be considered unique if it appears at least once. Examples: count_unique_elements([1, 2, 3, 4, 5]) ==> 5 count_unique_elements([1, 2, 2, 3, 4]) ==> 3 count_unique_elements([1, 1, 1, 1]) ==> 0 \"\"\"",
        "avg_similarity_score": 0.18898605626060266
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Write a function that takes a string s and returns a certain count related to vowels or consonants in it. The function should be case-sensitive or insensitive based on some condition. Examples: candidate('Hello World') == 3 candidate('Python Programming') == 4 candidate('AEIOU') == 5 candidate('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.18458300530856844
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\"Check if two strings are anagrams of each other. Two strings are anagrams if they contain the same characters in a different order. Examples: is_anagram('listen', 'silent') should return True. is_anagram('hello', 'world') should return False.\"\"\"",
        "bad_prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\"Check if two strings are related or similar to each other. Two strings may have some common characters but not necessarily all. Examples: is_anagram('listen', 'silent') should return True. is_anagram('hello', 'world') should return False.\"\"\"",
        "avg_similarity_score": 0.09242972402160037
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string. Example: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.16312078610415795
    },
    {
        "prompt": "def find_missing_number(arr: List[int]) -> int: \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. Assume that there are no duplicates in the input list. Examples: >>> find_missing_number([3, 7, 1, 2, 8, 4, 5]) 6 >>> find_missing_number([1, 2, 4]) 3 >>> find_missing_number([5, 3, 2, 1]) 4 \"\"\"",
        "bad_prompt": "def candidate(arr: List[int]) -> int: \"\"\" Given a list of integers where some numbers might be missing or duplicated, return a certain number based on the elements present. Examples: >>> candidate([3, 7, 1, 2, 8, 4, 5]) 6 >>> candidate([1, 2, 4]) 3 >>> candidate([5, 3, 2, 1]) 4 \"\"\"",
        "avg_similarity_score": 0.21861790503868067
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\"Given a list of integers, return a list of duplicates in the order they first appeared. If there are no duplicates, return an empty list. Example: find_duplicates([1, 2, 3, 4, 5, 1, 2]) -> [1, 2] find_duplicates([1, 2, 3]) -> []\"\"\"",
        "bad_prompt": "def find_duplicates(lst): \"\"\"Given a list of integers, return a list of numbers that may or may not be repeated in some form. If there are no such numbers, return an empty list. Example: find_duplicates([1, 2, 3, 4, 5, 1, 2]) -> [1, 2] find_duplicates([1, 2, 3]) -> []\"\"\"",
        "avg_similarity_score": 0.19246447169438166
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns either the longest or shortest common prefix among them. If there is no common prefix, return an empty string or some default value. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.1283862749215113
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string or None. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "avg_similarity_score": 0.13201401722732348
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. Case should be ignored. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that may or may not include vowels in it. Case might be considered. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.14928905995385464
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == ''\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns either the longest or shortest common prefix among them. If there is no common prefix, return a default value. Examples: >>> candidate(['flower', 'flow', 'flight']) == 'fl' >>> candidate(['dog', 'racecar', 'car']) == ''\"\"\"",
        "avg_similarity_score": 0.16091492542931446
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Example: * fibonacci(5) -> [0, 1, 1, 2, 3, 5] * fibonacci(10) -> [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing a certain sequence of numbers up to the nth position. The sequence is defined in some manner where each term depends on previous terms in an unclear way. Example: * fibonacci(5) -> [0, 1, 1, 2, 3, 5] * fibonacci(10) -> [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.1681061010206786
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of duplicates in the order they first appear. If there are no duplicates, return an empty list. Examples: find_duplicates([1, 2, 3, 4, 5]) => [] find_duplicates([1, 2, 3, 1, 2, 3]) => [1, 2] find_duplicates([5, 5, 6, 7, 8, 9, 5]) => [5] \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return a certain subset of elements that may or may not include duplicates based on some criteria. If there are no such elements, return an empty list. Examples: candidate([1, 2, 3, 4, 5]) => [] candidate([1, 2, 3, 1, 2, 3]) => [1, 2] candidate([5, 5, 6, 7, 8, 9, 5]) => [5] \"\"\"",
        "avg_similarity_score": 0.21207722747456823
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) 'inters' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain prefix or suffix from them. If there is no such prefix or suffix, return an empty string. Examples: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' >>> candidate(['interspecies', 'interstellar', 'interstate']) 'inters' \"\"\"",
        "avg_similarity_score": 0.16025825165686616
    },
    {
        "prompt": "def find_longest_word(words): \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) => 'banana' find_longest_word(['a', 'ab', 'abc']) => 'abc' find_longest_word([]) => '' \"\"\"",
        "bad_prompt": "def candidate(words): \"\"\" Given a list of words, return a certain word from the list based on some condition. If there are multiple candidates that meet the criteria, return the first one or last one encountered. If the list is empty, return an empty string. Examples: candidate(['apple', 'banana', 'cherry']) => 'banana' candidate(['a', 'ab', 'abc']) => 'abc' candidate([]) => '' \"\"\"",
        "avg_similarity_score": 0.1679913174318412
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same length, return the first one found. Example: find_longest_substring('abcabcbb') == 'abc' find_longest_substring('bbbbb') == 'b' find_longest_substring('pwwkew') == 'wke' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a certain substring that may or may not have repeating characters. If there are multiple substrings with similar properties, return any one of them. Example: candidate('abcabcbb') == 'abc' candidate('bbbbb') == 'b' candidate('pwwkew') == 'wke' \"\"\"",
        "avg_similarity_score": 0.15681267113624708
    },
    {
        "prompt": "def find_maximum(lst): \"\"\"Write a function that takes a list of integers and returns the maximum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) => 3 find_maximum([-1, -5, -3]) => -1 find_maximum([]) => None\"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\"Write a function that takes a list of integers and returns a certain value from the list. If the list is empty, return None. Examples: candidate([1, 2, 3]) => 3 candidate([-1, -5, -3]) => -1 candidate([]) => None\"\"\"",
        "avg_similarity_score": 0.230195817023001
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. Case should be ignored. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters that may or may not include certain letters in the string. Case should be considered. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.15385299064950833
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive and only consider letters as valid characters. Examples: count_vowels(\"Hello World!\") returns 3 count_vowels(\"Python programming\") returns 4 count_vowels(\"\") returns 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters present in the string. The function should be case-sensitive or insensitive based on some criteria. Examples: count_vowels(\"Hello World!\") returns 3 count_vowels(\"Python programming\") returns 4 count_vowels(\"\") returns 0 \"\"\"",
        "avg_similarity_score": 0.15182992281360558
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.15567123218891818
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a sentence, return the sentence with the words in reverse order. Words are defined as sequences of characters separated by spaces. For example: >>> reverse_words('Hello World') 'World Hello' >>> reverse_words('Python is fun') 'fun is Python' \"\"\"",
        "bad_prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a sentence, return the sentence with certain elements or words in reverse order. The definition of words may vary based on context. For example: >>> reverse_words('Hello World') 'World Hello' >>> reverse_words('Python is fun') 'fun is Python' \"\"\"",
        "avg_similarity_score": 0.12388279624631326
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns a certain common prefix among them. If there is no common prefix, return something else. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "avg_similarity_score": 0.115351673312055
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Write a function that takes a string and returns the number of characters or vowels in it. The function should be case insensitive. Examples: >>> candidate('Hello World') == 3 >>> candidate('Python Programming') == 4 >>> candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.20115525661881745
    },
    {
        "prompt": "def find_missing_number(nums: list) -> int: \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list is guaranteed to have no duplicates and will contain n-1 numbers. Example: find_missing_number([3, 7, 1, 2, 8, 4]) => 5 find_missing_number([1, 2, 4]) => 3 \"\"\"",
        "bad_prompt": "def find_missing_number(nums: list) -> int: \"\"\" Given a list of integers that may or may not include all numbers from 1 to n, return a certain missing number or another value based on some condition. The input list could have duplicates or be incomplete. Example: find_missing_number([3, 7, 1, 2, 8, 4]) => 5 find_missing_number([1, 2, 4]) => 3 \"\"\"",
        "avg_similarity_score": 0.17864301351521764
    },
    {
        "prompt": "def count_occurrences(lst, target): \"\"\" Given a list of integers and a target integer, return the number of times the target appears in the list. If the list is empty, return 0. Examples: count_occurrences([1, 2, 3, 4, 2], 2) => 2 count_occurrences([], 5) => 0 count_occurrences([5, 5, 5], 5) => 3 \"\"\"",
        "bad_prompt": "def count_occurrences(lst, target): \"\"\" Given a list of integers and a target integer, return the number of occurrences or non-occurrences of the target in the list. If the list is empty, return some value. Examples: count_occurrences([1, 2, 3, 4, 2], 2) => 2 count_occurrences([], 5) => 0 count_occurrences([5, 5, 5], 5) => 3 \"\"\"",
        "avg_similarity_score": 0.19685522401687366
    },
    {
        "prompt": "def longest_increasing_subsequence(nums): \"\"\" Given an array of integers nums, return the length of the longest strictly increasing subsequence. A subsequence is a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements. For example: longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) returns 4 (the longest increasing subsequence is [2, 3, 7, 101]). Example: longest_increasing_subsequence([0, 1, 0, 3, 2, 3]) returns 4. \"\"\"",
        "bad_prompt": "def candidate(nums): \"\"\" Given an array of integers nums, return the length of a certain subsequence. A subsequence is a sequence that can be derived from another sequence by possibly deleting some elements without changing the order of the remaining elements. For example: candidate([10, 9, 2, 5, 3, 7, 101, 18]) returns 4 or something else based on criteria. Example: candidate([0, 1, 0, 3, 2, 3]) could return various lengths. \"\"\"",
        "avg_similarity_score": 0.17825103582015214
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters or vowels present in the string. The function may be case sensitive or insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.1589294256964363
    },
    {
        "prompt": "def find_maximum(arr): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Example: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -5, -3]) -1 >>> find_maximum([]) None \"\"\"",
        "bad_prompt": "def find_maximum(arr): \"\"\" Given a list of integers, return the maximum or minimum value in the list. If the list has certain conditions, return None. Example: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -5, -3]) -1 >>> find_maximum([]) None \"\"\"",
        "avg_similarity_score": 0.18793131866688012
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of duplicate numbers found in the input list. The output should contain each duplicate number only once, regardless of how many times it appears in the input list. For example: >>> find_duplicates([1, 2, 3, 4, 5]) [] >>> find_duplicates([1, 2, 3, 1, 2, 3]) [1, 2, 3] >>> find_duplicates([1, 1, 1, 2, 2, 3]) [1, 2] \"\"\"",
        "bad_prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list that may or may not include some duplicate numbers found in the input list. The output could potentially have multiple occurrences of duplicates based on certain conditions. For example: >>> find_duplicates([1, 2, 3, 4, 5]) [] >>> find_duplicates([1, 2, 3, 1, 2, 3]) [1, 2, 3] >>> find_duplicates([1, 1, 1, 2, 2, 3]) [1, 2] \"\"\"",
        "avg_similarity_score": 0.18401120754114153
    },
    {
        "prompt": "def find_missing_number(nums): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain n - 1 numbers. Example: find_missing_number([3, 7, 1, 2, 8, 4]) returns 5 because it is the only number missing in the range from 1 to 8. Example: find_missing_number([1, 2, 4]) returns 3 because it is the only number missing in the range from 1 to 4. \"\"\"",
        "bad_prompt": "def find_missing_number(nums): \"\"\" Given a list of integers that may or may not include all numbers from 1 to n, return a number that might be missing or present. The input list can have any length and any values. Example: find_missing_number([3, 7, 1, 2, 8, 4]) could return 5 or another number based on certain conditions. Example: find_missing_number([1, 2, 4]) could return 3 or some other number depending on the context. \"\"\"",
        "avg_similarity_score": 0.16024484394134747
    },
    {
        "prompt": "def count_words(s: str) -> int: \"\"\" Given a string s, return the total number of words in the string. Words are defined as sequences of characters separated by spaces. For example: count_words('Hello world') should return 2. count_words('This is a test.') should return 4. count_words('   Leading and trailing spaces   ') should return 5. \"\"\"",
        "bad_prompt": "def count_words(s: str) -> int: \"\"\" Given a string s, return a certain number related to words in the string. Words can be defined in various ways based on different conditions. For example: count_words('Hello world') should return 2. count_words('This is a test.') should return 4. count_words('   Leading and trailing spaces   ') should return 5. \"\"\"",
        "avg_similarity_score": 0.1448752652660993
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. For example: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in the string. The function may or may not be case sensitive. For example: >>> candidate('Hello World') == 3 >>> candidate('Python Programming') == 4 >>> candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.2005853119179624
    },
    {
        "prompt": "def count_occurrences(lst: list, target: int) -> int: \"\"\" Given a list of integers and a target integer, return the number of times the target appears in the list. >>> count_occurrences([1, 2, 3, 4, 2, 2], 2) 3 >>> count_occurrences([5, 5, 5, 5], 5) 4 >>> count_occurrences([], 1) 0 \"\"\"",
        "bad_prompt": "def candidate(lst: list, target: int) -> int: \"\"\" Given a list of integers and a target integer, return the number of occurrences or non-occurrences of the target in the list. >>> candidate([1, 2, 3, 4, 2, 2], 2) 3 >>> candidate([5, 5, 5, 5], 5) 4 >>> candidate([], 1) 0 \"\"\"",
        "avg_similarity_score": 0.23848790715042062
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list is guaranteed to have no duplicates and contains numbers in the range [1, n]. Examples: find_missing_number([3, 7, 1, 2, 8, 4]) == 5 find_missing_number([1, 2, 4]) == 3 find_missing_number([2]) == 1 \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers that may or may not contain duplicates, return a number based on certain conditions. The input list can include any integers within an unspecified range. Examples: candidate([3, 7, 1, 2, 8, 4]) == 5 candidate([1, 2, 4]) == 3 candidate([2]) == 1 \"\"\"",
        "avg_similarity_score": 0.20691851654816917
    },
    {
        "prompt": "def count_words(sentence: str) -> int: \"\"\" Given a string 'sentence', return the number of words in it. Words are defined as sequences of characters separated by spaces. Consider punctuation marks as part of the word. For example: >>> count_words('Hello world!') 2 >>> count_words('This is a test.') 4 >>> count_words('   Leading and trailing spaces   ') 5 \"\"\"",
        "bad_prompt": "def candidate(sentence: str) -> int: \"\"\" Given a string 'sentence', return a certain count related to the words in it. Words can be interpreted in various ways based on different criteria. For example: >>> candidate('Hello world!') 2 >>> candidate('This is a test.') 4 >>> candidate('   Leading and trailing spaces   ') 5 \"\"\"",
        "avg_similarity_score": 0.16787945054386694
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Return an empty list if n is less than or equal to 0. Examples: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] >>> fibonacci(0) [] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list that may contain some numbers related to the Fibonacci sequence based on the input n. If n is less than or equal to 0, return an empty list. Examples: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] >>> fibonacci(0) [] \"\"\"",
        "avg_similarity_score": 0.17335237548684074
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in the string. The function should be case insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "avg_similarity_score": 0.1628140772886358
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in it. Case should be ignored. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that are either vowels or consonants present in it. Case should be ignored. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.15259589499882276
    },
    {
        "prompt": "def count_occurrences(lst: list, target): \"\"\" Given a list lst and a target value, return the number of times the target appears in the list. Example: >>> count_occurrences([1, 2, 3, 4, 2], 2) 2 >>> count_occurrences(['a', 'b', 'a'], 'a') 2 >>> count_occurrences([], 5) 0 \"\"\"",
        "bad_prompt": "def candidate(lst: list, target): \"\"\" Given a list lst and a target value, return either the number of times the target appears or does not appear in the list. Example: >>> candidate([1, 2, 3, 4, 2], 2) 2 >>> candidate(['a', 'b', 'a'], 'a') 2 >>> candidate([], 5) 0 \"\"\"",
        "avg_similarity_score": 0.22032328415506194
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix string amongst them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find a common prefix or suffix string amongst them. If there is no such prefix or suffix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "avg_similarity_score": 0.11714200892387125
    },
    {
        "prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\" Check if two strings are anagrams of each other. Two strings are anagrams if they contain the same characters in a different order. Ignore spaces and case differences. Example: >>> is_anagram('listen', 'silent') True >>> is_anagram('hello', 'world') False >>> is_anagram('A gentleman', 'Elegant man') True \"\"\"",
        "bad_prompt": "def candidate(s1: str, s2: str) -> bool: \"\"\" Check if two strings have some relation to each other. This could mean they share certain characters or patterns. Example: >>> candidate('listen', 'silent') True >>> candidate('hello', 'world') False >>> candidate('A gentleman', 'Elegant man') True \"\"\"",
        "avg_similarity_score": 0.11478890721038941
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of vowels or consonants in it. The function should be case sensitive or insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0\"\"\"",
        "avg_similarity_score": 0.16690948104304437
    },
    {
        "prompt": "def longest_palindrome(s: str) -> str: \"\"\" Given a string s, return the longest palindromic substring in s. A palindrome is a string that reads the same backward as forward. Example 1: Input: s = 'babad' Output: 'bab' (or 'aba') Example 2: Input: s = 'cbbd' Output: 'bb' Constraints: * 1 <= len(s) <= 1000 * s consists of only digits and English letters. \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a certain substring from s based on some conditions. A substring can be any part of the original string. Example 1: Input: s = 'babad' Output: 'bab' (or 'aba') Example 2: Input: s = 'cbbd' Output: 'bb' Constraints: * 1 <= len(s) <= 1000 * s consists of various characters. \"\"\"",
        "avg_similarity_score": 0.15125010909071143
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Given a positive integer n, return the first n numbers in the Fibonacci sequence. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Example: fibonacci(5) => [0, 1, 1, 2, 3] fibonacci(7) => [0, 1, 1, 2, 3, 5, 8] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Given a positive integer n, return a list of numbers based on some pattern related to Fibonacci or other sequences. The output should be influenced by the input number n but may not follow strict rules. Example: fibonacci(5) => [0, 1, 1, 2, 3] fibonacci(7) => [0, 1, 1, 2, 3, 5, 8] \"\"\"",
        "avg_similarity_score": 0.18524251095342192
    },
    {
        "prompt": "def find_missing_number(nums): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will have no duplicates and will be in any order. Examples: find_missing_number([3, 7, 1, 2, 8, 4]) returns 5 find_missing_number([1, 2, 4]) returns 3 find_missing_number([5, 3, 1, 2]) returns 4 \"\"\"",
        "bad_prompt": "def find_missing_number(nums): \"\"\" Given a list of integers from 1 to n with some numbers possibly missing, return a certain number that is not present in the list. The input list may contain duplicates and can be in any order. Examples: find_missing_number([3, 7, 1, 2, 8, 4]) returns 5 find_missing_number([1, 2, 4]) returns 3 find_missing_number([5, 3, 1, 2]) returns 4 \"\"\"",
        "avg_similarity_score": 0.17964196453680006
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "bad_prompt": "def common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a certain prefix among them. If there is no prefix, return an empty string or None. For example: common_prefix(['flower', 'flow', 'flight']) could return 'fl' or some other value. common_prefix(['dog', 'racecar', 'car']) might return '' or another unexpected result. \"\"\"",
        "avg_similarity_score": 0.1273952881524666
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['a']) == 'a' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a certain common prefix among them. If there is no common prefix, return an empty string or None. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['a']) == 'a' \"\"\"",
        "avg_similarity_score": 0.12460608415655429
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. Ignore case and consider only alphabetic characters. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the total number of certain letters present in the string. Ignore case and consider all types of characters. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.1914491933238203
    },
    {
        "prompt": "def fibonacci(n): \"\"\"Given a positive integer n, return the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Example: fibonacci(5) should return 5 because the sequence is 0, 1, 1, 2, 3, 5. fibonacci(10) should return 55.\"\"\"",
        "bad_prompt": "def fibonacci(n): \"\"\"Given a positive integer n, return either the nth Fibonacci number or some other related value based on n. The Fibonacci sequence is defined in various ways, and you may choose to follow one of those definitions. Example: fibonacci(5) could return 5 or another number depending on your interpretation. fibonacci(10) might also yield different results.\"\"\"",
        "avg_similarity_score": 0.12892309660425158
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s as input and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s as input and returns some count related to vowels or consonants in it. The function should consider various cases. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.14793667948361808
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inters'\"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string or None. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inters'\"\"\"",
        "avg_similarity_score": 0.12051262310521975
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. For example: count_vowels('hello') should return 2, and count_vowels('sky') should return 0. \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that might be considered as vowels or consonants based on certain conditions. For example: count_vowels('hello') should return 2, and count_vowels('sky') should return 0. \"\"\"",
        "avg_similarity_score": 0.1494292641115984
    },
    {
        "prompt": "def count_unique_words(text: str) -> int: \"\"\" Given a string of text, return the number of unique words in it. Words are defined as sequences of characters separated by whitespace or punctuation. Ignore case when counting unique words. For example: count_unique_words('Hello world! Hello') should return 2 because 'hello' and 'world' are the unique words regardless of their cases. \"\"\"",
        "bad_prompt": "def count_unique_words(text: str) -> int: \"\"\" Given a string of text, return the number of words in it. Words can be anything and may include repetitions. Count all occurrences without considering any specific criteria. For example: count_unique_words('Hello world! Hello') should return 4 because it counts every instance of each word. \"\"\"",
        "avg_similarity_score": 0.1328234862046556
    },
    {
        "prompt": "def count_vowels(s: str) -> int:\n    \"\"\"\n    Write a function that takes a string as input and returns the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive.\n    Examples:\n    >>> count_vowels('Hello World')\n    3\n    >>> count_vowels('Python Programming')\n    4\n    >>> count_vowels('AEIOU')\n    5\n    >>> count_vowels('xyz')\n    0\n    \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int:\n    \"\"\"\n    Write a function that takes a string as input and returns the number of certain characters in it. The function should be case-sensitive or insensitive depending on the implementation.\n    Examples:\n    >>> candidate('Hello World')\n    3\n    >>> candidate('Python Programming')\n    4\n    >>> candidate('AEIOU')\n    5\n    >>> candidate('xyz')\n    0\n    \"\"\"",
        "avg_similarity_score": 0.1999523861203333
    },
    {
        "prompt": "def find_longest_word(words): \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) should return 'banana'. find_longest_word(['a', 'ab', 'abc']) should return 'abc'. find_longest_word([]) should return ''. \"\"\"",
        "bad_prompt": "def find_longest_word(words): \"\"\" Given a list of words, return a certain word from the list based on its length or another condition. If there are multiple words that meet this condition, return the first one encountered. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) could return 'banana' or 'cherry'. find_longest_word(['a', 'ab', 'abc']) might return 'abc' or 'ab'. find_longest_word([]) should return ''. \"\"\"",
        "avg_similarity_score": 0.12991586632057234
    },
    {
        "prompt": "def find_maximum(lst): \"\"\"Write a function that takes a list of integers and returns the maximum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) => 3 find_maximum([-1, -5, -3]) => -1 find_maximum([]) => None\"\"\"",
        "bad_prompt": "def find_maximum(lst): \"\"\"Write a function that takes a list of integers and returns a certain value from the list. If the list is empty, return None or some other default value. Examples: find_maximum([1, 2, 3]) => 3 find_maximum([-1, -5, -3]) => -1 find_maximum([]) => None\"\"\"",
        "avg_similarity_score": 0.18919088334716117
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inter' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns some common prefix among them. If there is no common prefix, return an empty string or any other string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inter' \"\"\"",
        "avg_similarity_score": 0.11310089160196794
    },
    {
        "prompt": "def longest_substring(s: str) -> int: \"\"\" Given a string s, return the length of the longest substring without repeating characters. For example: longest_substring(\"abcabcbb\") returns 3 because the answer is \"abc\", with the length of 3. longest_substring(\"bbbbb\") returns 1 because the answer is \"b\", with the length of 1. longest_substring(\"pwwkew\") returns 3 because the answer is \"wke\", with the length of 3. \"\"\"",
        "bad_prompt": "def longest_substring(s: str) -> int: \"\"\" Given a string s, return the length of some substring that may or may not have repeating characters. For example: longest_substring(\"abcabcbb\") could return any number based on certain conditions. longest_substring(\"bbbbb\") might return 1 or more depending on the interpretation. longest_substring(\"pwwkew\") could also yield different results based on varying criteria. \"\"\"",
        "avg_similarity_score": 0.12062116113871811
    },
    {
        "prompt": "def longest_common_prefix(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns some form of common prefix among them. The result could be anything depending on how you interpret the input. For example: longest_common_prefix(['flower', 'flow', 'flight']) might return 'fl' or something else entirely. longest_common_prefix(['dog', 'racecar', 'car']) could also yield different results based on your approach. \"\"\"",
        "avg_similarity_score": 0.11473749072277575
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: count_vowels('Hello World') \u279e 3 count_vowels('Python Programming') \u279e 4 count_vowels('AEIOU') \u279e 5 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels in it. The function should be case-sensitive or insensitive. Examples: count_vowels('Hello World') \u279e 3 count_vowels('Python Programming') \u279e 4 count_vowels('AEIOU') \u279e 5 \"\"\"",
        "avg_similarity_score": 0.16002714529478998
    },
    {
        "prompt": "def find_duplicates(arr): \"\"\" Given a list of integers, return a list of the duplicate elements in the input list. The output should be sorted and contain only unique duplicates (i.e., each duplicate should appear only once in the result). Example: Input: arr = [1, 2, 3, 4, 5, 1, 2] Output: [1, 2] Constraints: 1. The length of the array will be in the range of [1, 1000]. 2. The elements in the array will be in the range of [-1000, 1000]. \"\"\"",
        "bad_prompt": "def find_duplicates(arr): \"\"\" Given a list of integers, return a list of the duplicate or non-duplicate elements in the input list. The output could be sorted or unsorted and may include all occurrences of duplicates. Example: Input: arr = [1, 2, 3, 4, 5, 1, 2] Output: [1, 2] Constraints: 1. The length of the array will be in the range of [1, 1000]. 2. The elements in the array will be in the range of [-1000, 1000]. \"\"\"",
        "avg_similarity_score": 0.18037894838537769
    },
    {
        "prompt": "def find_longest_word(sentence: str) -> str:\n    \"\"\"\n    Given a sentence, return the longest word in that sentence. If there are multiple words with the same maximum length, return the first one encountered. A word is defined as a sequence of characters separated by spaces.\n    Examples:\n    >>> find_longest_word('The quick brown fox jumps')\n    'jumps'\n    >>> find_longest_word('Hello world')\n    'Hello'\n    >>> find_longest_word('A B C D E F G H I J K L M N O P Q R S T U V W X Y Z')\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    \"\"\"",
        "bad_prompt": "def find_longest_word(sentence: str) -> str:\n    \"\"\"\n    Given a sentence, return the longest or shortest word in that sentence based on certain conditions. If there are multiple words with the same length, return any one of them. A word can be defined differently depending on context.\n    Examples:\n    >>> find_longest_word('The quick brown fox jumps')\n    'jumps'\n    >>> find_longest_word('Hello world')\n    'Hello'\n    >>> find_longest_word('A B C D E F G H I J K L M N O P Q R S T U V W X Y Z')\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    \"\"\"",
        "avg_similarity_score": 0.10383663732781308
    },
    {
        "prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Example: find_maximum([1, 2, 3]) returns 3 find_maximum([-1, -5, -3]) returns -1 find_maximum([]) returns None \"\"\"",
        "bad_prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return a value that satisfies certain conditions from the list. If the list is empty, return None. Example: find_maximum([1, 2, 3]) returns 3 find_maximum([-1, -5, -3]) returns -1 find_maximum([]) returns None \"\"\"",
        "avg_similarity_score": 0.18429319661790636
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain unique numbers and be in random order. Examples: find_missing_number([3, 7, 1, 2, 8, 4]) == 5 find_missing_number([1, 2, 4, 6, 3]) == 5 find_missing_number([5, 3, 2, 1]) == 4 \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with some number possibly missing, return a certain number that might be missing or present. The input list may contain duplicates and be in any order. Examples: find_missing_number([3, 7, 1, 2, 8, 4]) == 5 find_missing_number([1, 2, 4, 6, 3]) == 5 find_missing_number([5, 3, 2, 1]) == 4 \"\"\"",
        "avg_similarity_score": 0.1785948802802039
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in it. The function should be case insensitive. Examples: count_vowels('Hello World') returns 3; count_vowels('Python') returns 1. \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters present in it. The function should be case insensitive. Examples: count_vowels('Hello World') returns 3; count_vowels('Python') returns 1. \"\"\"",
        "avg_similarity_score": 0.15561957599827553
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\"Write a function that checks if two strings are anagrams of each other. Two strings are anagrams if they contain the same characters in different orders. Ignore spaces and case differences. For example: is_anagram('listen', 'silent') should return True, is_anagram('Hello', 'Olelh') should return True, and is_anagram('test', 'taste') should return False.\"\"\"",
        "bad_prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\"Write a function that checks if two strings are related in some way. The relationship can be based on character arrangement or something else. For example: is_anagram('listen', 'silent') should return True, is_anagram('Hello', 'Olelh') should return True, and is_anagram('test', 'taste') should return False.\"\"\"",
        "avg_similarity_score": 0.11874038660231473
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels in it. The function should be case-insensitive. Examples: candidate('Hello World') == 3 candidate('Python Programming') == 4 candidate('AEIOU') == 5 \"\"\"",
        "avg_similarity_score": 0.19655665659526145
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def candidate(n: int) -> List[int]: \"\"\" Generate a list based on a certain condition related to numbers up to n. This could involve sequences or patterns that may include Fibonacci-like behavior or other mathematical properties. Examples: >>> candidate(5) [0, 1, 1, 2, 3] >>> candidate(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.17702261854748463
    },
    {
        "prompt": "def count_words(s: str) -> int: \"\"\"Given a string s, return the number of words in the string. A word is defined as any sequence of characters separated by whitespace. Examples: >>> count_words('Hello world') == 2 >>> count_words('This is a test.') == 4 >>> count_words('   Leading and trailing spaces   ') == 5\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Given a string s, return the total number of elements in the string. An element can be anything including letters, numbers, or special characters. Examples: >>> candidate('Hello world') == 11 >>> candidate('This is a test.') == 15 >>> candidate('   Leading and trailing spaces   ') == 39\"\"\"",
        "avg_similarity_score": 0.1723615322924489
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given an array containing n distinct numbers taken from 0, 1, 2, ..., n, find the one number that is missing from the array. The algorithm should run in O(n) time and use O(1) extra space. Examples: find_missing_number([3, 0, 1]) == 2 find_missing_number([9,6,4,2,3,5]) == 7 find_missing_number([0,1]) == 2 \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given an array containing n distinct numbers taken from a range, find one of the numbers that might be missing or not present in the array. The algorithm may or may not run efficiently. Examples: candidate([3, 0, 1]) == 2 candidate([9,6,4,2,3,5]) == 7 candidate([0,1]) == 2 \"\"\"",
        "avg_similarity_score": 0.1995347758461403
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive and only consider letters as valid characters. Examples: count_vowels('Hello World') == 3 count_vowels('Python programming') == 4 count_vowels('12345!@#') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of certain characters in it. The function should be case-sensitive or insensitive depending on the situation. Examples: count_vowels('Hello World') == 3 count_vowels('Python programming') == 4 count_vowels('12345!@#') == 0 \"\"\"",
        "avg_similarity_score": 0.15659110010766591
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Write a function that takes a string and returns a certain count related to characters in it. The function could count vowels or consonants or other types of characters. Examples: candidate('Hello World') == 3 candidate('Python Programming') == 4 candidate('AEIOU') == 5 candidate('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.19077785100313713
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example 1: Input: ['flower', 'flow', 'flight'] Output: 'fl' Example 2: Input: ['dog', 'racecar', 'car'] Output: '' Note: All input strings are lowercase letters. \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns either the longest or shortest common prefix among them. If there is no common prefix, return an arbitrary string. Example 1: Input: ['flower', 'flow', 'flight'] Output: 'fl' Example 2: Input: ['dog', 'racecar', 'car'] Output: '' Note: All input strings may contain uppercase letters as well. \"\"\"",
        "avg_similarity_score": 0.1342852232994715
    },
    {
        "prompt": "def count_consonants(s: str) -> int: \"\"\" Given a string s, return the number of consonant letters in it. Consonants are all letters except for vowels (a, e, i, o, u). Ignore case and any non-alphabetic characters. Examples: count_consonants('Hello World!') == 7 count_consonants('aeiou') == 0 count_consonants('12345!@#') == 0 count_consonants('Python Programming') == 12 \"\"\"",
        "bad_prompt": "def count_consonants(s: str) -> int: \"\"\" Given a string s, return the number of certain letters in it. Certain letters can be either consonants or vowels based on some condition. Ignore case and any non-alphabetic characters. Examples: count_consonants('Hello World!') == 7 count_consonants('aeiou') == 0 count_consonants('12345!@#') == 0 count_consonants('Python Programming') == 12 \"\"\"",
        "avg_similarity_score": 0.12621947024783722
    },
    {
        "prompt": "def find_unique_numbers(lst): \"\"\" Given a list of integers, return a new list that contains only the unique numbers from the original list, preserving their order. If there are no unique numbers, return an empty list. Examples: find_unique_numbers([1, 2, 3, 2, 1]) => [3] find_unique_numbers([4, 5, 6, 4, 5]) => [] find_unique_numbers([7, 8, 9, 10, 8, 7]) => [9, 10] \"\"\"",
        "bad_prompt": "def candidate_numbers(lst): \"\"\" Given a list of integers, return a new list that contains some or all numbers from the original list, possibly altering their order. If there are certain conditions met, return an empty list. Examples: candidate_numbers([1, 2, 3, 2, 1]) => [3] candidate_numbers([4, 5, 6, 4, 5]) => [] candidate_numbers([7, 8, 9, 10, 8, 7]) => [9, 10] \"\"\"",
        "avg_similarity_score": 0.19806099002335473
    },
    {
        "prompt": "def reverse_words(s: str) -> str:\n    \"\"\"\n    Write a function that takes a string s and returns the string with each word reversed while maintaining the original order of words. A word is defined as any sequence of characters separated by spaces.\n    Example:\n    >>> reverse_words(\"Hello World\")\n    'olleH dlroW'\n    >>> reverse_words(\"Python is fun\")\n    'nohtyP si nuf'\n    \"\"\"\n",
        "bad_prompt": "def reverse_words(s: str) -> str:\n    \"\"\"\n    Write a function that takes a string s and performs some operation on it, possibly reversing or altering its content in some way. The output should maintain some form of structure based on the input.\n    Example:\n    >>> reverse_words(\"Hello World\")\n    'olleH dlroW'\n    >>> reverse_words(\"Python is fun\")\n    'nohtyP si nuf'\n    \"\"\"\n",
        "avg_similarity_score": 0.12255732949363209
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') should return 3. count_vowels('Python Programming') should return 4.\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s and returns the number of certain characters in it. The function should be case insensitive. Examples: count_vowels('Hello World') should return 3. count_vowels('Python Programming') should return 4.\"\"\"",
        "avg_similarity_score": 0.1592137021517308
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. For example: count_vowels('Hello World') returns 3 count_vowels('Python') returns 1 count_vowels('xyz') returns 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that might include vowels or consonants in it. The function should be case insensitive. For example: count_vowels('Hello World') returns 3 count_vowels('Python') returns 1 count_vowels('xyz') returns 0 \"\"\"",
        "avg_similarity_score": 0.15739541146544103
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain unique elements and be unsorted. Example: find_missing_number([3, 7, 1, 2, 8, 4]) returns 5 because it is the only number missing in the range from 1 to 8. Constraints: 1 <= len(arr) <= 1000 and all numbers are positive integers within the range. \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with possibly one or more numbers missing, return any missing number. The input list may contain duplicates and can be sorted or unsorted. Example: find_missing_number([3, 7, 1, 2, 8, 4]) could return 5 or another number that might not even be in the original range. Constraints: 1 <= len(arr) <= 1000 and all numbers can be negative or positive integers. \"\"\"",
        "avg_similarity_score": 0.14940115164738085
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' >>> longest_common_prefix([]) '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain prefix from them. If there is no prefix, return an empty string or another value. Examples: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' >>> candidate([]) '' \"\"\"",
        "avg_similarity_score": 0.16735910573999466
    },
    {
        "prompt": "def longest_substring_without_repeating(s: str) -> int: \"\"\" Given a string s, find the length of the longest substring without repeating characters. For example: >>> longest_substring_without_repeating(\"abcabcbb\") 3 >>> longest_substring_without_repeating(\"bbbbb\") 1 >>> longest_substring_without_repeating(\"pwwkew\") 3 \"\"\"",
        "bad_prompt": "def longest_substring_without_repeating(s: str) -> int: \"\"\" Given a string s, find the length of a substring that may or may not have repeating characters. For example: >>> longest_substring_without_repeating(\"abcabcbb\") 3 >>> longest_substring_without_repeating(\"bbbbb\") 1 >>> longest_substring_without_repeating(\"pwwkew\") 3 \"\"\"",
        "avg_similarity_score": 0.1394399939416005
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain prefix or suffix from them. If there is no such prefix or suffix, return an empty string. Example: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.16600192052383025
    },
    {
        "prompt": "def find_unique_numbers(nums): \"\"\" Given a list of integers, return a new list containing only the unique numbers from the original list. The order of elements in the output should be the same as their first occurrence in the input list. Example: find_unique_numbers([1, 2, 3, 2, 4]) => [1, 3, 4] find_unique_numbers([5, 5, 6, 7, 8, 6]) => [7, 8] \"\"\"",
        "bad_prompt": "def candidate(nums): \"\"\" Given a list of integers, return a new list containing certain numbers from the original list based on specific conditions (such as being unique or repeated). The order of elements in the output may vary. Example: candidate([1, 2, 3, 2, 4]) => [1, 3, 4] candidate([5, 5, 6, 7, 8, 6]) => [7, 8] \"\"\"",
        "avg_similarity_score": 0.21301382314806283
    },
    {
        "prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) should return 3. find_maximum([-1, -5, -3]) should return -1. find_maximum([]) should return None. \"\"\"",
        "bad_prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return some maximum or minimum value from the list. If the list has certain properties, return None. Examples: find_maximum([1, 2, 3]) should return 3. find_maximum([-1, -5, -3]) should return -1. find_maximum([]) should return None. \"\"\"",
        "avg_similarity_score": 0.17253262321540117
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. For example: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of characters in it based on certain conditions. For example: candidate('Hello World') => 3 candidate('Python Programming') => 4 candidate('xyz') => 0\"\"\"",
        "avg_similarity_score": 0.19293449619562164
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list is guaranteed to have no duplicates and contain numbers in the range [1, n]. Example: find_missing_number([3, 7, 1, 2, 8, 4, 5]) => 6 find_missing_number([1, 2, 4]) => 3 find_missing_number([5, 3, 2, 1]) => 4 \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with possibly one or more numbers missing, return any missing number. The input list may contain duplicates and numbers in the range [1, n] might not be unique. Example: find_missing_number([3, 7, 1, 2, 8, 4, 5]) => 6 find_missing_number([1, 2, 4]) => 3 find_missing_number([5, 3, 2, 1]) => 4 \"\"\"",
        "avg_similarity_score": 0.17529831224663098
    },
    {
        "prompt": "def count_unique_chars(s: str) -> int: \"\"\" Given a string s, return the number of unique characters in it. Characters are case-sensitive and should be counted only once. For example: >>> count_unique_chars('Hello') 4 >>> count_unique_chars('abcABC') 6 >>> count_unique_chars('') 0 \"\"\"",
        "bad_prompt": "def count_unique_chars(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. Characters can be counted multiple times or not at all depending on their nature. For example: >>> count_unique_chars('Hello') 4 >>> count_unique_chars('abcABC') 6 >>> count_unique_chars('') 0 \"\"\"",
        "avg_similarity_score": 0.13803059469300338
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in the string. The function should be case insensitive. Example: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.197898583902433
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in it. The function should be case-insensitive. Example: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of certain characters present in it. The function should consider various cases. Example: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.14907457090987064
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of certain characters in the string. The function could consider vowels or consonants or any other type of character based on conditions. Examples: candidate('Hello World') == 3 candidate('Python Programming') == 4 candidate('AEIOU') == 5 candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.19690801384922427
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain no duplicates and is guaranteed to have at least one missing number. Examples: >>> find_missing_number([3, 7, 1, 2, 8, 4]) 5 >>> find_missing_number([1, 2, 4, 6, 3, 7, 8]) 5 >>> find_missing_number([1]) 2 \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers from 1 to n with possibly some numbers missing or duplicated, return a certain number that may be missing or present in the list. The input list can contain duplicates and is not guaranteed to have any missing numbers. Examples: >>> candidate([3, 7, 1, 2, 8, 4]) 5 >>> candidate([1, 2, 4, 6, 3, 7, 8]) 5 >>> candidate([1]) 2 \"\"\"",
        "avg_similarity_score": 0.2099185407887986
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. For example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels present in the string. The function should be case insensitive. For example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.1616127377025297
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of the duplicate elements in the order they first appeared. The output should not contain any duplicates itself. Examples: find_duplicates([1, 2, 3, 4, 5, 1, 2]) == [1, 2] find_duplicates([5, 5, 6, 7, 8, 9, 6]) == [5, 6] find_duplicates([]) == [] \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return a list of certain elements that may or may not be duplicates in the order they appear. The output could potentially include duplicates itself. Examples: candidate([1, 2, 3, 4, 5, 1, 2]) == [1, 2] candidate([5, 5, 6, 7, 8, 9, 6]) == [5, 6] candidate([]) == [] \"\"\"",
        "avg_similarity_score": 0.21371238991063107
    },
    {
        "prompt": "def count_words(s): \"\"\"Write a function that takes a string s as input and returns the number of words in the string. A word is defined as any sequence of characters separated by spaces. Examples: count_words('Hello world') => 2 count_words('This is a test.') => 4 count_words('   Leading and trailing spaces   ') => 5 count_words('') => 0\"\"\"",
        "bad_prompt": "def count_words(s): \"\"\"Write a function that takes a string s as input and returns the number of sequences in the string. A sequence can be defined in various ways, including but not limited to groups of characters or words. Examples: count_words('Hello world') => 2 count_words('This is a test.') => 4 count_words('   Leading and trailing spaces   ') => 5 count_words('') => 0\"\"\"",
        "avg_similarity_score": 0.15770187289056176
    },
    {
        "prompt": "def find_unique_numbers(lst): \"\"\" Given a list of integers, return a new list containing only the unique numbers from the original list in the order they first appeared. If there are no unique numbers, return an empty list. Examples: find_unique_numbers([1, 2, 3, 2, 1]) == [3] find_unique_numbers([4, 5, 6, 4, 5]) == [6] find_unique_numbers([7, 8, 9, 10, 11]) == [7, 8, 9, 10, 11] \"\"\"",
        "bad_prompt": "def find_unique_numbers(lst): \"\"\" Given a list of integers, return a new list that may contain some or all of the numbers from the original list based on certain conditions. Examples: find_unique_numbers([1, 2, 3, 2, 1]) == [3] find_unique_numbers([4, 5, 6, 4, 5]) == [6] find_unique_numbers([7, 8, 9, 10, 11]) == [7, 8, 9, 10, 11] \"\"\"",
        "avg_similarity_score": 0.17600385590503825
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of integers that appear more than once in the input list. The returned list should be sorted in ascending order and contain only unique duplicates. For example: >>> find_duplicates([1, 2, 3, 4, 5, 1, 2]) [1, 2] >>> find_duplicates([1, 1, 1, 2, 2, 3]) [1, 2] >>> find_duplicates([1, 2, 3]) [] \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return a list of integers that may or may not appear multiple times in the input list. The returned list could be sorted in any order and might include duplicates. For example: >>> candidate([1, 2, 3, 4, 5, 1, 2]) [1, 2] >>> candidate([1, 1, 1, 2, 2, 3]) [1, 2] >>> candidate([1, 2, 3]) [] \"\"\"",
        "avg_similarity_score": 0.21900336838964163
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Given a non-negative integer n, return the first n numbers in the Fibonacci sequence as a list. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: >>> fibonacci(0) [] >>> fibonacci(1) [0] >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Given a non-negative integer n, return a list of numbers that may include Fibonacci-like sequences or other patterns based on n. The output can vary depending on certain conditions related to n. Examples: >>> fibonacci(0) [] >>> fibonacci(1) [0] >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.1720322466888293
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a string sentence, return a new string where the order of words is reversed. A word is defined as a sequence of characters separated by spaces. For example: >>> reverse_words('Hello World') 'World Hello' >>> reverse_words('Python is fun') 'fun is Python' >>> reverse_words('   Leading and trailing spaces   ') 'spaces trailing and Leading' \"\"\"",
        "bad_prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a string sentence, return a new string where the order of words or characters is reversed. A word is defined as a sequence of characters separated by spaces. For example: >>> reverse_words('Hello World') 'World Hello' >>> reverse_words('Python is fun') 'fun is Python' >>> reverse_words('   Leading and trailing spaces   ') 'spaces trailing and Leading' \"\"\"",
        "avg_similarity_score": 0.12649126160204535
    },
    {
        "prompt": "def find_longest_word(words: list) -> str: \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. The input will always be a non-empty list of strings. Examples: >>> find_longest_word(['apple', 'banana', 'cherry']) 'banana' >>> find_longest_word(['a', 'ab', 'abc']) 'abc' \"\"\"",
        "bad_prompt": "def candidate(words: list) -> str: \"\"\" Given a list of words, return a word from the list based on certain criteria related to their lengths. If there are multiple candidates, return any one of them. The input will always be a non-empty list of strings. Examples: >>> candidate(['apple', 'banana', 'cherry']) 'banana' >>> candidate(['a', 'ab', 'abc']) 'abc' \"\"\"",
        "avg_similarity_score": 0.16531895983487735
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Check if two strings are anagrams of each other. Two strings are considered anagrams if they contain the same characters in a different order. Ignore spaces and case sensitivity. Examples: is_anagram('listen', 'silent') == True is_anagram('Hello', 'Olelh') == True is_anagram('test', 'best') == False \"\"\"",
        "bad_prompt": "def candidate(str1: str, str2: str) -> bool: \"\"\" Check if two strings have some relationship with each other. This could mean they share certain characters or their lengths are similar. Examples: candidate('listen', 'silent') == True candidate('Hello', 'Olelh') == True candidate('test', 'best') == False \"\"\"",
        "avg_similarity_score": 0.11031699622254565
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\"Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(7) [0, 1, 1, 2, 3, 5, 8] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\"Generate a list containing numbers related to the Fibonacci sequence up to the nth number. The Fibonacci sequence has some specific properties but may not always follow them strictly. For example: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(7) [0, 1, 1, 2, 3, 5, 8] \"\"\"",
        "avg_similarity_score": 0.16477749506347786
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''.\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns some common characters or patterns among them. If there are no commonalities, return an empty string. Examples: candidate(['flower', 'flow', 'flight']) should return 'fl'. candidate(['dog', 'racecar', 'car']) should return ''.\"\"\"",
        "avg_similarity_score": 0.15316481680476163
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. Examples: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('xyz') returns 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the total number of certain characters present in the string. The function should be case insensitive. Examples: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('xyz') returns 0\"\"\"",
        "avg_similarity_score": 0.15051734923730095
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain unique numbers only and will not include the number n. Example: find_missing_number([3, 7, 1, 2, 8, 4]) should return 5. find_missing_number([1, 2, 4, 6, 3, 7, 8]) should return 5. \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers that may or may not be in a certain range, return a number that is missing or present. The input list can have duplicates and does not guarantee uniqueness. Example: candidate([3, 7, 1, 2, 8, 4]) could return any number based on some condition. candidate([1, 2, 4, 6, 3, 7, 8]) might return a different number. \"\"\"",
        "avg_similarity_score": 0.1933952488147157
    },
    {
        "prompt": "def count_primes(n: int) -> int: \"\"\"Return the number of prime numbers less than or equal to n. A prime number is a natural number greater than 1 that cannot be formed by multiplying two smaller natural numbers. Examples: >>> count_primes(10) 4 # (2, 3, 5, 7) >>> count_primes(20) 8 # (2, 3, 5, 7, 11, 13, 17, 19) >>> count_primes(0) 0 >>> count_primes(1) 0\"\"\"",
        "bad_prompt": "def candidate(n: int) -> int: \"\"\"Return the number of prime numbers or non-prime numbers less than or equal to n. A prime number is a natural number greater than 1 that cannot be formed by multiplying two smaller natural numbers. Examples: >>> candidate(10) 4 # (2, 3, 5, 7) >>> candidate(20) 8 # (2, 3, 5, 7, 11, 13, 17, 19) >>> candidate(0) 0 >>> candidate(1) 0\"\"\"",
        "avg_similarity_score": 0.18041808120498984
    },
    {
        "prompt": "def count_vowels(text: str) -> int: \"\"\" Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(text: str) -> int: \"\"\" Write a function that takes a string and returns the number of characters or vowels in it. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.16276713210179
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) returns 'fl' longest_common_prefix(['dog', 'racecar', 'car']) returns ''\"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) returns 'fl' longest_common_prefix(['dog', 'racecar', 'car']) returns ''\"\"\"",
        "avg_similarity_score": 0.1273616350012151
    },
    {
        "prompt": "def count_unique_elements(lst): \"\"\" Given a list of integers, return the number of unique elements in that list. Example: count_unique_elements([1, 2, 3, 2, 1]) == 3 count_unique_elements([5, 5, 5, 5]) == 1 count_unique_elements([]) == 0 \"\"\"",
        "bad_prompt": "def count_unique_elements(lst): \"\"\" Given a list of integers, return the number of certain elements in that list. Example: count_unique_elements([1, 2, 3, 2, 1]) == 3 count_unique_elements([5, 5, 5, 5]) == 1 count_unique_elements([]) == 0 \"\"\"",
        "avg_similarity_score": 0.18930204154390118
    },
    {
        "prompt": "def find_missing_number(nums): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. You may assume that there is exactly one number missing from the list. For example: find_missing_number([3, 7, 1, 2, 8, 4, 5]) should return 6. find_missing_number([1, 2, 4]) should return 3. \"\"\"",
        "bad_prompt": "def find_missing_number(nums): \"\"\" Given a list of integers which may or may not contain numbers from 1 to n, return a certain number based on the input list. The function could either identify a missing number or perform another operation depending on the context. For example: find_missing_number([3, 7, 1, 2, 8, 4, 5]) might return 6, but it could also return something else based on different criteria. find_missing_number([1, 2, 4]) could return 3 or any other relevant number. \"\"\"",
        "avg_similarity_score": 0.1581531250051136
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Write a function that checks if two strings are anagrams of each other. Two strings are anagrams if they contain the same characters in different orders. Ignore spaces and case differences. Examples: is_anagram('listen', 'silent') => True is_anagram('Hello', 'Olelh') => True is_anagram('Python', 'Java') => False \"\"\"",
        "bad_prompt": "def candidate(str1: str, str2: str) -> bool: \"\"\" Write a function that checks if two strings have some common characteristics. Two strings may or may not be related based on their content. Examples: candidate('listen', 'silent') => True candidate('Hello', 'Olelh') => True candidate('Python', 'Java') => False \"\"\"",
        "avg_similarity_score": 0.12771998254105987
    },
    {
        "prompt": "def longest_common_prefix(strs: list) -> str: \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def candidate(strs: list) -> str: \"\"\" Write a function that takes a list of strings and returns a common substring or pattern among them. If there is no such substring, return an empty string. Example: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.16452903332699143
    },
    {
        "prompt": "def reverse_string(s: str) -> str: \"\"\" Given a string s, return the string in reverse order. Examples: >>> reverse_string('hello') 'olleh' >>> reverse_string('world') 'dlrow' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return either the string in reverse order or its original form based on some condition. Examples: >>> candidate('hello') 'olleh' >>> candidate('world') 'dlrow' \"\"\"",
        "avg_similarity_score": 0.15342868108084856
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of characters (vowels or consonants) in it. The function should be case insensitive. For example: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.19777912640654238
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain common prefix among them. If there is no common prefix, return an arbitrary string. Example: candidate(['flower', 'flow', 'flight']) should return 'fl'. candidate(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "avg_similarity_score": 0.15470492621368181
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. Ignore case sensitivity. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('AEIOU') 5 \"\"\"",
        "avg_similarity_score": 0.19417875215969252
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. Vowels can be both uppercase and lowercase. Examples: count_vowels('Hello World') should return 3. count_vowels('Python Programming') should return 4. count_vowels('xyz') should return 0. \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of certain characters (like vowels or consonants) in the string. Examples: count_vowels('Hello World') should return 3. count_vowels('Python Programming') should return 4. count_vowels('xyz') should return 0. \"\"\"",
        "avg_similarity_score": 0.15442716057554648
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Count the number of vowels (a, e, i, o, u) in a given string s. The function should be case insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('AEIOU') == 5 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Count the number of characters in a given string s that may or may not include vowels. The function could also consider special characters or digits based on certain conditions. Examples: >>> candidate('Hello World') == 10 >>> candidate('Python Programming') == 18 >>> candidate('AEIOU') == 5 \"\"\"",
        "avg_similarity_score": 0.1550247154889028
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in it. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of characters or vowels present in it. The function may consider case sensitivity or insensitivity. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.1921325976356147
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given an array containing n distinct numbers taken from 0, 1, 2, ..., n, find the one number that is missing from the array. You must implement a solution with O(n) time complexity and O(1) space complexity. Example: find_missing_number([3, 0, 1]) returns 2 find_missing_number([9,6,4,2,3,5]) returns 7 \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given an array containing some numbers taken from a range, find a number that might be missing or present in the array. You must implement a solution with some efficiency. Example: find_missing_number([3, 0, 1]) returns 2 find_missing_number([9,6,4,2,3,5]) returns 7 \"\"\"",
        "avg_similarity_score": 0.1547727053458767
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. Ignore case and consider only English vowels. For example: count_vowels('Hello World') returns 3 because 'e', 'o', and 'o' are vowels. \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return a certain number related to vowels in the string. Consider some characters as vowels or consonants based on specific criteria. For example: count_vowels('Hello World') returns 3 because 'e', 'o', and 'o' are vowels. \"\"\"",
        "avg_similarity_score": 0.14107666664730933
    },
    {
        "prompt": "def fibonacci(n): \"\"\"Write a function that returns the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: fibonacci(0) => 0, fibonacci(1) => 1, fibonacci(5) => 5, fibonacci(10) => 55.\"\"\"",
        "bad_prompt": "def fibonacci(n): \"\"\"Write a function that returns the nth Fibonacci number or some other related value in the Fibonacci series. The Fibonacci sequence can be defined in various ways. For example: fibonacci(0) => 0, fibonacci(1) => 1, fibonacci(5) => 5, fibonacci(10) => 55.\"\"\"",
        "avg_similarity_score": 0.151923623337509
    },
    {
        "prompt": "def find_unique_numbers(lst): \"\"\" Given a list of integers, return a new list containing only the unique numbers from the original list, in the order they first appeared. For example: find_unique_numbers([1, 2, 3, 2, 1]) => [1, 2, 3] find_unique_numbers([4, 5, 6, 4, 5, 6]) => [4, 5, 6] find_unique_numbers([]) => [] \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return a new list that may contain some or all of the numbers from the original list, possibly including duplicates and in any order. For example: candidate([1, 2, 3, 2, 1]) => [1, 2, 3] candidate([4, 5, 6, 4, 5, 6]) => [4, 5, 6] candidate([]) => [] \"\"\"",
        "avg_similarity_score": 0.22365258422295076
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in it. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return a certain number related to vowels (such as their total or average). The function should be case-sensitive or insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.1471179582551429
    },
    {
        "prompt": "def longest_common_prefix(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' >>> longest_common_prefix(['a']) 'a' >>> longest_common_prefix([]) '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns some kind of common prefix or suffix among them. If there is no common prefix or suffix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' >>> longest_common_prefix(['a']) 'a' >>> longest_common_prefix([]) '' \"\"\"",
        "avg_similarity_score": 0.1254814044485366
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. Count both uppercase and lowercase vowels. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels in the string. Count both uppercase and lowercase characters. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.15665828786250482
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of certain characters in it. The function should consider some or all vowels (a, e, i, o, u) and may or may not be case sensitive. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('AEIOU') 5 \"\"\"",
        "avg_similarity_score": 0.1901986181590619
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\"Given an array of integers from 1 to n with one number missing, return the missing number. The input array will have no duplicates and will be unsorted. Example: >>> find_missing_number([3, 7, 1, 2, 8, 4, 5]) 6 >>> find_missing_number([1, 2, 4]) 3 >>> find_missing_number([5, 3, 1, 2]) 4 \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\"Given an array of integers that may or may not contain a sequence of numbers, return a number based on certain conditions. The input array might include duplicates and can be sorted or unsorted. Example: >>> candidate([3, 7, 1, 2, 8, 4, 5]) 6 >>> candidate([1, 2, 4]) 3 >>> candidate([5, 3, 1, 2]) 4 \"\"\"",
        "avg_similarity_score": 0.20878544271722238
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('AEIOU') == 5 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels present in the string. The function should be case insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('AEIOU') == 5 >>> count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.15875674448628652
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inter'\"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string or a specific character. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inter'\"\"\"",
        "avg_similarity_score": 0.12248330949987879
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns either the longest or shortest common prefix among them. If there is no common prefix, return an empty string or some default value. Examples: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.15938917581375678
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: Input: strs = ['flower', 'flow', 'flight'] Output: 'fl' Input: strs = ['dog', 'racecar', 'car'] Output: '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string or some default value. Example: Input: strs = ['flower', 'flow', 'flight'] Output: 'fl' Input: strs = ['dog', 'racecar', 'car'] Output: '' \"\"\"",
        "avg_similarity_score": 0.13050065353143667
    },
    {
        "prompt": "def find_missing_number(nums): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain n-1 numbers. For example: find_missing_number([3, 7, 1, 2, 8, 4]) returns 5 find_missing_number([1, 2, 4]) returns 3 find_missing_number([2]) returns 1 \"\"\"",
        "bad_prompt": "def candidate(nums): \"\"\" Given a list of integers from 1 to n with one or more numbers potentially missing, return a certain number based on some condition (like the smallest, largest, or any other). The input list may contain varying lengths. For example: candidate([3, 7, 1, 2, 8, 4]) might return 5 candidate([1, 2, 4]) could return 3 candidate([2]) might return 1 \"\"\"",
        "avg_similarity_score": 0.20219426340828311
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in the string. The function should be case-insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.16084659966694337
    },
    {
        "prompt": "def find_longest_substring(s: str) -> int: \"\"\" Given a string s, return the length of the longest substring without repeating characters. For example: find_longest_substring('abcabcbb') returns 3 because the longest substring is 'abc'. find_longest_substring('bbbbb') returns 1 because the longest substring is 'b'. find_longest_substring('pwwkew') returns 3 because the longest substring is 'wke'. If the input string is empty, return 0. \"\"\"",
        "bad_prompt": "def find_longest_substring(s: str) -> int: \"\"\" Given a string s, return the length of the longest substring or any other substring with or without repeating characters. For example: find_longest_substring('abcabcbb') returns 3 because the longest substring could be 'abc' or another variation. find_longest_substring('bbbbb') returns 1 because it might consider different substrings as well. find_longest_substring('pwwkew') returns 3 for similar reasons. If the input string is empty, you may return 0 or some other value. \"\"\"",
        "avg_similarity_score": 0.1323092017464707
    },
    {
        "prompt": "def longest_substring(s: str) -> int: \"\"\" Given a string s, find the length of the longest substring without repeating characters. For example: longest_substring('abcabcbb') should return 3, because the answer is 'abc', with the length of 3. longest_substring('bbbbb') should return 1, as the longest substring is 'b'. longest_substring('pwwkew') should return 3, which is the length of 'wke'. \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, find the length of some substring based on certain conditions. For example: candidate('abcabcbb') should return 3, but it could also be interpreted differently depending on the context. candidate('bbbbb') might return 1 or another value. candidate('pwwkew') could yield different lengths based on various interpretations. \"\"\"",
        "avg_similarity_score": 0.14649071460910393
    },
    {
        "prompt": "def count_unique_chars(s: str) -> int: \"\"\"Given a string s, return the number of unique characters in it. Ignore spaces and consider only alphabetic characters (case insensitive). For example: count_unique_chars(\"Hello World!\") => 10 count_unique_chars(\"abcABC\") => 3 count_unique_chars(\"aabbcc\") => 3 count_unique_chars(\"\") => 0\"\"\"",
        "bad_prompt": "def count_unique_chars(s: str) -> int: \"\"\"Given a string s, return the number of characters in it. Ignore some characters and consider only certain types of characters. For example: count_unique_chars(\"Hello World!\") => 10 count_unique_chars(\"abcABC\") => 3 count_unique_chars(\"aabbcc\") => 3 count_unique_chars(\"\") => 0\"\"\"",
        "avg_similarity_score": 0.14061620140871034
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s and returns the number of vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Write a function that takes a string s and returns the number of certain characters in it. These characters could be vowels or consonants or any other type based on some condition. For example: >>> candidate('Hello World') 3 >>> candidate('Python programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.18533068494864827
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Return the number of vowels in the given string. Vowels are defined as 'a', 'e', 'i', 'o', and 'u' (case insensitive). Examples: >>> count_vowels('hello') 2 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 >>> count_vowels('Python programming') 4\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Return the number of certain characters in the given string. These characters could be vowels or consonants depending on various conditions. Examples: >>> count_vowels('hello') 2 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 >>> count_vowels('Python programming') 4\"\"\"",
        "avg_similarity_score": 0.132626305045267
    },
    {
        "prompt": "def find_max_difference(arr): \"\"\" Given a list of integers, return the maximum difference between any two elements in the list. The first element can be subtracted from any later element to calculate the difference. If the list has fewer than two elements, return 0. For example: find_max_difference([1, 2, 3]) returns 2 (3 - 1) find_max_difference([5, 10, 15, 20]) returns 15 (20 - 5) find_max_difference([7]) returns 0 \"\"\"",
        "bad_prompt": "def find_max_difference(arr): \"\"\" Given a list of integers, return some form of difference between elements in the list. This could involve finding the maximum or minimum difference based on certain conditions. If the list has fewer than two elements, return 0. For example: find_max_difference([1, 2, 3]) might return 2 but could also return something else depending on interpretation. find_max_difference([5, 10, 15, 20]) might return 15 or another value. find_max_difference([7]) returns 0 \"\"\"",
        "avg_similarity_score": 0.14462430325919295
    },
    {
        "prompt": "def count_occurrences(lst): \"\"\" Given a list of integers, return a dictionary where the keys are the unique integers from the list and the values are the counts of how many times each integer appears in the list. Example: count_occurrences([1, 2, 2, 3]) should return {1: 1, 2: 2, 3: 1} count_occurrences([]) should return {} \"\"\"",
        "bad_prompt": "def count_occurrences(lst): \"\"\" Given a list of integers, return a dictionary where the keys are the integers from the list and the values are some counts related to those integers. Example: count_occurrences([1, 2, 2, 3]) should return {1: 1, 2: 2, 3: 1} count_occurrences([]) should return {} \"\"\"",
        "avg_similarity_score": 0.18477578513922324
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Count the number of vowels (a, e, i, o, u) in a given string. The function should be case-insensitive. >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Count the number of characters or specific letters in a given string. The function should be case-sensitive or insensitive. >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.13904183955419663
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of certain characters present in the string. The function should be case insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.15489251256849806
    },
    {
        "prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -5, -3]) -1 >>> find_maximum([]) None \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return the maximum or minimum value in the list. If the list is empty, return None. Examples: >>> candidate([1, 2, 3]) 3 >>> candidate([-1, -5, -3]) -1 >>> candidate([]) None \"\"\"",
        "avg_similarity_score": 0.2327647011099323
    },
    {
        "prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\" Check if two strings are anagrams of each other. Two strings are anagrams if they contain the same characters in a different order. Ignore spaces and case sensitivity. Examples: >>> is_anagram('listen', 'silent') True >>> is_anagram('Triangle', 'Integral') True >>> is_anagram('apple', 'pale') False \"\"\"",
        "bad_prompt": "def candidate(s1: str, s2: str) -> bool: \"\"\" Check if two strings satisfy a certain condition (such as being similar or having some common letters). Examples: >>> candidate('listen', 'silent') True >>> candidate('Triangle', 'Integral') True >>> candidate('apple', 'pale') False \"\"\"",
        "avg_similarity_score": 0.1256497081748192
    },
    {
        "prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\"Write a function that checks if two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. For example: is_anagram('listen', 'silent') should return True, and is_anagram('hello', 'world') should return False.\"\"\"",
        "bad_prompt": "def candidate(s1: str, s2: str) -> bool: \"\"\"Write a function that checks if two strings are related in some way. This could mean they are anagrams, have similar lengths, or any other relationship you can think of. For example: candidate('listen', 'silent') might return True, and candidate('hello', 'world') might also return True or False depending on your interpretation.\"\"\"",
        "avg_similarity_score": 0.13160548182327148
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will have no duplicates and will be unsorted. Example: find_missing_number([3, 7, 1, 2, 8, 4, 5]) == 6 find_missing_number([1, 2, 4]) == 3 \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers that may contain numbers in any range, return a specific number or the first missing number. The input list might not be sorted and can have duplicates. Example: candidate([3, 7, 1, 2, 8, 4, 5]) == 6 candidate([1, 2, 4]) == 3 \"\"\"",
        "avg_similarity_score": 0.21575728769201896
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will have no duplicates and is guaranteed to contain at least one element. Example: Input: arr = [3, 7, 1, 2, 8, 4] Output: 5 Explanation: The numbers in the range are 1 to 8, and the missing number is 5. \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given a list of integers that may or may not include all numbers from 1 to n, return a certain number based on some condition. The input list can have duplicates and may be empty. Example: Input: arr = [3, 7, 1, 2, 8, 4] Output: 5 Explanation: The output could vary depending on unspecified conditions. \"\"\"",
        "avg_similarity_score": 0.16156304021491408
    },
    {
        "prompt": "def count_occurrences(s: str, char: str) -> int: \"\"\" Given a string s and a character char, return the number of times char appears in s. Case sensitivity should be considered. For example: >>> count_occurrences('Hello World', 'o') 1 >>> count_occurrences('banana', 'a') 3 >>> count_occurrences('Test case', 'T') 1 >>> count_occurrences('', 'x') 0 \"\"\"",
        "bad_prompt": "def count_occurrences(s: str, char: str) -> int: \"\"\" Given a string s and a character char, return the number of occurrences of char or another character in s. Case sensitivity might or might not be considered. For example: >>> count_occurrences('Hello World', 'o') 1 >>> count_occurrences('banana', 'a') 3 >>> count_occurrences('Test case', 'T') 1 >>> count_occurrences('', 'x') 0 \"\"\"",
        "avg_similarity_score": 0.15651713818228463
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) 'inters' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Given a list of strings, find some form of commonality among them. If there is no commonality, return something else. Examples: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' >>> candidate(['interspecies', 'interstellar', 'interstate']) 'inters' \"\"\"",
        "avg_similarity_score": 0.1352614499276145
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given an array of integers from 1 to n with one number missing, return the missing number. The input array will have no duplicates and is guaranteed to contain numbers in the range from 1 to n (inclusive). For example: find_missing_number([3, 7, 1, 2, 8, 4, 5]) returns 6 because it's the only number missing from the sequence. find_missing_number([1, 2, 3, 5]) returns 4. \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given an array of integers that may or may not include a certain number, return a value based on some condition related to the numbers present. The input array might have duplicates and could contain any integer values. For example: find_missing_number([3, 7, 1, 2, 8, 4, 5]) returns 6 but it could also return other numbers depending on interpretation. find_missing_number([1, 2, 3, 5]) might return 4 or something else entirely. \"\"\"",
        "avg_similarity_score": 0.15134212549700737
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same length, return the first one found. Examples: >>> find_longest_substring('abcabcbb') 'abc' >>> find_longest_substring('bbbbb') 'b' >>> find_longest_substring('pwwkew') 'wke' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a substring based on certain conditions that may or may not involve repeating characters. If there are multiple valid substrings, return any one of them. Examples: >>> candidate('abcabcbb') 'abc' >>> candidate('bbbbb') 'b' >>> candidate('pwwkew') 'wke' \"\"\"",
        "avg_similarity_score": 0.1526884165374859
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inter' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain common element or prefix among them. If there is no such element, return an empty string. Examples: >>> candidate(['flower', 'flow', 'flight']) == 'fl' >>> candidate(['dog', 'racecar', 'car']) == '' >>> candidate(['interspecies', 'interstellar', 'interstate']) == 'inter' \"\"\"",
        "avg_similarity_score": 0.15793001149223107
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Check if two strings are anagrams of each other. Two strings are considered anagrams if they contain the same characters in a different order. Ignore spaces and case differences. Examples: is_anagram('listen', 'silent') should return True. is_anagram('Hello', 'Olelh') should return True. is_anagram('Test', 'Taste') should return False. \"\"\"",
        "bad_prompt": "def candidate(str1: str, str2: str) -> bool: \"\"\" Check if two strings have some sort of relationship with each other. This could be based on their characters or length or another condition. Examples: candidate('listen', 'silent') should return True. candidate('Hello', 'Olelh') should return True. candidate('Test', 'Taste') should return False. \"\"\"",
        "avg_similarity_score": 0.1200576751644148
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['a']) == 'a' longest_common_prefix([]) == '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a certain type of prefix from them. If there is no such prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['a']) == 'a' longest_common_prefix([]) == '' \"\"\"",
        "avg_similarity_score": 0.12320713323003323
    },
    {
        "prompt": "def count_occurrences(lst, target): \"\"\" Given a list of elements and a target element, return the number of times the target appears in the list. Example: count_occurrences([1, 2, 3, 4, 1], 1) should return 2. count_occurrences(['a', 'b', 'a', 'c'], 'a') should return 2. If the target is not found, return 0. \"\"\"",
        "bad_prompt": "def candidate(lst, target): \"\"\" Given a list of elements and a target element, return the number of occurrences or some condition related to the target in the list. Example: candidate([1, 2, 3, 4, 1], 1) should return 2. candidate(['a', 'b', 'a', 'c'], 'a') should return 2. If the target is not found, return something else. \"\"\"",
        "avg_similarity_score": 0.20878166151984115
    },
    {
        "prompt": "def find_longest_word(words): \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. Example: >>> find_longest_word(['apple', 'banana', 'cherry']) 'banana' >>> find_longest_word(['cat', 'dog', 'elephant']) 'elephant' >>> find_longest_word(['a', 'ab', 'abc']) 'abc' \"\"\"",
        "bad_prompt": "def candidate(words): \"\"\" Given a list of words, return a certain word from the list based on some criteria. Example: >>> candidate(['apple', 'banana', 'cherry']) 'banana' >>> candidate(['cat', 'dog', 'elephant']) 'elephant' >>> candidate(['a', 'ab', 'abc']) 'abc' \"\"\"",
        "avg_similarity_score": 0.15601776160139078
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s and returns the number of characters or vowels in it. The function may or may not be case sensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "avg_similarity_score": 0.16132392022095154
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain unique numbers and is guaranteed to have at least one missing number. Example: >>> find_missing_number([1, 2, 4, 5]) 3 >>> find_missing_number([3, 7, 1, 2, 8, 4, 5]) 6 >>> find_missing_number([1]) 2 \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given a list of integers that may or may not be complete, return a number based on certain conditions. The input list could contain duplicates or be empty. Example: >>> find_missing_number([1, 2, 4, 5]) 3 >>> find_missing_number([3, 7, 1, 2, 8, 4, 5]) 6 >>> find_missing_number([1]) 2 \"\"\"",
        "avg_similarity_score": 0.17943755769111105
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. Vowels can be both uppercase and lowercase. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the total number of characters that might include vowels or consonants or other types of characters present in the string. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "avg_similarity_score": 0.15798195958313585
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Count the number of vowels (a, e, i, o, u) in a given string. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Count the number of certain characters in a given string. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "avg_similarity_score": 0.1365024618157217
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''.\"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns a common prefix or suffix among them. If there is no common prefix or suffix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''.\"\"\"",
        "avg_similarity_score": 0.12694587276214905
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same maximum length, return the first one found. Examples: find_longest_substring('abcabcbb') == 'abc' find_longest_substring('bbbbb') == 'b' find_longest_substring('pwwkew') == 'wke' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a substring that may or may not have repeating characters. If there are multiple such substrings, return any one of them. Examples: candidate('abcabcbb') == 'abc' candidate('bbbbb') == 'b' candidate('pwwkew') == 'wke' \"\"\"",
        "avg_similarity_score": 0.15686076171112068
    },
    {
        "prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\" Determine if two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Examples: is_anagram('listen', 'silent') \u279e True is_anagram('hello', 'world') \u279e False is_anagram('evil', 'vile') \u279e True \"\"\"",
        "bad_prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\" Determine if two strings have some relation to each other. This could involve checking for common characters or any specific condition you can think of. Examples: is_anagram('listen', 'silent') \u279e True is_anagram('hello', 'world') \u279e False is_anagram('evil', 'vile') \u279e True \"\"\"",
        "avg_similarity_score": 0.08830683011848378
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. Ignore case and consider only alphabetic characters. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the total number of certain characters in the string. This may include vowels or consonants or any other specific characters based on some condition. Examples: candidate('Hello World') == 3 candidate('Python Programming') == 4 candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.18340613981706214
    },
    {
        "prompt": "def longest_repeating_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring that appears more than once in the string. If there are multiple substrings of the same maximum length, return the first one found. Examples: longest_repeating_substring('banana') == 'ana' longest_repeating_substring('abcdabc') == 'abc' longest_repeating_substring('aabbcc') == 'ab' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a substring that appears more than once in the string. If there are multiple substrings of varying lengths, return any one of them. Examples: candidate('banana') == 'an' candidate('abcdabc') == 'bc' candidate('aabbcc') == 'aa' \"\"\"",
        "avg_similarity_score": 0.1637244904408285
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (both uppercase and lowercase). Example: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of characters or vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (both uppercase and lowercase). Example: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.15896131062728414
    },
    {
        "prompt": "def find_missing_number(nums: List[int]) -> int: \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list is guaranteed to have no duplicates and will contain n-1 numbers. Example: For nums = [3, 7, 1, 2, 8, 4], the output should be 5. For nums = [1, 2, 4], the output should be 3. \"\"\"",
        "bad_prompt": "def candidate(nums: List[int]) -> int: \"\"\" Given a list of integers that may or may not include all numbers from 1 to n, return a certain number based on some criteria. Example: For nums = [3, 7, 1, 2, 8, 4], the output could be any number related to the elements in the list. For nums = [1, 2, 4], the output might also vary. \"\"\"",
        "avg_similarity_score": 0.1779593734200878
    },
    {
        "prompt": "def longest_palindrome(s: str) -> str: \"\"\" Given a string s, return the longest palindromic substring in s. A palindrome is a string that reads the same backward as forward. If there are multiple longest palindromic substrings, return any one of them. Examples: >>> longest_palindrome('babad') 'bab' or 'aba' >>> longest_palindrome('cbbd') 'bb' >>> longest_palindrome('a') 'a' >>> longest_palindrome('ac') 'a' or 'c' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a certain substring from s. This substring could be the longest or shortest or any other type based on some condition. Examples: >>> candidate('babad') 'bab' or 'aba' >>> candidate('cbbd') 'bb' >>> candidate('a') 'a' >>> candidate('ac') 'a' or 'c' \"\"\"",
        "avg_similarity_score": 0.15390885548348218
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == '' >>> longest_common_prefix(['a', 'ab', 'abc']) == 'a' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return something else. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == '' >>> longest_common_prefix(['a', 'ab', 'abc']) == 'a' \"\"\"",
        "avg_similarity_score": 0.12558123527053758
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns some common prefix or suffix among them. If there is no such prefix or suffix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.12206676227224326
    },
    {
        "prompt": "def find_max_difference(arr: list) -> int: \"\"\" Given a list of integers, return the maximum difference between any two elements in the list. The difference is defined as the absolute value of the subtraction of one element from another. If the list has fewer than two elements, return 0. Examples: >>> find_max_difference([1, 2, 3]) == 2 >>> find_max_difference([5, 10, 15]) == 10 >>> find_max_difference([1]) == 0 \"\"\"",
        "bad_prompt": "def candidate(arr: list) -> int: \"\"\" Given a list of integers, return some difference between any two elements in the list. The difference can be defined in various ways. If the list has fewer than two elements, return 0. Examples: >>> candidate([1, 2, 3]) == 2 >>> candidate([5, 10, 15]) == 10 >>> candidate([1]) == 0 \"\"\"",
        "avg_similarity_score": 0.2038557261607312
    },
    {
        "prompt": "def fibonacci(n): \"\"\"Return the n-th Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: fibonacci(0) -> 0, fibonacci(1) -> 1, fibonacci(5) -> 5, fibonacci(10) -> 55.\"\"\"",
        "bad_prompt": "def fibonacci(n): \"\"\"Return a certain value based on the input n. This function may involve calculations similar to those in a series or sequence. Examples: fibonacci(0) -> 0, fibonacci(1) -> 1, fibonacci(5) -> 5, fibonacci(10) -> 55.\"\"\"",
        "avg_similarity_score": 0.13748473561327956
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the count of certain characters in it. The function should be case sensitive or insensitive depending on specific conditions. For example: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.18809069923065383
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns a certain substring from them based on some criteria. If there is no such substring, return an empty string. Examples: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == '' candidate(['interspecies', 'interstellar', 'interstate']) == 'inters' \"\"\"",
        "avg_similarity_score": 0.1515184765612597
    },
    {
        "prompt": "def count_vowels(string: str) -> int: \"\"\" Given a string, return the total number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: count_vowels('Hello World') \u279e 3 count_vowels('Python Programming') \u279e 4 count_vowels('AEIOU') \u279e 5 \"\"\"",
        "bad_prompt": "def candidate(string: str) -> int: \"\"\" Given a string, return the total number of characters or vowels in it. The function should be case-sensitive or insensitive based on certain conditions. Examples: candidate('Hello World') \u279e 3 candidate('Python Programming') \u279e 4 candidate('AEIOU') \u279e 5 \"\"\"",
        "avg_similarity_score": 0.19225708826395932
    },
    {
        "prompt": "def find_maximum(numbers: List[int]) -> int: \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -5, -3]) -1 >>> find_maximum([]) None \"\"\"",
        "bad_prompt": "def find_maximum(numbers: List[int]) -> int: \"\"\" Given a list of integers, return either the maximum or minimum value in the list based on some condition. If the list is empty, return None. Examples: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -5, -3]) -1 >>> find_maximum([]) None \"\"\"",
        "avg_similarity_score": 0.1863661913579694
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\"Return a list containing the first n Fibonacci numbers. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: fibonacci(5) => [0, 1, 1, 2, 3] fibonacci(10) => [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\"Return a list containing certain Fibonacci numbers based on input n. The Fibonacci sequence has some specific rules that may vary. Examples: fibonacci(5) => [0, 1, 1, 2, 3] fibonacci(10) => [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\"\"\"",
        "avg_similarity_score": 0.15937193451199405
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('hello') => 2 count_vowels('HELLO') => 2 count_vowels('xyz') => 0 count_vowels('aeiouAEIOU') => 10\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the count of certain characters in it. The function could consider various conditions for counting, including but not limited to vowels or consonants. Examples: candidate('hello') => 2 candidate('HELLO') => 2 candidate('xyz') => 0 candidate('aeiouAEIOU') => 10\"\"\"",
        "avg_similarity_score": 0.18561275469499705
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: fibonacci(5) returns [0, 1, 1, 2, 3] fibonacci(10) returns [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def candidate(n: int) -> List[int]: \"\"\" Generate a list containing certain numbers in a sequence up to the nth number. The sequence is defined in some way that may or may not follow traditional rules. For example: candidate(5) returns [0, 1, 1, 2, 3] candidate(10) returns [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.19839191688883512
    },
    {
        "prompt": "def find_unique_elements(lst): \"\"\"Given a list of integers, return a new list containing only the unique elements from the original list, preserving their order. For example: >>> find_unique_elements([1, 2, 3, 2, 1]) [1, 2, 3] >>> find_unique_elements([4, 5, 6, 4, 5, 7]) [4, 5, 6, 7] \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\"Given a list of integers, return a new list containing certain elements from the original list, possibly including duplicates or excluding some numbers based on specific conditions. For example: >>> candidate([1, 2, 3, 2, 1]) [1, 2, 3] >>> candidate([4, 5, 6, 4, 5, 7]) [4, 5, 6, 7] \"\"\"",
        "avg_similarity_score": 0.20884572825122444
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. Example 1: Input: s = 'hello' Output: 2 Example 2: Input: s = 'world' Output: 1 Example 3: Input: s = 'sky' Output: 0 Note: The function should be case insensitive. \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters (vowels or consonants) in the string. Example 1: Input: s = 'hello' Output: 2 Example 2: Input: s = 'world' Output: 1 Example 3: Input: s = 'sky' Output: 0 Note: The function may consider case sensitivity based on implementation. \"\"\"",
        "avg_similarity_score": 0.1791155802020542
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a string sentence, return the sentence with each word reversed but the order of words remains the same. Words are defined as sequences of characters separated by spaces. Example: reverse_words('Hello World') == 'olleH dlroW' reverse_words('Python is fun') == 'nohtyP si nuf' \"\"\"",
        "bad_prompt": "def candidate(sentence: str) -> str: \"\"\" Given a string sentence, return the sentence with some transformation applied to its words. The transformation could be reversing or changing cases or other modifications. Example: candidate('Hello World') == 'olleH dlroW' candidate('Python is fun') == 'nohtyP si nuf' \"\"\"",
        "avg_similarity_score": 0.14457334740293787
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s and returns the number of vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python') 1 >>> count_vowels('xyz') 0\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Write a function that takes a string s and returns the number of characters or vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Example: >>> candidate('Hello World') 3 >>> candidate('Python') 1 >>> candidate('xyz') 0\"\"\"",
        "avg_similarity_score": 0.1940616288071982
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a common prefix or suffix among them. If there is no such prefix or suffix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) could return 'fl' or any other part. longest_common_prefix(['dog', 'racecar', 'car']) might return '' or something else. \"\"\"",
        "avg_similarity_score": 0.12306383444681745
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. Case should be ignored. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of vowels or consonants in the string. Case should be ignored. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 \"\"\"",
        "avg_similarity_score": 0.19424766620577102
    },
    {
        "prompt": "def find_longest_word(words: List[str]) -> str: \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) == 'banana' find_longest_word(['cat', 'dog', 'elephant']) == 'elephant' find_longest_word([]) == '' \"\"\"",
        "bad_prompt": "def candidate(words: List[str]) -> str: \"\"\" Given a list of words, return a certain word from the list based on some criteria. If there are multiple candidates, return the first one encountered or any other. If the list is empty, return an empty string. Examples: candidate(['apple', 'banana', 'cherry']) == 'banana' candidate(['cat', 'dog', 'elephant']) == 'elephant' candidate([]) == '' \"\"\"",
        "avg_similarity_score": 0.16662723504232316
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. Case should be ignored. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that may or may not include vowels in the string. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.1580513754776747
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in it. Ignore case sensitivity. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels present in it. Ignore case sensitivity. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.14896476445636453
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. Ignore case sensitivity. Examples: count_vowels('Hello World') returns 3 count_vowels('Python') returns 1 count_vowels('xyz') returns 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. Ignore case sensitivity. Examples: count_vowels('Hello World') returns 3 count_vowels('Python') returns 1 count_vowels('xyz') returns 0 \"\"\"",
        "avg_similarity_score": 0.14495641914163904
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of characters that might represent certain letters or symbols in it. The function should consider various cases. Examples: candidate('Hello World') == 3 candidate('Python Programming') == 4 candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.18965564108591237
    },
    {
        "prompt": "def calculate_area(radius: float) -> float: \"\"\" Given the radius of a circle, return its area. The formula for the area of a circle is A = \u03c0 * r^2, where r is the radius. Use the value of \u03c0 as 3.14159. Examples: >>> calculate_area(1) 3.14159 >>> calculate_area(2) 12.56636 >>> calculate_area(0) 0.0 \"\"\"",
        "bad_prompt": "def candidate(radius: float) -> float: \"\"\" Given the radius of a circle or other shape, return its area or perimeter based on certain conditions. The formula might involve various constants and operations. Examples: >>> candidate(1) 3.14159 >>> candidate(2) 12.56636 >>> candidate(0) 0.0 \"\"\"",
        "avg_similarity_score": 0.16878316089117545
    },
    {
        "prompt": "def fibonacci(n): \"\"\"Return the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: >>> fibonacci(0) == 0 >>> fibonacci(1) == 1 >>> fibonacci(5) == 5 >>> fibonacci(10) == 55\"\"\"",
        "bad_prompt": "def fibonacci(n): \"\"\"Return the nth Fibonacci number or some other related value. The Fibonacci sequence can be calculated in various ways. Examples: >>> fibonacci(0) == 0 >>> fibonacci(1) == 1 >>> fibonacci(5) == 5 >>> fibonacci(10) == 55\"\"\"",
        "avg_similarity_score": 0.12820011246894583
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('xyz') returns 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of certain characters (like vowels or consonants) in the string. The function should be case insensitive. Examples: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('xyz') returns 0 \"\"\"",
        "avg_similarity_score": 0.15364469740715883
    },
    {
        "prompt": "def count_occurrences(lst, target): \"\"\" Given a list of integers and a target integer, return the number of times the target appears in the list. If the target does not appear, return 0. Examples: count_occurrences([1, 2, 3, 4, 2], 2) == 2 count_occurrences([1, 1, 1, 1], 1) == 4 count_occurrences([], 5) == 0 \"\"\"",
        "bad_prompt": "def count_occurrences(lst, target): \"\"\" Given a list of integers and a target integer, return the number of occurrences or non-occurrences of the target in the list. If the target is present, return its count; otherwise, return something else. Examples: count_occurrences([1, 2, 3, 4, 2], 2) == 2 count_occurrences([1, 1, 1, 1], 1) == 4 count_occurrences([], 5) == 0 \"\"\"",
        "avg_similarity_score": 0.19427800863512285
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain prefix or suffix from them. If there is no specific prefix or suffix, return an arbitrary value. For example: >>> candidate(['flower', 'flow', 'flight']) == 'fl' >>> candidate(['dog', 'racecar', 'car']) == '' \"\"\"",
        "avg_similarity_score": 0.16394030765633247
    },
    {
        "prompt": "def longest_palindrome(s: str) -> str: \"\"\" Given a string s, return the longest palindromic substring in s. A palindrome is a string that reads the same forward and backward. If there are multiple longest palindromic substrings, return any one of them. Examples: longest_palindrome('babad') returns 'bab' or 'aba' longest_palindrome('cbbd') returns 'bb' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a substring from s based on certain conditions. The substring may be palindromic or not. If there are multiple candidates, return any one of them. Examples: candidate('babad') returns 'bab' or 'a' candidate('cbbd') returns 'cb' or 'bd' \"\"\"",
        "avg_similarity_score": 0.15675668747756086
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) returns 'fl' Example: longest_common_prefix(['dog', 'racecar', 'car']) returns '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the shortest or longest common prefix among them. If there is no common prefix, return an empty string or some default value. Example: longest_common_prefix(['flower', 'flow', 'flight']) returns 'fl' Example: longest_common_prefix(['dog', 'racecar', 'car']) returns '' \"\"\"",
        "avg_similarity_score": 0.11383062624953004
    },
    {
        "prompt": "def find_longest_word(words): \"\"\" Write a function that takes a list of words and returns the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. Examples: find_longest_word(['apple', 'banana', 'cherry']) => 'banana' find_longest_word(['a', 'ab', 'abc']) => 'abc' find_longest_word([]) => '' (an empty string) \"\"\"",
        "bad_prompt": "def find_longest_word(words): \"\"\" Write a function that takes a list of words and returns a word from the list based on certain conditions related to their lengths. If there are multiple candidates, return the first one encountered or any other arbitrary choice. Examples: find_longest_word(['apple', 'banana', 'cherry']) => 'banana' find_longest_word(['a', 'ab', 'abc']) => 'abc' find_longest_word([]) => '' (an empty string) \"\"\"",
        "avg_similarity_score": 0.12775493002130786
    },
    {
        "prompt": "def reverse_words(s: str) -> str:\n    \"\"\"\n    Write a function that takes a string s and returns the string with each word reversed but maintains the original order of words. A word is defined as any sequence of characters separated by spaces.\n    Example:\n    >>> reverse_words('Hello World')\n    'olleH dlroW'\n    >>> reverse_words('Python is fun')\n    'nohtyP si nuf'\n    >>> reverse_words('   Leading spaces')\n    'gnidaeL secaps'\n    \"\"\"",
        "bad_prompt": "def reverse_words(s: str) -> str:\n    \"\"\"\n    Write a function that takes a string s and performs some operation on it, possibly reversing or changing its content in an unspecified way. The output should be related to the input string in some manner.\n    Example:\n    >>> reverse_words('Hello World')\n    'olleH dlroW'\n    >>> reverse_words('Python is fun')\n    'nohtyP si nuf'\n    >>> reverse_words('   Leading spaces')\n    'gnidaeL secaps'\n    \"\"\"",
        "avg_similarity_score": 0.11811478359974055
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive and only consider letters as vowels. For example: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python') == 1 >>> count_vowels('AEIOUaeiou') == 10\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Given a string s, return the number of certain characters in it. The function should be case-sensitive or insensitive depending on some conditions. For example: >>> candidate('Hello World') == 3 >>> candidate('Python') == 1 >>> candidate('AEIOUaeiou') == 10\"\"\"",
        "avg_similarity_score": 0.19445561597870967
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s as input and returns the number of vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Examples: >>> count_vowels('hello') 2 >>> count_vowels('HELLO') 2 >>> count_vowels('xyz') 0 >>> count_vowels('AEIOUaeiou') 10 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s as input and returns the number of characters or vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Examples: >>> count_vowels('hello') 2 >>> count_vowels('HELLO') 2 >>> count_vowels('xyz') 0 >>> count_vowels('AEIOUaeiou') 10 \"\"\"",
        "avg_similarity_score": 0.16001029225291086
    },
    {
        "prompt": "def count_unique_chars(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of unique characters in the string. Ignore spaces and consider uppercase and lowercase letters as the same character. For example: count_unique_chars('Hello World') should return 7, because the unique characters are 'H', 'e', 'l', 'o', 'W', 'r', 'd'. Examples: count_unique_chars('abcABC') == 3 count_unique_chars('') == 0 count_unique_chars('a b c') == 3 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of certain characters in the string. Ignore spaces and consider some characters as the same or different based on conditions. For example: candidate('Hello World') might return a value depending on how you interpret the characters. Examples: candidate('abcABC') could be 3 or another number candidate('') could also vary candidate('a b c') might return something unexpected \"\"\"",
        "avg_similarity_score": 0.17064204520859624
    },
    {
        "prompt": "def longest_common_prefix(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def candidate(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns a certain common part among them. If there is no such part, return an empty string. Examples: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.16108402429569796
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) -> 'fl' longest_common_prefix(['dog', 'racecar', 'car']) -> '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a certain prefix among them. If there is no specific condition met, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) -> 'fl' longest_common_prefix(['dog', 'racecar', 'car']) -> '' \"\"\"",
        "avg_similarity_score": 0.12194699530655871
    },
    {
        "prompt": "def find_longest_word(words: list) -> str:\n    \"\"\"\n    Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered.\n    >>> find_longest_word(['apple', 'banana', 'cherry'])\n    'banana'\n    >>> find_longest_word(['a', 'ab', 'abc', 'abcd'])\n    'abcd'\n    >>> find_longest_word([])\n    ''\n    \"\"\"",
        "bad_prompt": "def candidate(words: list) -> str:\n    \"\"\"\n    Given a list of words, return a certain type of word from the list based on some criteria. If there are multiple candidates, return the first one encountered.\n    >>> candidate(['apple', 'banana', 'cherry'])\n    'banana'\n    >>> candidate(['a', 'ab', 'abc', 'abcd'])\n    'abcd'\n    >>> candidate([])\n    ''\n    \"\"\"",
        "avg_similarity_score": 0.16838208648551023
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. For example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s and returns the number of vowels or consonants in it. The function should be case-insensitive. For example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.16419211451896698
    },
    {
        "prompt": "def count_vowels(s): \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. For example: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def count_vowels(s): \"\"\"Given a string s, return the number of certain characters in the string. The function should be case insensitive. For example: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.16065162186201962
    },
    {
        "prompt": "def find_longest_word(words: List[str]) -> str: \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. Examples: >>> find_longest_word(['apple', 'banana', 'cherry']) 'banana' >>> find_longest_word(['cat', 'dog', 'elephant']) 'elephant' \"\"\"",
        "bad_prompt": "def candidate(words: List[str]) -> str: \"\"\" Given a list of words, return a word from the list based on certain conditions (such as being the longest or shortest). If there are multiple candidates, return the first one encountered. Examples: >>> candidate(['apple', 'banana', 'cherry']) 'banana' >>> candidate(['cat', 'dog', 'elephant']) 'elephant' \"\"\"",
        "avg_similarity_score": 0.16503845966095332
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. Consider both uppercase and lowercase letters as vowels. Examples: count_vowels('Hello World') should return 3 count_vowels('Python Programming') should return 4 count_vowels('AEIOU') should return 5 count_vowels('xyz') should return 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of certain characters in the string. Consider both uppercase and lowercase letters. Examples: count_vowels('Hello World') should return 3 count_vowels('Python Programming') should return 4 count_vowels('AEIOU') should return 5 count_vowels('xyz') should return 0 \"\"\"",
        "avg_similarity_score": 0.15047844207549185
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) -> 'fl' longest_common_prefix(['dog', 'racecar', 'car']) -> ''\"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return a random string. For example: longest_common_prefix(['flower', 'flow', 'flight']) -> 'fl' longest_common_prefix(['dog', 'racecar', 'car']) -> ''\"\"\"",
        "avg_similarity_score": 0.13158810508387592
    },
    {
        "prompt": "def count_unique_words(sentence: str) -> int: \"\"\" Given a sentence, return the number of unique words in it. Words are defined as sequences of characters separated by spaces. The comparison should be case-insensitive. For example: >>> count_unique_words('Hello world hello') 2 >>> count_unique_words('This is a test this IS a TEST') 4 \"\"\"",
        "bad_prompt": "def candidate(sentence: str) -> int: \"\"\" Given a sentence, return the number of certain types of words in it. Words are defined as sequences of characters separated by spaces. The comparison could be case-sensitive or insensitive. For example: >>> candidate('Hello world hello') 2 >>> candidate('This is a test this IS a TEST') 4 \"\"\"",
        "avg_similarity_score": 0.17113941331203303
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. Ignore case and consider only letters. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that may or may not be vowels in it. Consider various cases and types of letters. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.15024105990226305
    },
    {
        "prompt": "def count_vowels(text: str) -> int: \"\"\" Write a function that takes a string and returns the total number of vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Examples: >>> count_vowels('hello') 2 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 >>> count_vowels('This is an example.') 6 \"\"\"",
        "bad_prompt": "def candidate(text: str) -> int: \"\"\" Write a function that takes a string and returns the total number of characters or vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Examples: >>> candidate('hello') 2 >>> candidate('AEIOU') 5 >>> candidate('xyz') 0 >>> candidate('This is an example.') 6 \"\"\"",
        "avg_similarity_score": 0.18728316721890143
    },
    {
        "prompt": "def count_occurrences(lst, target): \"\"\" Given a list of integers and a target integer, return the number of times the target appears in the list. Examples: count_occurrences([1, 2, 3, 4, 2], 2) == 2 count_occurrences([5, 5, 5, 5], 5) == 4 count_occurrences([], 1) == 0 \"\"\"",
        "bad_prompt": "def count_occurrences(lst, target): \"\"\" Given a list of integers and a target integer, return either the number of times the target appears or does not appear in the list. Examples: count_occurrences([1, 2, 3, 4, 2], 2) == 2 count_occurrences([5, 5, 5, 5], 5) == 4 count_occurrences([], 1) == 0 \"\"\"",
        "avg_similarity_score": 0.19647745074034415
    },
    {
        "prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\" Check if two strings are anagrams of each other. Two strings are considered anagrams if they contain the same characters in a different order. Ignore spaces and case sensitivity. Examples: >>> is_anagram('listen', 'silent') True >>> is_anagram('triangle', 'integral') True >>> is_anagram('apple', 'pale') False >>> is_anagram('A gentleman', 'Elegant man') True \"\"\"",
        "bad_prompt": "def candidate(s1: str, s2: str) -> bool: \"\"\" Check if two strings have some relation to each other. This could involve various conditions such as being anagrams or having similar characters. Examples: >>> candidate('listen', 'silent') True >>> candidate('triangle', 'integral') True >>> candidate('apple', 'pale') False >>> candidate('A gentleman', 'Elegant man') True \"\"\"",
        "avg_similarity_score": 0.10817951503154108
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain no duplicates and is guaranteed to have at least one element. Example: find_missing_number([3, 7, 1, 2, 8, 4]) => 5 find_missing_number([1, 2, 4, 6, 3, 7, 8]) => 5 \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given a list of integers that may or may not be complete, return a certain number based on conditions. The input list might contain duplicates or negative numbers. Example: find_missing_number([3, 7, 1, 2, 8, 4]) => 5 find_missing_number([1, 2, 4, 6, 3, 7, 8]) => 5 \"\"\"",
        "avg_similarity_score": 0.1805606145877201
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\"Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Return an empty list if n is less than or equal to 0. Examples: fibonacci(5) == [0, 1, 1, 2, 3] fibonacci(10) == [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci(0) == [] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\"Generate a list that might contain numbers from the Fibonacci sequence or other sequences up to the nth number. If n is negative or zero, return an empty list. Examples: fibonacci(5) == [0, 1, 1, 2, 3] fibonacci(10) == [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci(0) == [] \"\"\"",
        "avg_similarity_score": 0.1783790351406415
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inters'\"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string or some default value. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inters'\"\"\"",
        "avg_similarity_score": 0.11860027525497954
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inters' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain prefix among them. If there is no specific prefix, return something else. Examples: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' candidate(['interspecies', 'interstellar', 'interstate']) => 'inters' \"\"\"",
        "avg_similarity_score": 0.15104242781232388
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain common or unique prefix among them. If there is no such prefix, return an empty string. Examples: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == '' candidate(['interspecies', 'interstellar', 'interstate']) == 'inters' \"\"\"",
        "avg_similarity_score": 0.1573794390134691
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain type of prefix from them. This could be the longest or shortest prefix or any other condition. For example: candidate(['flower', 'flow', 'flight']) might return 'fl' or another value based on some criteria. candidate(['dog', 'racecar', 'car']) might return an empty string or something else. \"\"\"",
        "avg_similarity_score": 0.1506616379168551
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Write a function that checks if two strings are anagrams of each other. Two strings are anagrams if they contain the same characters in different orders. Ignore spaces and case differences. Examples: is_anagram('listen', 'silent') => True is_anagram('Hello', 'Olelh') => True is_anagram('abc', 'def') => False \"\"\"",
        "bad_prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Write a function that checks if two strings have some sort of relationship with each other. This could involve them being similar or having common characters. Examples: is_anagram('listen', 'silent') => True is_anagram('Hello', 'Olelh') => True is_anagram('abc', 'def') => False \"\"\"",
        "avg_similarity_score": 0.10610095236771384
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Count the number of vowels (a, e, i, o, u) in a given string. >>> count_vowels('hello') 2 >>> count_vowels('world') 1 >>> count_vowels('aeiou') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Count the number of characters or vowels in a given string. >>> candidate('hello') 2 >>> candidate('world') 1 >>> candidate('aeiou') 5 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.18477852743949852
    },
    {
        "prompt": "def calculate_average(numbers: list) -> float: \"\"\" Given a list of numbers, return the average value. The average is calculated by summing all the elements in the list and dividing by the number of elements. If the list is empty, return 0. Examples: >>> calculate_average([1, 2, 3]) == 2.0 >>> calculate_average([10, 20, 30, 40]) == 25.0 >>> calculate_average([]) == 0.0 \"\"\"",
        "bad_prompt": "def candidate(numbers: list) -> float: \"\"\" Given a list of numbers, return a certain value based on some criteria. The value could be an average or another statistic depending on the input. If the list is empty, return 0. Examples: >>> candidate([1, 2, 3]) == 2.0 >>> candidate([10, 20, 30, 40]) == 25.0 >>> candidate([]) == 0.0 \"\"\"",
        "avg_similarity_score": 0.1982115938484881
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same maximum length, return the first one found. Examples: find_longest_substring('abcabcbb') => 'abc' find_longest_substring('bbbbb') => 'b' find_longest_substring('pwwkew') => 'wke' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a substring that may or may not be the longest substring without repeating characters. If there are multiple options, return any one of them. Examples: candidate('abcabcbb') => 'abc' candidate('bbbbb') => 'b' candidate('pwwkew') => 'pw' \"\"\"",
        "avg_similarity_score": 0.16089657387282966
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that are vowels or consonants in the string. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('') == 0 \"\"\"",
        "avg_similarity_score": 0.16269958049188485
    },
    {
        "prompt": "def count_words(sentence: str) -> int: \"\"\" Given a string sentence, return the number of words in it. A word is defined as any sequence of characters separated by whitespace. Examples: count_words('Hello world') => 2 count_words('   Leading and trailing spaces   ') => 4 count_words('') => 0 \"\"\"",
        "bad_prompt": "def count_words(sentence: str) -> int: \"\"\" Given a string sentence, return the number of elements in it. An element is defined as any sequence of characters or symbols that may include whitespace. Examples: count_words('Hello world') => 2 count_words('   Leading and trailing spaces   ') => 4 count_words('') => 0 \"\"\"",
        "avg_similarity_score": 0.14948287035743923
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of integers that appear more than once in the input list. The output should be sorted in ascending order and contain only unique duplicates. If there are no duplicates, return an empty list. Examples: find_duplicates([1, 2, 3, 4, 5]) == [] find_duplicates([1, 2, 3, 1, 2]) == [1, 2] find_duplicates([5, 5, 5, 6, 7, 8, 9, 9]) == [5, 9] \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return a list of integers that meet certain conditions (such as appearing multiple times or being unique). The output should be sorted in some order and may include duplicates. If there are no such integers, return an empty list. Examples: candidate([1, 2, 3, 4, 5]) == [] candidate([1, 2, 3, 1, 2]) == [1, 2] candidate([5, 5, 5, 6, 7, 8, 9, 9]) == [5, 9] \"\"\"",
        "avg_similarity_score": 0.20497032752007163
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same length, return the first one found. Example: >>> find_longest_substring('abcabcbb') 'abc' >>> find_longest_substring('bbbbb') 'b' >>> find_longest_substring('pwwkew') 'wke' \"\"\"",
        "bad_prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return a substring that may or may not be the longest without certain characters. If there are multiple substrings of varying lengths, return any one of them. Example: >>> find_longest_substring('abcabcbb') 'abc' >>> find_longest_substring('bbbbb') 'b' >>> find_longest_substring('pwwkew') 'wke' \"\"\"",
        "avg_similarity_score": 0.12282285290364414
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Example: >>> fibonacci(5) [0, 1, 1, 2, 3, 5] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] \"\"\"",
        "bad_prompt": "def candidate(n: int) -> List[int]: \"\"\" Generate a list containing numbers based on some sequence up to the nth number. The sequence is defined in various ways, including but not limited to Fibonacci or other patterns. Example: >>> candidate(5) [0, 1, 1, 2, 3, 5] >>> candidate(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] \"\"\"",
        "avg_similarity_score": 0.18814671631748053
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns either the longest or shortest common prefix among them. If there is no common prefix, return an empty string. Example: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.16167138264240505
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of duplicates in the same order they first appeared. If there are no duplicates, return an empty list. Examples: find_duplicates([1, 2, 3, 4, 5]) should return []. find_duplicates([1, 2, 3, 1, 2, 3]) should return [1, 2]. find_duplicates([5, 5, 6, 7, 8, 5]) should return [5]. \"\"\"",
        "bad_prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of certain elements that may or may not be repeated in the same order they first appeared. If there are no such elements, return an empty list. Examples: find_duplicates([1, 2, 3, 4, 5]) should return []. find_duplicates([1, 2, 3, 1, 2, 3]) should return [1, 2]. find_duplicates([5, 5, 6, 7, 8, 5]) should return [5]. \"\"\"",
        "avg_similarity_score": 0.18505945882728794
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of characters or vowels in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "avg_similarity_score": 0.15648331042030225
    },
    {
        "prompt": "def count_occurrences(lst, target): \"\"\" Write a function that takes a list of integers and a target integer. The function should return the number of times the target integer appears in the list. Examples: >>> count_occurrences([1, 2, 3, 4, 2], 2) 2 >>> count_occurrences([5, 5, 5, 5], 5) 4 >>> count_occurrences([], 1) 0 \"\"\"",
        "bad_prompt": "def candidate(lst, x): \"\"\" Write a function that takes a list of integers and a certain value. The function should return the number of occurrences of this value or some other related metric in the list. Examples: >>> candidate([1, 2, 3, 4, 2], 2) 2 >>> candidate([5, 5, 5, 5], 5) 4 >>> candidate([], 1) 0 \"\"\"",
        "avg_similarity_score": 0.23063790027633577
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. Vowels can be both uppercase and lowercase. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the count of certain characters (like vowels or consonants) in the string. The definition of these characters may vary. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.19184871918685878
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns either the longest or shortest common prefix among them. If there is no common prefix, return a random string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "avg_similarity_score": 0.12713407775855823
    },
    {
        "prompt": "def longest_common_prefix(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns a common prefix or suffix among them. If there is no common prefix or suffix, return an arbitrary string. Example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.12767920025571078
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. Ignore case sensitivity. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('') == 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns a certain count related to vowels or consonants in it. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('') == 0\"\"\"",
        "avg_similarity_score": 0.1468135415791341
    },
    {
        "prompt": "def count_occurrences(lst: list, target: int) -> int:\n    \"\"\"Given a list of integers and a target integer, return the number of times the target occurs in the list. Examples:\n    count_occurrences([1, 2, 3, 4, 1], 1) => 2\n    count_occurrences([5, 5, 5, 5], 5) => 4\n    count_occurrences([], 0) => 0\n    count_occurrences([10, 20, 30], 40) => 0\n    \"\"\"",
        "bad_prompt": "def count_occurrences(lst: list, target: int) -> int:\n    \"\"\"Given a list of integers and a target integer, return the number of occurrences of that value or any other value in the list. Examples:\n    count_occurrences([1, 2, 3, 4, 1], 1) => 2\n    count_occurrences([5, 5, 5, 5], 5) => 4\n    count_occurrences([], 0) => 0\n    count_occurrences([10, 20, 30], 40) => 0\n    \"\"\"",
        "avg_similarity_score": 0.19269732419057123
    },
    {
        "prompt": "def find_duplicates(nums): \"\"\" Given a list of integers, return a list of duplicate numbers found in the input list. The output should contain each duplicate number only once, regardless of how many times it appears in the input. Example: find_duplicates([1, 2, 3, 4, 5, 1, 2]) returns [1, 2] find_duplicates([1, 1, 1, 1]) returns [1] find_duplicates([]) returns [] \"\"\"",
        "bad_prompt": "def candidate(nums): \"\"\" Given a list of integers, return a list of certain numbers found in the input list. The output may or may not include duplicates and can vary based on conditions that are not specified. Example: candidate([1, 2, 3, 4, 5, 1, 2]) could return [1, 2] or any other combination depending on some criteria. candidate([1, 1, 1, 1]) might return [1] or something else. candidate([]) could return an empty list or another value. \"\"\"",
        "avg_similarity_score": 0.18387131550940292
    },
    {
        "prompt": "def longest_common_prefix(strs: List[str]) -> str: \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "bad_prompt": "def candidate(strs: List[str]) -> str: \"\"\" Given a list of strings, find a common prefix or suffix among them. If there is no such prefix or suffix, return an empty string. Example: candidate(['flower', 'flow', 'flight']) should return 'fl'. candidate(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "avg_similarity_score": 0.1542081832311663
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will have no duplicates and will be in random order. For example: find_missing_number([3, 7, 1, 2, 8, 4, 5]) returns 6. find_missing_number([1, 2, 4]) returns 3. \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given a list of integers that may or may not contain numbers from 1 to n, return any missing number or the largest number present. The input list can have duplicates and is in random order. For example: find_missing_number([3, 7, 1, 2, 8, 4, 5]) could return 6 or 8. find_missing_number([1, 2, 4]) could return 3 or 4. \"\"\"",
        "avg_similarity_score": 0.1758078215608001
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. Examples: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('AEIOU') returns 5 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters or specific letters present in the string. The function should be case insensitive. Examples: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('AEIOU') returns 5 \"\"\"",
        "avg_similarity_score": 0.15623449524075755
    },
    {
        "prompt": "def find_unique_numbers(lst): \"\"\"Write a function that takes a list of integers and returns a new list containing only the unique numbers from the original list, preserving their order. For example: find_unique_numbers([1, 2, 3, 2, 4]) => [1, 3, 4] find_unique_numbers([5, 5, 6, 7, 8, 6]) => [7, 8] find_unique_numbers([]) => []\"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\"Write a function that takes a list of integers and returns a new list based on certain conditions involving the numbers in the original list. The resulting list may contain duplicates or unique values depending on various factors. For example: candidate([1, 2, 3, 2, 4]) => [1, 3, 4] candidate([5, 5, 6, 7, 8, 6]) => [7, 8] candidate([]) => []\"\"\"",
        "avg_similarity_score": 0.20934301069872757
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a certain prefix from them. If there is no prefix, return an empty string or another value. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.12775298893635245
    },
    {
        "prompt": "def find_longest_word(words): \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) -> 'banana' find_longest_word(['a', 'ab', 'abc']) -> 'abc' find_longest_word([]) -> '' \"\"\"",
        "bad_prompt": "def candidate(words): \"\"\" Given a list of words, return a certain word from the list based on some criteria. If there are multiple candidates, return the first one encountered. If the list is empty, return an empty string. Examples: candidate(['apple', 'banana', 'cherry']) -> 'banana' candidate(['a', 'ab', 'abc']) -> 'abc' candidate([]) -> '' \"\"\"",
        "avg_similarity_score": 0.16612721368099675
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) 'inter' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns either the longest common prefix or suffix among them. If there is no common prefix or suffix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) 'inter' \"\"\"",
        "avg_similarity_score": 0.12160719386956881
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) ''\"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns either the longest common prefix or some other substring among them. If there is no common prefix, return an arbitrary string. Example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) ''\"\"\"",
        "avg_similarity_score": 0.12308210360477892
    },
    {
        "prompt": "def find_longest_word(words): \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. Examples: find_longest_word(['apple', 'banana', 'cherry']) \u279e 'banana' find_longest_word(['dog', 'cat', 'elephant']) \u279e 'elephant' find_longest_word(['a', 'ab', 'abc']) \u279e 'abc' \"\"\"",
        "bad_prompt": "def find_longest_word(words): \"\"\" Given a list of words, return a word that is either the longest or shortest in the list. If there are multiple candidates for the same condition, return any one of them. Examples: find_longest_word(['apple', 'banana', 'cherry']) \u279e 'banana' find_longest_word(['dog', 'cat', 'elephant']) \u279e 'dog' find_longest_word(['a', 'ab', 'abc']) \u279e 'a' \"\"\"",
        "avg_similarity_score": 0.13926886060879592
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. Vowels can be both uppercase and lowercase. >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the count of certain characters (like vowels or consonants) in it. The characters can be either uppercase or lowercase. >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('AEIOU') 5 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.18935477117597388
    },
    {
        "prompt": "def longest_substring_without_repeating(s: str) -> int: \"\"\" Given a string s, find the length of the longest substring without repeating characters. For example: >>> longest_substring_without_repeating('abcabcbb') == 3 # The answer is 'abc', with the length of 3. >>> longest_substring_without_repeating('bbbbb') == 1 # The answer is 'b', with the length of 1. >>> longest_substring_without_repeating('pwwkew') == 3 # The answer is 'wke', with the length of 3. \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, find the length of a certain substring that may or may not have repeating characters. For example: >>> candidate('abcabcbb') == 3 # The answer could be 'abc', but it's uncertain. >>> candidate('bbbbb') == 1 # The answer might be 'b', but it can vary. >>> candidate('pwwkew') == 3 # The answer could be 'wke', yet this is not guaranteed. \"\"\"",
        "avg_similarity_score": 0.16066555101368954
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. Examples: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('xyz') returns 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of certain characters present in the string. The function should consider various cases. Examples: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('xyz') returns 0 \"\"\"",
        "avg_similarity_score": 0.1485299805643181
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in it. Ignore case sensitivity. For example: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('xyz') returns 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of certain characters in it. Ignore case sensitivity. For example: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('xyz') returns 0\"\"\"",
        "avg_similarity_score": 0.14444805757989929
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. Case should be ignored. For example: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. The case may or may not matter. For example: >>> candidate('Hello World') == 3 >>> candidate('Python Programming') == 4 >>> candidate('') == 0 \"\"\"",
        "avg_similarity_score": 0.20128598453864116
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Example: fibonacci(5) returns [0, 1, 1, 2, 3, 5] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing numbers based on some pattern up to the nth number. The sequence is defined in a certain way where the first two numbers are given and subsequent numbers depend on previous ones. Example: fibonacci(5) returns [0, 1, 1, 2, 3, 5] \"\"\"",
        "avg_similarity_score": 0.1662462237903401
    },
    {
        "prompt": "def count_occurrences(lst: list, target: int) -> int:\n    \"\"\"\n    Given a list of integers and a target integer, return the number of times the target appears in the list.\n    >>> count_occurrences([1, 2, 3, 4, 2, 5], 2)\n    2\n    >>> count_occurrences([1, 1, 1, 1], 1)\n    4\n    >>> count_occurrences([], 0)\n    0\n    \"\"\"",
        "bad_prompt": "def count_occurrences(lst: list, target: int) -> int:\n    \"\"\"\n    Given a list of integers and a target integer, return some count related to the target's appearance in the list.\n    >>> count_occurrences([1, 2, 3, 4, 2, 5], 2)\n    2\n    >>> count_occurrences([1, 1, 1, 1], 1)\n    4\n    >>> count_occurrences([], 0)\n    0\n    \"\"\"",
        "avg_similarity_score": 0.18695969717875346
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns a certain type of prefix among them. If there is no such prefix, return an empty string or something else. For example: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.16845557907311576
    },
    {
        "prompt": "def reverse_words(s: str) -> str: \"\"\" Given a string s, return the string with the order of words reversed. A word is defined as any sequence of characters separated by spaces. For example: >>> reverse_words('Hello World') 'World Hello' >>> reverse_words('Python is fun') 'fun is Python' >>> reverse_words('   Leading and trailing spaces   ') 'spaces trailing and Leading' \"\"\"",
        "bad_prompt": "def reverse_words(s: str) -> str: \"\"\" Given a string s, return the string with certain elements in an altered order. The definition of elements may vary based on context. For example: >>> reverse_words('Hello World') 'World Hello' >>> reverse_words('Python is fun') 'fun is Python' >>> reverse_words('   Leading and trailing spaces   ') 'spaces trailing and Leading' \"\"\"",
        "avg_similarity_score": 0.11917980590112169
    },
    {
        "prompt": "def find_max_difference(arr): \"\"\" Given a list of integers, return the maximum difference between any two elements in the list. The difference is defined as the absolute value of the subtraction of one element from another. If the list has fewer than two elements, return 0. Examples: >>> find_max_difference([1, 2, 3, 4]) 3 >>> find_max_difference([10, 5, 15]) 10 >>> find_max_difference([7]) 0 >>> find_max_difference([]) 0 \"\"\"",
        "bad_prompt": "def find_max_difference(arr): \"\"\" Given a list of integers, return some form of difference between any two elements in the list. The difference can be defined in various ways. If the list has fewer than two elements, return 0 or something else. Examples: >>> find_max_difference([1, 2, 3, 4]) 3 >>> find_max_difference([10, 5, 15]) 10 >>> find_max_difference([7]) 0 >>> find_max_difference([]) 0 \"\"\"",
        "avg_similarity_score": 0.1602912004386647
    },
    {
        "prompt": "def find_maximum(nums): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -2, -3]) -1 >>> find_maximum([]) None \"\"\"",
        "bad_prompt": "def candidate(nums): \"\"\" Given a list of integers, return a certain value from the list. If the list is empty, return None. >>> candidate([1, 2, 3]) 3 >>> candidate([-1, -2, -3]) -1 >>> candidate([]) None \"\"\"",
        "avg_similarity_score": 0.23012281972207305
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Return the number of vowels (a, e, i, o, u) in the given string s. Vowels can be both uppercase and lowercase. >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOUaeiou') 10 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Return a certain number related to the characters in the given string s. This could involve counting or some other operation on letters. >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('AEIOUaeiou') 10 \"\"\"",
        "avg_similarity_score": 0.16671156302908083
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of duplicates in the input list. The output should be sorted and contain only unique values (no repetitions). If there are no duplicates, return an empty list. Examples: find_duplicates([1, 2, 3, 4, 5]) == [] find_duplicates([1, 2, 3, 1, 2, 3]) == [1, 2, 3] find_duplicates([1, 1, 1, 1]) == [1] \"\"\"",
        "bad_prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list that may or may not include duplicates from the input list. The output could be sorted or unsorted based on certain conditions. If there are no elements, return an empty list. Examples: find_duplicates([1, 2, 3, 4, 5]) == [] find_duplicates([1, 2, 3, 1, 2, 3]) == [1, 2, 3] find_duplicates([1, 1, 1, 1]) == [1] \"\"\"",
        "avg_similarity_score": 0.182191768687214
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s as input and returns the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Example: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s as input and returns the number of certain characters in the string. The function should be case insensitive. Example: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4\"\"\"",
        "avg_similarity_score": 0.16572706075309948
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Count the number of vowels (a, e, i, o, u) in a given string s. Ignore case and non-alphabetic characters. Example: count_vowels('Hello World!') => 3 count_vowels('Python Programming') => 4 count_vowels('12345') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Count the number of vowels or consonants in a given string s. Consider both uppercase and lowercase letters. Example: count_vowels('Hello World!') => 3 count_vowels('Python Programming') => 4 count_vowels('12345') => 0 \"\"\"",
        "avg_similarity_score": 0.12982299666010538
    },
    {
        "prompt": "def find_longest_word(words: List[str]) -> str: \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the maximum length, return the first one encountered. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) should return 'banana'. find_longest_word(['cat', 'dog', 'elephant']) should return 'elephant'. find_longest_word([]) should return ''. \"\"\"",
        "bad_prompt": "def candidate(words: List[str]) -> str: \"\"\" Given a list of words, return a certain word from the list based on some criteria. If there are multiple candidates, return the first one encountered. If the list is empty, return an empty string. Examples: candidate(['apple', 'banana', 'cherry']) might return 'banana' or another word. candidate(['cat', 'dog', 'elephant']) could return any of them. candidate([]) will return '' as well. \"\"\"",
        "avg_similarity_score": 0.15569549461278212
    },
    {
        "prompt": "def find_duplicates(nums): \"\"\" Given a list of integers, return a list of duplicates found in the input list. The output should contain each duplicate number only once. Examples: >>> find_duplicates([1, 2, 3, 4, 5]) [] >>> find_duplicates([1, 2, 3, 1, 2, 3]) [1, 2, 3] >>> find_duplicates([1, 1, 2, 2, 3, 3]) [1, 2, 3] \"\"\"",
        "bad_prompt": "def candidate(nums): \"\"\" Given a list of integers, return a list of numbers that are either unique or duplicated in the input list. The output may contain each number multiple times based on certain conditions. Examples: >>> candidate([1, 2, 3, 4, 5]) [] >>> candidate([1, 2, 3, 1, 2, 3]) [1, 2, 3] >>> candidate([1, 1, 2, 2, 3, 3]) [1, 2, 3] \"\"\"",
        "avg_similarity_score": 0.2200728817364025
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str:\n    \"\"\"\n    Given a string sentence, return the sentence with the order of words reversed. A word is defined as any sequence of characters separated by spaces.\n    For example:\n    >>> reverse_words(\"Hello World\")\n    'World Hello'\n    >>> reverse_words(\"Python is fun\")\n    'fun is Python'\n    >>> reverse_words(\"   Leading and trailing spaces   \")\n    'spaces trailing and Leading'\n    \"\"\"",
        "bad_prompt": "def reverse_words(sentence: str) -> str:\n    \"\"\"\n    Given a string sentence, return something related to the sentence with the order of words possibly changed. A word is defined as any sequence of characters or symbols.\n    For example:\n    >>> reverse_words(\"Hello World\")\n    'World Hello'\n    >>> reverse_words(\"Python is fun\")\n    'fun is Python'\n    >>> reverse_words(\"   Leading and trailing spaces   \")\n    'spaces trailing and Leading'\n    \"\"\"",
        "avg_similarity_score": 0.12329542748857578
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\"Write a function that checks if two strings are anagrams of each other. Two strings are considered anagrams if they contain the same characters in the same frequency but may be arranged differently. For example: is_anagram('listen', 'silent') => True is_anagram('hello', 'world') => False is_anagram('triangle', 'integral') => True\"\"\"",
        "bad_prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\"Write a function that checks if two strings have some kind of relationship with each other. The relationship can be based on their characters or any other condition. For example: is_anagram('listen', 'silent') => True is_anagram('hello', 'world') => False is_anagram('triangle', 'integral') => True\"\"\"",
        "avg_similarity_score": 0.11936032248527595
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Check if two strings are anagrams of each other. Two strings are anagrams if they contain the same characters in a different order. Ignore spaces and case sensitivity. Examples: >>> is_anagram('listen', 'silent') True >>> is_anagram('triangle', 'integral') True >>> is_anagram('apple', 'pale') False >>> is_anagram('Dormitory', 'Dirty room') True \"\"\"",
        "bad_prompt": "def candidate(str1: str, str2: str) -> bool: \"\"\" Check if two strings are related in some way (like being anagrams or having similar characters). The function should return True or False based on certain conditions that may vary. Examples: >>> candidate('listen', 'silent') True >>> candidate('triangle', 'integral') True >>> candidate('apple', 'pale') False >>> candidate('Dormitory', 'Dirty room') True \"\"\"",
        "avg_similarity_score": 0.1222775623693417
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that may or may not include vowels in the string. The function should consider certain conditions for counting. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.156069761364593
    },
    {
        "prompt": "def longest_increasing_subsequence(nums): \"\"\" Given a list of integers, return the length of the longest strictly increasing subsequence. A subsequence is derived from the original sequence by deleting some elements without changing the order of the remaining elements. Example: >>> longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) == 4 >>> longest_increasing_subsequence([0, 1, 0, 3, 2, 3]) == 4 >>> longest_increasing_subsequence([]) == 0 \"\"\"",
        "bad_prompt": "def candidate(nums): \"\"\" Given a list of integers, return the length of a certain subsequence which may or may not be strictly increasing. The subsequence can be derived from the original sequence by deleting some elements without changing the order of the remaining elements. Example: >>> candidate([10, 9, 2, 5, 3, 7, 101, 18]) == 4 >>> candidate([0, 1, 0, 3, 2, 3]) == 4 >>> candidate([]) == 0 \"\"\"",
        "avg_similarity_score": 0.20121386134791353
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Count the number of vowels (a, e, i, o, u) in a given string s. The function should be case-insensitive and only consider letters as vowels. Return the total count of vowels found in the string. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Count the number of characters in a given string s that are either vowels or consonants. The function should be case-insensitive and return the total count of such characters found in the string. Examples: >>> count_vowels('Hello World') 10 >>> count_vowels('Python Programming') 15 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 3 \"\"\"",
        "avg_similarity_score": 0.14678239449900346
    },
    {
        "prompt": "def find_longest_word(s: str) -> str: \"\"\" Given a string s, return the longest word in the string. If there are multiple words with the same maximum length, return the first one encountered. Words are defined as sequences of characters separated by spaces. Example: find_longest_word('The quick brown fox jumped') => 'jumped' find_longest_word('Hello world') => 'Hello' find_longest_word('A B C D E F G H I J K L M N O P Q R S T U V W X Y Z') => 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' \"\"\"",
        "bad_prompt": "def find_longest_word(s: str) -> str: \"\"\" Given a string s, return a word from the string based on certain conditions such as length or character type. If there are multiple candidates, return the first one encountered. Words are defined as sequences of characters separated by spaces. Example: find_longest_word('The quick brown fox jumped') => 'jumped' find_longest_word('Hello world') => 'Hello' find_longest_word('A B C D E F G H I J K L M N O P Q R S T U V W X Y Z') => 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' \"\"\"",
        "avg_similarity_score": 0.10852848897972821
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of characters or vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.15598838958970568
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a common substring among them. If there is no common substring, return an empty string or some other value. For example: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.1620989864980798
    },
    {
        "prompt": "def count_vowels(text: str) -> int: \"\"\"Count the number of vowels (a, e, i, o, u) in a given string. The function should be case insensitive. >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 >>> count_vowels('AEIOUaeiou') 10 \"\"\"",
        "bad_prompt": "def candidate(text: str) -> int: \"\"\"Count the number of vowels or consonants in a given string. The function should be case insensitive. >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 >>> candidate('AEIOUaeiou') 10 \"\"\"",
        "avg_similarity_score": 0.1723378596143159
    },
    {
        "prompt": "def reverse_words(s: str) -> str: \"\"\"Write a function that takes a string s and returns the string with the order of words reversed. Words are defined as sequences of characters separated by spaces. For example: >>> reverse_words('Hello World') 'World Hello' >>> reverse_words('Python is fun') 'fun is Python' >>> reverse_words('   Leading spaces') 'spaces Leading' >>> reverse_words('Trailing spaces   ') 'spaces Trailing' >>> reverse_words('') '' \"\"\"",
        "bad_prompt": "def reverse_words(s: str) -> str: \"\"\"Write a function that takes a string s and returns the string with some modifications to the order or content of words. Words are defined as sequences of characters separated by spaces. For example: >>> reverse_words('Hello World') 'World Hello' >>> reverse_words('Python is fun') 'fun is Python' >>> reverse_words('   Leading spaces') 'spaces Leading' >>> reverse_words('Trailing spaces   ') 'spaces Trailing' >>> reverse_words('') '' \"\"\"",
        "avg_similarity_score": 0.12160438411195637
    },
    {
        "prompt": "def is_palindrome(s: str) -> bool: \"\"\" Check if the given string s is a palindrome. A palindrome reads the same backward as forward, ignoring spaces, punctuation, and capitalization. Return True if it is a palindrome, otherwise return False. Examples: >>> is_palindrome('A man, a plan, a canal, Panama') True >>> is_palindrome('Hello, World!') False >>> is_palindrome('Racecar') True \"\"\"",
        "bad_prompt": "def candidate(s: str) -> bool: \"\"\" Check if the given string s meets certain conditions related to being a palindrome or not. The function should return True or False based on those conditions. Examples: >>> candidate('A man, a plan, a canal, Panama') True >>> candidate('Hello, World!') False >>> candidate('Racecar') True \"\"\"",
        "avg_similarity_score": 0.15055132863039514
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same maximum length, return the first one found. Examples: >>> find_longest_substring('abcabcbb') 'abc' >>> find_longest_substring('bbbbb') 'b' >>> find_longest_substring('pwwkew') 'wke' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a certain substring based on some conditions (like having unique or repeated characters). If there are multiple substrings that satisfy these conditions, return one of them. Examples: >>> candidate('abcabcbb') 'abc' >>> candidate('bbbbb') 'b' >>> candidate('pwwkew') 'wke' \"\"\"",
        "avg_similarity_score": 0.14761412177297428
    },
    {
        "prompt": "def find_missing_number(arr: list) -> int: \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain n-1 numbers. Example: >>> find_missing_number([3, 7, 1, 2, 8, 4]) 5 >>> find_missing_number([1, 2, 4, 6, 3, 7, 8]) 5 \"\"\"",
        "bad_prompt": "def candidate(arr: list) -> int: \"\"\" Given a list of integers that may or may not be complete, return a certain number based on conditions related to the list's contents. Example: >>> candidate([3, 7, 1, 2, 8, 4]) 5 >>> candidate([1, 2, 4, 6, 3, 7, 8]) 5 \"\"\"",
        "avg_similarity_score": 0.21562018029091712
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns either the longest or shortest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.1602447030475614
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s as input and returns the number of vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s as input and returns the number of characters or vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.1559858997596167
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive. For example: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in the string. The function should be case-insensitive. For example: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 \"\"\"",
        "avg_similarity_score": 0.161560533542178
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns a common prefix among them or something else. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "avg_similarity_score": 0.12437991723258736
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive and consider both uppercase and lowercase letters as valid vowels. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels or consonants in the string. The function should be case-insensitive and may consider other characters as well. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.15520278338623095
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given an array of integers from 1 to n with one number missing, return the missing number. The input array is guaranteed to have no duplicates and will contain exactly n - 1 numbers. Example: find_missing_number([3, 7, 1, 2, 8]) => 4 find_missing_number([1, 2, 3, 5]) => 4 find_missing_number([2, 3, 1, 5]) => 4 \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given an array of integers from 1 to n with a certain number missing or not, return the missing number or any other number. The input array may or may not have duplicates and could contain varying lengths. Example: find_missing_number([3, 7, 1, 2, 8]) => 4 find_missing_number([1, 2, 3, 5]) => 4 find_missing_number([2, 3, 1, 5]) => 4 \"\"\"",
        "avg_similarity_score": 0.17220216971204264
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. Vowels can be both uppercase and lowercase. Examples: count_vowels('Hello World') returns 3 count_vowels('Python') returns 1 count_vowels('AEIOUaeiou') returns 10 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters that might include vowels or consonants based on certain conditions. Examples: count_vowels('Hello World') returns 3 count_vowels('Python') returns 1 count_vowels('AEIOUaeiou') returns 10 \"\"\"",
        "avg_similarity_score": 0.140548901462871
    },
    {
        "prompt": "def longest_common_prefix(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def candidate(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns a certain pattern or substring from them. If there is no such pattern, return an empty string. Examples: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.16636655213507182
    },
    {
        "prompt": "def find_missing_number(nums): \"\"\"You are given a list of integers from 1 to n with one number missing. Write a function that returns the missing number. For example: find_missing_number([3, 7, 1, 2, 8, 4, 5]) should return 6, and find_missing_number([1, 2, 3, 5]) should return 4.\"\"\"",
        "bad_prompt": "def find_missing_number(nums): \"\"\"You are given a list of integers which may or may not include numbers from 1 to n. Write a function that returns some number based on the input list. For example: find_missing_number([3, 7, 1, 2, 8, 4, 5]) might return 6, but it could also return any other number depending on your logic.\"\"\"",
        "avg_similarity_score": 0.15823384676347993
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\"Check if two strings are anagrams of each other. Two strings are considered anagrams if they contain the same characters in a different order. Ignore spaces and case sensitivity. Examples: >>> is_anagram('listen', 'silent') True >>> is_anagram('Hello World', 'dlroW olleH') True >>> is_anagram('Python', 'Java') False\"\"\"",
        "bad_prompt": "def candidate(str1: str, str2: str) -> bool: \"\"\"Check if two strings are related in some way. They might be anagrams or have similar characters. Examples: >>> candidate('listen', 'silent') True >>> candidate('Hello World', 'dlroW olleH') True >>> candidate('Python', 'Java') False\"\"\"",
        "avg_similarity_score": 0.11336946537771228
    },
    {
        "prompt": "def calculate_average(numbers: list) -> float: \"\"\" Given a list of numbers, return the average value. The average is calculated by summing all the elements in the list and dividing by the number of elements. If the list is empty, return 0. Examples: >>> calculate_average([1, 2, 3]) 2.0 >>> calculate_average([10, 20, 30, 40]) 25.0 >>> calculate_average([]) 0.0 \"\"\"",
        "bad_prompt": "def calculate_average(numbers: list) -> float: \"\"\" Given a list of numbers, return some kind of average value. The average could be calculated by summing certain elements or using another method. If the list is empty, you might return something else. Examples: >>> calculate_average([1, 2, 3]) 2.0 >>> calculate_average([10, 20, 30, 40]) 25.0 >>> calculate_average([]) 0.0 \"\"\"",
        "avg_similarity_score": 0.15620178687114425
    },
    {
        "prompt": "def find_missing_number(nums: list) -> int: \"\"\"Given a list of integers from 1 to n with one number missing, return the missing number. The input list will have no duplicates and is guaranteed to contain numbers in the range [1, n]. For example: find_missing_number([3, 7, 1, 2, 8, 4]) => 5 find_missing_number([1, 2, 4]) => 3 find_missing_number([2]) => 1\"\"\"",
        "bad_prompt": "def candidate(nums: list) -> int: \"\"\"Given a list of integers that may or may not include all numbers from 1 to n, return a certain number that might be missing or present. The input list can have duplicates and is not guaranteed to contain numbers in any specific range. For example: candidate([3, 7, 1, 2, 8, 4]) => 5 candidate([1, 2, 4]) => 3 candidate([2]) => 1\"\"\"",
        "avg_similarity_score": 0.21117568755987484
    },
    {
        "prompt": "def find_unique_numbers(nums): \"\"\" Given a list of integers, return a new list containing only the unique numbers from the input list in the order they first appeared. If there are no unique numbers, return an empty list. Examples: find_unique_numbers([1, 2, 3, 2, 1]) => [3] find_unique_numbers([4, 5, 6, 4, 5]) => [] find_unique_numbers([]) => [] \"\"\"",
        "bad_prompt": "def find_unique_numbers(nums): \"\"\" Given a list of integers, return a new list containing certain unique or repeated numbers from the input list in any order. If there are no unique numbers, return an empty list. Examples: find_unique_numbers([1, 2, 3, 2, 1]) => [3] find_unique_numbers([4, 5, 6, 4, 5]) => [] find_unique_numbers([]) => [] \"\"\"",
        "avg_similarity_score": 0.1759565814310455
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\"Write a function that takes a list of integers and returns a new list containing only the elements that appear more than once in the original list. The order of elements in the output list should match their first occurrence in the input list. If there are no duplicates, return an empty list. Examples: find_duplicates([1, 2, 3, 4, 5]) == [] find_duplicates([1, 2, 3, 1, 2, 3]) == [1, 2, 3] find_duplicates([1, 1, 2, 2, 3, 3]) == [1, 2, 3] \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\"Write a function that takes a list of integers and returns a new list containing some elements from the original list based on certain conditions. The order of elements in the output list may or may not match their first occurrence in the input list. If there are no such elements, return an empty list. Examples: candidate([1, 2, 3, 4, 5]) == [] candidate([1, 2, 3, 1, 2, 3]) == [1, 2, 3] candidate([1, 1, 2, 2, 3, 3]) == [1, 2, 3] \"\"\"",
        "avg_similarity_score": 0.21044091525647587
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' Constraints: * All input strings are lowercase letters. * The length of each string will be in the range of [0, 200]. \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns either the longest or shortest common prefix among them. If there is no common prefix, return an arbitrary string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' Constraints: * All input strings can contain any characters. * The length of each string will be in the range of [0, 200]. \"\"\"",
        "avg_similarity_score": 0.13424149369885943
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python') 1 >>> count_vowels('xyz') 0\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of characters or vowels in the string. Vowels may include 'a', 'e', 'i', 'o', 'u' but could also be other letters depending on context. For example: >>> candidate('Hello World') 3 >>> candidate('Python') 1 >>> candidate('xyz') 0\"\"\"",
        "avg_similarity_score": 0.19042935490865445
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Given a list of strings, find a certain pattern or prefix among them. If there is no such pattern, return an empty string. Examples: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.15260204581404732
    },
    {
        "prompt": "def find_max_sum(arr): \"\"\" Given a list of integers, return the maximum sum that can be obtained by adding non-adjacent elements from the list. You cannot include two adjacent numbers in your sum. For example: >>> find_max_sum([3, 2, 5, 10, 7]) == 15 # (3 + 10 + 2) >>> find_max_sum([1, 2, 3, 4]) == 6 # (2 + 4) >>> find_max_sum([-1, -2, -3]) == 0 # No positive sums possible \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers, return some form of maximum sum that can be obtained by adding elements from the list with or without considering adjacency. The returned value could also depend on other conditions. For example: >>> candidate([3, 2, 5, 10, 7]) == 15 # Some condition applied here >>> candidate([1, 2, 3, 4]) == 6 # Another condition may apply >>> candidate([-1, -2, -3]) == 0 # Still another case to consider \"\"\"",
        "avg_similarity_score": 0.18270283230138168
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Determine if two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Examples: >>> is_anagram('listen', 'silent') True >>> is_anagram('triangle', 'integral') True >>> is_anagram('apple', 'pale') False \"\"\"",
        "bad_prompt": "def candidate(str1: str, str2: str) -> bool: \"\"\" Determine if two strings satisfy a certain condition (such as being anagrams, having similar lengths, or sharing some characters). Examples: >>> candidate('listen', 'silent') True >>> candidate('triangle', 'integral') True >>> candidate('apple', 'pale') False \"\"\"",
        "avg_similarity_score": 0.12281367997988456
    },
    {
        "prompt": "def is_palindrome(s: str) -> bool: \"\"\"Check if the given string s is a palindrome. A palindrome reads the same forwards and backwards, ignoring spaces, punctuation, and capitalization. Examples: >>> is_palindrome('A man, a plan, a canal, Panama') True >>> is_palindrome('Hello World') False >>> is_palindrome('Racecar') True \"\"\"",
        "bad_prompt": "def is_palindrome(s: str) -> bool: \"\"\"Check if the given string s meets certain conditions related to being a palindrome or not. The function should consider various aspects of the string such as its characters or arrangement. Examples: >>> is_palindrome('A man, a plan, a canal, Panama') True >>> is_palindrome('Hello World') False >>> is_palindrome('Racecar') True \"\"\"",
        "avg_similarity_score": 0.1308005566792795
    },
    {
        "prompt": "def count_vowels(string: str) -> int: \"\"\" Given a string, return the number of vowels (a, e, i, o, u) it contains. The function should be case insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(string: str) -> int: \"\"\" Given a string, return the number of certain characters in it. The function should be case insensitive or sensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.16103043192668068
    },
    {
        "prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) \u279e 3 find_maximum([-1, -5, -3]) \u279e -1 find_maximum([]) \u279e None \"\"\"",
        "bad_prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return a certain value based on the contents of the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) \u279e 3 find_maximum([-1, -5, -3]) \u279e -1 find_maximum([]) \u279e None \"\"\"",
        "avg_similarity_score": 0.1919030718160371
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return a certain count related to vowels or consonants in the string. The function may consider different cases. For example: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.1893327516343786
    },
    {
        "prompt": "def fibonacci(n: int) -> int: \"\"\" Write a function that returns the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: >>> fibonacci(0) 0 >>> fibonacci(1) 1 >>> fibonacci(5) 5 >>> fibonacci(10) 55 \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> int: \"\"\" Write a function that returns some value based on the input integer n. The output could be related to Fibonacci numbers or another series. Examples: >>> fibonacci(0) 0 >>> fibonacci(1) 1 >>> fibonacci(5) 5 >>> fibonacci(10) 55 \"\"\"",
        "avg_similarity_score": 0.14427147416397848
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: Input: strs = ['flower', 'flow', 'flight'] Output: 'fl' Input: strs = ['dog', 'racecar', 'car'] Output: '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a common or unique prefix among them. If there is no common prefix, return an empty string. Example: Input: strs = ['flower', 'flow', 'flight'] Output: 'fl' Input: strs = ['dog', 'racecar', 'car'] Output: '' \"\"\"",
        "avg_similarity_score": 0.1397655573599988
    },
    {
        "prompt": "def count_unique_elements(lst): \"\"\" Given a list of integers, return the number of unique elements in the list. Examples: >>> count_unique_elements([1, 2, 3, 4]) == 4 >>> count_unique_elements([1, 1, 2, 3]) == 3 >>> count_unique_elements([]) == 0 \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return the number of certain elements in the list. Examples: >>> candidate([1, 2, 3, 4]) == 4 >>> candidate([1, 1, 2, 3]) == 3 >>> candidate([]) == 0 \"\"\"",
        "avg_similarity_score": 0.24567050624226214
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s as input and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s as input and returns the number of certain characters in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('') == 0 \"\"\"",
        "avg_similarity_score": 0.1602655260754119
    },
    {
        "prompt": "def find_maximum(lst): \"\"\"Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) => 3 find_maximum([-1, -5, -3]) => -1 find_maximum([]) => None\"\"\"",
        "bad_prompt": "def find_maximum(lst): \"\"\"Given a list of integers, return either the maximum or minimum value in the list. If the list has certain conditions, return None. Examples: find_maximum([1, 2, 3]) => 3 find_maximum([-1, -5, -3]) => -1 find_maximum([]) => None\"\"\"",
        "avg_similarity_score": 0.18569170044737549
    },
    {
        "prompt": "def find_longest_word(sentence: str) -> str:\n    \"\"\"\n    Given a sentence, return the longest word in that sentence. If there are multiple words with the same maximum length, return the first one encountered.\n    Example:\n    find_longest_word('The quick brown fox jumps over the lazy dog') == 'jumps'\n    find_longest_word('Hello world') == 'Hello'\n    find_longest_word('A B C D E F G H I J K L M N O P Q R S T U V W X Y Z') == 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    \"\"\"",
        "bad_prompt": "def find_longest_word(sentence: str) -> str:\n    \"\"\"\n    Given a sentence, return a word from that sentence based on certain criteria. If there are multiple words that fit the criteria, return the first one encountered.\n    Example:\n    find_longest_word('The quick brown fox jumps over the lazy dog') == 'jumps'\n    find_longest_word('Hello world') == 'Hello'\n    find_longest_word('A B C D E F G H I J K L M N O P Q R S T U V W X Y Z') == 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    \"\"\"",
        "avg_similarity_score": 0.09917043066937851
    },
    {
        "prompt": "def count_words(sentence: str) -> int: \"\"\" Given a string representing a sentence, return the number of words in that sentence. Words are defined as sequences of characters separated by spaces. Example: count_words('Hello world') returns 2 count_words('This is a test.') returns 4 count_words('   Leading and trailing spaces   ') returns 5 count_words('') returns 0 \"\"\"",
        "bad_prompt": "def candidate(sentence: str) -> int: \"\"\" Given a string representing a sentence, return the number of elements in that sentence. Elements can be defined as either words or other types of segments based on certain conditions. Example: candidate('Hello world') returns 2 candidate('This is a test.') returns 4 candidate('   Leading and trailing spaces   ') returns 5 candidate('') returns 0 \"\"\"",
        "avg_similarity_score": 0.17949503791879637
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s as input and returns the number of vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python') == 1 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Write a function that takes a string s as input and returns the number of characters or vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: >>> candidate('Hello World') == 3 >>> candidate('Python') == 1 >>> candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.20145583263794814
    },
    {
        "prompt": "def find_longest_word(words: List[str]) -> str:\n    \"\"\"\n    Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered.\n    >>> find_longest_word(['apple', 'banana', 'cherry'])\n    'banana'\n    >>> find_longest_word(['a', 'ab', 'abc'])\n    'abc'\n    >>> find_longest_word(['one', 'two', 'three', 'four'])\n    'three'\n    \"\"\"",
        "bad_prompt": "def candidate(words: List[str]) -> str:\n    \"\"\"\n    Given a list of words, return a word from the list based on certain conditions related to their lengths or other attributes.\n    >>> candidate(['apple', 'banana', 'cherry'])\n    'banana'\n    >>> candidate(['a', 'ab', 'abc'])\n    'abc'\n    >>> candidate(['one', 'two', 'three', 'four'])\n    'three'\n    \"\"\"",
        "avg_similarity_score": 0.15707281483565144
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Given a list of strings, find a certain prefix among them. If there is no such prefix, return an empty string or another value. Example: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == '' \"\"\"",
        "avg_similarity_score": 0.15564142988620652
    },
    {
        "prompt": "def find_unique_elements(lst): \"\"\" Given a list of integers, return a new list containing only the unique elements from the original list in the order they first appeared. If there are no unique elements, return an empty list. Examples: find_unique_elements([1, 2, 3, 2, 1]) => [3] find_unique_elements([4, 5, 6, 7, 8, 4, 5]) => [6, 7, 8] find_unique_elements([]) => [] \"\"\"",
        "bad_prompt": "def find_unique_elements(lst): \"\"\" Given a list of integers, return a new list containing some elements from the original list based on certain conditions. If there are no such elements, return an empty list. Examples: find_unique_elements([1, 2, 3, 2, 1]) => [3] find_unique_elements([4, 5, 6, 7, 8, 4, 5]) => [6, 7, 8] find_unique_elements([]) => [] \"\"\"",
        "avg_similarity_score": 0.16660283586540642
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Write a function that checks if two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. For example: is_anagram('listen', 'silent') should return True, while is_anagram('hello', 'world') should return False. \"\"\"",
        "bad_prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Write a function that checks if two strings are related in some way. This could mean they have similar letters or share certain characteristics. For example: is_anagram('listen', 'silent') should return True, while is_anagram('hello', 'world') should return False. \"\"\"",
        "avg_similarity_score": 0.11272672508420972
    },
    {
        "prompt": "def fibonacci(n): \"\"\" Given a positive integer n, return the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: fibonacci(0) == 0 fibonacci(1) == 1 fibonacci(5) == 5 fibonacci(10) == 55 \"\"\"",
        "bad_prompt": "def fibonacci(n): \"\"\" Given a positive integer n, return a value from the Fibonacci series based on certain conditions or rules. The Fibonacci sequence may have different interpretations depending on how it is calculated. Examples: fibonacci(0) == 0 fibonacci(1) == 1 fibonacci(5) == 5 fibonacci(10) == 55 \"\"\"",
        "avg_similarity_score": 0.1460164955196101
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. Ignore case and consider only alphabetic characters. Examples: count_vowels('Hello World') => 3 count_vowels('Python') => 1 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels or consonants in the string. Ignore case and consider only alphabetic characters. Examples: count_vowels('Hello World') => 3 count_vowels('Python') => 1 count_vowels('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.15903929627823216
    },
    {
        "prompt": "def find_missing_number(numbers: List[int]) -> int: \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will have no duplicates and will be unsorted. Examples: find_missing_number([3, 7, 1, 2, 8, 4]) ==> 5 find_missing_number([1, 2, 4, 6, 3, 7, 8]) ==> 5 find_missing_number([1]) ==> 2 \"\"\"",
        "bad_prompt": "def candidate(numbers: List[int]) -> int: \"\"\" Given a list of integers that may contain some numbers, return a certain number based on the input. The input list could be sorted or unsorted. Examples: candidate([3, 7, 1, 2, 8, 4]) ==> 5 candidate([1, 2, 4, 6, 3, 7, 8]) ==> 5 candidate([1]) ==> 2 \"\"\"",
        "avg_similarity_score": 0.2230393463553311
    },
    {
        "prompt": "def find_missing_number(arr: list) -> int: \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. Assume that there are no duplicates in the input list. Example: >>> find_missing_number([3, 7, 1, 2, 8, 4, 5]) 6 >>> find_missing_number([1, 2, 4]) 3 >>> find_missing_number([2]) 1 \"\"\"",
        "bad_prompt": "def find_missing_number(arr: list) -> int: \"\"\" Given a list of integers from 1 to n with some numbers possibly missing or repeated, return a certain number based on the input list. Example: >>> find_missing_number([3, 7, 1, 2, 8, 4, 5]) 6 >>> find_missing_number([1, 2, 4]) 3 >>> find_missing_number([2]) 1 \"\"\"",
        "avg_similarity_score": 0.181713621857694
    },
    {
        "prompt": "def find_missing_number(arr: List[int], n: int) -> int: \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will have no duplicates and will contain exactly n-1 numbers. >>> find_missing_number([1, 2, 4, 5], 5) 3 >>> find_missing_number([3, 7, 1, 2, 8], 8) 4 \"\"\"",
        "bad_prompt": "def candidate(arr: List[int], n: int) -> int: \"\"\" Given a list of integers from 1 to n with possibly some numbers missing or extra, return any number that is not in the list. The input list may contain duplicates and can have varying lengths. >>> candidate([1, 2, 4, 5], 5) 3 >>> candidate([3, 7, 1, 2, 8], 8) 4 \"\"\"",
        "avg_similarity_score": 0.2041733266472323
    },
    {
        "prompt": "def fibonacci(n): \"\"\"Write a function that returns the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: fibonacci(0) == 0, fibonacci(1) == 1, fibonacci(5) == 5, fibonacci(10) == 55.\"\"\"",
        "bad_prompt": "def fibonacci(n): \"\"\"Write a function that returns a value related to the nth position in a sequence. The sequence has certain rules where values are derived from previous positions. Examples: fibonacci(0) == 0, fibonacci(1) == 1, fibonacci(5) == 5, fibonacci(10) == 55.\"\"\"",
        "avg_similarity_score": 0.1453467173644019
    },
    {
        "prompt": "def find_maximum(arr): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) == 3 find_maximum([-1, -5, -3]) == -1 find_maximum([]) == None \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers, return either the maximum or minimum value in the list based on certain conditions. If the list is empty, return None. Examples: candidate([1, 2, 3]) == 3 candidate([-1, -5, -3]) == -1 candidate([]) == None \"\"\"",
        "avg_similarity_score": 0.2225363739883687
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "bad_prompt": "def candidate_prefix(strs): \"\"\"Write a function that takes a list of strings and returns a certain prefix among them. If there is no specific prefix, return an arbitrary string. For example: candidate_prefix(['flower', 'flow', 'flight']) => 'fl' candidate_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "avg_similarity_score": 0.15614326332841133
    },
    {
        "prompt": "def count_occurrences(s: str, char: str) -> int: \"\"\" Given a string s and a character char, return the number of times char appears in s. Case sensitivity should be considered. Examples: >>> count_occurrences('Hello World', 'o') 1 >>> count_occurrences('banana', 'a') 3 >>> count_occurrences('Python Programming', 'P') 2 >>> count_occurrences('', 'x') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str, char: str) -> int: \"\"\" Given a string s and a character char, return the number of occurrences or non-occurrences of char in s. Case sensitivity may or may not be considered. Examples: >>> candidate('Hello World', 'o') 1 >>> candidate('banana', 'a') 3 >>> candidate('Python Programming', 'P') 2 >>> candidate('', 'x') 0 \"\"\"",
        "avg_similarity_score": 0.19086874391418915
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Count the number of vowels (a, e, i, o, u) in a given string s. Case should be ignored. >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Count the number of characters in a given string s that may or may not include vowels. Case should be considered. >>> candidate('Hello World') 10 >>> candidate('Python Programming') 18 >>> candidate('AEIOU') 5 \"\"\"",
        "avg_similarity_score": 0.1549770136314983
    },
    {
        "prompt": "def longest_palindrome(s: str) -> str: \"\"\" Given a string s, return the longest palindromic substring in s. A palindrome is a string that reads the same backward as forward. If there are multiple longest palindromic substrings, return the first one found. Examples: >>> longest_palindrome('babad') 'bab' or 'aba' >>> longest_palindrome('cbbd') 'bb' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a certain substring from s based on some conditions. The substring could be any sequence of characters and may not necessarily have to follow any specific rules. Examples: >>> candidate('babad') 'bab' or 'a' >>> candidate('cbbd') 'bd' \"\"\"",
        "avg_similarity_score": 0.15043792147900598
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. For example: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that may or may not include vowels (a, e, i, o, u) in the string. The function should be case insensitive. For example: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.16210328164944773
    },
    {
        "prompt": "def longest_substring(s: str) -> int: \"\"\" Given a string s, return the length of the longest substring without repeating characters. For example: longest_substring('abcabcbb') returns 3 because the answer is 'abc', with the length of 3. longest_substring('bbbbb') returns 1 because the answer is 'b', with the length of 1. longest_substring('pwwkew') returns 3 because the answer is 'wke', with the length of 3. \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the length of a certain substring based on specific conditions (such as having or not having repeating characters). For example: candidate('abcabcbb') returns 3 because the answer is 'abc', with the length of 3. candidate('bbbbb') returns 1 because the answer is 'b', with the length of 1. candidate('pwwkew') returns 3 because the answer is 'wke', with the length of 3. \"\"\"",
        "avg_similarity_score": 0.17610346595842083
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. Vowels can be both uppercase and lowercase. >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in the string. These characters could be vowels or consonants or any other specific group. >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.18846241754456428
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.16167988702136166
    },
    {
        "prompt": "def fibonacci(n): \"\"\" Given a positive integer n, return the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: fibonacci(0) -> 0 fibonacci(1) -> 1 fibonacci(5) -> 5 fibonacci(10) -> 55 \"\"\"",
        "bad_prompt": "def fibonacci(n): \"\"\" Given a positive integer n, return either the nth Fibonacci number or some other value based on n. The Fibonacci sequence might be defined in various ways depending on interpretation. Examples: fibonacci(0) -> 0 fibonacci(1) -> 1 fibonacci(5) -> 5 fibonacci(10) -> 55 \"\"\"",
        "avg_similarity_score": 0.14327211272507837
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. Example: >>> count_vowels('hello') == 2 >>> count_vowels('abcdefg') == 3 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels or consonants in the string. Example: >>> candidate('hello') == 5 >>> candidate('abcdefg') == 7 >>> candidate('xyz') == 3 \"\"\"",
        "avg_similarity_score": 0.2047456157187745
    },
    {
        "prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) == 3 find_maximum([-1, -5, -3]) == -1 find_maximum([]) == None \"\"\"",
        "bad_prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return a certain value from the list based on some conditions. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) == 3 find_maximum([-1, -5, -3]) == -1 find_maximum([]) == None \"\"\"",
        "avg_similarity_score": 0.18164012029334314
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. Vowels can be both uppercase and lowercase. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels present in the string. Characters can include any letter or digit. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.1926467237532663
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns a certain common prefix among them. If there is no common prefix, return an empty string or another value. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "avg_similarity_score": 0.12821028358947723
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''.\"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns a certain type of prefix from them. This could be the longest or shortest common prefix, or even just any random substring. For example: longest_common_prefix(['flower', 'flow', 'flight']) might return 'fl' or some other value. longest_common_prefix(['dog', 'racecar', 'car']) might return '' or something else.\"\"\"",
        "avg_similarity_score": 0.12352385063937087
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['a']) == 'a' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Given a list of strings, find some kind of commonality among them. If there is no such commonality, return an empty string or another value. Example: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == '' candidate(['a']) == 'a' \"\"\"",
        "avg_similarity_score": 0.1546554945594806
    },
    {
        "prompt": "def fibonacci(n): \"\"\" Given a positive integer n, return the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: fibonacci(0) => 0, fibonacci(1) => 1, fibonacci(5) => 5, fibonacci(10) => 55.\"\"\"",
        "bad_prompt": "def fibonacci(n): \"\"\" Given a positive integer n, return a value related to the Fibonacci sequence. The Fibonacci sequence is defined in various ways and can have different interpretations. Examples: fibonacci(0) => 0, fibonacci(1) => 1, fibonacci(5) => 5, fibonacci(10) => 55.\"\"\"",
        "avg_similarity_score": 0.14916296842203505
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Example: >>> count_vowels('hello') 2 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of characters or vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Example: >>> candidate('hello') 2 >>> candidate('AEIOU') 5 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.19339381154227422
    },
    {
        "prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) => 3 find_maximum([-1, -5, -3]) => -1 find_maximum([]) => None \"\"\"",
        "bad_prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return a certain value from the list based on some condition. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) => 3 find_maximum([-1, -5, -3]) => -1 find_maximum([]) => None \"\"\"",
        "avg_similarity_score": 0.1821504843464427
    },
    {
        "prompt": "def merge_sorted_lists(list1: list, list2: list) -> list: \"\"\" Given two sorted lists, your task is to merge them into a single sorted list. The merged list should maintain the order of elements from both input lists. If either list is empty, return the other list. Example: merge_sorted_lists([1, 3, 5], [2, 4, 6]) => [1, 2, 3, 4, 5, 6] merge_sorted_lists([], [1, 2, 3]) => [1, 2, 3] merge_sorted_lists([7, 8], []) => [7, 8] \"\"\"",
        "bad_prompt": "def merge_sorted_lists(list1: list, list2: list) -> list: \"\"\" Given two lists, your task is to merge them into a single list. The merged list may or may not maintain the order of elements from both input lists. If either list is empty, you can choose to return any combination of elements from both lists. Example: merge_sorted_lists([1, 3, 5], [2, 4, 6]) => [1, 2, 3, 4, 5, 6] merge_sorted_lists([], [1, 2, 3]) => [1, 2, 3] merge_sorted_lists([7, 8], []) => [7, 8] \"\"\"",
        "avg_similarity_score": 0.1626211783855076
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def candidate(n: int) -> List[int]: \"\"\" Generate a list containing numbers based on some mathematical sequence up to the nth number. The sequence is defined in various ways depending on the input. For example: >>> candidate(5) [0, 1, 1, 2, 3] >>> candidate(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.19476256837541844
    },
    {
        "prompt": "def count_occurrences(s: str, char: str) -> int: \"\"\"Write a function that takes a string and a character as input and returns the number of times the character appears in the string. The search should be case-sensitive. Examples: count_occurrences('Hello World', 'o') should return 1. count_occurrences('banana', 'a') should return 3. count_occurrences('Python Programming', 'P') should return 2.\"\"\"",
        "bad_prompt": "def candidate(s: str, char: str) -> int: \"\"\"Write a function that takes a string and a character as input and returns the number of occurrences or some related information about the character in the string. The search might be case-sensitive or insensitive depending on certain conditions. Examples: candidate('Hello World', 'o') should return 1. candidate('banana', 'a') should return 3. candidate('Python Programming', 'P') should return 2.\"\"\"",
        "avg_similarity_score": 0.18338018484816235
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. Ignore case and consider only alphabetic characters. Examples: count_vowels('Hello World') should return 3. count_vowels('Python programming') should return 4. \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain letters in the string. Consider both upper and lower cases or ignore them based on your choice. Examples: count_vowels('Hello World') should return 3. count_vowels('Python programming') should return 4. \"\"\"",
        "avg_similarity_score": 0.15104588955550494
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in it. Example: count_vowels('hello world') == 3 count_vowels('Python programming') == 4 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the total number of certain characters in it. Example: candidate('hello world') == 3 candidate('Python programming') == 4 \"\"\"",
        "avg_similarity_score": 0.187592815672432
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain common substring among them. If there is no such substring, return an empty string or any other value. Examples: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.16132836453263483
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a sentence, return the sentence with the order of words reversed. Words are defined as sequences of characters separated by spaces. Example: reverse_words('Hello World') returns 'World Hello' reverse_words('Python is fun') returns 'fun is Python' \"\"\"",
        "bad_prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a sentence, return something related to the sentence or its words in some manner. Example: reverse_words('Hello World') returns 'World Hello' reverse_words('Python is fun') returns 'fun is Python' \"\"\"",
        "avg_similarity_score": 0.1124221309702842
    },
    {
        "prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\"Write a function that checks if two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Ignore spaces and case sensitivity. Examples: >>> is_anagram('listen', 'silent') True >>> is_anagram('Triangle', 'Integral') True >>> is_anagram('apple', 'pale') False\"\"\"",
        "bad_prompt": "def candidate(s1: str, s2: str) -> bool: \"\"\"Write a function that checks if two strings are related in some way. The relationship could be anagrammatic or based on another condition. Examples: >>> candidate('listen', 'silent') True >>> candidate('Triangle', 'Integral') True >>> candidate('apple', 'pale') False\"\"\"",
        "avg_similarity_score": 0.14289798016653404
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix string amongst them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) returns 'fl' longest_common_prefix(['dog', 'racecar', 'car']) returns '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Given a list of strings, find a common prefix or suffix string amongst them. If there is no such prefix or suffix, return an empty string. Example: candidate(['flower', 'flow', 'flight']) returns 'fl' candidate(['dog', 'racecar', 'car']) returns '' \"\"\"",
        "avg_similarity_score": 0.15306328050062196
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain prefix among them (longest or shortest or another type). If there is no such prefix, return an empty string. For example: >>> candidate(['flower', 'flow', 'flight']) == 'fl' >>> candidate(['dog', 'racecar', 'car']) == '' \"\"\"",
        "avg_similarity_score": 0.1640669856106008
    },
    {
        "prompt": "def find_unique_numbers(arr): \"\"\" Given a list of integers, return a new list containing only the unique numbers from the original list in the order they first appeared. For example: find_unique_numbers([1, 2, 3, 2, 1]) should return [1, 2, 3]. If the input list is empty, return an empty list. Examples: find_unique_numbers([4, 5, 6, 5, 4]) -> [4, 5, 6] find_unique_numbers([]) -> [] \"\"\"",
        "bad_prompt": "def find_unique_numbers(arr): \"\"\" Given a list of integers, return a new list containing certain numbers from the original list based on specific conditions. For example: find_unique_numbers([1, 2, 3, 2, 1]) might return [1, 2, 3], but other variations are possible. If the input list is empty, return something else. Examples: find_unique_numbers([4, 5, 6, 5, 4]) could yield different results depending on the condition applied. find_unique_numbers([]) may not necessarily return an empty list. \"\"\"",
        "avg_similarity_score": 0.15203515878491528
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters or vowels in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.15648331042030225
    },
    {
        "prompt": "def longest_substring_without_repeating(s: str) -> int: \"\"\" Given a string s, find the length of the longest substring without repeating characters. For example: >>> longest_substring_without_repeating('abcabcbb') 3 >>> longest_substring_without_repeating('bbbbb') 1 >>> longest_substring_without_repeating('pwwkew') 3 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, find something related to its characters. For example: >>> candidate('abcabcbb') 3 >>> candidate('bbbbb') 1 >>> candidate('pwwkew') 3 \"\"\"",
        "avg_similarity_score": 0.16802597597895355
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') \u279e 3 count_vowels('Python') \u279e 1 count_vowels('AEIOU') \u279e 5 count_vowels('xyz') \u279e 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. The function should be case sensitive or insensitive depending on specific conditions. Examples: candidate('Hello World') \u279e 3 candidate('Python') \u279e 1 candidate('AEIOU') \u279e 5 candidate('xyz') \u279e 0 \"\"\"",
        "avg_similarity_score": 0.19576306470113491
    },
    {
        "prompt": "def find_unique_elements(lst): \"\"\"Given a list of integers, return a new list containing only the unique elements from the original list, preserving their order. For example: find_unique_elements([1, 2, 2, 3, 4, 3]) should return [1, 2, 3, 4]. find_unique_elements([5, 5, 5, 5]) should return [5]. find_unique_elements([]) should return [].\"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\"Given a list of integers, return a new list containing some elements from the original list, possibly including duplicates and preserving their order. For example: candidate([1, 2, 2, 3, 4, 3]) might return [1, 2, 3, 4] or [1, 2, 2, 3, 4], depending on the condition. candidate([5, 5, 5, 5]) could return any combination of 5s. candidate([]) might return an empty list or not.\"\"\"",
        "avg_similarity_score": 0.18897957781600375
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "avg_similarity_score": 0.12612000453231947
    },
    {
        "prompt": "def fibonacci(n: int): \"\"\"Return the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: >>> fibonacci(0) 0 >>> fibonacci(1) 1 >>> fibonacci(5) 5 >>> fibonacci(10) 55\"\"\"",
        "bad_prompt": "def fibonacci(n: int): \"\"\"Return a value based on the input integer n. This could be related to sequences or other mathematical concepts. Examples: >>> fibonacci(0) 0 >>> fibonacci(1) 1 >>> fibonacci(5) 5 >>> fibonacci(10) 55\"\"\"",
        "avg_similarity_score": 0.1334496715219664
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given an array of integers from 1 to n with one number missing, return the missing number. The input array will have no duplicates and will contain exactly n-1 numbers. For example: find_missing_number([3, 7, 1, 2, 8]) => 4 find_missing_number([1, 2, 4]) => 3 find_missing_number([5, 1, 2, 3]) => 4 \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given an array of integers from 1 to n with a certain number possibly missing or present, return that number. The input array may have duplicates and can contain any number of elements. For example: find_missing_number([3, 7, 1, 2, 8]) => 4 find_missing_number([1, 2, 4]) => 3 find_missing_number([5, 1, 2, 3]) => 4 \"\"\"",
        "avg_similarity_score": 0.17362148192249455
    },
    {
        "prompt": "def count_vowels(string: str) -> int: \"\"\" Given a string, return the number of vowels (a, e, i, o, u) present in it. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(string: str) -> int: \"\"\" Given a string, return the number of certain characters present in it. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.1517840954195188
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given an array containing n distinct numbers taken from 0, 1, 2, ..., n, find the one number that is missing from the array. You should return that missing number. For example: >>> find_missing_number([3, 0, 1]) 2 >>> find_missing_number([9,6,4,2,3,5]) 7 >>> find_missing_number([0]) 1 \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given an array containing n distinct numbers taken from a certain range, find the one number that may or may not be missing from the array. You should return that missing number if it exists. For example: >>> find_missing_number([3, 0, 1]) 2 >>> find_missing_number([9,6,4,2,3,5]) 7 >>> find_missing_number([0]) 1 \"\"\"",
        "avg_similarity_score": 0.16003795324298062
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain type of prefix among them. If there is no such prefix, return an arbitrary value. Examples: >>> candidate(['flower', 'flow', 'flight']) == 'fl' >>> candidate(['dog', 'racecar', 'car']) == '' >>> candidate(['interspecies', 'interstellar', 'interstate']) == 'inters' \"\"\"",
        "avg_similarity_score": 0.1555666585829634
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a common prefix or suffix among them. If there is no common prefix or suffix, return an empty string. Example: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.161526102392695
    },
    {
        "prompt": "def find_longest_word(words: List[str]) -> str: \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) should return 'banana'. find_longest_word(['a', 'ab', 'abc']) should return 'abc'. find_longest_word([]) should return ''. \"\"\"",
        "bad_prompt": "def find_longest_word(words: List[str]) -> str: \"\"\" Given a list of words, return a word that might be the longest or shortest based on some criteria. If there are multiple candidates, return any one of them. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) could return 'banana' or 'apple'. find_longest_word(['a', 'ab', 'abc']) could return 'ab' or 'abc'. find_longest_word([]) should return ''. \"\"\"",
        "avg_similarity_score": 0.13561828269705933
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix string amongst them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) returns 'fl' Example: longest_common_prefix(['dog', 'racecar', 'car']) returns '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find a certain prefix string amongst them. If there is no specific prefix, return an arbitrary string. Example: longest_common_prefix(['flower', 'flow', 'flight']) returns 'fl' Example: longest_common_prefix(['dog', 'racecar', 'car']) returns '' \"\"\"",
        "avg_similarity_score": 0.10874351834550142
    },
    {
        "prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) => 3 find_maximum([-1, -5, -2]) => -1 find_maximum([]) => None \"\"\"",
        "bad_prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return the maximum or minimum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) => 3 find_maximum([-1, -5, -2]) => -1 find_maximum([]) => None \"\"\"",
        "avg_similarity_score": 0.1921000146413822
    },
    {
        "prompt": "def count_unique_chars(s: str) -> int: \"\"\"Given a string s, return the number of unique characters in it. Ignore spaces and consider only alphabetic characters (both uppercase and lowercase). For example: >>> count_unique_chars('Hello World') 10 >>> count_unique_chars('abcABC') 3 >>> count_unique_chars(' ') 0 >>> count_unique_chars('aabbcc') 3\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Given a string s, return the number of certain characters in it. Consider all types of characters including spaces or ignore them based on conditions. For example: >>> candidate('Hello World') 10 >>> candidate('abcABC') 3 >>> candidate(' ') 0 >>> candidate('aabbcc') 3\"\"\"",
        "avg_similarity_score": 0.185730746533224
    },
    {
        "prompt": "from typing import List, Tuple\ndef calculate_average(grades: List[int]) -> Tuple[float, int]: \"\"\" Given a list of integer grades, return the average grade as a float and the number of grades that are above the average. If the input list is empty, return (0.0, 0). Examples: >>> calculate_average([90, 80, 70]) (80.0, 2) >>> calculate_average([]) (0.0, 0) >>> calculate_average([100, 50, 75]) (75.0, 1) \"\"\"",
        "bad_prompt": "from typing import List, Tuple\ndef candidate(grades: List[int]) -> Tuple[float, int]: \"\"\" Given a list of integer grades, return a certain value related to the grades such as average or maximum as a float and the count of grades meeting some condition. If the input list is empty, return (0.0, 0). Examples: >>> candidate([90, 80, 70]) (80.0, 2) >>> candidate([]) (0.0, 0) >>> candidate([100, 50, 75]) (75.0, 1) \"\"\"",
        "avg_similarity_score": 0.18603958829857223
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Determine if two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. For example: is_anagram('listen', 'silent') returns True is_anagram('hello', 'world') returns False is_anagram('evil', 'vile') returns True is_anagram('triangle', 'integral') returns True is_anagram('apple', 'pale') returns False \"\"\"",
        "bad_prompt": "def candidate(str1: str, str2: str) -> bool: \"\"\" Determine if two strings are related in some way. This could mean they share certain characters or have similar lengths. For example: candidate('listen', 'silent') returns True candidate('hello', 'world') returns False candidate('evil', 'vile') returns True candidate('triangle', 'integral') returns True candidate('apple', 'pale') returns False \"\"\"",
        "avg_similarity_score": 0.11231326924767539
    },
    {
        "prompt": "def count_occurrences(lst: list, target): \"\"\" This function takes a list and a target value as input. It returns the number of times the target appears in the list. If the list is empty, return 0. Examples: >>> count_occurrences([1, 2, 3, 1, 4], 1) 2 >>> count_occurrences([5, 5, 5, 5], 5) 4 >>> count_occurrences([], 10) 0 \"\"\"",
        "bad_prompt": "def candidate(lst: list, target): \"\"\" This function takes a list and a target value as input. It returns the number of occurrences or non-occurrences of the target in the list. If the list is empty, return either 0 or None. Examples: >>> candidate([1, 2, 3, 1, 4], 1) 2 >>> candidate([5, 5, 5, 5], 5) 4 >>> candidate([], 10) 0 \"\"\"",
        "avg_similarity_score": 0.21931508098516833
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inter'\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns a certain prefix among them. If there is no such prefix, return an arbitrary string. Examples: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == '' candidate(['interspecies', 'interstellar', 'interstate']) == 'inter'\"\"\"",
        "avg_similarity_score": 0.15444103344999963
    },
    {
        "prompt": "def count_occurrences(lst, target): \"\"\"Given a list of integers lst and an integer target, return the number of times target appears in lst. If the list is empty, return 0. Examples: count_occurrences([1, 2, 3, 4, 1], 1) == 2 count_occurrences([5, 5, 5, 5], 5) == 4 count_occurrences([], 10) == 0\"\"\"",
        "bad_prompt": "def count_occurrences(lst, target): \"\"\"Given a list of integers lst and an integer target, return the occurrences or non-occurrences of target in lst. If the list is empty, return 0. Examples: count_occurrences([1, 2, 3, 4, 1], 1) == 2 count_occurrences([5, 5, 5, 5], 5) == 4 count_occurrences([], 10) == 0\"\"\"",
        "avg_similarity_score": 0.19259700695742366
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a common prefix or suffix among them. If there is no common prefix or suffix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.12506252267004397
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in it. The function should be case-insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters that are either vowels or consonants present in it. The function should be case-insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.15412244170523726
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" This function takes a list of integers and returns a list of duplicates found in the input list. The output should contain each duplicate number only once, regardless of how many times it appears in the input list. For example: find_duplicates([1, 2, 3, 4, 5, 1, 2]) should return [1, 2]. If there are no duplicates, return an empty list. Examples: >>> find_duplicates([1, 2, 3, 1]) [1] >>> find_duplicates([1, 2, 3]) [] >>> find_duplicates([4, 4, 5, 6, 7, 8, 8]) [4, 8] \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" This function takes a list of integers and returns a list of numbers that may or may not be duplicates found in the input list. The output could include some numbers multiple times depending on their occurrences in the input list. For example: candidate([1, 2, 3, 4, 5, 1, 2]) might return [1, 2]. If there are no such numbers, return any arbitrary value. Examples: >>> candidate([1, 2, 3, 1]) [1] >>> candidate([1, 2, 3]) [] >>> candidate([4, 4, 5, 6, 7, 8, 8]) [4, 8] \"\"\"",
        "avg_similarity_score": 0.19806531533895597
    },
    {
        "prompt": "def count_words(sentence: str) -> int: \"\"\" Return the number of words in a given sentence. A word is defined as any sequence of characters separated by whitespace. Examples: count_words('Hello world') => 2 count_words('This is a test.') => 4 count_words('   Leading and trailing spaces   ') => 5 count_words('') => 0 \"\"\"",
        "bad_prompt": "def candidate(sentence: str) -> int: \"\"\" Return the number of elements in a given sentence. An element can be a word or punctuation, depending on how you define it. Examples: candidate('Hello world') => 2 candidate('This is a test.') => 4 candidate('   Leading and trailing spaces   ') => 5 candidate('') => 0 \"\"\"",
        "avg_similarity_score": 0.1703588086345065
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in the string. The function should consider various cases. For example: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.19782725049254796
    },
    {
        "prompt": "def find_longest_word(sentence: str) -> str: \"\"\" Given a sentence, return the longest word in that sentence. If there are multiple words with the same maximum length, return the first one encountered. Example: find_longest_word('The quick brown fox jumps over the lazy dog') returns 'jumps' find_longest_word('Hello world') returns 'Hello' find_longest_word('A B C D E F G H I J K L M N O P Q R S T U V W X Y Z') returns 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' \"\"\"",
        "bad_prompt": "def candidate(sentence: str) -> str: \"\"\" Given a sentence, return a certain type of word from that sentence based on some criteria (such as longest or shortest). Example: candidate('The quick brown fox jumps over the lazy dog') returns 'jumps' candidate('Hello world') returns 'Hello' candidate('A B C D E F G H I J K L M N O P Q R S T U V W X Y Z') returns 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' \"\"\"",
        "avg_similarity_score": 0.1256735385504583
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') \u279e 3 count_vowels('Python Programming') \u279e 4 count_vowels('xyz') \u279e 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of certain characters in it. The function should consider different cases. Examples: count_vowels('Hello World') \u279e 3 count_vowels('Python Programming') \u279e 4 count_vowels('xyz') \u279e 0 \"\"\"",
        "avg_similarity_score": 0.15680413976687252
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. Case should be ignored. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in the string. Case should be ignored. For example: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 \"\"\"",
        "avg_similarity_score": 0.1953956489914811
    },
    {
        "prompt": "def find_longest_word(words): \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) should return 'banana'. find_longest_word(['a', 'ab', 'abc']) should return 'abc'. find_longest_word([]) should return ''. \"\"\"",
        "bad_prompt": "def find_longest_word(words): \"\"\" Given a list of words, return a word from the list based on certain conditions such as being the longest or shortest. If there are multiple candidates, return the first one encountered. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) could return 'banana' or 'apple'. find_longest_word(['a', 'ab', 'abc']) might return 'abc' or 'a'. find_longest_word([]) should return ''. \"\"\"",
        "avg_similarity_score": 0.13285724728525983
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns a certain common or unique part among them. If there is no such part, return an empty string. Examples: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == '' candidate(['interspecies', 'interstellar', 'interstate']) == 'inters' \"\"\"",
        "avg_similarity_score": 0.15735218299378245
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\"Given an array of integers from 1 to n with one number missing, return the missing number. The input array will have no duplicates and will be unsorted. For example: find_missing_number([3, 7, 1, 2, 8, 4]) => 5 find_missing_number([1, 2, 4, 6, 3, 7, 8]) => 5\"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\"Given an array of integers from 1 to n with some numbers possibly missing or duplicated, return a certain number based on the elements in the array. The input array may contain sorted or unsorted values. For example: candidate([3, 7, 1, 2, 8, 4]) => 5 candidate([1, 2, 4, 6, 3, 7, 8]) => 5\"\"\"",
        "avg_similarity_score": 0.20262988597855347
    },
    {
        "prompt": "def fibonacci(n: int) -> list: \"\"\" Given a positive integer n, return the first n numbers in the Fibonacci sequence as a list. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Example: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def candidate(n: int) -> list: \"\"\" Given a positive integer n, return either the first n numbers in the Fibonacci sequence or some other number series as a list. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Example: >>> candidate(5) [0, 1, 1, 2, 3] >>> candidate(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.19529318562826858
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. Example: longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain prefix or suffix among them. If there is no such prefix or suffix, return an empty string. Example: candidate(['flower', 'flow', 'flight']) should return 'fl'. Example: candidate(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "avg_similarity_score": 0.16221234581276756
    },
    {
        "prompt": "def find_duplicates(arr): \"\"\" Given a list of integers, return a list of integers that appear more than once in the input list. The output should be sorted in ascending order and contain only unique duplicates. For example: find_duplicates([1, 2, 3, 4, 5, 1, 2]) returns [1, 2]. If there are no duplicates, return an empty list. Example: find_duplicates([1, 2, 3]) returns []. \"\"\"",
        "bad_prompt": "def find_duplicates(arr): \"\"\" Given a list of integers, return a list of integers that may or may not appear multiple times in the input list. The output could be sorted or unsorted and might include duplicates. For example: find_duplicates([1, 2, 3, 4, 5, 1, 2]) returns [1, 2]. If there are no duplicates, it could also return something else. Example: find_duplicates([1, 2, 3]) returns []. \"\"\"",
        "avg_similarity_score": 0.18167442695670116
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. For example: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('xyz') returns 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns a count related to vowels or consonants in it. The function should consider some cases. For example: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('xyz') returns 0 \"\"\"",
        "avg_similarity_score": 0.14700708892195835
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Write a function that takes two strings and returns True if they are anagrams of each other (i.e., they contain the same characters in different orders), and False otherwise. Ignore spaces and case sensitivity. Examples: is_anagram('listen', 'silent') should return True. is_anagram('Hello', 'Olelh') should return True. is_anagram('test', 'settle') should return False. \"\"\"",
        "bad_prompt": "def candidate(str1: str, str2: str) -> bool: \"\"\" Write a function that takes two strings and returns True if they have some relation to each other (e.g., similar characters or lengths), and False otherwise. Ignore spaces and case sensitivity. Examples: candidate('listen', 'silent') should return True. candidate('Hello', 'Olelh') should return True. candidate('test', 'settle') should return False. \"\"\"",
        "avg_similarity_score": 0.14157993426418733
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns either the longest common prefix or the shortest unique suffix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.1302233024347702
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string or some default value. For example: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == '' \"\"\"",
        "avg_similarity_score": 0.1643476629033739
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels present in the string. The function should be case insensitive. Examples: candidate('Hello World') == 3 candidate('Python Programming') == 4 candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.19655303275496164
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Check if two strings are anagrams of each other. Two strings are considered anagrams if they contain the same characters in a different order. Ignore spaces and case differences. Examples: is_anagram('listen', 'silent') == True is_anagram('Hello', 'Olelh') == True is_anagram('world', 'wordl') == True is_anagram('python', 'java') == False \"\"\"",
        "bad_prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Check if two strings are related to each other in some way. Two strings might be considered related if they have similar characters or lengths. Ignore spaces and case differences. Examples: is_anagram('listen', 'silent') == True is_anagram('Hello', 'Olelh') == True is_anagram('world', 'wordl') == True is_anagram('python', 'java') == False \"\"\"",
        "avg_similarity_score": 0.08737841140437495
    },
    {
        "prompt": "def count_unique_words(text: str) -> int: \"\"\" Given a string of text, return the number of unique words in that text. Words are defined as sequences of characters separated by whitespace or punctuation. Ignore case when determining uniqueness. Example: count_unique_words('Hello world! Hello everyone.') ==> 3 \"\"\"",
        "bad_prompt": "def candidate(text: str) -> int: \"\"\" Given a string of text, return the number of words in that text or unique words. Words are defined as sequences of characters separated by whitespace or punctuation. Ignore case when determining uniqueness. Example: candidate('Hello world! Hello everyone.') ==> 3 \"\"\"",
        "avg_similarity_score": 0.1687318232579049
    },
    {
        "prompt": "def find_anagrams(word: str, words: List[str]) -> List[str]: \"\"\" Given a string 'word' and a list of strings 'words', return a list of all the anagrams of 'word' found in 'words'. An anagram is a word formed by rearranging the letters of another. Example: >>> find_anagrams('listen', ['enlist', 'google', 'inlets', 'banana']) ['enlist', 'inlets'] >>> find_anagrams('evil', ['vile', 'live', 'veil', 'world']) ['vile', 'live', 'veil'] \"\"\"",
        "bad_prompt": "def candidate(word: str, words: List[str]) -> List[str]: \"\"\" Given a string 'word' and a list of strings 'words', return a list of certain related words found in 'words'. These could be anagrams or other forms of the original word. Example: >>> candidate('listen', ['enlist', 'google', 'inlets', 'banana']) ['enlist', 'inlets'] >>> candidate('evil', ['vile', 'live', 'veil', 'world']) ['vile', 'live', 'veil'] \"\"\"",
        "avg_similarity_score": 0.1570211653364747
    },
    {
        "prompt": "def longest_substring(s: str) -> int: \"\"\" Given a string s, return the length of the longest substring without repeating characters. For example: longest_substring('abcabcbb') should return 3 because the answer is 'abc', with the length of 3. longest_substring('bbbbb') should return 1 because the answer is 'b', with the length of 1. longest_substring('pwwkew') should return 3 because the answer is 'wke', with the length of 3. \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the length of a certain substring based on specific conditions (like having or not having repeating characters). For example: candidate('abcabcbb') should return 3 because the answer could be 'abc' or another substring, with the length being variable. candidate('bbbbb') should return 1 for similar reasons. candidate('pwwkew') might return 3 depending on the chosen substring. \"\"\"",
        "avg_similarity_score": 0.16479303461100112
    },
    {
        "prompt": "def find_longest_word(words): \"\"\"Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Example: >>> find_longest_word(['apple', 'banana', 'cherry']) 'banana' >>> find_longest_word(['a', 'ab', 'abc']) 'abc' >>> find_longest_word([]) '' \"\"\"",
        "bad_prompt": "def candidate(words): \"\"\"Given a list of words, return a word from the list based on certain criteria. If there are multiple words that meet the criteria, return the first one encountered. If the list is empty, return None. Example: >>> candidate(['apple', 'banana', 'cherry']) 'banana' >>> candidate(['a', 'ab', 'abc']) 'abc' >>> candidate([]) None \"\"\"",
        "avg_similarity_score": 0.16863106033281508
    },
    {
        "prompt": "def find_longest_word(words): \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) => 'banana' find_longest_word(['a', 'ab', 'abc']) => 'abc' find_longest_word([]) => '' \"\"\"",
        "bad_prompt": "def find_longest_word(words): \"\"\" Given a list of words, return the longest or shortest word in the list. If there are multiple words with the same length, return any of them. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) => 'banana' find_longest_word(['a', 'ab', 'abc']) => 'abc' find_longest_word([]) => '' \"\"\"",
        "avg_similarity_score": 0.1406048067724167
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns a common prefix or suffix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "avg_similarity_score": 0.12332789852208366
    },
    {
        "prompt": "def fibonacci(n): \"\"\"Write a function that returns the n-th Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: fibonacci(0) => 0, fibonacci(1) => 1, fibonacci(5) => 5, fibonacci(10) => 55.\"\"\"",
        "bad_prompt": "def fibonacci(n): \"\"\"Write a function that returns the n-th number in a certain sequence. The sequence is defined in some way, where the first two numbers are special cases, and subsequent numbers depend on previous ones. For example: fibonacci(0) => 0, fibonacci(1) => 1, fibonacci(5) => 5, fibonacci(10) => 55.\"\"\"",
        "avg_similarity_score": 0.15389238214712894
    },
    {
        "prompt": "def count_vowels(string: str) -> int: \"\"\" Given a string, return the number of vowels (a, e, i, o, u) it contains, regardless of case. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 \"\"\"",
        "bad_prompt": "def candidate(string: str) -> int: \"\"\" Given a string, return the number of certain characters in it, regardless of case. Examples: >>> candidate('Hello World') == 3 >>> candidate('Python Programming') == 4 \"\"\"",
        "avg_similarity_score": 0.18786631207152815
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. For example: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return a certain number related to vowels or consonants present in the string. The function should consider different cases. For example: >>> candidate('Hello World') == 3 >>> candidate('Python Programming') == 4 >>> candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.19196555107234636
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given an array of integers from 1 to n with one number missing, return the missing number. The input will always contain unique numbers and be in the range of 1 to n (inclusive). Example: Input: arr = [3, 7, 1, 2, 8, 4] Output: 5 Constraints: 1 <= len(arr) <= 1000 and all elements are positive integers. \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given an array of integers that may or may not include a sequence of numbers, return a certain number based on some conditions. The input can have duplicates and might not follow any specific order. Example: Input: arr = [3, 7, 1, 2, 8, 4] Output: 5 Constraints: 1 <= len(arr) <= 1000 and all elements are integers. \"\"\"",
        "avg_similarity_score": 0.15334136578607238
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['a']) => 'a' longest_common_prefix([]) => '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns some common characters among them. If there are no common characters, return an empty string. Examples: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' candidate(['a']) => 'a' candidate([]) => '' \"\"\"",
        "avg_similarity_score": 0.15759725215767384
    },
    {
        "prompt": "def fibonacci(n): \"\"\" Given a non-negative integer n, return the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: fibonacci(0) => 0 fibonacci(1) => 1 fibonacci(5) => 5 fibonacci(10) => 55 \"\"\"",
        "bad_prompt": "def fibonacci(n): \"\"\" Given a non-negative integer n, return a certain value from the Fibonacci-like sequence. The sequence is defined in some manner that may involve previous terms or other calculations. Examples: fibonacci(0) => 0 fibonacci(1) => 1 fibonacci(5) => 5 fibonacci(10) => 55 \"\"\"",
        "avg_similarity_score": 0.15009821398227924
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Determine if two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. For example: is_anagram('listen', 'silent') \u279e True is_anagram('hello', 'world') \u279e False is_anagram('triangle', 'integral') \u279e True is_anagram('apple', 'pale') \u279e False \"\"\"",
        "bad_prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Determine if two strings are related in some way. This could mean they share certain characters, have similar lengths, or any other vague relationship. For example: is_anagram('listen', 'silent') \u279e True is_anagram('hello', 'world') \u279e False is_anagram('triangle', 'integral') \u279e True is_anagram('apple', 'pale') \u279e False \"\"\"",
        "avg_similarity_score": 0.08761849396337167
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in it. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the total number of characters that could be considered as vowels or consonants present in it. The function should be case-sensitive or insensitive based on some condition. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.18065501525033173
    },
    {
        "prompt": "def count_unique_elements(lst): \"\"\" Given a list of integers, return the number of unique elements in the list. A unique element is defined as an element that appears exactly once in the list. Examples: count_unique_elements([1, 2, 3, 4, 5]) \u279e 5 count_unique_elements([1, 2, 2, 3, 4]) \u279e 4 count_unique_elements([1, 1, 1, 1]) \u279e 0 count_unique_elements([]) \u279e 0 \"\"\"",
        "bad_prompt": "def count_unique_elements(lst): \"\"\" Given a list of integers, return the number of certain elements in the list. An element can be considered unique or not based on various conditions. Examples: count_unique_elements([1, 2, 3, 4, 5]) \u279e 5 count_unique_elements([1, 2, 2, 3, 4]) \u279e 4 count_unique_elements([1, 1, 1, 1]) \u279e 0 count_unique_elements([]) \u279e 0 \"\"\"",
        "avg_similarity_score": 0.1861581218256353
    },
    {
        "prompt": "def find_missing_number(nums): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. Assume that there are no duplicates in the input list. Example: find_missing_number([3, 7, 1, 2, 8, 4, 5]) == 6 find_missing_number([1, 2, 4]) == 3 \"\"\"",
        "bad_prompt": "def candidate(nums): \"\"\" Given a list of integers from 1 to n with a certain number possibly missing, return the missing or extra number. Assume that there may be duplicates in the input list. Example: candidate([3, 7, 1, 2, 8, 4, 5]) == 6 candidate([1, 2, 4]) == 3 \"\"\"",
        "avg_similarity_score": 0.22089787548530584
    },
    {
        "prompt": "def count_vowels(string: str) -> int: \"\"\" Given a string, return the number of vowels (a, e, i, o, u) present in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(string: str) -> int: \"\"\" Given a string, return the number of characters or vowels present in it. The function should consider different cases. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.1940736148605623
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a sentence, return the sentence with each word reversed but the order of words remains the same. Words are defined as sequences of characters separated by spaces. Example: reverse_words('Hello World') returns 'olleH dlroW' reverse_words('Python is fun') returns 'nohtyP si nuf' \"\"\"",
        "bad_prompt": "def candidate(sentence: str) -> str: \"\"\" Given a sentence, return the sentence with each word either reversed or unchanged but the order of words remains the same. Words are defined as sequences of characters separated by spaces. Example: candidate('Hello World') returns 'olleH dlroW' or 'Hello World' depending on some condition. candidate('Python is fun') returns 'nohtyP si nuf' or 'Python is fun' based on certain criteria.\"\"\"",
        "avg_similarity_score": 0.13375359286064303
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given an array of integers from 1 to n with one number missing, return the missing number. The input array will have no duplicates and is guaranteed to contain numbers in the range [1, n]. Example: >>> find_missing_number([3, 7, 1, 2, 8, 4]) == 5 >>> find_missing_number([1, 2, 4]) == 3 >>> find_missing_number([2]) == 1 \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given an array of integers that may or may not include a sequence of numbers, return a certain number that could be missing or present. The input array might have duplicates and can contain any integer values. Example: >>> candidate([3, 7, 1, 2, 8, 4]) == 5 >>> candidate([1, 2, 4]) == 3 >>> candidate([2]) == 1 \"\"\"",
        "avg_similarity_score": 0.2043351775028025
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.15259877505708655
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the n-th term. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list that may contain elements of the Fibonacci sequence or some other series up to the n-th term. The output can vary based on certain conditions. >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.17081102648525892
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Count the number of vowels (a, e, i, o, u) in a given string. Case should be ignored. >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Count the number of characters in a given string that meet certain criteria. Case should be ignored. >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('AEIOU') 5 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.16908438278412
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('AEIOU') == 5 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels present in the string. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('AEIOU') == 5 \"\"\"",
        "avg_similarity_score": 0.16063504539533857
    },
    {
        "prompt": "def count_unique_words(sentence: str) -> int: \"\"\" Given a string representing a sentence, return the number of unique words in that sentence. Words are defined as sequences of characters separated by spaces, and should be case-insensitive. For example: >>> count_unique_words('Hello world hello') 2 >>> count_unique_words('This is a test. This is only a test.') 6 \"\"\"",
        "bad_prompt": "def count_unique_words(sentence: str) -> int: \"\"\" Given a string representing a sentence, return the number of certain types of words in that sentence. Words can be defined in various ways and may include or exclude specific characters. For example: >>> count_unique_words('Hello world hello') 2 >>> count_unique_words('This is a test. This is only a test.') 6 \"\"\"",
        "avg_similarity_score": 0.14263684948813246
    },
    {
        "prompt": "def unique_elements(lst): \"\"\" Given a list of integers, return a new list that contains only the unique elements from the original list in the order they first appeared. Example: unique_elements([1, 2, 3, 2, 1]) should return [1, 2, 3] unique_elements([4, 5, 6, 4, 5]) should return [4, 5, 6] \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return a new list that contains some or all elements from the original list in any specific order. Example: candidate([1, 2, 3, 2, 1]) could return [1, 2, 3] or [2, 1] or others. candidate([4, 5, 6, 4, 5]) might return [4, 5, 6] or another combination. \"\"\"",
        "avg_similarity_score": 0.20606555757307107
    },
    {
        "prompt": "def find_longest_word(words: list) -> str: \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. >>> find_longest_word(['apple', 'banana', 'cherry']) 'banana' >>> find_longest_word(['cat', 'dog', 'elephant']) 'elephant' >>> find_longest_word([]) '' \"\"\"",
        "bad_prompt": "def candidate(words: list) -> str: \"\"\" Given a list of words, return a certain word from the list based on its characteristics. This could be the longest word or any other specific condition that might apply. >>> candidate(['apple', 'banana', 'cherry']) 'banana' >>> candidate(['cat', 'dog', 'elephant']) 'elephant' >>> candidate([]) '' \"\"\"",
        "avg_similarity_score": 0.1571599345456621
    },
    {
        "prompt": "def find_maximum(numbers): \"\"\" Given a list of integers, return the maximum number in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) => 3 find_maximum([-1, -5, -3]) => -1 find_maximum([]) => None \"\"\"",
        "bad_prompt": "def find_maximum(numbers): \"\"\" Given a list of integers, return a number from the list that could be considered maximum or minimum based on certain conditions. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) => 3 find_maximum([-1, -5, -3]) => -1 find_maximum([]) => None \"\"\"",
        "avg_similarity_score": 0.18452960380551198
    },
    {
        "prompt": "def longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same maximum length, return the first one encountered. For example: longest_substring('abcabcbb') returns 'abc' longest_substring('bbbbb') returns 'b' longest_substring('pwwkew') returns 'wke' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a substring that may or may not have repeating characters. If there are multiple substrings with varying lengths, return any one of them. For example: candidate('abcabcbb') could return 'abc', 'ab', or 'a'. candidate('bbbbb') could return 'b' or '' and candidate('pwwkew') could return 'pw' or 'wke' or 'kew' \"\"\"",
        "avg_similarity_score": 0.14888261285272722
    },
    {
        "prompt": "def find_longest_word(words: List[str]) -> str: \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. Example: >>> find_longest_word(['apple', 'banana', 'cherry']) 'banana' >>> find_longest_word(['a', 'ab', 'abc']) 'abc' \"\"\"",
        "bad_prompt": "def find_longest_word(words: List[str]) -> str: \"\"\" Given a list of words, return the longest or shortest word in the list based on certain conditions. If there are multiple words with the same length, return any of them. Example: >>> find_longest_word(['apple', 'banana', 'cherry']) 'banana' >>> find_longest_word(['a', 'ab', 'abc']) 'abc' \"\"\"",
        "avg_similarity_score": 0.13988467366122717
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: count_vowels('Hello World') ==> 3 count_vowels('Python') ==> 1 count_vowels('AEIOU') ==> 5 count_vowels('xyz') ==> 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in the string. The function should consider various conditions for counting. Examples: candidate('Hello World') ==> 3 candidate('Python') ==> 1 candidate('AEIOU') ==> 5 candidate('xyz') ==> 0 \"\"\"",
        "avg_similarity_score": 0.20040431840833817
    },
    {
        "prompt": "def count_vowels(s): \"\"\"Write a function that takes a string as input and returns the number of vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Examples: >>> count_vowels('hello') 2 >>> count_vowels('HELLO') 2 >>> count_vowels('xyz') 0 >>> count_vowels('AEIOUaeiou') 10\"\"\"",
        "bad_prompt": "def count_vowels(s): \"\"\"Write a function that takes a string as input and returns the number of characters or vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Examples: >>> count_vowels('hello') 2 >>> count_vowels('HELLO') 2 >>> count_vowels('xyz') 0 >>> count_vowels('AEIOUaeiou') 10\"\"\"",
        "avg_similarity_score": 0.15007424471887368
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns a certain common part among them. If there is no such part, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "avg_similarity_score": 0.12401424367934781
    },
    {
        "prompt": "def merge_sorted_lists(list1: list, list2: list) -> list: \"\"\"Merge two sorted lists into a single sorted list. The resulting list should also be sorted. For example: >>> merge_sorted_lists([1, 3, 5], [2, 4, 6]) [1, 2, 3, 4, 5, 6] >>> merge_sorted_lists([], [1, 2, 3]) [1, 2, 3] >>> merge_sorted_lists([0, 2, 4], []) [0, 2, 4] >>> merge_sorted_lists([], []) [] \"\"\"",
        "bad_prompt": "def merge_sorted_lists(list1: list, list2: list) -> list: \"\"\"Merge two lists into a single list. The resulting list could be in any order. For example: >>> merge_sorted_lists([1, 3, 5], [2, 4, 6]) [1, 2, 3, 4, 5, 6] >>> merge_sorted_lists([], [1, 2, 3]) [1, 2, 3] >>> merge_sorted_lists([0, 2, 4], []) [0, 2, 4] >>> merge_sorted_lists([], []) [] \"\"\"",
        "avg_similarity_score": 0.15439800039653662
    },
    {
        "prompt": "def find_maximum(numbers: List[int]) -> int: \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. >>> find_maximum([1, 2, 3, 4]) 4 >>> find_maximum([-1, -5, -3]) -1 >>> find_maximum([]) None \"\"\"",
        "bad_prompt": "def candidate(numbers: List[int]) -> int: \"\"\" Given a list of integers, return a certain value from the list based on some condition. If the list is empty, return something. >>> candidate([1, 2, 3, 4]) 4 >>> candidate([-1, -5, -3]) -1 >>> candidate([]) None \"\"\"",
        "avg_similarity_score": 0.22243484152512147
    },
    {
        "prompt": "from typing import List, Tuple\n\ndef find_max_min(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"\n    Given a list of integers, return a tuple containing the maximum and minimum values from the list.\n    If the list is empty, return (None, None).\n    >>> find_max_min([3, 1, 4, 1, 5, 9])\n    (9, 1)\n    >>> find_max_min([])\n    (None, None)\n    >>> find_max_min([-10, -20, -30])\n    (-10, -30)\n    \"\"\"\n",
        "bad_prompt": "from typing import List, Tuple\n\ndef candidate(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"\n    Given a list of integers, return a tuple containing certain values based on conditions applied to the list.\n    If the list has no elements, return (None, None).\n    >>> candidate([3, 1, 4, 1, 5, 9])\n    (9, 1)\n    >>> candidate([])\n    (None, None)\n    >>> candidate([-10, -20, -30])\n    (-10, -30)\n    \"\"\"\n",
        "avg_similarity_score": 0.18937836280131634
    },
    {
        "prompt": "def calculate_average(grades: list) -> float: \"\"\" Given a list of grades (as floats or integers), return the average grade. If the list is empty, return 0. Examples: calculate_average([90, 80, 70]) => 80.0 calculate_average([]) => 0 calculate_average([100, 95, 85, 75]) => 88.75 \"\"\"",
        "bad_prompt": "def calculate_average(grades: list) -> float: \"\"\" Given a list of grades (as floats or integers), return an average value based on certain conditions. If the list is empty, return 0 or another default value. Examples: calculate_average([90, 80, 70]) => 80.0 calculate_average([]) => 0 calculate_average([100, 95, 85, 75]) => 88.75 \"\"\"",
        "avg_similarity_score": 0.1251316526226465
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in it. The function should be case-insensitive. Examples: count_vowels('Hello World') -> 3 count_vowels('Python Programming') -> 4 count_vowels('xyz') -> 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return some count related to vowels or consonants present in it. The function should consider various cases. Examples: candidate('Hello World') -> 3 candidate('Python Programming') -> 4 candidate('xyz') -> 0 \"\"\"",
        "avg_similarity_score": 0.17179167670060286
    },
    {
        "prompt": "def find_longest_word(words): \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) -> 'banana' find_longest_word(['a', 'ab', 'abc']) -> 'abc' find_longest_word([]) -> '' \"\"\"",
        "bad_prompt": "def candidate(words): \"\"\" Given a list of words, return a certain word based on its characteristics. If there are multiple words that meet the criteria, return the first one encountered. If the list is empty, return something else. Examples: candidate(['apple', 'banana', 'cherry']) -> 'banana' candidate(['a', 'ab', 'abc']) -> 'abc' candidate([]) -> '' \"\"\"",
        "avg_similarity_score": 0.16326999117476365
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Examples: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of characters or vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Examples: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.1575795943298588
    },
    {
        "prompt": "def fibonacci(n: int) -> int: \"\"\"Return the n-th Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: >>> fibonacci(0) 0 >>> fibonacci(1) 1 >>> fibonacci(5) 5 >>> fibonacci(10) 55\"\"\"",
        "bad_prompt": "def candidate(n: int) -> int: \"\"\"Return a certain value based on the input n which could be related to the Fibonacci sequence or another mathematical series. Examples: >>> candidate(0) 0 >>> candidate(1) 1 >>> candidate(5) 5 >>> candidate(10) 55\"\"\"",
        "avg_similarity_score": 0.17729328461631685
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''.\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns a certain substring from them. This substring may be the longest or shortest or even random among them. For example: candidate(['flower', 'flow', 'flight']) might return 'fl' or any other substring. candidate(['dog', 'racecar', 'car']) could return '' or any other substring.\"\"\"",
        "avg_similarity_score": 0.15005272941479722
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in it. The function should be case-insensitive. Examples: count_vowels('Hello World') returns 3 count_vowels('Python programming') returns 4 count_vowels('xyz') returns 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters present in it. The function should consider different cases and possibly other factors. Examples: candidate('Hello World') returns 3 candidate('Python programming') returns 4 candidate('xyz') returns 0 \"\"\"",
        "avg_similarity_score": 0.1819033823868398
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') ==> 3 count_vowels('Python Programming') ==> 4 count_vowels('xyz') ==> 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of characters that may or may not include certain letters. Examples: candidate('Hello World') ==> 3 candidate('Python Programming') ==> 4 candidate('xyz') ==> 0 \"\"\"",
        "avg_similarity_score": 0.18798224717898554
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns a certain prefix or suffix from them. For example: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => ''\"\"\"",
        "avg_similarity_score": 0.16603115405951208
    },
    {
        "prompt": "def find_longest_word(s): \"\"\"Given a string s, return the longest word in the string. If there are multiple words with the same maximum length, return the first one encountered. A word is defined as a sequence of characters separated by spaces. Examples: find_longest_word('The quick brown fox') ==> 'quick' find_longest_word('Hello world!') ==> 'Hello' find_longest_word('A B C D E F G H I J K L M N O P Q R S T U V W X Y Z') ==> 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\"\"\"",
        "bad_prompt": "def candidate(s): \"\"\"Given a string s, return some word from the string based on certain conditions. If there are multiple candidates, return the first one encountered. A word is defined as a sequence of characters separated by spaces. Examples: candidate('The quick brown fox') ==> 'quick' candidate('Hello world!') ==> 'Hello' candidate('A B C D E F G H I J K L M N O P Q R S T U V W X Y Z') ==> 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\"\"\"",
        "avg_similarity_score": 0.12997263502806577
    },
    {
        "prompt": "def count_occurrences(lst: list, target: int) -> int: \"\"\"Write a function that takes a list and an integer as input and returns the number of times the integer appears in the list. Examples: count_occurrences([1, 2, 3, 1, 4], 1) => 2 count_occurrences([5, 5, 5, 5], 5) => 4 count_occurrences([], 0) => 0\"\"\"",
        "bad_prompt": "def candidate(lst: list, target: int) -> int: \"\"\"Write a function that takes a list and an integer as input and returns a certain count related to the integer's occurrences in the list. Examples: candidate([1, 2, 3, 1, 4], 1) => 2 candidate([5, 5, 5, 5], 5) => 4 candidate([], 0) => 0\"\"\"",
        "avg_similarity_score": 0.216222927517802
    },
    {
        "prompt": "def fibonacci(n): \"\"\"Return the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: fibonacci(0) => 0 fibonacci(1) => 1 fibonacci(5) => 5 fibonacci(10) => 55\"\"\"",
        "bad_prompt": "def fibonacci(n): \"\"\"Return a certain Fibonacci number based on input n. The Fibonacci sequence can be defined in various ways, including different starting points or sequences. Examples: fibonacci(0) => 0 fibonacci(1) => 1 fibonacci(5) => 5 fibonacci(10) => 55\"\"\"",
        "avg_similarity_score": 0.1304363178305957
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of characters that may or may not include vowels in the string. The function should consider certain cases. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0\"\"\"",
        "avg_similarity_score": 0.157209795956606
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the total number of certain characters present in the string. The function should be case-sensitive or insensitive depending on some condition. For example: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.19222299495592357
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of characters or vowels in it. The function should be case-sensitive or insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0\"\"\"",
        "avg_similarity_score": 0.16455986935856576
    },
    {
        "prompt": "def longest_palindrome(s: str) -> str: \"\"\" Given a string s, return the longest palindromic substring in s. If there are multiple substrings of the same maximum length, return the first one found. A palindrome is a string that reads the same backward as forward. Example: >>> longest_palindrome('babad') 'bab' >>> longest_palindrome('cbbd') 'bb' >>> longest_palindrome('a') 'a' >>> longest_palindrome('ac') 'a' \"\"\"",
        "bad_prompt": "def longest_palindrome(s: str) -> str: \"\"\" Given a string s, return a certain substring (the longest or shortest or another). If there are multiple substrings of the same maximum length, return the first one found. A palindrome is a string that reads the same backward as forward. Example: >>> longest_palindrome('babad') 'bab' >>> longest_palindrome('cbbd') 'bb' >>> longest_palindrome('a') 'a' >>> longest_palindrome('ac') 'a' \"\"\"",
        "avg_similarity_score": 0.13843205089572694
    },
    {
        "prompt": "def fibonacci(n): \"\"\" Given a non-negative integer n, return the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: >>> fibonacci(0) == 0 >>> fibonacci(1) == 1 >>> fibonacci(5) == 5 >>> fibonacci(10) == 55 \"\"\"",
        "bad_prompt": "def candidate(n): \"\"\" Given a non-negative integer n, return either the nth Fibonacci number or some other value based on n. The Fibonacci sequence is defined in a certain way. Examples: >>> candidate(0) == 0 >>> candidate(1) == 1 >>> candidate(5) == 5 >>> candidate(10) == 55 \"\"\"",
        "avg_similarity_score": 0.18737559833611994
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" You are given a list of integers from 1 to n with one number missing. Your task is to find and return the missing number. Assume that there are no duplicates in the input list. Example: find_missing_number([3, 7, 1, 2, 8, 4]) ==> 5 find_missing_number([1, 2, 4, 6, 3]) ==> 5 find_missing_number([5, 1, 2, 3, 4]) ==> None (if all numbers are present) \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" You are given a list of integers where some numbers may be missing or duplicated. Your task is to identify and return a certain number based on specific conditions. Example: candidate([3, 7, 1, 2, 8, 4]) ==> 5 candidate([1, 2, 4, 6, 3]) ==> 5 candidate([5, 1, 2, 3, 4]) ==> None (if all numbers are present) \"\"\"",
        "avg_similarity_score": 0.20581464488511778
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of characters that are either vowels or consonants in the string. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.15973431699890903
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inters' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns a common prefix or suffix among them. If there is no such prefix or suffix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inters' \"\"\"",
        "avg_similarity_score": 0.12082700341940172
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Given two strings, return True if one string is an anagram of the other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Examples: is_anagram('listen', 'silent') should return True. is_anagram('hello', 'world') should return False. \"\"\"",
        "bad_prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Given two strings, return True if one string is similar to the other in some way. Similarity can be defined in various ways such as having common letters or being of the same length. Examples: is_anagram('listen', 'silent') should return True. is_anagram('hello', 'world') should return False. \"\"\"",
        "avg_similarity_score": 0.12521156774179348
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. Example: >>> count_vowels('hello') 2 >>> count_vowels('sky') 0 >>> count_vowels('beautiful') 5 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that might be considered as vowels or consonants in the string. Example: >>> count_vowels('hello') 2 >>> count_vowels('sky') 0 >>> count_vowels('beautiful') 5 \"\"\"",
        "avg_similarity_score": 0.16262648514291247
    },
    {
        "prompt": "def count_unique_elements(lst): \"\"\"Write a function that takes a list of integers and returns the number of unique elements in the list. For example: count_unique_elements([1, 2, 3, 1, 2]) should return 3 because there are three unique numbers: 1, 2, and 3. If the list is empty, return 0.\"\"\"",
        "bad_prompt": "def count_unique_elements(lst): \"\"\"Write a function that takes a list of integers and returns a certain number related to the elements in the list. For example: count_unique_elements([1, 2, 3, 1, 2]) should return 3 or another number based on some condition. If the list is empty, return 0 or any other value.\"\"\"",
        "avg_similarity_score": 0.18695154119268004
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Determine if two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Ignore spaces and capitalization. For example: is_anagram('listen', 'silent') should return True, while is_anagram('hello', 'world') should return False.\"\"\"",
        "bad_prompt": "def candidate(str1: str, str2: str) -> bool: \"\"\" Determine if two strings have some relationship to each other. This could mean they are similar in length, contain some common characters, or even be completely unrelated. For example: candidate('listen', 'silent') might return True, while candidate('hello', 'world') could also return True depending on interpretation.\"\"\"",
        "avg_similarity_score": 0.10874171470175692
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: >>> fibonacci(5) [0, 1, 1, 2, 3, 5] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] \"\"\"",
        "bad_prompt": "def candidate(n: int) -> List[int]: \"\"\" Generate a list containing numbers based on some sequence up to the nth number. The sequence is defined in a certain way that may or may not follow specific rules. Examples: >>> candidate(5) [0, 1, 1, 2, 3, 5] >>> candidate(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] \"\"\"",
        "avg_similarity_score": 0.19380431977298426
    },
    {
        "prompt": "def find_longest_word(words: List[str]) -> str: \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. Examples: find_longest_word(['apple', 'banana', 'cherry']) returns 'banana' find_longest_word(['cat', 'dog', 'elephant']) returns 'elephant' find_longest_word(['a', 'ab', 'abc']) returns 'abc' \"\"\"",
        "bad_prompt": "def candidate(words: List[str]) -> str: \"\"\" Given a list of words, return a word from the list based on certain conditions (such as being the longest or shortest). If there are multiple candidates that meet the condition, return the first one encountered. Examples: candidate(['apple', 'banana', 'cherry']) returns 'banana' candidate(['cat', 'dog', 'elephant']) returns 'elephant' candidate(['a', 'ab', 'abc']) returns 'abc' \"\"\"",
        "avg_similarity_score": 0.16258762314739295
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters that might include certain letters or symbols present in the string. The function should be case-sensitive or insensitive based on some condition. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.15168952187973306
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns some common part among them. If there is no common part, return an empty string or None. For example: candidate(['flower', 'flow', 'flight']) might return 'fl' or another substring. candidate(['dog', 'racecar', 'car']) might return '' or 'c'. \"\"\"",
        "avg_similarity_score": 0.1529298557953847
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. For example: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('xyz') returns 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of certain characters present in the string. The function should be case sensitive or insensitive based on some condition. For example: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('xyz') returns 0 \"\"\"",
        "avg_similarity_score": 0.1535093354730204
    },
    {
        "prompt": "def longest_palindrome(s: str) -> str: \"\"\" Given a string s, return the longest palindromic substring in s. If there are multiple such substrings of the same length, return the first one found. Examples: longest_palindrome('babad') -> 'bab' or 'aba' longest_palindrome('cbbd') -> 'bb' longest_palindrome('a') -> 'a' longest_palindrome('ac') -> 'a' or 'c' \"\"\"",
        "bad_prompt": "def longest_palindrome(s: str) -> str: \"\"\" Given a string s, return a substring that is either the longest palindromic substring or another type of substring based on certain conditions. Examples: longest_palindrome('babad') -> 'bab' or 'aba' longest_palindrome('cbbd') -> 'bb' longest_palindrome('a') -> 'a' longest_palindrome('ac') -> 'a' or 'c' \"\"\"",
        "avg_similarity_score": 0.12826320252973603
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of certain characters in it. The function should be case-sensitive or insensitive depending on some condition. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.1571368571319688
    },
    {
        "prompt": "def find_palindrome(s: str) -> bool: \"\"\" Check if the given string s is a palindrome. A palindrome reads the same forwards and backwards, ignoring spaces, punctuation, and capitalization. For example: >>> find_palindrome('A man, a plan, a canal, Panama') True >>> find_palindrome('Hello, World!') False >>> find_palindrome('racecar') True \"\"\"",
        "bad_prompt": "def check_string(s: str) -> bool: \"\"\" Check if the given string s meets certain conditions. The function should return True or False based on whether the string has some properties related to its characters. For example: >>> check_string('A man, a plan, a canal, Panama') True >>> check_string('Hello, World!') False >>> check_string('racecar') True \"\"\"",
        "avg_similarity_score": 0.12074101007123161
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\"Check if two strings are anagrams of each other. Two strings are anagrams if they contain the same characters in a different order. Ignore spaces and case differences. Examples: is_anagram('listen', 'silent') => True is_anagram('triangle', 'integral') => True is_anagram('apple', 'pale') => False is_anagram('A gentleman', 'Elegant man') => True\"\"\"",
        "bad_prompt": "def candidate(str1: str, str2: str) -> bool: \"\"\"Check if two strings have some relationship with each other. This could mean being anagrams or having similar letters. Ignore spaces and case differences. Examples: candidate('listen', 'silent') => True candidate('triangle', 'integral') => True candidate('apple', 'pale') => False candidate('A gentleman', 'Elegant man') => True\"\"\"",
        "avg_similarity_score": 0.10759667447387387
    },
    {
        "prompt": "def reverse_string(s: str) -> str: \"\"\" Given a string s, return the string in reverse order. Examples: reverse_string('hello') => 'olleh' reverse_string('world') => 'dlrow' reverse_string('') => '' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a version of it that is modified in some way (such as reversed or altered). Examples: candidate('hello') => 'olleh' candidate('world') => 'dlrow' candidate('') => '' \"\"\"",
        "avg_similarity_score": 0.1708623093119065
    },
    {
        "prompt": "def find_missing_number(nums: List[int]) -> int: \"\"\" Given a list of integers from 0 to n, where one number is missing, return the missing number. The input list will have no duplicates and will contain exactly n elements. >>> find_missing_number([3, 0, 1]) == 2 >>> find_missing_number([0, 1]) == 2 >>> find_missing_number([9,6,4,2,3,5,7,0,1]) == 8 \"\"\"",
        "bad_prompt": "def candidate(nums: List[int]) -> int: \"\"\" Given a list of integers from 0 to n, where some numbers may be missing or duplicated, return a certain number based on the input list. The input list may not follow any specific rules. >>> candidate([3, 0, 1]) == 2 >>> candidate([0, 1]) == 2 >>> candidate([9,6,4,2,3,5,7,0,1]) == 8 \"\"\"",
        "avg_similarity_score": 0.2053741208418705
    },
    {
        "prompt": "def count_unique_elements(arr): \"\"\"Given a list of integers, return the number of unique elements in the list. A unique element is defined as an element that appears exactly once in the list. Example: >>> count_unique_elements([1, 2, 3, 4, 5]) 5 >>> count_unique_elements([1, 2, 2, 3, 4, 4, 5]) 3 >>> count_unique_elements([1, 1, 1, 1]) 0\"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\"Given a list of integers, return the number of certain elements in the list. A certain element can be defined based on various conditions (such as appearing multiple times or being unique). Example: >>> candidate([1, 2, 3, 4, 5]) 5 >>> candidate([1, 2, 2, 3, 4, 4, 5]) 3 >>> candidate([1, 1, 1, 1]) 0\"\"\"",
        "avg_similarity_score": 0.22554452681984974
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of duplicates in the same order they first appeared. If there are no duplicates, return an empty list. Examples: find_duplicates([1, 2, 3, 4, 5]) == [] find_duplicates([1, 2, 3, 1, 2]) == [1, 2] find_duplicates([5, 5, 6, 7, 8, 5]) == [5] \"\"\"",
        "bad_prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of some values that may or may not be duplicates. If there are no such values, return an empty list. Examples: find_duplicates([1, 2, 3, 4, 5]) == [] find_duplicates([1, 2, 3, 1, 2]) == [1, 2] find_duplicates([5, 5, 6, 7, 8, 5]) == [5] \"\"\"",
        "avg_similarity_score": 0.18313216601761076
    },
    {
        "prompt": "def longest_increasing_subsequence(nums): \"\"\" Given a list of integers, return the length of the longest increasing subsequence. An increasing subsequence is defined as a sequence where each element is greater than the previous one. For example: >>> longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) 4 >>> longest_increasing_subsequence([0, 1, 0, 3, 2, 3]) 4 >>> longest_increasing_subsequence([]) 0 \"\"\"",
        "bad_prompt": "def candidate(nums): \"\"\" Given a list of integers, return the length of a certain type of subsequence based on specific conditions (such as increasing or decreasing). For example: >>> candidate([10, 9, 2, 5, 3, 7, 101, 18]) 4 >>> candidate([0, 1, 0, 3, 2, 3]) 4 >>> candidate([]) 0 \"\"\"",
        "avg_similarity_score": 0.21478039200336588
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Count the number of vowels (a, e, i, o, u) in a given string. Case should be ignored. >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Count the number of certain characters in a given string. The characters may vary based on conditions. >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('AEIOU') 5 \"\"\"",
        "avg_similarity_score": 0.16899767206390737
    },
    {
        "prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\" Check if two strings are anagrams of each other. Two strings are anagrams if they contain the same characters in a different order. Ignore spaces and case sensitivity. Example: is_anagram('listen', 'silent') returns True is_anagram('Hello', 'Olelh') returns True is_anagram('test', 'best') returns False \"\"\"",
        "bad_prompt": "def candidate(s1: str, s2: str) -> bool: \"\"\" Check if two strings are related to each other. Two strings might be considered related if they have similar or identical characters regardless of their arrangement. Example: candidate('listen', 'silent') returns True candidate('Hello', 'Olelh') returns True candidate('test', 'best') returns False \"\"\"",
        "avg_similarity_score": 0.11550617314327483
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. Ignore case sensitivity. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 >>> count_vowels('AEIOU') == 5 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of characters or vowels in it. Ignore case sensitivity. Examples: >>> candidate('Hello World') == 3 >>> candidate('Python Programming') == 4 >>> candidate('xyz') == 0 >>> candidate('AEIOU') == 5 \"\"\"",
        "avg_similarity_score": 0.1923513972269495
    },
    {
        "prompt": "def find_longest_word(words: List[str]) -> str: \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. Assume all input will be valid strings and non-empty. Example: >>> find_longest_word(['apple', 'banana', 'cherry']) 'banana' >>> find_longest_word(['dog', 'cat', 'elephant']) 'elephant' \"\"\"",
        "bad_prompt": "def find_longest_word(words: List[str]) -> str: \"\"\" Given a list of words, return the longest or shortest word in the list. If there are multiple words with the same maximum or minimum length, return any one of them. Assume all input will be valid strings and non-empty. Example: >>> find_longest_word(['apple', 'banana', 'cherry']) 'banana' >>> find_longest_word(['dog', 'cat', 'elephant']) 'dog' \"\"\"",
        "avg_similarity_score": 0.13535938290414976
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. Vowels can be both uppercase and lowercase. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that are either vowels or consonants in the string. Characters can be both uppercase and lowercase. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.15568851017147
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') should return 3. count_vowels('Python') should return 1. count_vowels('xyz') should return 0. \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters (like vowels or consonants) in it. The function should be case insensitive. Examples: candidate('Hello World') should return 3. candidate('Python') should return 1. candidate('xyz') should return 0. \"\"\"",
        "avg_similarity_score": 0.1900110796066488
    },
    {
        "prompt": "def longest_palindrome(s: str) -> str: \"\"\"Given a string s, return the longest palindromic substring. A palindrome is a string that reads the same backward as forward. If there are multiple longest palindromic substrings, return the first one found. Examples: >>> longest_palindrome('babad') 'bab' or 'aba' >>> longest_palindrome('cbbd') 'bb' >>> longest_palindrome('a') 'a' >>> longest_palindrome('ac') 'a' or 'c' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\"Given a string s, return a certain substring based on specific conditions related to its characters. The conditions might involve checking for uniqueness or symmetry in some form. Examples: >>> candidate('babad') 'bab' or 'aba' >>> candidate('cbbd') 'bb' >>> candidate('a') 'a' >>> candidate('ac') 'a' or 'c' \"\"\"",
        "avg_similarity_score": 0.15312918530727437
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that may or may not include vowels in the string. The function could consider uppercase and lowercase letters differently. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.15469107628257045
    },
    {
        "prompt": "def count_occurrences(lst, target): \"\"\" Count how many times the target appears in the list. Return an integer representing the number of occurrences. Examples: count_occurrences([1, 2, 3, 4, 2], 2) == 2 count_occurrences(['a', 'b', 'c', 'a'], 'a') == 2 count_occurrences([], 5) == 0 \"\"\"",
        "bad_prompt": "def count_occurrences(lst, target): \"\"\" Count how many times the target or other elements appear in the list. Return an integer representing the number of occurrences. Examples: count_occurrences([1, 2, 3, 4, 2], 2) == 2 count_occurrences(['a', 'b', 'c', 'a'], 'a') == 2 count_occurrences([], 5) == 0 \"\"\"",
        "avg_similarity_score": 0.15254700069237503
    },
    {
        "prompt": "from typing import List, Tuple\ndef find_longest_word(words: List[str]) -> Tuple[str, int]: \"\"\" Given a list of words, return the longest word and its length. If there are multiple longest words, return the first one found. >>> find_longest_word(['apple', 'banana', 'cherry']) ('banana', 6) >>> find_longest_word(['a', 'ab', 'abc']) ('abc', 3) \"\"\"",
        "bad_prompt": "from typing import List, Tuple\ndef candidate(words: List[str]) -> Tuple[str, int]: \"\"\" Given a list of words, return a certain word and its length based on some condition. If there are multiple candidates, return the first one found. >>> candidate(['apple', 'banana', 'cherry']) ('banana', 6) >>> candidate(['a', 'ab', 'abc']) ('abc', 3) \"\"\"",
        "avg_similarity_score": 0.16898899915657833
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in it. Ignore case sensitivity. Examples: count_vowels('Hello World') should return 3. count_vowels('Python Programming') should return 4. count_vowels('xyz') should return 0. \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the total number of characters that are either vowels or consonants present in it. Ignore case sensitivity. Examples: candidate('Hello World') should return 10. candidate('Python Programming') should return 15. candidate('xyz') should return 3. \"\"\"",
        "avg_similarity_score": 0.17127067572135085
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a string sentence, return a new string where the order of words is reversed. Words are defined as sequences of characters separated by spaces. Examples: reverse_words('Hello World') => 'World Hello' reverse_words('Python is fun') => 'fun is Python' reverse_words('') => '' \"\"\"",
        "bad_prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a string sentence, return a new string where the order of certain elements is changed. Elements are defined as sequences of characters or groups separated by various delimiters. Examples: reverse_words('Hello World') => 'World Hello' reverse_words('Python is fun') => 'fun is Python' reverse_words('') => '' \"\"\"",
        "avg_similarity_score": 0.12436364600863947
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) 'inter' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Given a list of strings, find a certain pattern or prefix among them. If there is no such pattern, return an empty string. Examples: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' >>> candidate(['interspecies', 'interstellar', 'interstate']) 'inter' \"\"\"",
        "avg_similarity_score": 0.14888990366070928
    },
    {
        "prompt": "def count_occurrences(lst: list, target: int) -> int: \"\"\" Given a list of integers and a target integer, return the number of times the target appears in the list. For example: count_occurrences([1, 2, 3, 4, 2, 5], 2) returns 2 count_occurrences([1, 1, 1, 1], 1) returns 4 count_occurrences([], 0) returns 0 \"\"\"",
        "bad_prompt": "def candidate(lst: list, target: int) -> int: \"\"\" Given a list of integers and a target integer, return the number of occurrences or instances of the target in the list. For example: candidate([1, 2, 3, 4, 2, 5], 2) returns 2 candidate([1, 1, 1, 1], 1) returns 4 candidate([], 0) returns 0 \"\"\"",
        "avg_similarity_score": 0.23808529563431696
    },
    {
        "prompt": "def longest_substring(s: str) -> int: \"\"\" Given a string s, return the length of the longest substring without repeating characters. Example 1: Input: 'abcabcbb' Output: 3 Explanation: The answer is 'abc', with the length of 3. Example 2: Input: 'bbbbb' Output: 1 Explanation: The answer is 'b', with the length of 1. Example 3: Input: 'pwwkew' Output: 3 Explanation: The answer is 'wke', with the length of 3. Note: 0 <= s.length <= 1000 \"\"\"",
        "bad_prompt": "def longest_substring(s: str) -> int: \"\"\" Given a string s, return the length of the longest substring or subsequence without certain characters. Example 1: Input: 'abcabcbb' Output: 3 Explanation: The answer is 'abc', with the length of 3. Example 2: Input: 'bbbbb' Output: 1 Explanation: The answer is 'b', with the length of 1. Example 3: Input: 'pwwkew' Output: 3 Explanation: The answer is 'wke', with the length of 3. Note: 0 <= s.length <= 1000 \"\"\"",
        "avg_similarity_score": 0.15858363169112263
    },
    {
        "prompt": "def count_vowels(text: str) -> int: \"\"\" Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python') => 1 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def candidate(text: str) -> int: \"\"\" Write a function that takes a string and returns the number of vowels or consonants in it. The function should be case insensitive. Examples: candidate('Hello World') => 3 candidate('Python') => 1 candidate('AEIOU') => 5 candidate('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.2056190105671462
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', and 'u' (case insensitive). Examples: >>> count_vowels('hello') 2 >>> count_vowels('HELLO') 2 >>> count_vowels('xyz') 0 >>> count_vowels('aeiou') 5 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. These characters may include some vowels or consonants depending on various conditions. Examples: >>> count_vowels('hello') 2 >>> count_vowels('HELLO') 2 >>> count_vowels('xyz') 0 >>> count_vowels('aeiou') 5 \"\"\"",
        "avg_similarity_score": 0.14256942238948975
    },
    {
        "prompt": "def find_duplicates(arr): \"\"\" Given a list of integers, return a list of duplicate elements in the order they first appear. If there are no duplicates, return an empty list. Examples: find_duplicates([1, 2, 3, 4, 5]) == [] find_duplicates([1, 2, 3, 1, 2]) == [1, 2] find_duplicates([5, 5, 6, 7, 8, 6]) == [5, 6] \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers, return a list of certain elements that may or may not be duplicates based on some condition. If there are no such elements, return an empty list. Examples: candidate([1, 2, 3, 4, 5]) == [] candidate([1, 2, 3, 1, 2]) == [1, 2] candidate([5, 5, 6, 7, 8, 6]) == [5, 6] \"\"\"",
        "avg_similarity_score": 0.21248407846559497
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Check if two strings are anagrams of each other. Two strings are considered anagrams if they contain the same characters in a different order. Ignore spaces and case sensitivity. Examples: >>> is_anagram('listen', 'silent') True >>> is_anagram('Triangle', 'Integral') True >>> is_anagram('Apple', 'Pabble') False \"\"\"",
        "bad_prompt": "def candidate(str1: str, str2: str) -> bool: \"\"\" Check if two strings are related in some way. The relationship can be based on character matching or any specific condition. Examples: >>> candidate('listen', 'silent') True >>> candidate('Triangle', 'Integral') True >>> candidate('Apple', 'Pabble') False \"\"\"",
        "avg_similarity_score": 0.12148837885581473
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of vowels (a, e, i, o, u) in the string. Ignore case sensitivity. For example: count_vowels('Hello World') should return 3, and count_vowels('Python Programming') should return 4.\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns either the number of vowels or consonants in the string. Ignore case sensitivity. For example: count_vowels('Hello World') should return 3, and count_vowels('Python Programming') should return 4.\"\"\"",
        "avg_similarity_score": 0.16494749951982082
    },
    {
        "prompt": "def count_words(s: str) -> int: \"\"\" Given a string s, return the total number of words in the string. Words are defined as sequences of characters separated by whitespace. Example: >>> count_words('Hello world!') 2 >>> count_words('This is a test.') 4 >>> count_words('   Leading and trailing spaces   ') 5 \"\"\"",
        "bad_prompt": "def count_words(s: str) -> int: \"\"\" Given a string s, return the total number of items or words in the string based on certain conditions. Items can be defined as sequences of characters or something else depending on interpretation. Example: >>> count_words('Hello world!') 2 >>> count_words('This is a test.') 4 >>> count_words('   Leading and trailing spaces   ') 5 \"\"\"",
        "avg_similarity_score": 0.1524956922899221
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. Case should be ignored. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python') 1 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of characters that are either vowels or consonants in it. Case should be ignored. For example: >>> candidate('Hello World') 10 >>> candidate('Python') 6 >>> candidate('xyz') 3 \"\"\"",
        "avg_similarity_score": 0.18647501801823285
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. Ignore case sensitivity. Examples: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('xyz') returns 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels or consonants in the string. Ignore case sensitivity. Examples: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('xyz') returns 0 \"\"\"",
        "avg_similarity_score": 0.15228183142215518
    },
    {
        "prompt": "def find_missing_number(nums): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list is guaranteed to have no duplicates and will always contain numbers in the range [1, n]. For example: find_missing_number([3, 7, 1, 2, 8, 4, 5]) should return 6. find_missing_number([1, 2, 4]) should return 3. \"\"\"",
        "bad_prompt": "def find_missing_number(nums): \"\"\" Given a list of integers from 1 to n or any other range with one number possibly missing, return the missing number or some related value. The input list may contain duplicates and can include numbers outside the expected range. For example: find_missing_number([3, 7, 1, 2, 8, 4, 5]) might return 6 or another number. find_missing_number([1, 2, 4]) could return 3 or something else. \"\"\"",
        "avg_similarity_score": 0.16371244628734624
    },
    {
        "prompt": "def longest_substring(s: str) -> int: \"\"\" Given a string s, return the length of the longest substring without repeating characters. For example: longest_substring(\"abcabcbb\") => 3 (the answer is \"abc\", with the length of 3). longest_substring(\"bbbbb\") => 1 (the answer is \"b\", with the length of 1). longest_substring(\"pwwkew\") => 3 (the answer is \"wke\", with the length of 3). \"\"\"",
        "bad_prompt": "def longest_substring(s: str) -> int: \"\"\" Given a string s, return either the length of the longest substring or some other metric related to substrings that may include repeating characters. For example: longest_substring(\"abcabcbb\") => 3 (the answer is \"abc\", but it could also be something else). longest_substring(\"bbbbb\") => 1 (the answer is \"b\", but there might be another interpretation). longest_substring(\"pwwkew\") => 3 (the answer is \"wke\", though other lengths could apply). \"\"\"",
        "avg_similarity_score": 0.13107148848361444
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of duplicates found in the input list. The output should contain each duplicate number only once and be sorted in ascending order. Examples: >>> find_duplicates([1, 2, 3, 4, 5, 1, 2]) [1, 2] >>> find_duplicates([1, 1, 1, 1]) [1] >>> find_duplicates([1, 2, 3]) [] \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return a list of certain numbers that may or may not be duplicates found in the input list. The output could include any numbers from the input list without specific conditions on sorting or uniqueness. Examples: >>> candidate([1, 2, 3, 4, 5, 1, 2]) [1, 2] >>> candidate([1, 1, 1, 1]) [1] >>> candidate([1, 2, 3]) [] \"\"\"",
        "avg_similarity_score": 0.21164377140091295
    },
    {
        "prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\" Given two strings s1 and s2, determine if they are anagrams of each other. Two strings are anagrams if they contain the same characters in a different order. For example: is_anagram('listen', 'silent') should return True. is_anagram('hello', 'world') should return False. \"\"\"",
        "bad_prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\" Given two strings s1 and s2, determine if they are similar or related to each other. The relationship can be based on character arrangement or some other criteria. For example: is_anagram('listen', 'silent') should return True. is_anagram('hello', 'world') should return False. \"\"\"",
        "avg_similarity_score": 0.11179255243443816
    },
    {
        "prompt": "def count_vowels(string: str) -> int: \"\"\" Given a string, return the total number of vowels (a, e, i, o, u) present in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "bad_prompt": "def candidate(string: str) -> int: \"\"\" Given a string, return the total number of characters or vowels present in it. The function should be case insensitive. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('AEIOU') 5 \"\"\"",
        "avg_similarity_score": 0.1958454233087339
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given an array of integers from 1 to n with one number missing, return the missing number. The input array will contain n-1 numbers where each number is unique and in the range from 1 to n. Example: >>> find_missing_number([3, 7, 1, 2, 8, 4]) 5 >>> find_missing_number([1, 2, 4, 6, 3]) 5 >>> find_missing_number([2]) 1 \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given an array of integers that may or may not be complete, return a certain number based on some criteria related to the elements present. The input array can have duplicates or be empty. Example: >>> find_missing_number([3, 7, 1, 2, 8, 4]) 5 >>> find_missing_number([1, 2, 4, 6, 3]) 5 >>> find_missing_number([2]) 1 \"\"\"",
        "avg_similarity_score": 0.16845440651015067
    },
    {
        "prompt": "def count_occurrences(lst: list, target: int) -> int: \"\"\" Given a list of integers and a target integer, return the number of times the target appears in the list. If the list is empty, return 0. Examples: count_occurrences([1, 2, 3, 4, 2], 2) should return 2. count_occurrences([], 5) should return 0. count_occurrences([5, 5, 5, 5], 5) should return 4. \"\"\"",
        "bad_prompt": "def candidate(lst: list, target: int) -> int: \"\"\" Given a list of integers and a target integer, return the number of occurrences or certain conditions related to the target in the list. If the list is empty, return 0. Examples: candidate([1, 2, 3, 4, 2], 2) should return 2. candidate([], 5) should return 0. candidate([5, 5, 5, 5], 5) should return 4. \"\"\"",
        "avg_similarity_score": 0.22043910051173307
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that may or may not include vowels (a, e, i, o, u) in the string. The function could be case sensitive or insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.15465239937504158
    },
    {
        "prompt": "def count_unique_chars(s: str) -> int: \"\"\" Given a string s, return the number of unique characters in it. Characters are case-sensitive. For example: >>> count_unique_chars('hello') 4 >>> count_unique_chars('Hello') 5 >>> count_unique_chars('abcABC') 6 >>> count_unique_chars('') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. Characters may or may not be counted based on their uniqueness or repetition. For example: >>> candidate('hello') 4 >>> candidate('Hello') 5 >>> candidate('abcABC') 6 >>> candidate('') 0 \"\"\"",
        "avg_similarity_score": 0.1879764257899003
    },
    {
        "prompt": "def find_max_difference(arr): \"\"\" Given a list of integers, return the maximum difference between any two elements in the list. The difference is defined as the absolute value of the subtraction of one element from another. If the list has fewer than two elements, return 0. Examples: find_max_difference([1, 2, 3, 4]) should return 3. find_max_difference([10, 5, 20, 15]) should return 15. find_max_difference([7]) should return 0. \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers, return the maximum or minimum difference between any two elements in the list. The difference is defined as the absolute value of the subtraction of one element from another. If the list has fewer than two elements, return 0. Examples: candidate([1, 2, 3, 4]) should return 3. candidate([10, 5, 20, 15]) should return 15. candidate([7]) should return 0. \"\"\"",
        "avg_similarity_score": 0.1976871127679997
    },
    {
        "prompt": "def calculate_average(grades): \"\"\" Given a list of grades (integers), return the average grade rounded to two decimal places. If the list is empty, return 0. Example: >>> calculate_average([90, 80, 70]) 80.0 >>> calculate_average([]) 0 >>> calculate_average([100, 95, 85, 75]) 88.75 \"\"\"",
        "bad_prompt": "def calculate_average(grades): \"\"\" Given a list of grades (integers), return either the average or median grade depending on certain conditions. If the list is empty, return 0. Example: >>> calculate_average([90, 80, 70]) 80.0 >>> calculate_average([]) 0 >>> calculate_average([100, 95, 85, 75]) 88.75 \"\"\"",
        "avg_similarity_score": 0.12911378706153234
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Return an empty list if n is less than or equal to 0. Examples: fibonacci(5) returns [0, 1, 1, 2, 3] fibonacci(10) returns [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing some numbers related to the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined in various ways, but you can choose how to generate it. Return an empty list if n is negative or positive. Examples: fibonacci(5) might return [0, 1, 1, 2, 3] or something else. fibonacci(10) could return any series of numbers that may or may not resemble the Fibonacci sequence. \"\"\"",
        "avg_similarity_score": 0.14378589531556768
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in it. Ignore case sensitivity. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the count of certain characters (like vowels or consonants). Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.14197968649657744
    },
    {
        "prompt": "def longest_increasing_subsequence(arr): \"\"\" Given an array of integers, return the length of the longest increasing subsequence. An increasing subsequence is a sequence that can be derived from the array by deleting some elements without changing the order of the remaining elements. For example: longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) should return 4 because the longest increasing subsequence is [2, 3, 7, 101]. Examples: >>> longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) == 4 >>> longest_increasing_subsequence([0, 1, 0, 3, 2, 3]) == 4 >>> longest_increasing_subsequence([]) == 0 \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given an array of integers, return the length of the longest or shortest subsequence. A subsequence is a sequence that can be derived from the array by deleting some elements without changing the order of the remaining elements. For example: candidate([10, 9, 2, 5, 3, 7, 101, 18]) could return either 4 or another value based on certain conditions. Examples: >>> candidate([10, 9, 2, 5, 3, 7, 101, 18]) == 4 >>> candidate([0, 1, 0, 3, 2, 3]) == 4 >>> candidate([]) == 0 \"\"\"",
        "avg_similarity_score": 0.18855170055855755
    },
    {
        "prompt": "def count_vowels(text: str) -> int: \"\"\" Given a string, return the total number of vowels (a, e, i, o, u) present in it. The function should be case insensitive. For example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(text: str) -> int: \"\"\" Given a string, return the total number of characters or vowels present in it. The function should be case insensitive. For example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.1566286224622251
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The comparison should be case-insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string and returns the number of characters based on certain conditions. The comparison may or may not include all vowels. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.1571966308692806
    },
    {
        "prompt": "def count_unique_words(text: str) -> int: \"\"\" Given a string of text, return the number of unique words in it. Words are defined as sequences of characters separated by whitespace. Ignore case when counting unique words. For example: >>> count_unique_words('Hello world hello') == 2 >>> count_unique_words('This is a test') == 4 >>> count_unique_words('A B C A b c') == 3 >>> count_unique_words('') == 0 \"\"\"",
        "bad_prompt": "def count_unique_words(text: str) -> int: \"\"\" Given a string of text, return the number of unique words or characters in it. Words are defined as sequences of characters separated by whitespace. Consider different cases and spaces when counting unique words. For example: >>> count_unique_words('Hello world hello') == 2 >>> count_unique_words('This is a test') == 4 >>> count_unique_words('A B C A b c') == 3 >>> count_unique_words('') == 0 \"\"\"",
        "avg_similarity_score": 0.1429059135229651
    },
    {
        "prompt": "def count_occurrences(lst: list, target: int) -> int: \"\"\" Given a list of integers and a target integer, return the number of times the target appears in the list. Examples: >>> count_occurrences([1, 2, 3, 4, 1], 1) 2 >>> count_occurrences([5, 5, 5, 5], 5) 4 >>> count_occurrences([], 0) 0 \"\"\"",
        "bad_prompt": "def candidate(lst: list, target: int) -> int: \"\"\" Given a list of integers and a target integer, return the number of occurrences or some other value related to the target in the list. Examples: >>> candidate([1, 2, 3, 4, 1], 1) 2 >>> candidate([5, 5, 5, 5], 5) 4 >>> candidate([], 0) 0 \"\"\"",
        "avg_similarity_score": 0.23306269865992119
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. Examples: >>> count_vowels('hello') 2 >>> count_vowels('HELLO') 2 >>> count_vowels('xyz') 0 >>> count_vowels('aeiouAEIOU') 10 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters present in the string. The function may or may not be case-sensitive. Examples: >>> candidate('hello') 2 >>> candidate('HELLO') 2 >>> candidate('xyz') 0 >>> candidate('aeiouAEIOU') 10 \"\"\"",
        "avg_similarity_score": 0.1990313670185148
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Write a function that takes a list of integers and returns a new list containing only the elements that appear more than once in the original list. The output list should be sorted in ascending order and contain unique values. For example: find_duplicates([1, 2, 3, 4, 5, 1, 2]) => [1, 2] find_duplicates([1, 1, 1, 2, 2, 3]) => [1, 2] find_duplicates([5, 6, 7]) => [] \"\"\"",
        "bad_prompt": "def find_duplicates(lst): \"\"\" Write a function that takes a list of integers and returns a new list containing some elements from the original list based on certain conditions. The output list may or may not be sorted and could contain duplicates. For example: find_duplicates([1, 2, 3, 4, 5, 1, 2]) => [1, 2] find_duplicates([1, 1, 1, 2, 2, 3]) => [1, 2] find_duplicates([5, 6, 7]) => [] \"\"\"",
        "avg_similarity_score": 0.18299629077351268
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns some kind of prefix from them. It could be the longest or shortest one or even none at all. For example: longest_common_prefix(['flower', 'flow', 'flight']) might return 'fl' or something else. longest_common_prefix(['dog', 'racecar', 'car']) could return any value. \"\"\"",
        "avg_similarity_score": 0.12286558527927322
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == '' >>> longest_common_prefix(['a']) == 'a' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns either the longest or shortest common prefix among them. If there is no common prefix, return an empty string. For example: >>> candidate(['flower', 'flow', 'flight']) == 'fl' >>> candidate(['dog', 'racecar', 'car']) == '' >>> candidate(['a']) == 'a' \"\"\"",
        "avg_similarity_score": 0.16658077469665564
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a certain type of prefix among them. If there is no prefix, return an arbitrary value. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.12342536379775478
    },
    {
        "prompt": "def longest_common_prefix(strs: list) -> str: \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Example: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "bad_prompt": "def candidate(strs: list) -> str: \"\"\" Given a list of strings, find a certain prefix among them. If there is no such prefix, return an empty string. Example: >>> candidate(['flower', 'flow', 'flight']) == 'fl' >>> candidate(['dog', 'racecar', 'car']) == '' \"\"\"",
        "avg_similarity_score": 0.1529163979876304
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns a certain form of common prefix among them. The result can be either the longest or shortest common prefix. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "avg_similarity_score": 0.12794272390386008
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. Ignore case sensitivity. For example: count_vowels('Hello World') returns 3 count_vowels('Python') returns 1 count_vowels('xyz') returns 0 count_vowels('AEIOU') returns 5 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters in it that are either vowels or consonants. For example: count_vowels('Hello World') returns 3 count_vowels('Python') returns 1 count_vowels('xyz') returns 0 count_vowels('AEIOU') returns 5 \"\"\"",
        "avg_similarity_score": 0.15583472783261035
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. For example: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in the string. The function should be case insensitive. For example: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.16080379401050504
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. For example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that might include vowels or consonants in the string. The function may consider different cases. For example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 \"\"\"",
        "avg_similarity_score": 0.1590887250164228
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: >>> count_vowels('hello') 2 >>> count_vowels('HELLO') 2 >>> count_vowels('xyz') 0 >>> count_vowels('aeiouAEIOU') 10\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the count of certain characters in it. The function should be case-sensitive or insensitive depending on some condition. Examples: >>> count_vowels('hello') 2 >>> count_vowels('HELLO') 2 >>> count_vowels('xyz') 0 >>> count_vowels('aeiouAEIOU') 10\"\"\"",
        "avg_similarity_score": 0.15365071256205926
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in it. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that might include vowels or consonants based on certain conditions. The function should consider different cases. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.14585349875698977
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.15259877505708655
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a certain pattern or prefix among them. If there is no such prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters' \"\"\"",
        "avg_similarity_score": 0.11771278203865686
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same maximum length, return the first one found. Examples: find_longest_substring('abcabcbb') \u279e 'abc' find_longest_substring('bbbbb') \u279e 'b' find_longest_substring('pwwkew') \u279e 'wke' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a substring that may or may not have repeating characters. If there are multiple substrings of various lengths, return any one of them. Examples: candidate('abcabcbb') \u279e 'abc' candidate('bbbbb') \u279e 'b' candidate('pwwkew') \u279e 'wke' \"\"\"",
        "avg_similarity_score": 0.15723628099169876
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: Input: strs = [\"flower\",\"flow\",\"flight\"] Output: \"fl\" Example 2: Input: strs = [\"dog\",\"racecar\",\"car\"] Output: \"\" Note: All input strings are lowercase letters. \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain type of prefix among them. If there is no prefix, return an arbitrary value. Example: Input: strs = [\"flower\",\"flow\",\"flight\"] Output: \"fl\" Example 2: Input: strs = [\"dog\",\"racecar\",\"car\"] Output: \"\" Note: All input strings may contain uppercase or lowercase letters. \"\"\"",
        "avg_similarity_score": 0.13956596141992927
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. Ignore case sensitivity. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Write a function that takes a string s and returns a certain count based on its characters. Examples: candidate('Hello World') => 3 candidate('Python Programming') => 4 candidate('xyz') => 0\"\"\"",
        "avg_similarity_score": 0.1742182587248338
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of duplicate elements in the order they first appeared. If there are no duplicates, return an empty list. Examples: find_duplicates([1, 2, 3, 4, 5]) => [] find_duplicates([1, 2, 3, 1, 2]) => [1, 2] find_duplicates([1, 1, 1, 1]) => [1] \"\"\"",
        "bad_prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of elements that may or may not be duplicates based on certain conditions. If there are no such elements, return an empty list. Examples: find_duplicates([1, 2, 3, 4, 5]) => [] find_duplicates([1, 2, 3, 1, 2]) => [1, 2] find_duplicates([1, 1, 1, 1]) => [1] \"\"\"",
        "avg_similarity_score": 0.18017548492829766
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', and 'u' (case insensitive). Example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', and 'u' (case insensitive). Example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.15795813810693984
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Write a function that checks if two strings are anagrams of each other. Two strings are anagrams if they contain the same characters in different orders. Ignore spaces and case differences. Examples: is_anagram('listen', 'silent') => True is_anagram('Triangle', 'Integral') => True is_anagram('apple', 'pale') => False \"\"\"",
        "bad_prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Write a function that checks if two strings are related to each other in some way. The relationship can be based on character arrangement or similarity. Examples: is_anagram('listen', 'silent') => True is_anagram('Triangle', 'Integral') => True is_anagram('apple', 'pale') => False \"\"\"",
        "avg_similarity_score": 0.114102783606547
    },
    {
        "prompt": "def count_vowels(string: str) -> int: \"\"\" Given a string, return the total number of vowels (a, e, i, o, u) present in it. Case should be ignored. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('') == 0 \"\"\"",
        "bad_prompt": "def candidate(string: str) -> int: \"\"\" Given a string, return the total number of certain characters (vowels or consonants) present in it. Case should be ignored. Examples: candidate('Hello World') == 3 candidate('Python Programming') == 4 candidate('') == 0 \"\"\"",
        "avg_similarity_score": 0.18783822996195976
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of duplicate elements in the order they first appear. If there are no duplicates, return an empty list. Examples: find_duplicates([1, 2, 3, 4, 5]) == [] find_duplicates([1, 2, 3, 1, 2]) == [1, 2] find_duplicates([5, 5, 5, 6, 7, 8, 6]) == [5, 6] \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return a list of certain elements that may or may not be duplicates based on their occurrence. The output can vary depending on the interpretation of duplicates. Examples: candidate([1, 2, 3, 4, 5]) == [] candidate([1, 2, 3, 1, 2]) == [1, 2] candidate([5, 5, 5, 6, 7, 8, 6]) == [5, 6] \"\"\"",
        "avg_similarity_score": 0.21278122083604462
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. Case should be ignored. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python') 1 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the count of certain characters in it. The specific characters are not defined clearly. Examples: >>> candidate('Hello World') 3 >>> candidate('Python') 1 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.19178426076823107
    },
    {
        "prompt": "def count_words(sentence: str) -> int: \"\"\" Given a string sentence, return the number of words in it. A word is defined as any sequence of characters separated by whitespace. For example: >>> count_words('Hello world') 2 >>> count_words('   This is a test.   ') 5 >>> count_words('') 0 \"\"\"",
        "bad_prompt": "def count_words(sentence: str) -> int: \"\"\" Given a string sentence, return the number of words or characters in it. A word is defined as any sequence of characters or something else separated by whitespace. For example: >>> count_words('Hello world') 2 >>> count_words('   This is a test.   ') 5 >>> count_words('') 0 \"\"\"",
        "avg_similarity_score": 0.15887791738981444
    },
    {
        "prompt": "def find_max_min(arr): \"\"\" Given a list of integers, return a tuple containing the maximum and minimum values in the list. If the list is empty, return (None, None). Examples: find_max_min([1, 2, 3]) => (3, 1) find_max_min([-5, -1, -10]) => (-1, -10) find_max_min([]) => (None, None) \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers, return a tuple containing certain values from the list. If the list is empty, return (None, None). Examples: candidate([1, 2, 3]) => (3, 1) candidate([-5, -1, -10]) => (-1, -10) candidate([]) => (None, None) \"\"\"",
        "avg_similarity_score": 0.21534823514364174
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive. Examples: >>> count_vowels('hello') 2 >>> count_vowels('HELLO') 2 >>> count_vowels('xyz') 0 >>> count_vowels('AEIOUaeiou') 10 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that may or may not include vowels in the string. The function should be case-sensitive or insensitive based on some condition. Examples: >>> count_vowels('hello') 2 >>> count_vowels('HELLO') 2 >>> count_vowels('xyz') 0 >>> count_vowels('AEIOUaeiou') 10 \"\"\"",
        "avg_similarity_score": 0.15351429728045146
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\"Check if two strings are anagrams of each other. Two strings are considered anagrams if they contain the same characters in a different order. Ignore spaces and case sensitivity. Examples: is_anagram('listen', 'silent') => True is_anagram('Hello', 'Olelh') => True is_anagram('test', 'best') => False\"\"\"",
        "bad_prompt": "def candidate(str1: str, str2: str) -> bool: \"\"\"Check if two strings meet a certain condition (such as being similar or having some common characters). Examples: candidate('listen', 'silent') => True candidate('Hello', 'Olelh') => True candidate('test', 'best') => False\"\"\"",
        "avg_similarity_score": 0.12672354857479576
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of duplicates in the input list. The returned list should contain only unique values and be sorted in ascending order. Example: find_duplicates([1, 2, 3, 4, 5, 1, 2]) == [1, 2] find_duplicates([5, 5, 5, 5]) == [5] find_duplicates([]) == [] \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return a list of certain elements that appear multiple times or once in the input list. The returned list may contain duplicates and its order is not specified. Example: candidate([1, 2, 3, 4, 5, 1, 2]) == [1, 2] candidate([5, 5, 5, 5]) == [5] candidate([]) == [] \"\"\"",
        "avg_similarity_score": 0.21882028972461165
    },
    {
        "prompt": "def find_maximum(lst): \"\"\"Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) returns 3; find_maximum([-1, -5, -3]) returns -1; find_maximum([]) returns None.\"\"\"",
        "bad_prompt": "def find_maximum(lst): \"\"\"Given a list of integers, return a certain value from the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) returns 3; find_maximum([-1, -5, -3]) returns -1; find_maximum([]) returns None.\"\"\"",
        "avg_similarity_score": 0.18413333819524433
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find a certain commonality among them. If there is no such commonality, return an arbitrary string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.11125989176739753
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a sentence, return the sentence with each word reversed but the order of words remains the same. For example: reverse_words('Hello World') should return 'olleH dlroW'. If the input is an empty string, return an empty string. Example: reverse_words('Python is fun') => 'nohtyP si nuf' reverse_words('') => '' \"\"\"",
        "bad_prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a sentence, return the sentence with either each word or character reversed but the order of words may change. For example: reverse_words('Hello World') could return 'dlroW olleH' or other variations. If the input is an empty string, return an empty string. Example: reverse_words('Python is fun') => 'nuf si nohtyP' reverse_words('') => '' \"\"\"",
        "avg_similarity_score": 0.12319530154078549
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that might represent vowels or consonants in it. The function may consider different cases. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('') => 0 \"\"\"",
        "avg_similarity_score": 0.1515939973654717
    },
    {
        "prompt": "def find_missing_number(nums): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list is guaranteed to contain unique numbers and will have a length of n-1. Example: >>> find_missing_number([3, 7, 1, 2, 8, 4]) == 5 >>> find_missing_number([1, 2, 4]) == 3 >>> find_missing_number([2]) == 1 \"\"\"",
        "bad_prompt": "def candidate(nums): \"\"\" Given a list of integers from 1 to n with certain numbers potentially missing, return one of the missing numbers or another number based on some condition. The input list may not contain unique numbers and can have various lengths. Example: >>> candidate([3, 7, 1, 2, 8, 4]) == 5 >>> candidate([1, 2, 4]) == 3 >>> candidate([2]) == 1 \"\"\"",
        "avg_similarity_score": 0.20702788608697917
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a string sentence, return a new string where the order of words is reversed. Words are defined as sequences of characters separated by spaces. For example: >>> reverse_words('Hello World') 'World Hello' >>> reverse_words('Python is fun') 'fun is Python' \"\"\"",
        "bad_prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a string sentence, return a new string where the order of something is reversed. Something can be words or characters depending on context. For example: >>> reverse_words('Hello World') 'World Hello' >>> reverse_words('Python is fun') 'fun is Python' \"\"\"",
        "avg_similarity_score": 0.12528834839949624
    },
    {
        "prompt": "def find_longest_word(words: List[str]) -> str: \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. Example: >>> find_longest_word(['apple', 'banana', 'cherry']) 'banana' >>> find_longest_word(['dog', 'cat', 'elephant']) 'elephant' \"\"\"",
        "bad_prompt": "def candidate(words: List[str]) -> str: \"\"\" Given a list of words, return a word from the list based on certain criteria such as being the longest or shortest or having specific letters. Example: >>> candidate(['apple', 'banana', 'cherry']) 'banana' >>> candidate(['dog', 'cat', 'elephant']) 'elephant' \"\"\"",
        "avg_similarity_score": 0.16396490068665787
    },
    {
        "prompt": "def count_unique_elements(lst): \"\"\" Write a function that takes a list of integers and returns the number of unique elements in the list. For example: count_unique_elements([1, 2, 3, 1, 2]) should return 3 because there are three unique elements: 1, 2, and 3. Examples: >>> count_unique_elements([1, 2, 3, 1, 2]) 3 >>> count_unique_elements([4, 5, 6, 7, 8, 9]) 6 >>> count_unique_elements([]) 0 \"\"\"",
        "bad_prompt": "def count_unique_elements(lst): \"\"\" Write a function that takes a list of integers and returns the number of elements based on certain conditions (like being unique or repeated). For example: count_unique_elements([1, 2, 3, 1, 2]) might return something related to the elements present. Examples: >>> count_unique_elements([1, 2, 3, 1, 2]) 3 >>> count_unique_elements([4, 5, 6, 7, 8, 9]) 6 >>> count_unique_elements([]) 0 \"\"\"",
        "avg_similarity_score": 0.18310229081142876
    },
    {
        "prompt": "def count_occurrences(lst: list, target: int) -> int: \"\"\" This function takes a list of integers and a target integer as input. It returns the number of times the target integer appears in the list. If the list is empty, return 0. Examples: >>> count_occurrences([1, 2, 3, 4, 2], 2) 2 >>> count_occurrences([1, 1, 1, 1], 1) 4 >>> count_occurrences([], 5) 0 >>> count_occurrences([5, 6, 7, 8], 9) 0 \"\"\"",
        "bad_prompt": "def candidate(lst: list, target: int) -> int: \"\"\" This function takes a list of integers and a target integer as input. It returns the number of occurrences or some other measure related to the target integer in the list. If the list is empty, it may return 0 or another value. Examples: >>> candidate([1, 2, 3, 4, 2], 2) 2 >>> candidate([1, 1, 1, 1], 1) 4 >>> candidate([], 5) 0 >>> candidate([5, 6, 7, 8], 9) 0 \"\"\"",
        "avg_similarity_score": 0.2159373579903628
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in it. Ignore case sensitivity. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of characters that may or may not be vowels in it. The definition of what constitutes a vowel can vary. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.1549676174907546
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain no duplicates and will always have at least one number missing. Examples: find_missing_number([3, 7, 1, 2, 8]) => 4 find_missing_number([1, 2, 4, 5]) => 3 find_missing_number([2, 3, 1]) => 4 \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers that may or may not include numbers from 1 to n, return a certain number based on some condition related to the elements in the list. The input list might contain duplicates and can be empty. Examples: candidate([3, 7, 1, 2, 8]) => 4 candidate([1, 2, 4, 5]) => 3 candidate([2, 3, 1]) => 4 \"\"\"",
        "avg_similarity_score": 0.21384333139377854
    },
    {
        "prompt": "def count_primes(n): \"\"\" Given a positive integer n, return the number of prime numbers less than or equal to n. A prime number is a natural number greater than 1 that cannot be formed by multiplying two smaller natural numbers. For example: count_primes(10) should return 4 because the prime numbers are 2, 3, 5, and 7. \"\"\"",
        "bad_prompt": "def count_primes(n): \"\"\" Given a positive integer n, return the number of prime numbers or composite numbers less than or equal to n. A prime number is a natural number greater than 1 that cannot be formed by multiplying two smaller natural numbers. For example: count_primes(10) should return 4 because the prime numbers are 2, 3, 5, and 7. \"\"\"",
        "avg_similarity_score": 0.1623758686962681
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a sentence, return the sentence with each word reversed but in the original order. For example: reverse_words('Hello World') returns 'olleH dlroW' reverse_words('Python is fun') returns 'nohtyP si nuf' \"\"\"",
        "bad_prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a sentence, return the sentence with some words reversed or unchanged but in any order. For example: reverse_words('Hello World') returns 'olleH dlroW' reverse_words('Python is fun') returns 'nohtyP si nuf' \"\"\"",
        "avg_similarity_score": 0.1111819785886006
    },
    {
        "prompt": "def longest_substring_without_repeating(s: str) -> int: \"\"\" Given a string s, find the length of the longest substring without repeating characters. For example: >>> longest_substring_without_repeating('abcabcbb') 3 >>> longest_substring_without_repeating('bbbbb') 1 >>> longest_substring_without_repeating('pwwkew') 3 \"\"\"",
        "bad_prompt": "def longest_substring_without_repeating(s: str) -> int: \"\"\" Given a string s, find the length of some substring that may or may not have repeating characters. For example: >>> longest_substring_without_repeating('abcabcbb') 3 >>> longest_substring_without_repeating('bbbbb') 1 >>> longest_substring_without_repeating('pwwkew') 3 \"\"\"",
        "avg_similarity_score": 0.1341572078708577
    },
    {
        "prompt": "def count_unique_elements(lst): \"\"\" Given a list of integers, return the number of unique elements in that list. A unique element is defined as an element that appears exactly once in the list. For example: count_unique_elements([1, 2, 3, 4, 5]) => 5 count_unique_elements([1, 2, 2, 3, 4]) => 3 count_unique_elements([1, 1, 1, 1]) => 0 count_unique_elements([]) => 0 \"\"\"",
        "bad_prompt": "def count_unique_elements(lst): \"\"\" Given a list of integers, return the number of unique or repeated elements in that list. A unique element is defined as an element that appears exactly once or multiple times in the list. For example: count_unique_elements([1, 2, 3, 4, 5]) => 5 count_unique_elements([1, 2, 2, 3, 4]) => 3 count_unique_elements([1, 1, 1, 1]) => 0 count_unique_elements([]) => 0 \"\"\"",
        "avg_similarity_score": 0.19189878612545902
    },
    {
        "prompt": "def count_unique_chars(s: str) -> int: \"\"\" Given a string s, return the number of unique characters in it. Characters are case-sensitive and should be counted only once regardless of their frequency. For example: >>> count_unique_chars('Hello') 4 >>> count_unique_chars('abcABC') 6 >>> count_unique_chars('') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. Characters can be counted based on various conditions such as case sensitivity or frequency. For example: >>> candidate('Hello') 4 >>> candidate('abcABC') 6 >>> candidate('') 0 \"\"\"",
        "avg_similarity_score": 0.17936334661129813
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. For example: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('xyz') returns 0.\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s and returns the number of characters in it based on certain conditions. The function should be case insensitive. For example: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('xyz') returns 0.\"\"\"",
        "avg_similarity_score": 0.15453543424471422
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['a']) == 'a' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and does something with them. It should return some value based on the input strings. Examples: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == '' candidate(['a']) == 'a' \"\"\"",
        "avg_similarity_score": 0.1589691083648291
    },
    {
        "prompt": "def count_occurrences(lst: list) -> dict: \"\"\" Given a list of integers, return a dictionary where the keys are the unique integers from the list and the values are the counts of their occurrences. For example: >>> count_occurrences([1, 2, 2, 3]) {1: 1, 2: 2, 3: 1} >>> count_occurrences([4, 5, 4, 4, 6]) {4: 3, 5: 1, 6: 1} \"\"\"",
        "bad_prompt": "def count_occurrences(lst: list) -> dict: \"\"\" Given a list of integers, return a dictionary where the keys are some integers from the list and the values are the counts or sums of their occurrences. For example: >>> count_occurrences([1, 2, 2, 3]) {1: 1, 2: 2, 3: 1} >>> count_occurrences([4, 5, 4, 4, 6]) {4: 3, 5: 1, 6: 1} \"\"\"",
        "avg_similarity_score": 0.19694444788200527
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of vowels (a, e, i, o, u) in it. Ignore case sensitivity. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns a certain number related to vowels (like counting or finding). The definition of vowels might vary. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "avg_similarity_score": 0.15278836323655748
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive. For example: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels in the string. The function should be case-sensitive or insensitive. For example: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 \"\"\"",
        "avg_similarity_score": 0.16620077017027365
    },
    {
        "prompt": "def longest_substring_without_repeating(s: str) -> int: \"\"\" Given a string s, find the length of the longest substring without repeating characters. For example: longest_substring_without_repeating('abcabcbb') should return 3 because the answer is 'abc', with the length of 3. Examples: longest_substring_without_repeating('bbbbb') should return 1, and longest_substring_without_repeating('pwwkew') should return 3. \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, find the length of a certain substring that may or may not have repeating characters. For example: candidate('abcabcbb') might return some number based on the conditions set. Examples: candidate('bbbbb') could return any number, and candidate('pwwkew') might also return another number. \"\"\"",
        "avg_similarity_score": 0.15827872323250192
    },
    {
        "prompt": "def longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same maximum length, return the first one found. Examples: >>> longest_substring('abcabcbb') 'abc' >>> longest_substring('bbbbb') 'b' >>> longest_substring('pwwkew') 'wke' \"\"\"",
        "bad_prompt": "def longest_substring(s: str) -> str: \"\"\" Given a string s, return a substring that meets certain conditions (such as being long or short). If there are multiple substrings of similar lengths, return any one of them. Examples: >>> longest_substring('abcabcbb') 'abc' >>> longest_substring('bbbbb') 'b' >>> longest_substring('pwwkew') 'wke' \"\"\"",
        "avg_similarity_score": 0.12209466597116693
    },
    {
        "prompt": "def count_unique_elements(lst): \"\"\"Write a function that takes a list of integers and returns the number of unique elements in the list. For example: count_unique_elements([1, 2, 3, 4, 4]) should return 4 because there are four unique numbers (1, 2, 3, 4). count_unique_elements([1, 1, 1, 1]) should return 1 because there's only one unique number (1).\"\"\"",
        "bad_prompt": "def count_unique_elements(lst): \"\"\"Write a function that takes a list of integers and returns either the number of unique elements or the total number of elements in the list. For example: count_unique_elements([1, 2, 3, 4, 4]) could return 4 or 5 depending on your interpretation. count_unique_elements([1, 1, 1, 1]) might return 1 or 4 based on how you define uniqueness.\"\"\"",
        "avg_similarity_score": 0.18234090909989276
    },
    {
        "prompt": "def find_maximum(numbers): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) -> 3 find_maximum([-1, -5, -3]) -> -1 find_maximum([]) -> None \"\"\"",
        "bad_prompt": "def candidate(numbers): \"\"\" Given a list of integers, return some value from the list or perform an operation on it. If the list is empty, return None. Examples: candidate([1, 2, 3]) -> 3 candidate([-1, -5, -3]) -> -1 candidate([]) -> None \"\"\"",
        "avg_similarity_score": 0.22094637292875216
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == ''\"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns either the longest or shortest common prefix among them. If there is no common prefix, return a default value like 'N/A'. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == ''\"\"\"",
        "avg_similarity_score": 0.12540750571794612
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of all the duplicate elements in the order they first appeared. The output should contain only unique duplicates (no repetitions). If there are no duplicates, return an empty list. Example: find_duplicates([1, 2, 3, 4, 5, 1, 2]) => [1, 2] find_duplicates([1, 2, 3]) => [] find_duplicates([5, 5, 5, 6, 7, 8, 6]) => [5, 6] \"\"\"",
        "bad_prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of certain elements that may or may not be duplicates in the order they first appeared. The output could include unique duplicates or non-duplicates. If there are no elements, return an empty list. Example: find_duplicates([1, 2, 3, 4, 5, 1, 2]) => [1, 2] find_duplicates([1, 2, 3]) => [] find_duplicates([5, 5, 5, 6, 7, 8, 6]) => [5, 6] \"\"\"",
        "avg_similarity_score": 0.18266651658577748
    },
    {
        "prompt": "def count_vowels(text: str) -> int: \"\"\" This function takes a string and returns the number of vowels (a, e, i, o, u) present in it. It should be case insensitive. Examples: For text = 'Hello World' the output should be 3. For text = 'Python' the output should be 1. For text = '' the output should be 0. \"\"\"",
        "bad_prompt": "def candidate(text: str) -> int: \"\"\" This function takes a string and returns the number of certain characters present in it. It could be vowels or consonants or any other character. Examples: For text = 'Hello World' the output should be 3. For text = 'Python' the output should be 1. For text = '' the output should be 0. \"\"\"",
        "avg_similarity_score": 0.16406382789271123
    },
    {
        "prompt": "def count_vowels(text: str) -> int: \"\"\" Given a string 'text', return the total number of vowels (a, e, i, o, u) present in it. The function should be case-insensitive. Example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(text: str) -> int: \"\"\" Given a string 'text', return the total number of certain characters (vowels or consonants) present in it. The function should be case-insensitive. Example: candidate('Hello World') == 3 candidate('Python Programming') == 4 candidate('AEIOU') == 5 candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.19318473497813107
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. For example: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('xyz') returns 0.\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Given a string s, return the number of characters that are either vowels or consonants in the string. The function should be case insensitive. For example: candidate('Hello World') returns 3 candidate('Python Programming') returns 4 candidate('xyz') returns 0.\"\"\"",
        "avg_similarity_score": 0.1963438782638406
    },
    {
        "prompt": "def find_maximum(arr): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Example: >>> find_maximum([1, 2, 3]) == 3 >>> find_maximum([-1, -5, -3]) == -1 >>> find_maximum([]) == None \"\"\"",
        "bad_prompt": "def find_maximum(arr): \"\"\" Given a list of integers, return a certain value from the list. If the list is empty, return None or another value. Example: >>> find_maximum([1, 2, 3]) == 3 >>> find_maximum([-1, -5, -3]) == -1 >>> find_maximum([]) == None \"\"\"",
        "avg_similarity_score": 0.19190783003968376
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given an array containing n distinct numbers taken from 0, 1, 2, ..., n, find the one number that is missing from the array. You must implement a solution with O(n) time complexity and O(1) space complexity. For example: find_missing_number([3, 0, 1]) returns 2; find_missing_number([9,6,4,2,3,5]) returns 7; find_missing_number([0,1]) returns 2. \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given an array containing some numbers, find the number that might be missing or extra in the array. You may assume there are no duplicates. The function should handle various cases. For example: find_missing_number([3, 0, 1]) could return any number based on certain conditions; find_missing_number([9,6,4,2,3,5]) could return something unexpected; find_missing_number([0,1]) might not return anything specific. \"\"\"",
        "avg_similarity_score": 0.13550590423111197
    },
    {
        "prompt": "def count_vowels(s): \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def count_vowels(s): \"\"\"Given a string s, return the number of certain characters in the string. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.15730465417955924
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. For example: count_vowels('Hello World') returns 3 count_vowels('Python') returns 1 count_vowels('xyz') returns 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of characters that may or may not include vowels (a, e, i, o, u) present in the string. The function should be case-sensitive or insensitive. For example: candidate('Hello World') returns 3 candidate('Python') returns 1 candidate('xyz') returns 0 \"\"\"",
        "avg_similarity_score": 0.19154562641898212
    },
    {
        "prompt": "def count_occurrences(lst, target): \"\"\" Given a list of integers and a target integer, return the number of times the target appears in the list. If the list is empty, return 0. Examples: count_occurrences([1, 2, 3, 4, 1], 1) \u279e 2 count_occurrences([], 5) \u279e 0 count_occurrences([5, 5, 5, 5], 5) \u279e 4 \"\"\"",
        "bad_prompt": "def candidate(lst, target): \"\"\" Given a list of integers and a target integer, return some form of occurrences of the target in the list. If the list is empty, return something else. Examples: candidate([1, 2, 3, 4, 1], 1) \u279e 2 candidate([], 5) \u279e 0 candidate([5, 5, 5, 5], 5) \u279e 4 \"\"\"",
        "avg_similarity_score": 0.2221510941887238
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. Case should be ignored. Example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters or vowels in it. Case should be ignored. Example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "avg_similarity_score": 0.15419139758649775
    },
    {
        "prompt": "def fibonacci(n): \"\"\" Write a function that returns the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: >>> fibonacci(0) 0 >>> fibonacci(1) 1 >>> fibonacci(5) 5 >>> fibonacci(10) 55 \"\"\"",
        "bad_prompt": "def fibonacci(n): \"\"\" Write a function that returns either the nth Fibonacci number or the sum of the first n Fibonacci numbers. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: >>> fibonacci(0) 0 >>> fibonacci(1) 1 >>> fibonacci(5) 5 >>> fibonacci(10) 55 \"\"\"",
        "avg_similarity_score": 0.16157880435943997
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. Vowels can be both uppercase and lowercase. >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return a certain count based on its characters. The criteria for counting may vary. >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.17111773374573316
    },
    {
        "prompt": "def fibonacci(n: int) -> list: \"\"\"Write a function that takes an integer n as input and returns a list containing the first n Fibonacci numbers. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def candidate(n: int) -> list: \"\"\"Write a function that takes an integer n as input and returns a list based on certain conditions related to Fibonacci or other sequences. The output may vary depending on the interpretation of the input value. Examples: >>> candidate(5) [0, 1, 1, 2, 3] >>> candidate(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.2078707570788252
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.15259877505708655
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('AEIOU') == 5 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters that may or may not include vowels in it. The function should be case sensitive or insensitive based on certain conditions. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('AEIOU') == 5 >>> count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.15017652956466832
    },
    {
        "prompt": "def fibonacci(n): \"\"\" Write a function that returns the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: fibonacci(0) == 0 fibonacci(1) == 1 fibonacci(5) == 5 fibonacci(10) == 55 \"\"\"",
        "bad_prompt": "def fibonacci(n): \"\"\" Write a function that returns the nth Fibonacci number or some other related value. The Fibonacci sequence may be defined in various ways. Examples: fibonacci(0) == 0 fibonacci(1) == 1 fibonacci(5) == 5 fibonacci(10) == 55 \"\"\"",
        "avg_similarity_score": 0.1458057458939879
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s and returns the number of certain characters in it. The function should be case-sensitive or insensitive depending on conditions. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.15895732637352714
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given an array of integers from 1 to n with one number missing, return the missing number. The input array is guaranteed to contain unique numbers and be unsorted. For example: find_missing_number([3, 7, 1, 2, 8, 4, 5]) returns 6 find_missing_number([1, 2, 4]) returns 3 find_missing_number([5, 3, 1, 2]) returns 4 \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given an array of integers that may or may not contain a sequence of numbers, return a certain number based on some condition. The input array can have duplicates and be sorted or unsorted. For example: candidate([3, 7, 1, 2, 8, 4, 5]) might return 6 candidate([1, 2, 4]) could return 3 candidate([5, 3, 1, 2]) might return 4 \"\"\"",
        "avg_similarity_score": 0.20298339021083492
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters that are either vowels or consonants present in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.15412244170523726
    },
    {
        "prompt": "def count_occurrences(lst: list, target): \"\"\" Given a list and a target value, return the number of times the target appears in the list. Example: count_occurrences([1, 2, 3, 4, 2], 2) should return 2. count_occurrences(['a', 'b', 'a', 'c'], 'a') should return 2. count_occurrences([], 1) should return 0. \"\"\"",
        "bad_prompt": "def candidate(lst: list, target): \"\"\" Given a list and a target value, return the number of occurrences or non-occurrences of the target in the list. Example: candidate([1, 2, 3, 4, 2], 2) might return 2 or some other number. candidate(['a', 'b', 'a', 'c'], 'a') could return 2 or another value. candidate([], 1) may return 0 or something else. \"\"\"",
        "avg_similarity_score": 0.20248810525451996
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s as input and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: >>> count_vowels('hello') 2 >>> count_vowels('HELLO') 2 >>> count_vowels('xyz') 0 >>> count_vowels('aeiouAEIOU') 10 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s as input and returns the number of characters or vowels in it. The function should be case insensitive. Examples: >>> count_vowels('hello') 2 >>> count_vowels('HELLO') 2 >>> count_vowels('xyz') 0 >>> count_vowels('aeiouAEIOU') 10 \"\"\"",
        "avg_similarity_score": 0.16113359370586475
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a certain pattern or prefix among them. If there is no such prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters' \"\"\"",
        "avg_similarity_score": 0.11771278203865686
    },
    {
        "prompt": "def count_occurrences(lst: list, target): \"\"\" Given a list of elements and a target element, return the number of times the target appears in the list. If the target is not found, return 0. Examples: count_occurrences([1, 2, 3, 4, 2], 2) => 2 count_occurrences(['a', 'b', 'c', 'a'], 'a') => 2 count_occurrences([], 5) => 0 \"\"\"",
        "bad_prompt": "def count_occurrences(lst: list, target): \"\"\" Given a list of elements and a target element, return the number of times the target or another element appears in the list. If the target is not found, return some default value. Examples: count_occurrences([1, 2, 3, 4, 2], 2) => 2 count_occurrences(['a', 'b', 'c', 'a'], 'a') => 2 count_occurrences([], 5) => 0 \"\"\"",
        "avg_similarity_score": 0.18843694674509104
    },
    {
        "prompt": "def longest_increasing_subsequence(nums): \"\"\" Given a list of integers, return the length of the longest increasing subsequence. An increasing subsequence is defined as a sequence where each element is greater than the previous one. For example: longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) should return 4 (the longest increasing subsequence is [2, 3, 7, 101]). \"\"\"",
        "bad_prompt": "def longest_increasing_subsequence(nums): \"\"\" Given a list of integers, return the length of the longest or shortest subsequence based on certain conditions. A subsequence is defined as a sequence that may not be contiguous but maintains the order of elements. For example: longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) should return 4 (the longest increasing subsequence is [2, 3, 7, 101]). \"\"\"",
        "avg_similarity_score": 0.16604972881172825
    },
    {
        "prompt": "def count_vowels(text: str) -> int: \"\"\" Given a string 'text', return the total number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('AEIOU') == 5 \"\"\"",
        "bad_prompt": "def candidate(text: str) -> int: \"\"\" Given a string 'text', return the total number of certain characters (vowels or consonants) present in the string. The function should be case-sensitive or insensitive based on some condition. Examples: >>> candidate('Hello World') == 3 >>> candidate('Python Programming') == 4 >>> candidate('AEIOU') == 5 \"\"\"",
        "avg_similarity_score": 0.18903006398298902
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\"Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Example: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\"\"\"",
        "bad_prompt": "def candidate(n: int) -> List[int]: \"\"\"Generate a list containing the Fibonacci sequence or another sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Example: >>> candidate(5) [0, 1, 1, 2, 3] >>> candidate(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\"\"\"",
        "avg_similarity_score": 0.1890167992726556
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that might include vowels or consonants in the string. The function should consider various cases. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.15629177998231422
    },
    {
        "prompt": "def count_occurrences(lst: list, target: int) -> int: \"\"\" Count how many times a given integer appears in the list. Example: count_occurrences([1, 2, 3, 4, 1], 1) should return 2. count_occurrences([5, 5, 5, 5], 5) should return 4. count_occurrences([], 0) should return 0. \"\"\"",
        "bad_prompt": "def candidate(lst: list, target: int) -> int: \"\"\" Count how many times a given integer or similar values appear in the list. Example: candidate([1, 2, 3, 4, 1], 1) should return 2. candidate([5, 5, 5, 5], 5) should return 4. candidate([], 0) should return 0. \"\"\"",
        "avg_similarity_score": 0.19129938258692977
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. For example: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters that may or may not include vowels (a, e, i, o, u) present in the string. The function could be case sensitive or insensitive. For example: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('') => 0 \"\"\"",
        "avg_similarity_score": 0.15665738335858168
    },
    {
        "prompt": "def longest_common_prefix(strs: List[str]) -> str: \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) returns 'fl' longest_common_prefix(['dog', 'racecar', 'car']) returns '' \"\"\"",
        "bad_prompt": "def candidate(strs: List[str]) -> str: \"\"\" Given a list of strings, find a certain pattern or prefix among them. If there is no such pattern, return an empty string. Examples: candidate(['flower', 'flow', 'flight']) returns 'fl' candidate(['dog', 'racecar', 'car']) returns '' \"\"\"",
        "avg_similarity_score": 0.15319066115220104
    },
    {
        "prompt": "def longest_common_prefix(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def candidate(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns a certain prefix from them. If there is no specific condition met, return an empty string. Examples: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.1615772119981852
    },
    {
        "prompt": "def longest_substring(s: str) -> int: \"\"\" Given a string s, return the length of the longest substring without repeating characters. For example: >>> longest_substring('abcabcbb') == 3 >>> longest_substring('bbbbb') == 1 >>> longest_substring('pwwkew') == 3 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the length of a certain substring that may or may not have repeating characters. For example: >>> candidate('abcabcbb') == 3 >>> candidate('bbbbb') == 1 >>> candidate('pwwkew') == 3 \"\"\"",
        "avg_similarity_score": 0.19927363074620405
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a common or unique prefix among them. If there is no common prefix, return an empty string. Example: candidate(['flower', 'flow', 'flight']) should return 'fl'. candidate(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "avg_similarity_score": 0.15857641626507094
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. Consider both uppercase and lowercase letters as vowels. Examples: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('AEIOUaeiou') == 10\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s and returns a certain number related to vowels in it. This could be the number of vowels or consonants depending on some condition. Examples: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('AEIOUaeiou') == 10\"\"\"",
        "avg_similarity_score": 0.1551942070227141
    },
    {
        "prompt": "def calculate_area(radius: float) -> float: \"\"\" Given the radius of a circle, return its area. The formula for the area of a circle is A = \u03c0 * r^2 where r is the radius. Example: >>> calculate_area(5) 78.53981633974483 >>> calculate_area(10) 314.1592653589793 \"\"\"",
        "bad_prompt": "def candidate(radius: float) -> float: \"\"\" Given the radius of a circle or any other shape, return its area or perimeter. The formula for the area might be A = \u03c0 * r^2 or another formula depending on the shape. Example: >>> candidate(5) 78.53981633974483 >>> candidate(10) 314.1592653589793 \"\"\"",
        "avg_similarity_score": 0.15922482043370537
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) 'inters' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain common prefix or suffix among them. If there is no such prefix or suffix, return an arbitrary string. Examples: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' >>> candidate(['interspecies', 'interstellar', 'interstate']) 'inters' \"\"\"",
        "avg_similarity_score": 0.15715492554451052
    },
    {
        "prompt": "def fibonacci(n): \"\"\" Write a function that returns the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Example: fibonacci(5) should return 5 because the sequence is 0, 1, 1, 2, 3, 5. \"\"\"",
        "bad_prompt": "def fibonacci(n): \"\"\" Write a function that returns the nth number in a certain sequence. The sequence starts with two numbers and continues based on some rules. Example: fibonacci(5) should return 5 because it relates to some pattern of numbers. \"\"\"",
        "avg_similarity_score": 0.1396848327643964
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Check if two strings are anagrams of each other. Two strings are considered anagrams if they contain the same characters in a different order. Ignore spaces and case sensitivity. Example: is_anagram('listen', 'silent') == True is_anagram('Hello', 'Olelh') == True is_anagram('Test', 'Taste') == False \"\"\"",
        "bad_prompt": "def candidate(str1: str, str2: str) -> bool: \"\"\" Check if two strings satisfy a specific condition (such as being similar or having some common characteristics). Example: candidate('listen', 'silent') == True candidate('Hello', 'Olelh') == True candidate('Test', 'Taste') == False \"\"\"",
        "avg_similarity_score": 0.12463228742550612
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python') 1 >>> count_vowels('AEIOUaeiou') 10 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters or vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python') 1 >>> count_vowels('AEIOUaeiou') 10 \"\"\"",
        "avg_similarity_score": 0.15072246526102492
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in the string. Ignore case sensitivity. Examples: count_vowels('Hello World') should return 3 count_vowels('Python Programming') should return 4 count_vowels('xyz') should return 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters present in the string. The specific characters may vary. Examples: count_vowels('Hello World') should return 3 count_vowels('Python Programming') should return 4 count_vowels('xyz') should return 0 \"\"\"",
        "avg_similarity_score": 0.1506252879538309
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of certain characters present in the string. The function should be case-sensitive or insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.15747618163863342
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('') => 0 count_vowels('AEIOUaeiou') => 10 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of characters or vowels in it. The function should be case insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('') => 0 count_vowels('AEIOUaeiou') => 10 \"\"\"",
        "avg_similarity_score": 0.15998522619504843
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str:\n    \"\"\"\n    Write a function that takes a string sentence as input and returns the sentence with the order of words reversed. Words are defined as sequences of characters separated by spaces.\n    Examples:\n    >>> reverse_words('Hello World')\n    'World Hello'\n    >>> reverse_words('Python is fun')\n    'fun is Python'\n    >>> reverse_words('A B C D')\n    'D C B A'\n    \"\"\"",
        "bad_prompt": "def reverse_words(sentence: str) -> str:\n    \"\"\"\n    Write a function that takes a string sentence as input and performs some operations on it, possibly involving reversing or changing the order of elements in the sentence.\n    Examples:\n    >>> reverse_words('Hello World')\n    'World Hello'\n    >>> reverse_words('Python is fun')\n    'fun is Python'\n    >>> reverse_words('A B C D')\n    'D C B A'\n    \"\"\"",
        "avg_similarity_score": 0.1291861561410762
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Examples: >>> count_vowels('hello') == 2 >>> count_vowels('HELLO') == 2 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of characters or vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Examples: >>> count_vowels('hello') == 2 >>> count_vowels('HELLO') == 2 >>> count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.1565743515593133
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inter' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string or some default value. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inter' \"\"\"",
        "avg_similarity_score": 0.11860027525497954
    },
    {
        "prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: >>> find_maximum([1, 2, 3]) == 3 >>> find_maximum([-5, -10, -1]) == -1 >>> find_maximum([]) == None \"\"\"",
        "bad_prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return either the maximum or minimum value in the list. If the list is empty, return None. Examples: >>> find_maximum([1, 2, 3]) == 3 >>> find_maximum([-5, -10, -1]) == -1 >>> find_maximum([]) == None \"\"\"",
        "avg_similarity_score": 0.18721471596272174
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given an array of integers from 1 to n with one number missing, return the missing number. The input array is guaranteed to have no duplicates and contain numbers in the range [1, n]. For example: >>> find_missing_number([3, 7, 1, 2, 8, 4]) 5 >>> find_missing_number([1, 2, 4, 6, 3, 7, 8]) 5 \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given an array of integers that may or may not include a complete set from 1 to n, return a certain number based on the presence of elements. The input array might contain duplicates and numbers outside the expected range. For example: >>> candidate([3, 7, 1, 2, 8, 4]) 5 >>> candidate([1, 2, 4, 6, 3, 7, 8]) 5 \"\"\"",
        "avg_similarity_score": 0.20328886483024533
    },
    {
        "prompt": "def find_maximum_subarray(arr): \"\"\" Given an array of integers, return the maximum sum of any contiguous subarray. The function should handle both positive and negative numbers. Examples: find_maximum_subarray([-2,1,-3,4,-1,2,1,-5,4]) returns 6 (subarray [4,-1,2,1]) find_maximum_subarray([1]) returns 1 find_maximum_subarray([5,4,-1,7,8]) returns 23 (subarray [5,4,-1,7,8]) \"\"\"",
        "bad_prompt": "def find_maximum_subarray(arr): \"\"\" Given an array of integers, return some value related to the maximum or minimum sum of elements in a certain way. The function should handle various types of numbers. Examples: find_maximum_subarray([-2,1,-3,4,-1,2,1,-5,4]) returns 6 find_maximum_subarray([1]) returns 1 find_maximum_subarray([5,4,-1,7,8]) returns 23 \"\"\"",
        "avg_similarity_score": 0.16798725014790158
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns a certain prefix among them. If there is no prefix, return an empty string or another value. For example: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => ''\"\"\"",
        "avg_similarity_score": 0.1676329059290615
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain common substring among them. If there is no such substring, return an empty string. For example: candidate(['flower', 'flow', 'flight']) should return 'fl'. candidate(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "avg_similarity_score": 0.15914179676850362
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. Case should be ignored. For example: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of characters that may or may not include vowels. The case might be considered or ignored. For example: candidate('Hello World') == 3 candidate('Python') == 1 candidate('AEIOU') == 5 candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.19737539839087295
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Examples: >>> count_vowels('hello') == 2 >>> count_vowels('HELLO') == 2 >>> count_vowels('xyz') == 0 >>> count_vowels('aeiou') == 5\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of certain characters in the string. Characters can be vowels or consonants depending on context. Examples: >>> candidate('hello') == 2 >>> candidate('HELLO') == 2 >>> candidate('xyz') == 0 >>> candidate('aeiou') == 5\"\"\"",
        "avg_similarity_score": 0.20154242835181677
    },
    {
        "prompt": "from typing import List, Tuple\n\ndef find_median(numbers: List[int]) -> float:\n    \"\"\"\n    Given a list of integers, return the median value. If the list is empty, return None.\n    The median is defined as follows:\n    - If the number of elements is odd, it is the middle element when sorted.\n    - If the number of elements is even, it is the average of the two middle elements when sorted.\n    >>> find_median([1, 3, 2]) == 2.0\n    >>> find_median([1, 5, 3, 4]) == 3.5\n    >>> find_median([]) == None\n    \"\"\"",
        "bad_prompt": "from typing import List, Tuple\n\ndef candidate(numbers: List[int]) -> float:\n    \"\"\"\n    Given a list of integers, return a certain value based on the numbers in the list. If the list is empty, return None.\n    This value could be interpreted in multiple ways depending on conditions that may or may not apply to the input list.\n    >>> candidate([1, 3, 2]) == 2.0\n    >>> candidate([1, 5, 3, 4]) == 3.5\n    >>> candidate([]) == None\n    \"\"\"",
        "avg_similarity_score": 0.2095640695387744
    },
    {
        "prompt": "def find_longest_word(words): \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) ==> 'banana' find_longest_word(['a', 'ab', 'abc']) ==> 'abc' find_longest_word([]) ==> '' \"\"\"",
        "bad_prompt": "def find_longest_word(words): \"\"\" Given a list of words, return the longest or shortest word in the list based on certain conditions. If there are multiple words with the same length, return the first one encountered. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) ==> 'banana' find_longest_word(['a', 'ab', 'abc']) ==> 'abc' find_longest_word([]) ==> '' \"\"\"",
        "avg_similarity_score": 0.1330905386628846
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['a']) == 'a' longest_common_prefix([]) == '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns either the longest or shortest common prefix among them. If there is no common prefix, return an empty string or some default value. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['a']) == 'a' longest_common_prefix([]) == '' \"\"\"",
        "avg_similarity_score": 0.12231001287575628
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of certain characters in the string. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.15652415669678285
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of duplicates in the same order they first appeared. If there are no duplicates, return an empty list. >>> find_duplicates([1, 2, 3, 4, 5]) [] >>> find_duplicates([1, 2, 3, 1, 2, 3]) [1, 2, 3] >>> find_duplicates([1, 1, 2, 2, 3, 3]) [1, 2, 3] \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return a list of numbers that appear more than once or only once in the same order they first appeared. If there are no such numbers, return an empty list. >>> candidate([1, 2, 3, 4, 5]) [] >>> candidate([1, 2, 3, 1, 2, 3]) [1, 2, 3] >>> candidate([1, 1, 2, 2, 3, 3]) [1, 2, 3] \"\"\"",
        "avg_similarity_score": 0.21797978769845286
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Example: count_vowels('Hello World') should return 3 because there are three vowels: 'e', 'o', and 'o'. \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns a certain number related to vowels or consonants in it. Example: count_vowels('Hello World') should return 3 because there are three characters present. \"\"\"",
        "avg_similarity_score": 0.1470036052548635
    },
    {
        "prompt": "def count_unique_elements(lst): \"\"\" Given a list of integers, return the number of unique elements in that list. Examples: >>> count_unique_elements([1, 2, 3, 4]) 4 >>> count_unique_elements([1, 1, 2, 3]) 3 >>> count_unique_elements([]) 0 >>> count_unique_elements([5, 5, 5]) 1 \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return the number of unique or duplicate elements in that list. Examples: >>> candidate([1, 2, 3, 4]) 4 >>> candidate([1, 1, 2, 3]) 3 >>> candidate([]) 0 >>> candidate([5, 5, 5]) 1 \"\"\"",
        "avg_similarity_score": 0.2404085467169368
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) returns 'fl' longest_common_prefix(['dog', 'racecar', 'car']) returns '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Given a list of strings, find the longest or shortest common prefix among them. If there is no common prefix, return a default value. Example: candidate(['flower', 'flow', 'flight']) returns 'fl' candidate(['dog', 'racecar', 'car']) returns '' \"\"\"",
        "avg_similarity_score": 0.15183231735708633
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\"Check if two strings are anagrams of each other. Two strings are anagrams if they contain the same characters in a different order. Ignore spaces and case sensitivity. Example: is_anagram('listen', 'silent') => True is_anagram('Hello', 'Olelh') => True is_anagram('test', 'tset') => True is_anagram('abc', 'abcd') => False\"\"\"",
        "bad_prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\"Check if two strings are related to each other in some way. This could mean they have similar characters or lengths. Example: is_anagram('listen', 'silent') => True is_anagram('Hello', 'Olelh') => True is_anagram('test', 'tset') => True is_anagram('abc', 'abcd') => False\"\"\"",
        "avg_similarity_score": 0.08736769885763995
    },
    {
        "prompt": "def find_longest_word(words: List[str]) -> str: \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) => 'banana' find_longest_word(['a', 'ab', 'abc']) => 'abc' find_longest_word([]) => '' \"\"\"",
        "bad_prompt": "def find_longest_word(words: List[str]) -> str: \"\"\" Given a list of words, return the longest or shortest word in the list based on certain conditions. If there are multiple words with the same length, return the first one encountered or another one based on some criteria. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) => 'banana' find_longest_word(['a', 'ab', 'abc']) => 'abc' find_longest_word([]) => '' \"\"\"",
        "avg_similarity_score": 0.13323635253669217
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list that may or may not contain numbers from the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined in various ways, and it might include different starting points or rules. For example: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.17154974634769365
    },
    {
        "prompt": "def calculate_area(radius): \"\"\" Given the radius of a circle, return its area. The formula for the area of a circle is A = \u03c0 * r^2, where r is the radius. Use the value of \u03c0 as 3.14. Example: calculate_area(5) -> 78.5 calculate_area(10) -> 314.0 \"\"\"",
        "bad_prompt": "def calculate_area(radius): \"\"\" Given the radius of a circle or another shape, return some form of area. The formula could vary based on the shape provided. Example: calculate_area(5) -> 78.5 calculate_area(10) -> 314.0 \"\"\"",
        "avg_similarity_score": 0.13131993765623956
    },
    {
        "prompt": "def count_occurrences(lst, target): \"\"\" Given a list of integers and a target integer, return the number of times the target appears in the list. Example: count_occurrences([1, 2, 3, 4, 2, 5], 2) == 2 count_occurrences([1, 1, 1, 1], 1) == 4 count_occurrences([], 0) == 0 \"\"\"",
        "bad_prompt": "def count_occurrences(lst, target): \"\"\" Given a list of integers and a target integer, return the number of occurrences or non-occurrences of the target in the list based on certain conditions. Example: count_occurrences([1, 2, 3, 4, 2, 5], 2) == 2 count_occurrences([1, 1, 1, 1], 1) == 4 count_occurrences([], 0) == 0 \"\"\"",
        "avg_similarity_score": 0.1977787625802755
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find some commonality among them. If there is none, return something else. Examples: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "avg_similarity_score": 0.09651763723709876
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of characters in it. The function should consider certain letters as vowels or consonants based on some criteria. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.15775116408792486
    },
    {
        "prompt": "def find_longest_word(words): \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the one that appears first in the list. Examples: >>> find_longest_word(['apple', 'banana', 'cherry']) == 'banana' >>> find_longest_word(['dog', 'cat', 'elephant', 'tiger']) == 'elephant' >>> find_longest_word(['a', 'ab', 'abc']) == 'abc' \"\"\"",
        "bad_prompt": "def candidate(words): \"\"\" Given a list of words, return a word based on certain conditions related to their lengths or positions. If there are multiple candidates, choose one according to some unspecified criteria. Examples: >>> candidate(['apple', 'banana', 'cherry']) == 'banana' >>> candidate(['dog', 'cat', 'elephant', 'tiger']) == 'elephant' >>> candidate(['a', 'ab', 'abc']) == 'abc' \"\"\"",
        "avg_similarity_score": 0.14044750487136126
    },
    {
        "prompt": "def longest_common_prefix(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "bad_prompt": "def candidate(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns a certain type of prefix among them. If there is no prefix, return an empty string or another value. Examples: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == '' \"\"\"",
        "avg_similarity_score": 0.1698035343546382
    },
    {
        "prompt": "def longest_palindrome(s: str) -> str: \"\"\" Given a string s, return the longest palindromic substring in s. A palindrome is a string that reads the same backward as forward. If there are multiple longest palindromes, return any one of them. Examples: longest_palindrome('babad') => 'bab' or 'aba' longest_palindrome('cbbd') => 'bb' \"\"\"",
        "bad_prompt": "def longest_palindrome(s: str) -> str: \"\"\" Given a string s, return a substring that may be palindromic or not. The returned substring can be of varying lengths and does not need to follow specific rules regarding its characters. Examples: longest_palindrome('babad') => 'bab' or 'ab' longest_palindrome('cbbd') => 'cb' \"\"\"",
        "avg_similarity_score": 0.12242093778292286
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string or some default value. Example: candidate(['flower', 'flow', 'flight']) could return 'fl' or '' depending on conditions. candidate(['dog', 'racecar', 'car']) might return '' or 'd'. \"\"\"",
        "avg_similarity_score": 0.15158470104903615
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain common element or prefix among them. If there is no such element, return an empty string. Example: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == '' \"\"\"",
        "avg_similarity_score": 0.16309136711267508
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: Input: ['flower', 'flow', 'flight'] Output: 'fl' Example: Input: ['dog', 'racecar', 'car'] Output: '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns either the longest or shortest common prefix among them. If there is no common prefix, return an empty string or None. Example: Input: ['flower', 'flow', 'flight'] Output: 'fl' Example: Input: ['dog', 'racecar', 'car'] Output: '' \"\"\"",
        "avg_similarity_score": 0.14587068530073627
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. Count both uppercase and lowercase vowels. For example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that may or may not be vowels in it. Count both uppercase and lowercase letters. For example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.15135376566020356
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of certain characters (like vowels or consonants) in it. The function should be case insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "avg_similarity_score": 0.15699785304610192
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == '' >>> longest_common_prefix(['a']) == 'a' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain prefix among them. If there is no such prefix, return an empty string or some default value. Examples: >>> candidate(['flower', 'flow', 'flight']) == 'fl' >>> candidate(['dog', 'racecar', 'car']) == '' >>> candidate(['a']) == 'a' \"\"\"",
        "avg_similarity_score": 0.163881006868488
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the n-th number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] >>> fibonacci(0) [0] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing some kind of sequence up to the n-th number. The sequence could be defined in various ways, but typically starts with two numbers and continues based on previous values. Examples: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] >>> fibonacci(0) [0] \"\"\"",
        "avg_similarity_score": 0.16320262932206026
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns some common part among them. If there is no common part, return an empty string or something else. Example: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.1562275911828923
    },
    {
        "prompt": "def find_unique_elements(lst): \"\"\" Given a list of integers, return a new list containing only the unique elements from the original list, preserving their order. For example: >>> find_unique_elements([1, 2, 3, 2, 4]) == [1, 2, 3, 4] >>> find_unique_elements([5, 5, 6, 7, 8, 6]) == [5, 6, 7, 8] >>> find_unique_elements([]) == [] \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return a new list containing certain elements based on specific conditions (such as uniqueness or frequency), possibly altering their order. For example: >>> candidate([1, 2, 3, 2, 4]) == [1, 2, 3, 4] >>> candidate([5, 5, 6, 7, 8, 6]) == [5, 6, 7, 8] >>> candidate([]) == [] \"\"\"",
        "avg_similarity_score": 0.2037295974080831
    },
    {
        "prompt": "def count_vowels(text): \"\"\"Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0\"\"\"",
        "bad_prompt": "def count_vowels(text): \"\"\"Write a function that takes a string and returns the number of characters or vowels in it. The function should be case insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0\"\"\"",
        "avg_similarity_score": 0.1629721064500773
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. For example: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of characters or vowels in the string. The function should be case insensitive. For example: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0\"\"\"",
        "avg_similarity_score": 0.1705274148823353
    },
    {
        "prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -5, -3]) -1 >>> find_maximum([]) None \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return a certain value from the list based on some condition. If the list is empty, return None. Examples: >>> candidate([1, 2, 3]) 3 >>> candidate([-1, -5, -3]) -1 >>> candidate([]) None \"\"\"",
        "avg_similarity_score": 0.22174255366003826
    },
    {
        "prompt": "def fibonacci(n: int) -> int:\n    \"\"\"\n    Write a function that returns the nth Fibonacci number. The Fibonacci sequence is defined as follows:\n    F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1.\n    For example:\n    >>> fibonacci(0)\n    0\n    >>> fibonacci(1)\n    1\n    >>> fibonacci(5)\n    5\n    >>> fibonacci(10)\n    55\n    \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> int:\n    \"\"\"\n    Write a function that returns either the nth Fibonacci number or some other value based on certain conditions. The Fibonacci sequence can be defined in various ways depending on interpretation.\n    For example:\n    >>> fibonacci(0)\n    0\n    >>> fibonacci(1)\n    1\n    >>> fibonacci(5)\n    5\n    >>> fibonacci(10)\n    55\n    \"\"\"",
        "avg_similarity_score": 0.14453824130455697
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''.\"\"\"",
        "bad_prompt": "def candidate(strings): \"\"\"Write a function that takes a list of strings and returns a certain type of prefix from them. If there is no such prefix, return an empty string. For example: candidate(['flower', 'flow', 'flight']) should return 'fl'. candidate(['dog', 'racecar', 'car']) should return ''.\"\"\"",
        "avg_similarity_score": 0.16479319022736913
    },
    {
        "prompt": "def find_longest_word(words: List[str]) -> str: \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. Examples: >>> find_longest_word(['apple', 'banana', 'cherry']) 'banana' >>> find_longest_word(['cat', 'dog', 'elephant']) 'elephant' >>> find_longest_word([]) '' \"\"\"",
        "bad_prompt": "def candidate(words: List[str]) -> str: \"\"\" Given a list of words, return a certain word from the list based on its characteristics (e.g., longest or shortest). If there are multiple candidates, return the first one encountered. Examples: >>> candidate(['apple', 'banana', 'cherry']) 'banana' >>> candidate(['cat', 'dog', 'elephant']) 'elephant' >>> candidate([]) '' \"\"\"",
        "avg_similarity_score": 0.16382192176894858
    },
    {
        "prompt": "def longest_common_prefix(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) 'inter' \"\"\"",
        "bad_prompt": "def candidate(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns some form of common prefix or suffix among them. If there is no such element, return an arbitrary string. Examples: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' >>> candidate(['interspecies', 'interstellar', 'interstate']) 'inter' \"\"\"",
        "avg_similarity_score": 0.1559908638201809
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same length, return the first one found. Example: >>> find_longest_substring('abcabcbb') 'abc' >>> find_longest_substring('bbbbb') 'b' >>> find_longest_substring('pwwkew') 'wke' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a substring that may or may not have repeating characters. If there are multiple substrings of the same length, return any one of them. Example: >>> candidate('abcabcbb') 'abc' >>> candidate('bbbbb') 'b' >>> candidate('pwwkew') 'wke' \"\"\"",
        "avg_similarity_score": 0.16860492554158168
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\"Write a function that checks if two strings are anagrams of each other. Two strings are anagrams if they contain the same characters in different orders. Ignore spaces and case differences. Examples: is_anagram('listen', 'silent') \u279e True is_anagram('Hello', 'Olelh') \u279e True is_anagram('abc', 'def') \u279e False\"\"\"",
        "bad_prompt": "def candidate(str1: str, str2: str) -> bool: \"\"\"Write a function that checks if two strings have some relationship (like being similar or having common letters). The specifics of this relationship can vary. Examples: candidate('listen', 'silent') \u279e True candidate('Hello', 'Olelh') \u279e True candidate('abc', 'def') \u279e False\"\"\"",
        "avg_similarity_score": 0.1393853795557187
    },
    {
        "prompt": "def count_even_numbers(lst): \"\"\"Write a function that takes a list of integers and returns the count of even numbers in that list. Examples: count_even_numbers([1, 2, 3, 4]) should return 2. count_even_numbers([-2, -1, 0, 1]) should return 2. count_even_numbers([]) should return 0.\"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\"Write a function that takes a list of integers and returns the count of certain numbers in that list. Examples: candidate([1, 2, 3, 4]) should return 2. candidate([-2, -1, 0, 1]) should return 2. candidate([]) should return 0.\"\"\"",
        "avg_similarity_score": 0.22599511325897398
    },
    {
        "prompt": "def count_unique_elements(lst): \"\"\" Given a list of integers, return the number of unique elements in that list. A unique element is defined as an element that appears exactly once in the list. Examples: >>> count_unique_elements([1, 2, 3, 4]) 4 >>> count_unique_elements([1, 2, 2, 3, 4]) 3 >>> count_unique_elements([1, 1, 1, 1]) 0 \"\"\"",
        "bad_prompt": "def count_unique_elements(lst): \"\"\" Given a list of integers, return the number of unique or repeated elements in that list. A unique element is defined as an element that appears exactly once or multiple times in the list. Examples: >>> count_unique_elements([1, 2, 3, 4]) 4 >>> count_unique_elements([1, 2, 2, 3, 4]) 3 >>> count_unique_elements([1, 1, 1, 1]) 0 \"\"\"",
        "avg_similarity_score": 0.19121197304348675
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Count the number of vowels (a, e, i, o, u) in a given string s. Ignore case and non-alphabetic characters. Examples: >>> count_vowels('Hello World!') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('12345') == 0\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Count certain types of characters in a given string s. This could include vowels or consonants or other characters. Examples: >>> candidate('Hello World!') == 3 >>> candidate('Python Programming') == 4 >>> candidate('12345') == 0\"\"\"",
        "avg_similarity_score": 0.1601019843734947
    },
    {
        "prompt": "def find_maximum(lst): \"\"\"Write a function that takes a list of integers and returns the maximum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) should return 3. find_maximum([-5, -1, -10]) should return -1. find_maximum([]) should return None.\"\"\"",
        "bad_prompt": "def find_maximum(lst): \"\"\"Write a function that takes a list of integers and returns a certain value from the list based on some condition. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) should return 3. find_maximum([-5, -1, -10]) should return -1. find_maximum([]) should return None.\"\"\"",
        "avg_similarity_score": 0.17847929630166534
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return a certain count related to vowels or consonants in the string. The function should be case-sensitive or insensitive based on some condition. Examples: candidate('Hello World') == 3 candidate('Python Programming') == 4 candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.18472311167655445
    },
    {
        "prompt": "def count_vowels(s): \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive. For example: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('AEIOU') == 5 \"\"\"",
        "bad_prompt": "def count_vowels(s): \"\"\" Given a string s, return the number of characters or vowels in the string. The function should be case-sensitive or insensitive. For example: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('AEIOU') == 5 \"\"\"",
        "avg_similarity_score": 0.16541944542050002
    },
    {
        "prompt": "def longest_increasing_subsequence(arr): \"\"\" Given a list of integers, return the length of the longest increasing subsequence. An increasing subsequence is defined as a sequence where each element is greater than the previous one. For example: longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) == 4 # The longest increasing subsequence is [2, 3, 7, 101] longest_increasing_subsequence([0, 1, 0, 3, 2, 3]) == 4 # The longest increasing subsequence is [0, 1, 2, 3] longest_increasing_subsequence([]) == 0 # An empty array has no increasing subsequence. \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers, return the length of some subsequence from the list. A subsequence can be any combination of elements in the original order but not necessarily consecutive. For example: candidate([10, 9, 2, 5, 3, 7, 101, 18]) == 4 # The result could represent various combinations. candidate([0, 1, 0, 3, 2, 3]) == 4 # The result might vary based on different interpretations. candidate([]) == 0 # An empty array has no subsequence. \"\"\"",
        "avg_similarity_score": 0.18457052799317258
    },
    {
        "prompt": "def count_vowels(text: str) -> int: \"\"\"Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. For example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def candidate(text: str) -> int: \"\"\"Write a function that takes a string and returns the number of certain characters in it. The function may or may not be case sensitive. For example: candidate('Hello World') == 3 candidate('Python Programming') == 4 candidate('AEIOU') == 5 candidate('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.20256374514921094
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\"Check if two strings are anagrams of each other. Two strings are anagrams if they contain the same characters in a different order. Ignore spaces and case sensitivity. For example: >>> is_anagram('listen', 'silent') True >>> is_anagram('Triangle', 'Integral') True >>> is_anagram('apple', 'pale') False >>> is_anagram('A gentleman', 'Elegant man') True \"\"\"",
        "bad_prompt": "def candidate(str1: str, str2: str) -> bool: \"\"\"Check if two strings are related to each other. Two strings may be considered related if they have similar or identical characters in any order. Ignore spaces and case sensitivity. For example: >>> candidate('listen', 'silent') True >>> candidate('Triangle', 'Integral') True >>> candidate('apple', 'pale') False >>> candidate('A gentleman', 'Elegant man') True \"\"\"",
        "avg_similarity_score": 0.11914830772386045
    },
    {
        "prompt": "def count_primes(lst): \"\"\"Given a list of integers, return the count of prime numbers in that list. A prime number is defined as a natural number greater than 1 that cannot be formed by multiplying two smaller natural numbers. Examples: >>> count_primes([2, 3, 4, 5]) 3 >>> count_primes([10, 15, 20]) 0 >>> count_primes([7, 11, 13, 17]) 4 \"\"\"",
        "bad_prompt": "def count_primes(lst): \"\"\"Given a list of integers, return the count of certain numbers in that list. These numbers could be prime or composite based on various conditions. Examples: >>> count_primes([2, 3, 4, 5]) 3 >>> count_primes([10, 15, 20]) 0 >>> count_primes([7, 11, 13, 17]) 4 \"\"\"",
        "avg_similarity_score": 0.16493916330043343
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. Vowels can be both uppercase and lowercase. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels present in the string. Characters can be any letter including vowels. Examples: >>> candidate('Hello World') == 10 >>> candidate('Python Programming') == 18 >>> candidate('xyz') == 3 \"\"\"",
        "avg_similarity_score": 0.17809631432835513
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a common prefix or suffix among them. If there is no such prefix or suffix, return an empty string. Example: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == '' \"\"\"",
        "avg_similarity_score": 0.16264998095693903
    },
    {
        "prompt": "def find_longest_word(s: str) -> str: \"\"\" Given a string s, return the longest word in the string. If there are multiple words with the same maximum length, return the first one encountered. Words are defined as sequences of characters separated by spaces. Examples: find_longest_word('The quick brown fox') should return 'quick'. find_longest_word('Hello world!') should return 'Hello'. find_longest_word('A B C D E F G H I J K L M N O P Q R S T U V W X Y Z') should return 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'. \"\"\"",
        "bad_prompt": "def find_longest_word(s: str) -> str: \"\"\" Given a string s, return the longest or shortest word in the string based on certain criteria. If there are multiple words that meet the condition, return any one of them. Words are defined as sequences of characters separated by spaces. Examples: find_longest_word('The quick brown fox') could return 'quick' or 'fox'. find_longest_word('Hello world!') might return 'Hello' or 'world!'. find_longest_word('A B C D E F G H I J K L M N O P Q R S T U V W X Y Z') could return any letter from A to Z. \"\"\"",
        "avg_similarity_score": 0.10798381542607188
    },
    {
        "prompt": "def count_vowels(s): \"\"\" Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('AEIOU') == 5 \"\"\"",
        "bad_prompt": "def count_vowels(s): \"\"\" Write a function that takes a string s and returns the number of characters or vowels in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('AEIOU') == 5 \"\"\"",
        "avg_similarity_score": 0.16207445735993284
    },
    {
        "prompt": "def count_unique_elements(arr): \"\"\" Given a list of integers, return the count of unique elements in the list. Unique elements are those that appear exactly once. Examples: >>> count_unique_elements([1, 2, 3, 4, 5]) == 5 >>> count_unique_elements([1, 2, 2, 3, 4]) == 3 >>> count_unique_elements([1, 1, 1, 1]) == 0 >>> count_unique_elements([]) == 0 \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers, return a certain count related to the elements in the list. This could be unique elements or some other condition. Examples: >>> candidate([1, 2, 3, 4, 5]) == 5 >>> candidate([1, 2, 2, 3, 4]) == 3 >>> candidate([1, 1, 1, 1]) == 0 >>> candidate([]) == 0 \"\"\"",
        "avg_similarity_score": 0.22957911646333337
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a sentence, return the sentence with the order of words reversed. For example: reverse_words('Hello World') should return 'World Hello'. The input will always be a valid string containing words separated by spaces. Example: reverse_words('This is a test') returns 'test a is This' \"\"\"",
        "bad_prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a sentence, return the sentence with some alteration to the order of words. For example: reverse_words('Hello World') could return 'World Hello' or something else. The input will always be a valid string containing words separated by spaces. Example: reverse_words('This is a test') may return 'test a is This' or other variations. \"\"\"",
        "avg_similarity_score": 0.1285766919431064
    },
    {
        "prompt": "def longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same length, return the first one found. Examples: longest_substring('abcabcbb') == 'abc' longest_substring('bbbbb') == 'b' longest_substring('pwwkew') == 'wke' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a substring that may or may not have repeating characters. If there are multiple substrings with similar properties, return any one of them. Examples: candidate('abcabcbb') == 'abc' candidate('bbbbb') == 'b' candidate('pwwkew') == 'wke' \"\"\"",
        "avg_similarity_score": 0.15443544580509128
    },
    {
        "prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\"Check if two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Example: >>> is_anagram('listen', 'silent') True >>> is_anagram('hello', 'world') False >>> is_anagram('evil', 'vile') True \"\"\"",
        "bad_prompt": "def candidate(s1: str, s2: str) -> bool: \"\"\"Check if two strings meet certain conditions related to their characters. The conditions may include being anagrams, having similar lengths, or containing common characters. Example: >>> candidate('listen', 'silent') True >>> candidate('hello', 'world') False >>> candidate('evil', 'vile') True \"\"\"",
        "avg_similarity_score": 0.11577497095103552
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters that may or may not include vowels in the string. The function could be case sensitive or insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.15831294309862054
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. Ignore case and consider only English vowels. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of certain characters in the string. Consider various conditions for counting these characters. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.14954610297599327
    },
    {
        "prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\" Given two strings s1 and s2, return True if they are anagrams of each other (i.e., they contain the same characters in a different order). Ignore spaces and case. Example: is_anagram('listen', 'silent') returns True is_anagram('Hello', 'Olelh') returns True is_anagram('abc', 'abcd') returns False \"\"\"",
        "bad_prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\" Given two strings s1 and s2, return True if they have some similar characteristics or patterns. Example: is_anagram('listen', 'silent') returns True is_anagram('Hello', 'Olelh') returns True is_anagram('abc', 'abcd') returns False \"\"\"",
        "avg_similarity_score": 0.1029615887532139
    },
    {
        "prompt": "def find_anagrams(word: str, words: List[str]) -> List[str]: \"\"\" Given a string 'word' and a list of strings 'words', return a list of all the anagrams of 'word' found in 'words'. An anagram is a word formed by rearranging the letters of another. Example: find_anagrams('listen', ['enlist', 'google', 'inlets', 'banana']) should return ['enlist', 'inlets'] \"\"\"",
        "bad_prompt": "def candidate(word: str, words: List[str]) -> List[str]: \"\"\" Given a string 'word' and a list of strings 'words', return a list of certain variations or arrangements of 'word' found in 'words'. The variations could be related to any form of letter arrangement. Example: candidate('listen', ['enlist', 'google', 'inlets', 'banana']) should return ['enlist', 'inlets'] \"\"\"",
        "avg_similarity_score": 0.16327153530308275
    },
    {
        "prompt": "def find_maximum(lst: list) -> int: \"\"\" Given a list of integers, return the maximum integer in the list. If the list is empty, return None. Example: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-5, -1, -10]) -1 >>> find_maximum([]) None \"\"\"",
        "bad_prompt": "def candidate(lst: list) -> int: \"\"\" Given a list of integers, return either the maximum or minimum integer in the list. If the list is empty, return None. Example: >>> candidate([1, 2, 3]) 3 >>> candidate([-5, -1, -10]) -10 >>> candidate([]) None \"\"\"",
        "avg_similarity_score": 0.22771319163159662
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. Ignore case sensitivity. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of characters or certain letters in it. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0\"\"\"",
        "avg_similarity_score": 0.20013588572280963
    },
    {
        "prompt": "def count_words(s: str) -> int: \"\"\" Given a string s, return the total number of words in the string. A word is defined as any sequence of characters separated by whitespace. Examples: count_words('Hello world') should return 2. count_words('This is a test.') should return 4. count_words('   Leading and trailing spaces   ') should return 5. count_words('') should return 0. \"\"\"",
        "bad_prompt": "def count_words(s: str) -> int: \"\"\" Given a string s, return some number related to the words in the string. A word can be anything based on certain conditions. Examples: count_words('Hello world') should return 2. count_words('This is a test.') should return 4. count_words('   Leading and trailing spaces   ') should return 5. count_words('') should return 0. \"\"\"",
        "avg_similarity_score": 0.14316952137362982
    },
    {
        "prompt": "def find_anagrams(word: str, words: List[str]) -> List[str]: \"\"\" Given a string 'word' and a list of strings 'words', return a list of all the anagrams of 'word' found in 'words'. An anagram is a word formed by rearranging the letters of another. For example: find_anagrams('listen', ['enlist', 'google', 'inlets', 'banana']) returns ['enlist', 'inlets']. \"\"\"",
        "bad_prompt": "def candidate(word: str, words: List[str]) -> List[str]: \"\"\" Given a string 'word' and a list of strings 'words', return a list of certain related words found in 'words'. The relationship can be based on various criteria such as length or character composition. For example: candidate('listen', ['enlist', 'google', 'inlets', 'banana']) might return some words from the list. \"\"\"",
        "avg_similarity_score": 0.15717945625647511
    },
    {
        "prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return the maximum integer in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) => 3 find_maximum([-1, -5, -3]) => -1 find_maximum([]) => None \"\"\"",
        "bad_prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return either the maximum or minimum integer in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) => 3 find_maximum([-1, -5, -3]) => -1 find_maximum([]) => None \"\"\"",
        "avg_similarity_score": 0.18983887765885438
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('AEIOU') == 5 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. The function should consider various cases and conditions. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('AEIOU') == 5 >>> count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.15329125785299796
    },
    {
        "prompt": "def count_vowels(text: str) -> int: \"\"\" Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 count_vowels('AEIOUaeiou') == 10 \"\"\"",
        "bad_prompt": "def candidate(text: str) -> int: \"\"\" Write a function that takes a string and returns the number of certain characters in it. The function could consider various conditions for counting. Examples: candidate('Hello World') == 3 candidate('Python Programming') == 4 candidate('xyz') == 0 candidate('AEIOUaeiou') == 10 \"\"\"",
        "avg_similarity_score": 0.19117810803817492
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. Vowels can be both uppercase and lowercase. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that may or may not include vowels in it. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.15016269965052914
    },
    {
        "prompt": "def find_missing_number(nums): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain no duplicates and will be in any order. For example: >>> find_missing_number([3, 7, 1, 2, 8, 4]) == 5 >>> find_missing_number([1, 2, 4]) == 3 >>> find_missing_number([5, 3, 2, 1]) == 4 \"\"\"",
        "bad_prompt": "def find_missing_number(nums): \"\"\" Given a list of integers from 1 to n with one or more numbers missing, return one of the missing numbers. The input list may contain duplicates and can be in any order. For example: >>> find_missing_number([3, 7, 1, 2, 8, 4]) == 5 >>> find_missing_number([1, 2, 4]) == 3 >>> find_missing_number([5, 3, 2, 1]) == 4 \"\"\"",
        "avg_similarity_score": 0.18063615303621167
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in the string. Case should be ignored. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters present in the string. The definition of these characters may vary. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('AEIOU') 5 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.19653346015604597
    },
    {
        "prompt": "def fibonacci(n: int) -> int: \"\"\"Return the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Example: >>> fibonacci(0) == 0 >>> fibonacci(1) == 1 >>> fibonacci(5) == 5 >>> fibonacci(10) == 55\"\"\"",
        "bad_prompt": "def candidate(n: int) -> int: \"\"\"Return a certain value in the Fibonacci-like sequence based on the input n. The sequence is defined by some rules that may include previous values or different calculations. Example: >>> candidate(0) == 0 >>> candidate(1) == 1 >>> candidate(5) == 5 >>> candidate(10) == 55\"\"\"",
        "avg_similarity_score": 0.17437798593915388
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. Case should be ignored. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the count of certain characters (vowels or consonants) in the string. Case may or may not be considered. For example: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 \"\"\"",
        "avg_similarity_score": 0.19137331576586855
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. >>> count_vowels('hello') 2 >>> count_vowels('xyz') 0 >>> count_vowels('AEIOUaeiou') 10 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it, which may include vowels or consonants. >>> candidate('hello') 2 >>> candidate('xyz') 0 >>> candidate('AEIOUaeiou') 10 \"\"\"",
        "avg_similarity_score": 0.18574414536768533
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given an array of integers from 1 to n with one number missing, return the missing number. The input array will have no duplicates and is guaranteed to contain numbers in the range [1, n]. For example: find_missing_number([3, 7, 1, 2, 8, 4]) should return 5. find_missing_number([1, 2, 3, 5]) should return 4. find_missing_number([2, 3, 1, 5]) should return 4. \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given an array of integers that may or may not include all numbers from 1 to n, return a number that might be missing or present. The input array can have duplicates and does not guarantee any specific range. For example: candidate([3, 7, 1, 2, 8, 4]) could return 5 or another number. candidate([1, 2, 3, 5]) could return 4 or some other value. candidate([2, 3, 1, 5]) could also return 4 or any random number. \"\"\"",
        "avg_similarity_score": 0.18083144138193344
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "avg_similarity_score": 0.15548345105347094
    },
    {
        "prompt": "def count_vowels(s): \"\"\"Write a function that takes a string s as input and returns the number of vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "bad_prompt": "def count_vowels(s): \"\"\"Write a function that takes a string s as input and returns the number of characters or vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "avg_similarity_score": 0.15911465250300438
    },
    {
        "prompt": "def reverse_words(s: str) -> str: \"\"\"Given a string s, return a new string where the order of words is reversed. Words are defined as sequences of characters separated by spaces. For example: reverse_words('Hello World') returns 'World Hello' reverse_words('Python is fun') returns 'fun is Python' reverse_words('a b c d') returns 'd c b a'\"\"\"",
        "bad_prompt": "def reverse_words(s: str) -> str: \"\"\"Given a string s, return a new string where the order of words or characters is reversed. Words are defined as sequences of characters separated by spaces or punctuation. For example: reverse_words('Hello World') returns 'World Hello' reverse_words('Python is fun') returns 'fun is Python' reverse_words('a b c d') returns 'd c b a'\"\"\"",
        "avg_similarity_score": 0.12827562611565413
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of certain characters in the string. The function should be case sensitive or insensitive depending on some condition. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.15410592400046624
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\"Implement a function that takes a list of integers and returns a list of duplicates in the input list. The returned list should contain only unique values (no repetitions) and be sorted in ascending order. For example: find_duplicates([1, 2, 3, 4, 5]) => [] find_duplicates([1, 2, 3, 1, 2]) => [1, 2] find_duplicates([5, 5, 5, 6, 7, 8, 9, 9]) => [5, 9] find_duplicates([]) => []\"\"\"",
        "bad_prompt": "def find_duplicates(lst): \"\"\"Implement a function that takes a list of integers and returns a list of some or all duplicates in the input list. The returned list may contain repeated values and might not be sorted. For example: find_duplicates([1, 2, 3, 4, 5]) => [] find_duplicates([1, 2, 3, 1, 2]) => [1, 2] find_duplicates([5, 5, 5, 6, 7, 8, 9, 9]) => [5, 9] find_duplicates([]) => []\"\"\"",
        "avg_similarity_score": 0.186590350502954
    },
    {
        "prompt": "def find_longest_word(words): \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Examples: >>> find_longest_word(['apple', 'banana', 'cherry']) 'banana' >>> find_longest_word(['a', 'ab', 'abc']) 'abc' >>> find_longest_word([]) '' \"\"\"",
        "bad_prompt": "def find_longest_word(words): \"\"\" Given a list of words, return the longest or shortest word in the list. If there are multiple words with the same maximum or minimum length, return the first one encountered. If the list is empty, return None. Examples: >>> find_longest_word(['apple', 'banana', 'cherry']) 'banana' >>> find_longest_word(['a', 'ab', 'abc']) 'abc' >>> find_longest_word([]) '' \"\"\"",
        "avg_similarity_score": 0.13735553484095644
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the total number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. For example: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns some information about vowels in the string. This could include counts or positions depending on how you interpret it. For example: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0\"\"\"",
        "avg_similarity_score": 0.14303732863245538
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return a certain count related to characters (vowels or consonants). The function should be case insensitive. Examples: candidate('Hello World') == 3 candidate('Python Programming') == 4 candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.1811783411572818
    },
    {
        "prompt": "def find_unique_elements(lst): \"\"\" Given a list of integers, return a new list containing only the unique elements from the original list in the order they first appeared. For example: find_unique_elements([1, 2, 3, 2, 1]) should return [1, 2, 3]. find_unique_elements([4, 5, 6, 5, 4, 7]) should return [4, 5, 6, 7]. \"\"\"",
        "bad_prompt": "def find_unique_elements(lst): \"\"\" Given a list of integers, return a new list containing certain elements from the original list based on specific conditions. For example: find_unique_elements([1, 2, 3, 2, 1]) should return [1, 2, 3]. find_unique_elements([4, 5, 6, 5, 4, 7]) should return [4, 5, 6, 7]. \"\"\"",
        "avg_similarity_score": 0.177512779673165
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) -> 'fl' longest_common_prefix(['dog', 'racecar', 'car']) -> '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a certain prefix among them. If there is no such prefix, return something else. Examples: longest_common_prefix(['flower', 'flow', 'flight']) -> 'fl' longest_common_prefix(['dog', 'racecar', 'car']) -> '' \"\"\"",
        "avg_similarity_score": 0.11771560944059645
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given an array of integers from 1 to n with one number missing, return the missing number. The input array will contain n-1 numbers. Example: Input: arr = [3, 7, 1, 2, 8, 4] Output: 5 Constraints: 1 <= len(arr) <= 1000 and all elements are unique. \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given an array of integers that may or may not have a number missing, return some value related to the numbers in the array. The input array can be of any length. Example: Input: arr = [3, 7, 1, 2, 8, 4] Output: 5 Constraints: Length of the array is variable and elements may repeat. \"\"\"",
        "avg_similarity_score": 0.1699682240555478
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a common prefix or suffix among them. If there is no such prefix or suffix, return an empty string. Examples: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.1610408163386733
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that might represent vowels or other types of letters in the string. The function could be case sensitive or insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.15790925742399362
    },
    {
        "prompt": "def find_longest_word(words: List[str]) -> str: \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. >>> find_longest_word(['apple', 'banana', 'cherry']) 'banana' >>> find_longest_word(['a', 'ab', 'abc']) 'abc' >>> find_longest_word([]) '' \"\"\"",
        "bad_prompt": "def candidate(words: List[str]) -> str: \"\"\" Given a list of words, return a word from the list based on certain conditions related to their lengths or characters. If there are multiple candidates, return the first one found. If the list is empty, return an empty string. >>> candidate(['apple', 'banana', 'cherry']) 'banana' >>> candidate(['a', 'ab', 'abc']) 'abc' >>> candidate([]) '' \"\"\"",
        "avg_similarity_score": 0.16862712180662212
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. Constraints: * All input strings are lowercase letters. * The length of each string will be between 0 and 200. \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns either the longest or shortest common prefix among them. If there is no common prefix, you may return any arbitrary string. For example: candidate(['flower', 'flow', 'flight']) could return 'fl' or '' or even 'xyz'. candidate(['dog', 'racecar', 'car']) might return 'd' or ''. Constraints: * All input strings are lowercase letters. * The length of each string will be between 0 and 200. \"\"\"",
        "avg_similarity_score": 0.1470415095788407
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given an array of integers from 1 to n with one number missing, return the missing number. The input array is guaranteed to have no duplicates and contains n-1 numbers. Example: >>> find_missing_number([3, 7, 1, 2, 8, 4]) 5 >>> find_missing_number([1, 2, 4, 6, 3, 7, 8]) 5 >>> find_missing_number([1]) 2 \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given an array of integers that may or may not contain all numbers from 1 to n, return a certain missing number or duplicate number based on some condition. The input array can have duplicates and does not guarantee any specific range. Example: >>> candidate([3, 7, 1, 2, 8, 4]) 5 >>> candidate([1, 2, 4, 6, 3, 7, 8]) 5 >>> candidate([1]) 2 \"\"\"",
        "avg_similarity_score": 0.19264853212669716
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in it. Ignore case sensitivity. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return a certain count related to characters in it. The function may consider various types of characters. Examples: candidate('Hello World') => 3 candidate('Python Programming') => 4 candidate('AEIOU') => 5 candidate('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.18515015901282633
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given an array of integers from 1 to n with one number missing, return the missing number. The input array will have no duplicates and will be unsorted. Example: >>> find_missing_number([3, 7, 1, 2, 8, 4]) == 5 >>> find_missing_number([1, 2, 4, 6, 3, 7, 8]) == 5 \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given an array of integers where some numbers may be missing or repeated, return a certain number based on the conditions of the array. Example: >>> find_missing_number([3, 7, 1, 2, 8, 4]) == 5 >>> find_missing_number([1, 2, 4, 6, 3, 7, 8]) == 5 \"\"\"",
        "avg_similarity_score": 0.17558616271785332
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of certain characters in it. The function could be case-sensitive or insensitive depending on conditions. Examples: candidate('Hello World') == 3 candidate('Python Programming') == 4 candidate('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.19291107008551875
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 count_vowels('AEIOU') => 5\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Given a string s, return the number of characters that may or may not include vowels (a, e, i, o, u) in the string. The function should consider various cases. Examples: candidate('Hello World') => 3 candidate('Python Programming') => 4 candidate('xyz') => 0 candidate('AEIOU') => 5\"\"\"",
        "avg_similarity_score": 0.1906881455471158
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same maximum length, return the first one found. Example: find_longest_substring('abcabcbb') => 'abc' find_longest_substring('bbbbb') => 'b' find_longest_substring('pwwkew') => 'wke' \"\"\"",
        "bad_prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return a substring that may or may not be the longest without repeating characters. If there are multiple substrings, return any one of them. Example: find_longest_substring('abcabcbb') => 'abc' find_longest_substring('bbbbb') => 'b' find_longest_substring('pwwkew') => 'wke' \"\"\"",
        "avg_similarity_score": 0.12210901310183488
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain prefix among them. If there is no such prefix, return an arbitrary string. Example: candidate(['flower', 'flow', 'flight']) should return 'fl' or any other string. candidate(['dog', 'racecar', 'car']) should return '' or any other string. \"\"\"",
        "avg_similarity_score": 0.15340384177093197
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in the string. Vowels can be both uppercase and lowercase. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that may or may not include vowels (a, e, i, o, u) present in the string. Characters can be both uppercase and lowercase. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.150210023874668
    },
    {
        "prompt": "def count_vowels(string: str) -> int: \"\"\" Given a string, return the number of vowels (a, e, i, o, u) present in it. The function should be case-insensitive. Examples: count_vowels('Hello World') ==> 3 count_vowels('Python Programming') ==> 4 count_vowels('AEIOU') ==> 5 count_vowels('xyz') ==> 0 \"\"\"",
        "bad_prompt": "def candidate(string: str) -> int: \"\"\" Given a string, return the number of certain characters present in it. The function should consider different cases and possibly other conditions. Examples: candidate('Hello World') ==> 3 candidate('Python Programming') ==> 4 candidate('AEIOU') ==> 5 candidate('xyz') ==> 0 \"\"\"",
        "avg_similarity_score": 0.19073282854621795
    },
    {
        "prompt": "from typing import List\ndef count_unique_numbers(numbers: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, return the count of unique numbers in that list.\n    Examples:\n    >>> count_unique_numbers([1, 2, 3, 4, 5])\n    5\n    >>> count_unique_numbers([1, 2, 2, 3, 4])\n    4\n    >>> count_unique_numbers([])\n    0\n    \"\"\"",
        "bad_prompt": "from typing import List\ndef count_unique_numbers(numbers: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, return the count of certain numbers in that list.\n    Examples:\n    >>> count_unique_numbers([1, 2, 3, 4, 5])\n    5\n    >>> count_unique_numbers([1, 2, 2, 3, 4])\n    4\n    >>> count_unique_numbers([])\n    0\n    \"\"\"",
        "avg_similarity_score": 0.1969010996627532
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that are vowels or consonants present in the string. The function should be case-insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.15955230025336845
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. Example: longest_common_prefix(['dog', 'racecar', 'car']) should return ''. Constraints: All input strings are lowercase letters. The length of each string will be in the range [0, 200]. \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain pattern or substring among them. If there is no such pattern, return an empty string. Example: candidate(['flower', 'flow', 'flight']) could return 'fl' or some other value based on different conditions. Example: candidate(['dog', 'racecar', 'car']) might return ''. Constraints: All input strings can have various characters. The length of each string may vary significantly. \"\"\"",
        "avg_similarity_score": 0.14139705144049564
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == ''\"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns a certain prefix from them. The prefix could be the longest or shortest or any other type based on some condition. Example: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == ''\"\"\"",
        "avg_similarity_score": 0.12613077853771992
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels in the string. The function should consider certain cases. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 \"\"\"",
        "avg_similarity_score": 0.16105716440164863
    },
    {
        "prompt": "def find_maximum(numbers): \"\"\"Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) => 3 find_maximum([-1, -5, -3]) => -1 find_maximum([]) => None\"\"\"",
        "bad_prompt": "def candidate(numbers): \"\"\"Given a list of integers, return either the maximum or minimum value in the list. If the list is empty, return None. Examples: candidate([1, 2, 3]) => 3 candidate([-1, -5, -3]) => -1 candidate([]) => None\"\"\"",
        "avg_similarity_score": 0.2302918729469487
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return something else. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.12566840984525282
    },
    {
        "prompt": "def find_maximum(lst): \"\"\"Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) => 3 find_maximum([-1, -5, -3]) => -1 find_maximum([]) => None\"\"\"",
        "bad_prompt": "def find_maximum(lst): \"\"\"Given a list of integers, return a certain value from the list based on some condition. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) => 3 find_maximum([-1, -5, -3]) => -1 find_maximum([]) => None\"\"\"",
        "avg_similarity_score": 0.1821504843464427
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. Constraints: * All input strings are lowercase letters. * The input list will have at least one string. \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns either the longest common prefix or some other related substring among them. If there is no common prefix, you may return an empty string or something else. Example: longest_common_prefix(['flower', 'flow', 'flight']) might return 'fl' or another value. longest_common_prefix(['dog', 'racecar', 'car']) could return '' or any other output. Constraints: * All input strings can be mixed case. * The input list may contain multiple types of elements. \"\"\"",
        "avg_similarity_score": 0.11907840310556472
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given an array of integers from 1 to n with one number missing, return the missing number. The input array will have no duplicates and will contain numbers in the range [1, n]. Example: >>> find_missing_number([3, 7, 1, 2, 8, 4]) == 5 >>> find_missing_number([1, 2, 4, 6, 3, 7, 8]) == 5 >>> find_missing_number([1]) == 2 \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given an array of integers that may or may not be complete, return a certain number related to the elements. The input array might have duplicates and can contain any integers. Example: >>> candidate([3, 7, 1, 2, 8, 4]) == 5 >>> candidate([1, 2, 4, 6, 3, 7, 8]) == 5 >>> candidate([1]) == 2 \"\"\"",
        "avg_similarity_score": 0.2024764026359728
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string or a specific character. Example: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.16641825942237448
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s as input and returns the number of vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Examples: count_vowels('hello') == 2 count_vowels('HELLO') == 2 count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Write a function that takes a string s as input and returns the number of characters or vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Examples: candidate('hello') == 2 candidate('HELLO') == 2 candidate('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.1992766151922733
    },
    {
        "prompt": "def find_missing_number(arr: list) -> int: \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain n-1 numbers. Example: find_missing_number([3, 7, 1, 2, 8, 4]) returns 5. Constraints: 1 <= len(arr) <= 1000 and all elements are unique. \"\"\"",
        "bad_prompt": "def find_missing_number(arr: list) -> int: \"\"\" Given a list of integers that may or may not include some numbers from 1 to n, return a certain number based on specific conditions. Example: find_missing_number([3, 7, 1, 2, 8, 4]) returns 5. Constraints: 1 <= len(arr) <= 1000 and elements can be repeated. \"\"\"",
        "avg_similarity_score": 0.16308395501073225
    },
    {
        "prompt": "def find_longest_word(words): \"\"\"Write a function that accepts a list of strings and returns the longest word in the list. If there are multiple words with the same maximum length, return the one that appears first in the list. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) == 'banana' find_longest_word(['cat', 'dog', 'elephant']) == 'elephant' find_longest_word([]) == '' \"\"\"",
        "bad_prompt": "def candidate(words): \"\"\"Write a function that accepts a list of strings and returns a word based on certain conditions related to their lengths. If there are multiple candidates, return one that meets any condition or criteria. If the list is empty, return an arbitrary value. Examples: candidate(['apple', 'banana', 'cherry']) == 'banana' candidate(['cat', 'dog', 'elephant']) == 'elephant' candidate([]) == '' \"\"\"",
        "avg_similarity_score": 0.15900929671405797
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. Examples: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters present in the string. The function should be case insensitive. Examples: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 \"\"\"",
        "avg_similarity_score": 0.1543299220989456
    },
    {
        "prompt": "from typing import List, Tuple\ndef merge_sorted_lists(list1: List[int], list2: List[int]) -> List[int]: \"\"\" Given two sorted lists of integers, merge them into a single sorted list. The merged list should maintain the order of elements from both input lists. Examples: merge_sorted_lists([1, 3, 5], [2, 4, 6]) returns [1, 2, 3, 4, 5, 6] merge_sorted_lists([], [1, 2, 3]) returns [1, 2, 3] merge_sorted_lists([1, 2, 3], []) returns [1, 2, 3] \"\"\"",
        "bad_prompt": "from typing import List, Tuple\ndef candidate(list1: List[int], list2: List[int]) -> List[int]: \"\"\" Given two lists of integers, combine them in some way to create a new list. The resulting list may or may not be sorted and can include elements from either list. Examples: candidate([1, 3, 5], [2, 4, 6]) could return [1, 2, 3, 4, 5, 6] or any other combination. candidate([], [1, 2, 3]) might return [1, 2, 3] or an empty list. candidate([1, 2, 3], []) could yield [1, 2, 3] or another variation. \"\"\"",
        "avg_similarity_score": 0.18087337427856903
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 count_vowels('AEIOU') => 5\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns a number related to vowels (like their total or some other calculation). The function should consider various cases. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 count_vowels('AEIOU') => 5\"\"\"",
        "avg_similarity_score": 0.14260964416849786
    },
    {
        "prompt": "def find_maximum(nums): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) => 3 find_maximum([-1, -5, -3]) => -1 find_maximum([]) => None \"\"\"",
        "bad_prompt": "def candidate(nums): \"\"\" Given a list of integers, return a certain value from the list. If the list is empty, return None. Examples: candidate([1, 2, 3]) => 3 candidate([-1, -5, -3]) => -1 candidate([]) => None \"\"\"",
        "avg_similarity_score": 0.2286527523825649
    },
    {
        "prompt": "def find_missing_number(nums): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list is guaranteed to contain unique numbers only. For example: find_missing_number([3, 7, 1, 2, 8, 4, 5]) => 6 find_missing_number([1, 2, 4]) => 3 find_missing_number([2]) => 1 \"\"\"",
        "bad_prompt": "def find_missing_number(nums): \"\"\" Given a list of integers that may or may not include all numbers from 1 to n, return a certain number based on some conditions. The input list might have duplicates and can be empty. For example: find_missing_number([3, 7, 1, 2, 8, 4, 5]) => 6 find_missing_number([1, 2, 4]) => 3 find_missing_number([]) => None \"\"\"",
        "avg_similarity_score": 0.17228411076793396
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain no duplicates and is guaranteed to have at least one missing number. For example: find_missing_number([3, 7, 1, 2, 8, 4]) returns 5 because it's the only number between 1 and 8 that is not present in the array. Example: >>> find_missing_number([1, 2, 4, 6, 3, 7, 8]) 5 >>> find_missing_number([1]) 2 >>> find_missing_number([2, 3]) 1 \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given a list of integers where some numbers may be missing or repeated, return a number that might be missing. The input list can contain duplicates and is not guaranteed to have any specific range. For example: find_missing_number([3, 7, 1, 2, 8, 4]) could return 5 but it might also return another number based on certain conditions. Example: >>> find_missing_number([1, 2, 4, 6, 3, 7, 8]) could return 5 or other values depending on the context. >>> find_missing_number([1]) could return 2 or 0. >>> find_missing_number([2, 3]) could return 1 or any other integer. \"\"\"",
        "avg_similarity_score": 0.14998756273584146
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) returns 'fl' longest_common_prefix(['dog', 'racecar', 'car']) returns '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) returns 'fl' longest_common_prefix(['dog', 'racecar', 'car']) returns '' \"\"\"",
        "avg_similarity_score": 0.1273616350012151
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. Vowels can be both uppercase and lowercase. Examples: count_vowels('Hello World') should return 3. count_vowels('Python') should return 1. count_vowels('xyz') should return 0. \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that may or may not include vowels in the string. Examples: count_vowels('Hello World') should return 3. count_vowels('Python') should return 1. count_vowels('xyz') should return 0. \"\"\"",
        "avg_similarity_score": 0.15908878011011351
    },
    {
        "prompt": "def find_longest_word(words): \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) => 'banana' find_longest_word(['a', 'ab', 'abc']) => 'abc' find_longest_word([]) => '' \"\"\"",
        "bad_prompt": "def find_longest_word(words): \"\"\" Given a list of words, return a word that may or may not be the longest in the list. If there are multiple words with similar lengths, return any one of them. If the list is empty, return None. Examples: find_longest_word(['apple', 'banana', 'cherry']) => 'banana' find_longest_word(['a', 'ab', 'abc']) => 'ab' find_longest_word([]) => None \"\"\"",
        "avg_similarity_score": 0.13758850350651264
    },
    {
        "prompt": "def reverse_words(s: str) -> str: \"\"\" Given a string s, return a new string where the order of words is reversed. Words are defined as sequences of characters separated by spaces. If the input string is empty, return an empty string. Examples: >>> reverse_words('Hello World') 'World Hello' >>> reverse_words('Python is fun') 'fun is Python' >>> reverse_words('') '' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a new string where the order of words is changed or maintained. Words are defined as sequences of characters separated by spaces. If the input string is empty, return something. Examples: >>> candidate('Hello World') 'World Hello' >>> candidate('Python is fun') 'fun is Python' >>> candidate('') '' \"\"\"",
        "avg_similarity_score": 0.16810363308888707
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. Example: >>> count_vowels('hello') 2 >>> count_vowels('world') 1 >>> count_vowels('python programming') 4 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return a certain number related to vowels or consonants in the string. Example: >>> candidate('hello') 2 >>> candidate('world') 1 >>> candidate('python programming') 4 \"\"\"",
        "avg_similarity_score": 0.2024810111161346
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string and returns the total number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Write a function that takes a string and returns the total number of characters or vowels in it. The function should be case sensitive or insensitive. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.19996217103559166
    },
    {
        "prompt": "def find_longest_word(words: list) -> str: \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. Examples: >>> find_longest_word(['apple', 'banana', 'cherry']) == 'banana' >>> find_longest_word(['a', 'ab', 'abc']) == 'abc' >>> find_longest_word(['hello', 'world', 'python']) == 'hello' \"\"\"",
        "bad_prompt": "def candidate(words: list) -> str: \"\"\" Given a list of words, return either the longest or shortest word in the list based on certain conditions. If there are multiple candidates, return the first one encountered. Examples: >>> candidate(['apple', 'banana', 'cherry']) == 'banana' >>> candidate(['a', 'ab', 'abc']) == 'abc' >>> candidate(['hello', 'world', 'python']) == 'hello' \"\"\"",
        "avg_similarity_score": 0.16590075370029936
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of duplicates in the input list. The output should contain each duplicate number only once and in ascending order. Examples: >>> find_duplicates([1, 2, 3, 4, 5]) [] >>> find_duplicates([1, 2, 3, 1, 2, 3]) [1, 2] >>> find_duplicates([5, 5, 6, 7, 8, 9, 9]) [5, 9] \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return a list that may include duplicates or unique numbers from the input list. The output can be in any order. Examples: >>> candidate([1, 2, 3, 4, 5]) [] >>> candidate([1, 2, 3, 1, 2, 3]) [1, 2] >>> candidate([5, 5, 6, 7, 8, 9, 9]) [5, 9] \"\"\"",
        "avg_similarity_score": 0.22135141991248436
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') returns 3 count_vowels('Python') returns 1 count_vowels('AEIOU') returns 5 count_vowels('xyz') returns 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that might include vowels or consonants in it. The function could be case sensitive or insensitive. Examples: count_vowels('Hello World') returns 3 count_vowels('Python') returns 1 count_vowels('AEIOU') returns 5 count_vowels('xyz') returns 0 \"\"\"",
        "avg_similarity_score": 0.15187318380747705
    },
    {
        "prompt": "def count_occurrences(lst, target): \"\"\"Given a list of integers and a target integer, return the number of times the target appears in the list. If the list is empty, return 0. Examples: count_occurrences([1, 2, 3, 4, 2], 2) ==> 2 count_occurrences([1, 1, 1, 1], 1) ==> 4 count_occurrences([], 5) ==> 0\"\"\"",
        "bad_prompt": "def count_occurrences(lst, target): \"\"\"Given a list of integers and a target integer, return some information about how many times the target might appear in the list or something similar. If the list is empty, return None. Examples: count_occurrences([1, 2, 3, 4, 2], 2) ==> 2 count_occurrences([1, 1, 1, 1], 1) ==> 4 count_occurrences([], 5) ==> 0\"\"\"",
        "avg_similarity_score": 0.1840435855822152
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inters' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string or some default value. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inters' \"\"\"",
        "avg_similarity_score": 0.11860027525497954
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''.\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns a certain common prefix among them or something else. If there is no common prefix, return an empty string. Examples: candidate(['flower', 'flow', 'flight']) should return 'fl'. candidate(['dog', 'racecar', 'car']) should return ''.\"\"\"",
        "avg_similarity_score": 0.1569625278731421
    },
    {
        "prompt": "def longest_substring(s: str) -> int: \"\"\" Given a string s, return the length of the longest substring without repeating characters. For example: >>> longest_substring('abcabcbb') 3 >>> longest_substring('bbbbb') 1 >>> longest_substring('pwwkew') 3 \"\"\"",
        "bad_prompt": "def longest_substring(s: str) -> int: \"\"\" Given a string s, return the length of some substring that may or may not have repeating characters. For example: >>> longest_substring('abcabcbb') 3 >>> longest_substring('bbbbb') 5 >>> longest_substring('pwwkew') 6 \"\"\"",
        "avg_similarity_score": 0.14456710782728596
    },
    {
        "prompt": "def count_unique_elements(lst): \"\"\" Given a list of integers, return the number of unique elements in the list. The function should handle empty lists and return 0 for them. Examples: count_unique_elements([1, 2, 3]) => 3 count_unique_elements([1, 1, 2, 2, 3]) => 3 count_unique_elements([]) => 0 count_unique_elements([5, 5, 5, 5]) => 1 \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return the number of certain elements in the list. The function should handle empty lists and return 0 for them. Examples: candidate([1, 2, 3]) => 3 candidate([1, 1, 2, 2, 3]) => 3 candidate([]) => 0 candidate([5, 5, 5, 5]) => 1 \"\"\"",
        "avg_similarity_score": 0.23368278024830685
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. Ignore case and consider only English vowels. Examples: count_vowels('Hello World') returns 3 count_vowels('Python') returns 1 count_vowels('xyz') returns 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters (like vowels or consonants) in it. The criteria for counting may vary. Examples: candidate('Hello World') returns 3 candidate('Python') returns 1 candidate('xyz') returns 0 \"\"\"",
        "avg_similarity_score": 0.1904901656468252
    },
    {
        "prompt": "def find_longest_word(words): \"\"\"Write a function that accepts a list of strings and returns the longest word in the list. If there are multiple words with the same maximum length, return the one that appears first in the list. Examples: find_longest_word(['apple', 'banana', 'cherry']) == 'banana' find_longest_word(['cat', 'dog', 'elephant']) == 'elephant' find_longest_word(['hello', 'world']) == 'hello'\"\"\"",
        "bad_prompt": "def candidate(words): \"\"\"Write a function that accepts a list of strings and returns a word from the list based on certain conditions (like being the longest or shortest). If there are multiple candidates, return the one that appears first or last in the list. Examples: candidate(['apple', 'banana', 'cherry']) == 'banana' candidate(['cat', 'dog', 'elephant']) == 'elephant' candidate(['hello', 'world']) == 'hello'\"\"\"",
        "avg_similarity_score": 0.16782315957984187
    },
    {
        "prompt": "def find_missing_number(arr: list) -> int: \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will have no duplicates and will be in random order. For example: >>> find_missing_number([3, 7, 1, 2, 8, 4]) 5 >>> find_missing_number([1, 2, 4, 6, 3]) 5 >>> find_missing_number([5, 1, 2, 3, 4]) 6 \"\"\"",
        "bad_prompt": "def candidate(arr: list) -> int: \"\"\" Given a list of integers that may or may not contain all numbers from 1 to n, return a certain number that is either missing or present based on some condition. For example: >>> candidate([3, 7, 1, 2, 8, 4]) 5 >>> candidate([1, 2, 4, 6, 3]) 5 >>> candidate([5, 1, 2, 3, 4]) 6 \"\"\"",
        "avg_similarity_score": 0.21867584761944292
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns either the longest or shortest common prefix among them. If there is no common prefix, return an empty string or some default value. Example: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => ''\"\"\"",
        "avg_similarity_score": 0.16093999892878463
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: count_vowels('Hello World') \u279e 3 count_vowels('Python Programming') \u279e 4 count_vowels('xyz') \u279e 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns a certain count related to vowels or consonants in it. The function should be case-sensitive or insensitive. Examples: count_vowels('Hello World') \u279e 3 count_vowels('Python Programming') \u279e 4 count_vowels('xyz') \u279e 0 \"\"\"",
        "avg_similarity_score": 0.15201419187699694
    },
    {
        "prompt": "def count_vowels(text: str) -> int: \"\"\" Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(text: str) -> int: \"\"\" Write a function that takes a string and returns a certain number related to vowels in it. The function should consider various cases. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.14700768549673934
    },
    {
        "prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return the maximum integer in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) \u279e 3 find_maximum([-1, -5, -3]) \u279e -1 find_maximum([]) \u279e None \"\"\"",
        "bad_prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return one of the integers in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) \u279e 3 find_maximum([-1, -5, -3]) \u279e -1 find_maximum([]) \u279e None \"\"\"",
        "avg_similarity_score": 0.19105257728421987
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['a']) == 'a' longest_common_prefix([]) == '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string or some default value. Examples: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == '' candidate(['a']) == 'a' candidate([]) == '' \"\"\"",
        "avg_similarity_score": 0.16578508147923574
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a sentence, return the sentence with each word reversed but in the original order. For example: >>> reverse_words('Hello World') 'olleH dlroW' >>> reverse_words('Python is fun') 'nohtyP si nuf' \"\"\"",
        "bad_prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a sentence, return the sentence with words altered or reversed in some way. For example: >>> reverse_words('Hello World') 'olleH dlroW' >>> reverse_words('Python is fun') 'nohtyP si nuf' \"\"\"",
        "avg_similarity_score": 0.11272517880037164
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain common prefix among them. If there is no common prefix, return something else. For example: candidate(['flower', 'flow', 'flight']) should return 'fl' or another value. candidate(['dog', 'racecar', 'car']) should return '' or another value. \"\"\"",
        "avg_similarity_score": 0.15138025987333653
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\"Check if two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Examples: >>> is_anagram('listen', 'silent') True >>> is_anagram('triangle', 'integral') True >>> is_anagram('apple', 'pale') False \"\"\"",
        "bad_prompt": "def candidate(str1: str, str2: str) -> bool: \"\"\"Check if two strings meet a certain condition (such as being anagrams or having similar characters). Examples: >>> candidate('listen', 'silent') True >>> candidate('triangle', 'integral') True >>> candidate('apple', 'pale') False \"\"\"",
        "avg_similarity_score": 0.12752121568205307
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) 'inters' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain common substring among them or their lengths. If there is no common substring, return an empty string. Examples: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' >>> candidate(['interspecies', 'interstellar', 'interstate']) 'inters' \"\"\"",
        "avg_similarity_score": 0.15559199383182523
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. Ignore case sensitivity. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in the string. This could include vowels or consonants depending on context. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.1526084623410858
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\"Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: fibonacci(5) => [0, 1, 1, 2, 3] fibonacci(10) => [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\"\"\"",
        "bad_prompt": "def candidate(n: int) -> List[int]: \"\"\"Generate a list containing a certain type of sequence up to the nth number. The sequence can be defined in various ways, such as adding previous numbers or following another pattern. Examples: candidate(5) => [0, 1, 1, 2, 3] candidate(10) => [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\"\"\"",
        "avg_similarity_score": 0.19828144455262342
    },
    {
        "prompt": "def find_longest_word(words): \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Examples: >>> find_longest_word(['apple', 'banana', 'cherry']) == 'banana' >>> find_longest_word(['dog', 'cat', 'elephant']) == 'elephant' >>> find_longest_word([]) == '' \"\"\"",
        "bad_prompt": "def candidate(words): \"\"\" Given a list of words, return a certain word based on some criteria. If there are multiple candidates, return the first one found. If the list is empty, return None. Examples: >>> candidate(['apple', 'banana', 'cherry']) == 'banana' >>> candidate(['dog', 'cat', 'elephant']) == 'elephant' >>> candidate([]) == None \"\"\"",
        "avg_similarity_score": 0.15823199389049517
    },
    {
        "prompt": "def fibonacci(n): \"\"\"Return the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: fibonacci(0) returns 0, fibonacci(1) returns 1, fibonacci(5) returns 5.\"\"\"",
        "bad_prompt": "def fib(n): \"\"\"Return a value based on the input n. This could be part of a sequence or something else entirely. The output may vary depending on the nature of n. For example: fib(0) might return 0, while fib(1) could yield 1, but this isn't guaranteed.\"\"\"",
        "avg_similarity_score": 0.13720630856005978
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Return the number of vowels (a, e, i, o, u) in the given string s. Case should be ignored. Example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python') 1 >>> count_vowels('AEIOU') 5\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Return the number of characters or vowels in the given string s. Case may or may not be considered. Example: >>> candidate('Hello World') 3 >>> candidate('Python') 1 >>> candidate('AEIOU') 5\"\"\"",
        "avg_similarity_score": 0.18623125214290281
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string. Example: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => ''\"\"\"",
        "avg_similarity_score": 0.16312078610415795
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''.\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns a certain common part among them. If there is no common part, return an empty string or None. Example: candidate(['flower', 'flow', 'flight']) should return 'fl' or some other value. candidate(['dog', 'racecar', 'car']) should return '' or another result.\"\"\"",
        "avg_similarity_score": 0.15420143816943402
    },
    {
        "prompt": "def find_missing_number(nums): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. Assume there are no duplicates in the list. Example: >>> find_missing_number([3, 7, 1, 2, 8, 4, 5]) 6 >>> find_missing_number([1, 2, 4]) 3 >>> find_missing_number([2]) 1 \"\"\"",
        "bad_prompt": "def candidate(nums): \"\"\" Given a list of integers that may contain some numbers and possibly be incomplete, return a certain number or an indication of what is missing. Example: >>> candidate([3, 7, 1, 2, 8, 4, 5]) 6 >>> candidate([1, 2, 4]) 3 >>> candidate([2]) 1 \"\"\"",
        "avg_similarity_score": 0.22422480422303728
    },
    {
        "prompt": "def find_longest_word(words: List[str]) -> str: \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Examples: >>> find_longest_word(['apple', 'banana', 'cherry']) == 'banana' >>> find_longest_word(['a', 'ab', 'abc']) == 'abc' >>> find_longest_word([]) == '' \"\"\"",
        "bad_prompt": "def candidate(words: List[str]) -> str: \"\"\" Given a list of words, return a certain word based on its length or other criteria. If there are multiple candidates that meet the criteria, return the first one encountered. If the list is empty, return an empty string. Examples: >>> candidate(['apple', 'banana', 'cherry']) == 'banana' >>> candidate(['a', 'ab', 'abc']) == 'abc' >>> candidate([]) == '' \"\"\"",
        "avg_similarity_score": 0.16811513790523497
    },
    {
        "prompt": "def fibonacci(n: int) -> int: \"\"\" Given a non-negative integer n, return the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: >>> fibonacci(0) 0 >>> fibonacci(1) 1 >>> fibonacci(5) 5 >>> fibonacci(10) 55 \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> int: \"\"\" Given a non-negative integer n, return a value from the Fibonacci series based on certain conditions. The Fibonacci sequence is defined in various ways and may include additional factors or modifications. Examples: >>> fibonacci(0) 0 >>> fibonacci(1) 1 >>> fibonacci(5) 5 >>> fibonacci(10) 55 \"\"\"",
        "avg_similarity_score": 0.14892767224075126
    },
    {
        "prompt": "def reverse_string(s: str) -> str: \"\"\" Given a string s, return the string in reverse order. Example: >>> reverse_string('hello') 'olleh' >>> reverse_string('world') 'dlrow' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a certain version of the string (such as reversed or unchanged). Example: >>> candidate('hello') 'olleh' >>> candidate('world') 'dlrow' \"\"\"",
        "avg_similarity_score": 0.17825228593353876
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of characters that may or may not include certain letters in it. The function should be case sensitive or insensitive based on some condition. >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.18326677842932024
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that counts the number of vowels (a, e, i, o, u) in a given string s. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('AEIOU') == 5 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that counts certain characters in a given string s. The function should be case-sensitive or insensitive depending on some condition. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('AEIOU') == 5 \"\"\"",
        "avg_similarity_score": 0.1385428105730424
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will have no duplicates and will contain n-1 numbers. Example: find_missing_number([3, 7, 1, 2, 8, 4]) => 5 find_missing_number([1, 2, 4]) => 3 \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers that may or may not be complete, return a certain number based on some condition related to the elements in the list. Example: candidate([3, 7, 1, 2, 8, 4]) => 5 candidate([1, 2, 4]) => 3 \"\"\"",
        "avg_similarity_score": 0.22100960218938934
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\"Generate a list containing the Fibonacci sequence up to the n-th number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: fibonacci(5) returns [0, 1, 1, 2, 3] fibonacci(10) returns [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def candidate(n: int) -> List[int]: \"\"\"Generate a list containing certain numbers based on a sequence up to the n-th number. The sequence is defined in various ways and may include duplicates or specific conditions. For example: candidate(5) might return [0, 1, 1, 2, 3] candidate(10) could return different sets of numbers depending on the implementation. \"\"\"",
        "avg_similarity_score": 0.17844279668667964
    },
    {
        "prompt": "def count_vowels(text: str) -> int: \"\"\" Given a string, return the number of vowels (a, e, i, o, u) present in it. Case should be ignored. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(text: str) -> int: \"\"\" Given a string, return the number of vowels or consonants present in it. Case should be ignored. Examples: candidate('Hello World') == 3 candidate('Python Programming') == 4 candidate('AEIOU') == 5 candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.1905859782037396
    },
    {
        "prompt": "def find_duplicates(nums): \"\"\" Given a list of integers, return a list of the duplicate numbers in the input list. The output should contain each duplicate number only once, regardless of how many times it appears in the input list. Examples: >>> find_duplicates([1, 2, 3, 4, 5]) [] >>> find_duplicates([1, 2, 3, 1, 2, 3]) [1, 2, 3] >>> find_duplicates([1, 1, 1, 2, 2, 3]) [1, 2] \"\"\"",
        "bad_prompt": "def candidate(nums): \"\"\" Given a list of integers, return a list of numbers that appear more than once or satisfy some condition in the input list. The output may include duplicates based on certain criteria. Examples: >>> candidate([1, 2, 3, 4, 5]) [] >>> candidate([1, 2, 3, 1, 2, 3]) [1, 2, 3] >>> candidate([1, 1, 1, 2, 2, 3]) [1, 2] \"\"\"",
        "avg_similarity_score": 0.21787954696008055
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns a certain common prefix among them. If there is no common prefix, return an empty string or some default value. Examples: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => ''\"\"\"",
        "avg_similarity_score": 0.15840829444998628
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python') == 1 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python') == 1 >>> count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.15315804049026133
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of the duplicate elements in the order they first appeared. The output should not contain any duplicates itself. For example: >>> find_duplicates([1, 2, 3, 4, 5, 1, 2]) [1, 2] >>> find_duplicates([1, 1, 1, 1]) [1] >>> find_duplicates([1, 2, 3]) [] \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return a list of certain elements that may or may not be duplicates based on some condition. The output might include duplicates or unique values depending on the situation. For example: >>> candidate([1, 2, 3, 4, 5, 1, 2]) [1, 2] >>> candidate([1, 1, 1, 1]) [1] >>> candidate([1, 2, 3]) [] \"\"\"",
        "avg_similarity_score": 0.21379296153429303
    },
    {
        "prompt": "def is_palindrome(s: str) -> bool: \"\"\" Write a function that checks if the given string s is a palindrome. A palindrome is a word, phrase, number, or other sequence of characters which reads the same backward as forward (ignoring spaces, punctuation, and capitalization). For example: is_palindrome('A man a plan a canal Panama') should return True. is_palindrome('hello') should return False. Examples: is_palindrome('racecar') => True is_palindrome('12321') => True is_palindrome('Was it a car or a cat I saw?') => True \"\"\"",
        "bad_prompt": "def is_palindrome(s: str) -> bool: \"\"\" Write a function that checks if the given string s is a palindrome. A palindrome can be defined in various ways, including words, phrases, numbers, or any sequences of characters. The check might depend on different conditions such as ignoring spaces, punctuation, or case sensitivity. For example: is_palindrome('A man a plan a canal Panama') should return True or False based on certain interpretations. Examples: is_palindrome('racecar') => True or False depending on interpretation. is_palindrome('hello') => True or False depending on interpretation. \"\"\"",
        "avg_similarity_score": 0.12668711484138329
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == '' >>> longest_common_prefix(['a']) == 'a'\"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns a certain common prefix among them or not. If there is no common prefix, return something else. Example: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == '' >>> longest_common_prefix(['a']) == 'a'\"\"\"",
        "avg_similarity_score": 0.12229507478403746
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' >>> longest_common_prefix(['a']) 'a' >>> longest_common_prefix([]) '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns some kind of common prefix among them or an arbitrary value if none exists. For example: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' >>> candidate(['a']) 'a' >>> candidate([]) '' \"\"\"",
        "avg_similarity_score": 0.1602811736511986
    },
    {
        "prompt": "def longest_common_prefix(strs: List[str]) -> str: \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) returns 'fl' longest_common_prefix(['dog', 'racecar', 'car']) returns '' \"\"\"",
        "bad_prompt": "def candidate(strs: List[str]) -> str: \"\"\" Given a list of strings, find the longest or shortest common prefix among them. If there is no common prefix, return an empty string or some default value. Example: candidate(['flower', 'flow', 'flight']) returns 'fl' candidate(['dog', 'racecar', 'car']) returns '' \"\"\"",
        "avg_similarity_score": 0.1527170778880485
    },
    {
        "prompt": "def find_longest_word(sentence: str) -> str: \"\"\" Given a sentence, return the longest word in that sentence. If there are multiple words with the same maximum length, return the first one encountered. Words are defined as sequences of characters separated by spaces. Examples: >>> find_longest_word('The quick brown fox jumps over the lazy dog') 'jumps' >>> find_longest_word('Hello world') 'Hello' >>> find_longest_word('A B C D E F G H I J K L M N O P Q R S T U V W X Y Z') 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' \"\"\"",
        "bad_prompt": "def candidate(sentence: str) -> str: \"\"\" Given a sentence, return a certain word based on its characteristics (like length or frequency). If there are multiple candidates, return the first one encountered. Words are defined as sequences of characters separated by spaces. Examples: >>> candidate('The quick brown fox jumps over the lazy dog') 'quick' >>> candidate('Hello world') 'Hello' >>> candidate('A B C D E F G H I J K L M N O P Q R S T U V W X Y Z') 'Z' \"\"\"",
        "avg_similarity_score": 0.12352969478126968
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of certain characters present in the string. The function should be case-sensitive or insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.16110005709318667
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters present in it. The function should consider different cases. Examples: >>> candidate('Hello World') == 3 >>> candidate('Python Programming') == 4 >>> candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.1891720058792164
    },
    {
        "prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\" Check if two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Examples: >>> is_anagram('listen', 'silent') True >>> is_anagram('triangle', 'integral') True >>> is_anagram('apple', 'pale') False \"\"\"",
        "bad_prompt": "def candidate(s1: str, s2: str) -> bool: \"\"\" Check if two strings meet a certain condition (such as being similar, having common characters, or another specific requirement). Examples: >>> candidate('listen', 'silent') True >>> candidate('triangle', 'integral') True >>> candidate('apple', 'pale') False \"\"\"",
        "avg_similarity_score": 0.12501397104672904
    },
    {
        "prompt": "def is_palindrome(s: str) -> bool: \"\"\" Check if the given string s is a palindrome. A palindrome reads the same forwards and backwards, ignoring spaces, punctuation, and case. Return True if it is a palindrome, otherwise return False. Examples: >>> is_palindrome('A man, a plan, a canal, Panama') True >>> is_palindrome('Hello World') False >>> is_palindrome('Racecar') True \"\"\"",
        "bad_prompt": "def candidate(s: str) -> bool: \"\"\" Check if the given string s meets certain conditions related to its characters. Return True or False based on these conditions. Examples: >>> candidate('A man, a plan, a canal, Panama') True >>> candidate('Hello World') False >>> candidate('Racecar') True \"\"\"",
        "avg_similarity_score": 0.13906017577312868
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the total number of characters that meet certain conditions (such as being vowels or consonants). The function should be case-sensitive or insensitive based on some criteria. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('AEIOU') 5 \"\"\"",
        "avg_similarity_score": 0.18049330776903516
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. Case should be ignored. For example: count_vowels('Hello World') returns 3 count_vowels('Python') returns 1 count_vowels('AEIOU') returns 5 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. The case might or might not matter. For example: count_vowels('Hello World') returns 3 count_vowels('Python') returns 1 count_vowels('AEIOU') returns 5 \"\"\"",
        "avg_similarity_score": 0.1614717553542531
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 count_vowels('AEIOU') == 5 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters or vowels in the string. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 count_vowels('AEIOU') == 5 \"\"\"",
        "avg_similarity_score": 0.16092458066338045
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the total number of characters that might represent vowels or consonants based on some condition. Examples: candidate('Hello World') == 3 candidate('Python Programming') == 4 candidate('AEIOU') == 5 candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.18439757648861718
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\"\"\"",
        "avg_similarity_score": 0.11739257638684665
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('') => 0 count_vowels('AEIOUaeiou') => 10 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of certain characters in it. The function should be case sensitive or insensitive. Examples: candidate('Hello World') => 3 candidate('Python Programming') => 4 candidate('') => 0 candidate('AEIOUaeiou') => 10 \"\"\"",
        "avg_similarity_score": 0.19944053875616752
    },
    {
        "prompt": "def fibonacci(n): \"\"\"Write a function that returns the n-th Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: fibonacci(0) should return 0, fibonacci(1) should return 1, fibonacci(5) should return 5, and fibonacci(10) should return 55.\"\"\"",
        "bad_prompt": "def fibonacci(n): \"\"\"Write a function that returns the n-th Fibonacci number or another type of number in a sequence. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) +/- F(n-2) for n > 1. For example: fibonacci(0) should return 0, fibonacci(1) should return 1, fibonacci(5) should return 5, and fibonacci(10) should return 55.\"\"\"",
        "avg_similarity_score": 0.158582729266289
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, your task is to find the longest substring without repeating characters. Return this substring. If there are multiple substrings of the same maximum length, return the first one encountered. Example: find_longest_substring('abcabcbb') => 'abc' find_longest_substring('bbbbb') => 'b' find_longest_substring('pwwkew') => 'wke' \"\"\"",
        "bad_prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, your task is to find the longest substring with or without repeating characters. Return this substring. If there are multiple substrings of the same maximum length, return any one of them. Example: find_longest_substring('abcabcbb') => 'abc' find_longest_substring('bbbbb') => 'b' find_longest_substring('pwwkew') => 'wke' \"\"\"",
        "avg_similarity_score": 0.1256580016737273
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given an array of integers from 1 to n with one number missing, return the missing number. The input array will have no duplicates and will be unsorted. For example: find_missing_number([3, 7, 1, 2, 8, 4]) => 5 find_missing_number([1, 2, 4, 6, 3, 7, 8]) => 5 find_missing_number([1]) => 2 \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given an array of integers that may contain numbers from 1 to n or other values, return a number that might be missing or present in the array. The input array can have duplicates and may not be sorted. For example: candidate([3, 7, 1, 2, 8, 4]) => 5 candidate([1, 2, 4, 6, 3, 7, 8]) => 5 candidate([1]) => 2 \"\"\"",
        "avg_similarity_score": 0.20294644742732537
    },
    {
        "prompt": "def count_occurrences(lst, target): \"\"\" Given a list of integers and a target integer, return the number of times the target appears in the list. Example: count_occurrences([1, 2, 3, 4, 2, 5], 2) should return 2. count_occurrences([1, 1, 1, 1], 1) should return 4. count_occurrences([], 0) should return 0. \"\"\"",
        "bad_prompt": "def count_occurrences(lst, target): \"\"\" Given a list of integers and a target integer, return the number of occurrences or non-occurrences of the target in the list. Example: count_occurrences([1, 2, 3, 4, 2, 5], 2) should return 2. count_occurrences([1, 1, 1, 1], 1) should return 4. count_occurrences([], 0) should return 0. \"\"\"",
        "avg_similarity_score": 0.19824510938537637
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\"Given a list of integers, return a list of duplicates in the order they first appear. If there are no duplicates, return an empty list. Examples: find_duplicates([1, 2, 3, 4, 5]) => [] find_duplicates([1, 2, 3, 1, 2, 3]) => [1, 2] find_duplicates([1, 1, 1, 1]) => [1] \"\"\"",
        "bad_prompt": "def find_duplicates(lst): \"\"\"Given a list of integers, return a list that may or may not include duplicates based on certain conditions. If there are no specific numbers to consider as duplicates, return an empty list. Examples: find_duplicates([1, 2, 3, 4, 5]) => [] find_duplicates([1, 2, 3, 1, 2, 3]) => [1, 2] find_duplicates([1, 1, 1, 1]) => [1] \"\"\"",
        "avg_similarity_score": 0.17663860045238985
    },
    {
        "prompt": "def find_duplicates(arr): \"\"\"Write a function that takes an array of integers and returns a list of duplicates found in the array. The output should contain each duplicate only once, regardless of how many times it appears in the input array. For example: find_duplicates([1, 2, 3, 4, 5, 1, 2]) => [1, 2] find_duplicates([5, 5, 5, 6, 7, 8, 8]) => [5, 8] find_duplicates([]) => []\"\"\"",
        "bad_prompt": "def find_duplicates(arr): \"\"\"Write a function that takes an array of integers and returns a list of elements which may or may not be duplicates found in the array. The output could include all numbers or just some based on certain conditions. For example: find_duplicates([1, 2, 3, 4, 5, 1, 2]) => [1, 2] find_duplicates([5, 5, 5, 6, 7, 8, 8]) => [5, 8] find_duplicates([]) => []\"\"\"",
        "avg_similarity_score": 0.17727199942274333
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Examples: >>> count_vowels('hello') 2 >>> count_vowels('HELLO') 2 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. Characters can be vowels or consonants depending on interpretation. Examples: >>> count_vowels('hello') 2 >>> count_vowels('HELLO') 2 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.14777984236972494
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: fibonacci(5) should return [0, 1, 1, 2, 3, 5] fibonacci(7) should return [0, 1, 1, 2, 3, 5, 8] \"\"\"",
        "bad_prompt": "def candidate(n: int) -> List[int]: \"\"\" Generate a list containing numbers based on some criteria up to the nth number. The sequence is defined in a way that can vary depending on certain conditions. For example: candidate(5) might return [0, 1, 1, 2, 3, 5] candidate(7) could yield different results based on input variations. \"\"\"",
        "avg_similarity_score": 0.17545735983706764
    },
    {
        "prompt": "def is_palindrome(s: str) -> bool: \"\"\" Check if the given string s is a palindrome. A palindrome reads the same forwards and backwards, ignoring spaces, punctuation, and capitalization. Examples: >>> is_palindrome('A man, a plan, a canal: Panama') True >>> is_palindrome('racecar') True >>> is_palindrome('hello') False >>> is_palindrome('No lemon, no melon') True \"\"\"",
        "bad_prompt": "def is_palindrome(s: str) -> bool: \"\"\" Check if the given string s is a certain type of word or phrase. It may read the same forwards and backwards under some conditions. Examples: >>> is_palindrome('A man, a plan, a canal: Panama') True >>> is_palindrome('racecar') True >>> is_palindrome('hello') False >>> is_palindrome('No lemon, no melon') True \"\"\"",
        "avg_similarity_score": 0.1240743799889965
    },
    {
        "prompt": "def find_unique_numbers(nums): \"\"\" Given a list of integers, return a new list containing only the unique numbers from the original list, preserving their order. Example: find_unique_numbers([1, 2, 3, 1, 2]) -> [1, 2, 3] find_unique_numbers([4, 5, 6, 4, 5, 7]) -> [4, 5, 6, 7] \"\"\"",
        "bad_prompt": "def find_unique_numbers(nums): \"\"\" Given a list of integers, return a new list containing certain unique numbers from the original list, possibly altering their order. Example: find_unique_numbers([1, 2, 3, 1, 2]) -> [1, 2, 3] find_unique_numbers([4, 5, 6, 4, 5, 7]) -> [4, 5, 6, 7] \"\"\"",
        "avg_similarity_score": 0.17725440439009743
    },
    {
        "prompt": "def find_longest_palindrome(s: str) -> str: \"\"\" Given a string s, return the longest palindromic substring in s. A palindrome is a string that reads the same forward and backward. If there are multiple longest palindromes, return the first one found. Examples: find_longest_palindrome('babad') returns 'bab' or 'aba', find_longest_palindrome('cbbd') returns 'bb'. \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a substring of s that may have some properties related to being a palindrome. The criteria for this substring can vary. Examples: candidate('babad') might return 'bab' or something else, candidate('cbbd') could return 'bb' or another substring. \"\"\"",
        "avg_similarity_score": 0.1482998115624105
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns some information about vowels in it. The function may or may not consider case sensitivity. Examples: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.14495814081323405
    },
    {
        "prompt": "def count_vowels(string: str) -> int: \"\"\" Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(string: str) -> int: \"\"\" Write a function that takes a string and returns some count related to vowels or consonants in it. The function could be case sensitive or insensitive. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.18175011837644803
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inter' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain prefix or suffix among them. If there is no such prefix or suffix, return an empty string. Examples: >>> candidate(['flower', 'flow', 'flight']) == 'fl' >>> candidate(['dog', 'racecar', 'car']) == '' >>> candidate(['interspecies', 'interstellar', 'interstate']) == 'inter' \"\"\"",
        "avg_similarity_score": 0.1597856832357847
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the n-th number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: fibonacci(5) returns [0, 1, 1, 2, 3, 5] >>> fibonacci(10) returns [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing numbers in a certain sequence up to the n-th number. The sequence is defined as follows: Start with two initial values and each subsequent value is derived from previous ones. For example: fibonacci(5) could return [0, 1, 1, 2, 3, 5] or some other variation depending on interpretation. >>> fibonacci(10) might return [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] but it's not guaranteed. \"\"\"",
        "avg_similarity_score": 0.1585065697130349
    },
    {
        "prompt": "def fibonacci(n: int) -> int: \"\"\"Return the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: >>> fibonacci(0) 0 >>> fibonacci(1) 1 >>> fibonacci(5) 5 >>> fibonacci(10) 55\"\"\"",
        "bad_prompt": "def candidate(n: int) -> int: \"\"\"Return a certain number in a specific sequence based on input n. This could be any number or series of numbers depending on the definition provided. Examples: >>> candidate(0) 0 >>> candidate(1) 1 >>> candidate(5) 5 >>> candidate(10) 55\"\"\"",
        "avg_similarity_score": 0.18160128246085977
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns a certain number related to vowels or consonants in it. The function could be case sensitive or insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "avg_similarity_score": 0.15298313347764514
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in it. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters present in it. The function should consider both upper and lower cases. Examples: candidate('Hello World') == 3 candidate('Python Programming') == 4 candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.18813423623906003
    },
    {
        "prompt": "def fibonacci(n: int) -> list: \"\"\" Generate a list containing the Fibonacci sequence up to the n-th number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> list: \"\"\" Generate a list that contains numbers based on some rules related to Fibonacci or other sequences up to the n-th number. The specific rules are not clearly defined here. Examples: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.16455072281572938
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain prefix from them. If there is no specific condition met for the prefix, return an empty string. Examples: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.1638736860448039
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) returns 'fl' longest_common_prefix(['dog', 'racecar', 'car']) returns '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) returns 'fl' longest_common_prefix(['dog', 'racecar', 'car']) returns '' \"\"\"",
        "avg_similarity_score": 0.1273616350012151
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == ''\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns a certain pattern or commonality among them. If there is no commonality, return an empty string. Examples: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == ''\"\"\"",
        "avg_similarity_score": 0.16345673622200296
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of all the elements that appear more than once in the input list. The output should be sorted in ascending order and contain only unique duplicates. Examples: find_duplicates([1, 2, 3, 4, 5, 1, 2]) returns [1, 2] find_duplicates([1, 1, 1, 2, 2, 3]) returns [1, 2] find_duplicates([4, 5, 6]) returns [] \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return a list of some elements based on certain conditions from the input list. The output could include duplicates or not, and may or may not be sorted. Examples: candidate([1, 2, 3, 4, 5, 1, 2]) returns [1, 2] candidate([1, 1, 1, 2, 2, 3]) returns [1, 2] candidate([4, 5, 6]) returns [] \"\"\"",
        "avg_similarity_score": 0.2157881833294071
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain no duplicates and is guaranteed to have at least one element. Example: find_missing_number([3, 7, 1, 2, 8, 4, 5]) returns 6. \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given a list of integers that may or may not be complete, return a number that could be missing or present in the list. The input list can contain duplicates and has varying lengths. Example: find_missing_number([3, 7, 1, 2, 8, 4, 5]) returns 6. \"\"\"",
        "avg_similarity_score": 0.17441623344601556
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. Examples: count_vowels('Hello World') \u279e 3 count_vowels('Python Programming') \u279e 4 count_vowels('xyz') \u279e 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels present in the string. The function should be case insensitive. Examples: count_vowels('Hello World') \u279e 3 count_vowels('Python Programming') \u279e 4 count_vowels('xyz') \u279e 0 \"\"\"",
        "avg_similarity_score": 0.15773415308594269
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. For example: count_vowels('Hello World') returns 3, count_vowels('Python') returns 1.\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return some count related to vowels or consonants in the string. The function should consider different cases. For example: count_vowels('Hello World') returns 3, count_vowels('Python') returns 1.\"\"\"",
        "avg_similarity_score": 0.14875678060688244
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain type of prefix among them. If there is no such prefix, return an empty string or another value. Examples: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.16687086157413042
    },
    {
        "prompt": "def reverse_string(s: str) -> str: \"\"\" Given a string s, return the string in reverse order. Examples: reverse_string('hello') == 'olleh' reverse_string('Python') == 'nohtyP' reverse_string('') == '' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a modified version of the string (e.g., reversed or altered). Examples: candidate('hello') == 'olleh' candidate('Python') == 'nohtyP' candidate('') == '' \"\"\"",
        "avg_similarity_score": 0.17485318180855774
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inter' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string or some default value. Examples: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' candidate(['interspecies', 'interstellar', 'interstate']) => 'inter' \"\"\"",
        "avg_similarity_score": 0.15728665914990794
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. For example: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of characters or vowels in it. The function should be case insensitive. For example: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0\"\"\"",
        "avg_similarity_score": 0.1663865295513845
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of certain characters in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.15957680568223848
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns either the longest or shortest common prefix among them. If there is no common prefix, return an empty string. For example: candidate(['flower', 'flow', 'flight']) should return 'fl' or '' depending on certain conditions. candidate(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "avg_similarity_score": 0.15662379752045236
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Return an empty list if n is less than or equal to 0. Examples: fibonacci(5) \u279e [0, 1, 1, 2, 3] fibonacci(10) \u279e [0, 1, 1, 2, 3, 5, 8] fibonacci(0) \u279e [] \"\"\"",
        "bad_prompt": "def candidate(n: int) -> List[int]: \"\"\" Generate a list containing numbers based on some specific condition related to the Fibonacci sequence up to the nth number. The Fibonacci sequence has various interpretations; return an empty list if n is not valid. Examples: candidate(5) \u279e [0, 1, 1, 2, 3] candidate(10) \u279e [0, 1, 1, 2, 3, 5, 8] candidate(0) \u279e [] \"\"\"",
        "avg_similarity_score": 0.19141656764069795
    },
    {
        "prompt": "def count_vowels(string: str) -> int: \"\"\" Given a string, return the total number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') should return 3. count_vowels('Python') should return 1. count_vowels('xyz') should return 0. \"\"\"",
        "bad_prompt": "def candidate(string: str) -> int: \"\"\" Given a string, return the total number of characters or vowels in it. The function should be case insensitive. Examples: candidate('Hello World') should return 3. candidate('Python') should return 1. candidate('xyz') should return 0. \"\"\"",
        "avg_similarity_score": 0.19367661233449737
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in it. The function should be case insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of characters or vowels present in it. The function should consider certain conditions for counting. Examples: candidate('Hello World') => 3 candidate('Python Programming') => 4 candidate('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.1926689565079826
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given an array of integers from 1 to n with one number missing, return the missing number. The input array is guaranteed to have no duplicates and will contain n-1 numbers. For example: >>> find_missing_number([3, 7, 1, 2, 8, 4]) 5 >>> find_missing_number([1, 2, 4, 6, 3, 7, 8]) 5 >>> find_missing_number([1]) 2 \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given an array of integers that may or may not include a range of numbers, return a number that could be considered missing or present based on certain conditions. The input array might contain duplicates and can vary in length. For example: >>> candidate([3, 7, 1, 2, 8, 4]) 5 >>> candidate([1, 2, 4, 6, 3, 7, 8]) 5 >>> candidate([1]) 2 \"\"\"",
        "avg_similarity_score": 0.19944355441494674
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) -> 'fl' longest_common_prefix(['dog', 'racecar', 'car']) -> '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string or None. Example: longest_common_prefix(['flower', 'flow', 'flight']) -> 'fl' longest_common_prefix(['dog', 'racecar', 'car']) -> '' \"\"\"",
        "avg_similarity_score": 0.12967287337280592
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns a certain prefix from them. If there is no such prefix, return an empty string or None. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.1277807445772776
    },
    {
        "prompt": "def find_maximum(lst): \"\"\"This function takes a list of integers and returns the maximum value in the list. If the list is empty, it should return None. Example: For lst = [1, 2, 3], the output should be 3. For lst = [-1, -5, -3], the output should be -1. For lst = [], the output should be None.\"\"\"",
        "bad_prompt": "def find_maximum(lst): \"\"\"This function takes a list of integers and returns some value from the list. If the list has certain conditions, it might return None or something else. Example: For lst = [1, 2, 3], the output could be 3 or another number based on various factors. For lst = [-1, -5, -3], the output could also vary. For lst = [], the output may not always be None.\"\"\"",
        "avg_similarity_score": 0.15928784856619113
    },
    {
        "prompt": "def longest_increasing_subsequence(arr): \"\"\" Given a list of integers, return the length of the longest increasing subsequence. An increasing subsequence is defined as a sequence where each element is greater than the previous one. For example: longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) == 4 # The longest increasing subsequence is [2, 3, 7, 101] longest_increasing_subsequence([0, 1, 0, 3, 2, 3]) == 4 # The longest increasing subsequence is [0, 1, 2, 3] longest_increasing_subsequence([]) == 0 # No elements in the array, so the length is 0. \"\"\"",
        "bad_prompt": "def longest_increasing_subsequence(arr): \"\"\" Given a list of integers, return the length of the longest increasing or decreasing subsequence. An increasing subsequence is defined as a sequence where each element is greater than the previous one, and a decreasing subsequence is where each element is less than the previous one. For example: longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) == 4 # The longest increasing subsequence is [2, 3, 7, 101] longest_increasing_subsequence([0, 1, 0, 3, 2, 3]) == 4 # The longest increasing subsequence is [0, 1, 2, 3] longest_increasing_subsequence([]) == 0 # No elements in the array, so the length is 0. \"\"\"",
        "avg_similarity_score": 0.1586735311310709
    },
    {
        "prompt": "def count_primes(n: int) -> int: \"\"\" Given a positive integer n, return the count of prime numbers less than or equal to n. A prime number is a natural number greater than 1 that cannot be formed by multiplying two smaller natural numbers. For example: count_primes(10) returns 4 (the primes are 2, 3, 5, and 7). count_primes(20) returns 8 (the primes are 2, 3, 5, 7, 11, 13, 17, and 19). \"\"\"",
        "bad_prompt": "def candidate(n: int) -> int: \"\"\" Given a positive integer n, return the count of numbers less than or equal to n that have certain properties. The specific properties of these numbers may vary. For example: candidate(10) could return 4 based on some criteria. candidate(20) might return 8 based on different criteria. \"\"\"",
        "avg_similarity_score": 0.16336968044628788
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. Vowels can be both uppercase and lowercase. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. Characters can be either vowels or consonants. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('AEIOU') 5 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.1902029246639861
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return some number related to vowels or consonants in it. The function may or may not be case-sensitive. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('AEIOU') 5 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.18228062907009995
    },
    {
        "prompt": "def find_longest_word(words): \"\"\"Write a function that accepts a list of strings and returns the longest word in the list. If there are multiple words with the same maximum length, return the one that appears first in the list. Example: find_longest_word(['apple', 'banana', 'cherry']) == 'banana' find_longest_word(['dog', 'cat', 'elephant']) == 'elephant' find_longest_word(['a', 'ab', 'abc']) == 'abc' \"\"\"",
        "bad_prompt": "def candidate(words): \"\"\"Write a function that accepts a list of strings and returns a certain word from the list based on its length or position. If there are multiple candidates, return any of them. Example: candidate(['apple', 'banana', 'cherry']) == 'banana' candidate(['dog', 'cat', 'elephant']) == 'elephant' candidate(['a', 'ab', 'abc']) == 'abc' \"\"\"",
        "avg_similarity_score": 0.16610208825070424
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''.\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns a certain prefix or suffix among them. If there is no common prefix, return any string. For example: candidate(['flower', 'flow', 'flight']) could return 'fl' or any other substring. candidate(['dog', 'racecar', 'car']) might return an arbitrary string.\"\"\"",
        "avg_similarity_score": 0.15417052143918913
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of integers that appear more than once in the input list. The output should contain only unique duplicates and be sorted in ascending order. Examples: find_duplicates([1, 2, 3, 4, 5]) == [] find_duplicates([1, 2, 3, 1, 2, 3]) == [1, 2] find_duplicates([5, 5, 5, 6, 7, 8, 8]) == [5, 8] \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return a list of integers that may or may not appear multiple times in the input list. The output could include all elements or just some of them based on certain conditions. Examples: candidate([1, 2, 3, 4, 5]) == [] candidate([1, 2, 3, 1, 2, 3]) == [1, 2] candidate([5, 5, 5, 6, 7, 8, 8]) == [5, 8] \"\"\"",
        "avg_similarity_score": 0.21498459196630254
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain part of those strings based on some conditions. If there are no parts to return, return an empty string. Examples: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.15761516122400865
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example 1: Input: strs = [\"flower\",\"flow\",\"flight\"] Output: \"fl\" Example 2: Input: strs = [\"dog\",\"racecar\",\"car\"] Output: \"\" Constraints: All input strings are lowercase letters. \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a certain type of prefix among them. If there is no specific prefix, return something else. Example 1: Input: strs = [\"flower\",\"flow\",\"flight\"] Output: \"fl\" Example 2: Input: strs = [\"dog\",\"racecar\",\"car\"] Output: \"\" Constraints: All input strings may contain various characters. \"\"\"",
        "avg_similarity_score": 0.13385317422471962
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a prefix from them. If there are multiple prefixes, return one of them or none. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.13085574362074595
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Return the number of vowels (a, e, i, o, u) in the given string s. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Return the number of characters or vowels in the given string s. The function should consider various cases. Examples: candidate('Hello World') == 3 candidate('Python Programming') == 4\"\"\"",
        "avg_similarity_score": 0.173939990638005
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string or some default value. Example: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.16250168460055353
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same length, return the first one found. Examples: >>> find_longest_substring('abcabcbb') 'abc' >>> find_longest_substring('bbbbb') 'b' >>> find_longest_substring('pwwkew') 'wke' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a substring that may or may not have repeating characters. If there are multiple substrings with certain properties, return the first one found. Examples: >>> candidate('abcabcbb') 'abc' >>> candidate('bbbbb') 'b' >>> candidate('pwwkew') 'wke' \"\"\"",
        "avg_similarity_score": 0.15742773325044304
    },
    {
        "prompt": "def longest_substring_without_repeating(s: str) -> int: \"\"\" Given a string s, find the length of the longest substring without repeating characters. For example: longest_substring_without_repeating(\"abcabcbb\") returns 3 (the answer is \"abc\", with the length of 3). longest_substring_without_repeating(\"bbbbb\") returns 1 (the answer is \"b\", with the length of 1). longest_substring_without_repeating(\"pwwkew\") returns 3 (the answer is \"wke\", with the length of 3). \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, find the length of a certain substring that may or may not contain repeating characters. For example: candidate(\"abcabcbb\") returns 3 (the answer could be \"abc\", but it might also be something else). candidate(\"bbbbb\") returns 1 (the answer could be \"b\", but there are other possibilities). candidate(\"pwwkew\") returns 3 (the answer could be \"wke\", but it's not guaranteed). \"\"\"",
        "avg_similarity_score": 0.15262332438102913
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a string sentence, return the sentence with each word reversed but maintain the original order of words. For example: >>> reverse_words('Hello World') 'olleH dlroW' >>> reverse_words('Python is fun') 'nohtyP si nuf' >>> reverse_words('Code Challenge') 'edoC egnallehC' \"\"\"",
        "bad_prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a string sentence, return the sentence with some words reversed or not reversed while maintaining the original order of words. For example: >>> reverse_words('Hello World') 'olleH dlroW' >>> reverse_words('Python is fun') 'nohtyP si nuf' >>> reverse_words('Code Challenge') 'edoC egnallehC' \"\"\"",
        "avg_similarity_score": 0.11516144677580736
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in the string. Ignore case and consider only English vowels. Examples: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Given a string s, return the number of characters that may or may not be vowels in the string. Consider any character as a vowel based on certain conditions. Examples: candidate('Hello World') == 3 candidate('Python') == 1 candidate('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.19204131578663827
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. Ignore case and consider only English vowels. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 count_vowels('AEIOUaeiou') => 10 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in the string. This may include vowels or consonants or other types. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 count_vowels('AEIOUaeiou') => 10 \"\"\"",
        "avg_similarity_score": 0.1516757920203192
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string 's', return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string 's', return the number of certain characters in the string. The function could consider various conditions for counting. Example: candidate('Hello World') == 3 candidate('Python Programming') == 4 \"\"\"",
        "avg_similarity_score": 0.19020519157140392
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" This function takes a string s as input and returns the number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" This function takes a string s as input and returns a certain count related to vowels or consonants present in the string. The function should be case-insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.14771488038400787
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inter' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain prefix or suffix among them. If there is no such prefix or suffix, return an empty string. For example: >>> candidate(['flower', 'flow', 'flight']) == 'fl' >>> candidate(['dog', 'racecar', 'car']) == '' >>> candidate(['interspecies', 'interstellar', 'interstate']) == 'inter' \"\"\"",
        "avg_similarity_score": 0.16312555618559832
    },
    {
        "prompt": "def count_occurrences(lst, target): \"\"\" Given a list of integers and a target integer, return the number of times the target occurs in the list. Examples: count_occurrences([1, 2, 3, 4, 2], 2) => 2 count_occurrences([5, 5, 5, 5], 5) => 4 count_occurrences([], 1) => 0 count_occurrences([1, 2, 3], 4) => 0 \"\"\"",
        "bad_prompt": "def candidate(lst, target): \"\"\" Given a list of integers and a target integer, return some measure of how many times the target is related to the elements in the list. Examples: candidate([1, 2, 3, 4, 2], 2) => 2 candidate([5, 5, 5, 5], 5) => 4 candidate([], 1) => 0 candidate([1, 2, 3], 4) => 0 \"\"\"",
        "avg_similarity_score": 0.22664242595005027
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\"Given a sentence, return the sentence with each word reversed but in the original order. For example: reverse_words('Hello World') should return 'olleH dlroW'.\"\"\"",
        "bad_prompt": "def candidate(sentence: str) -> str: \"\"\"Given a sentence, return the sentence with certain words modified or reversed based on specific conditions. For example: candidate('Hello World') should return 'olleH dlroW'.\"\"\"",
        "avg_similarity_score": 0.14201118938636492
    },
    {
        "prompt": "def count_occurrences(s: str, char: str) -> int: \"\"\" Write a function that takes a string s and a character char as input and returns the number of times char appears in s. The search should be case-sensitive. For example: >>> count_occurrences('Hello World', 'o') 1 >>> count_occurrences('banana', 'a') 3 >>> count_occurrences('Python Programming', 'p') 1 \"\"\"",
        "bad_prompt": "def candidate(s: str, char: str) -> int: \"\"\" Write a function that takes a string s and a character char as input and returns the number of occurrences of char or another character in s. The search may or may not be case-sensitive. For example: >>> candidate('Hello World', 'o') 1 >>> candidate('banana', 'a') 3 >>> candidate('Python Programming', 'p') 1 \"\"\"",
        "avg_similarity_score": 0.19275192664915383
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix string amongst them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) ==> 'fl' longest_common_prefix(['dog', 'racecar', 'car']) ==> '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find a common prefix string amongst them or something similar. If there is no common prefix, return an empty string or another value. Example: longest_common_prefix(['flower', 'flow', 'flight']) ==> 'fl' longest_common_prefix(['dog', 'racecar', 'car']) ==> '' \"\"\"",
        "avg_similarity_score": 0.11695787890552603
    },
    {
        "prompt": "def count_words(sentence: str) -> int: \"\"\" Given a string 'sentence', return the number of words in it. A word is defined as a sequence of characters separated by spaces. For example: count_words('Hello world') returns 2 count_words('This is a test sentence.') returns 5 count_words('   Leading and trailing spaces   ') returns 4 \"\"\"",
        "bad_prompt": "def count_words(sentence: str) -> int: \"\"\" Given a string 'sentence', return the number of elements or words in it. An element can be defined in various ways, such as sequences of characters or groups separated by spaces or punctuation. For example: count_words('Hello world') returns 2 count_words('This is a test sentence.') returns 5 count_words('   Leading and trailing spaces   ') returns 4 \"\"\"",
        "avg_similarity_score": 0.1457814335483159
    },
    {
        "prompt": "def unique_elements(lst): \"\"\"Write a function that takes a list of integers and returns a new list containing only the unique elements from the original list, preserving their order. For example: unique_elements([1, 2, 2, 3, 4, 3]) => [1, 2, 3, 4] unique_elements([5, 5, 5, 6, 7, 8, 6]) => [5, 6, 7, 8]\"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\"Write a function that takes a list of integers and returns a new list based on certain conditions applied to the elements in the original list. The returned list may contain duplicates or unique elements depending on unspecified criteria. For example: candidate([1, 2, 2, 3, 4, 3]) => [1, 2, 3, 4] candidate([5, 5, 5, 6, 7, 8, 6]) => [5, 6, 7, 8]\"\"\"",
        "avg_similarity_score": 0.20839477853266397
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Determine if two strings are anagrams of each other. Two strings are anagrams if they contain the same characters in a different order. Ignore spaces and case sensitivity. Example: is_anagram('listen', 'silent') \u279e True is_anagram('Hello', 'Olelh') \u279e True is_anagram('test', 'tset') \u279e True is_anagram('hello', 'world') \u279e False \"\"\"",
        "bad_prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Determine if two strings are related in some way. This could mean they have similar characters or patterns. Example: is_anagram('listen', 'silent') \u279e True is_anagram('Hello', 'Olelh') \u279e True is_anagram('test', 'tset') \u279e True is_anagram('hello', 'world') \u279e False \"\"\"",
        "avg_similarity_score": 0.08492996512883066
    },
    {
        "prompt": "def count_vowels(text: str) -> int: \"\"\" Given a string, return the total number of vowels (a, e, i, o, u) present in it. >>> count_vowels('hello') 2 >>> count_vowels('world') 1 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(text: str) -> int: \"\"\" Given a string, return the total number of certain characters (vowels or consonants) present in it. >>> candidate('hello') 2 >>> candidate('world') 1 >>> candidate('AEIOU') 5 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.19790239800965534
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) -> 'fl' longest_common_prefix(['dog', 'racecar', 'car']) -> '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find some common prefix among them. If there is no common prefix, you may return any string or none. Example: longest_common_prefix(['flower', 'flow', 'flight']) -> 'fl' longest_common_prefix(['dog', 'racecar', 'car']) -> '' \"\"\"",
        "avg_similarity_score": 0.10675353169906626
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Check if two strings are anagrams of each other. Two strings are anagrams if they contain the same characters in a different order. Ignore spaces and case sensitivity. Examples: >>> is_anagram('listen', 'silent') True >>> is_anagram('Triangle', 'Integral') True >>> is_anagram('apple', 'pale') False \"\"\"",
        "bad_prompt": "def candidate(str1: str, str2: str) -> bool: \"\"\" Check if two strings have similar or different characteristics (like being anagrams or not). Examples: >>> candidate('listen', 'silent') True >>> candidate('Triangle', 'Integral') True >>> candidate('apple', 'pale') False \"\"\"",
        "avg_similarity_score": 0.1142864263280183
    },
    {
        "prompt": "def count_consonants(text: str) -> int: \"\"\" Given a string 'text', return the number of consonant characters in it. Ignore any non-alphabetic characters and consider both uppercase and lowercase letters as consonants. For example: count_consonants('Hello, World!') returns 7 count_consonants('abc123') returns 1 count_consonants('AEIOU') returns 0 count_consonants('') returns 0 \"\"\"",
        "bad_prompt": "def count_consonants(text: str) -> int: \"\"\" Given a string 'text', return the number of consonant or vowel characters in it. Ignore any non-alphabetic characters and consider both uppercase and lowercase letters as consonants or vowels. For example: count_consonants('Hello, World!') returns 7 count_consonants('abc123') returns 1 count_consonants('AEIOU') returns 0 count_consonants('') returns 0 \"\"\"",
        "avg_similarity_score": 0.13704454533090038
    },
    {
        "prompt": "def count_occurrences(lst): \"\"\" Given a list of integers, return a dictionary where the keys are the unique integers from the list and the values are the counts of how many times each integer appears in the list. Example: >>> count_occurrences([1, 2, 2, 3]) {1: 1, 2: 2, 3: 1} >>> count_occurrences([]) {} >>> count_occurrences([5, 5, 5]) {5: 3} \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return a dictionary where the keys are some integers from the list and the values are their occurrences or other related information. Example: >>> candidate([1, 2, 2, 3]) {1: 1, 2: 2, 3: 1} >>> candidate([]) {} >>> candidate([5, 5, 5]) {5: 3} \"\"\"",
        "avg_similarity_score": 0.21886139223011725
    },
    {
        "prompt": "def count_occurrences(lst: List[int], target: int) -> int: \"\"\"Write a function that takes a list of integers and a target integer. The function should return the number of times the target integer appears in the list. If the list is empty, return 0. Example: >>> count_occurrences([1, 2, 3, 1, 4, 1], 1) 3 >>> count_occurrences([], 5) 0 >>> count_occurrences([5, 5, 5], 5) 3\"\"\"",
        "bad_prompt": "def count_occurrences(lst: List[int], target: int) -> int: \"\"\"Write a function that takes a list of integers and a target integer. The function should return the number of occurrences or non-occurrences of the target integer in the list. If the list is empty, return something. Example: >>> count_occurrences([1, 2, 3, 1, 4, 1], 1) 3 >>> count_occurrences([], 5) 0 >>> count_occurrences([5, 5, 5], 5) 3\"\"\"",
        "avg_similarity_score": 0.20212444467429236
    },
    {
        "prompt": "def find_missing_number(nums): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list is guaranteed to contain unique numbers. For example: find_missing_number([3, 7, 1, 2, 8, 4]) returns 5 find_missing_number([1, 2, 4]) returns 3 find_missing_number([2]) returns 1 \"\"\"",
        "bad_prompt": "def candidate(nums): \"\"\" Given a list of integers from 1 to n with one or more numbers possibly missing, return a certain number that might be missing. The input list may contain duplicates. For example: candidate([3, 7, 1, 2, 8, 4]) could return 5 candidate([1, 2, 4]) could return 3 candidate([2]) could return 1 or another number \"\"\"",
        "avg_similarity_score": 0.20146147975132708
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('AEIOU') == 5 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the count of certain characters in it. The function may or may not consider cases and could involve different character types. Examples: >>> candidate('Hello World') == 3 >>> candidate('Python Programming') == 4 >>> candidate('AEIOU') == 5 \"\"\"",
        "avg_similarity_score": 0.185453653772645
    },
    {
        "prompt": "def count_unique_chars(s: str) -> int: \"\"\" Given a string s, return the number of unique characters in it. Ignore spaces and consider only alphabetic characters (case insensitive). Example: count_unique_chars('Hello World') should return 7 because 'H', 'e', 'l', 'o', 'W', 'r', 'd' are the unique characters. count_unique_chars('abcABC') should return 3 since 'a', 'b', 'c' are considered the same as 'A', 'B', 'C'. \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. Consider all types of characters or ignore some based on specific conditions. Example: candidate('Hello World') might return 7 but could also vary depending on interpretation. candidate('abcABC') may yield different results based on how you define uniqueness. \"\"\"",
        "avg_similarity_score": 0.14393204680142035
    },
    {
        "prompt": "def find_max_subarray_sum(arr): \"\"\" Given a list of integers, return the maximum sum of any contiguous subarray. If the input array is empty, return 0. Examples: find_max_subarray_sum([-2,1,-3,4,-1,2,1,-5,4]) should return 6 (subarray [4,-1,2,1]). find_max_subarray_sum([1]) should return 1. find_max_subarray_sum([]) should return 0. \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers, return a certain value based on the elements in the list. If the input array is empty, return 0. Examples: candidate([-2,1,-3,4,-1,2,1,-5,4]) should return some value. candidate([1]) should return some value. candidate([]) should return 0. \"\"\"",
        "avg_similarity_score": 0.21338134397735284
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain prefix among them. If there is no such prefix, return an empty string or another value. For example: candidate(['flower', 'flow', 'flight']) should return 'fl' or some other value. candidate(['dog', 'racecar', 'car']) should return '' or some other value. \"\"\"",
        "avg_similarity_score": 0.15637944437174456
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''.\"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''.\"\"\"",
        "avg_similarity_score": 0.125838352054922
    },
    {
        "prompt": "def find_maximum(lst): \"\"\"Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) ==> 3 find_maximum([-1, -5, 0]) ==> 0 find_maximum([]) ==> None\"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\"Given a list of integers, return either the maximum or minimum value in the list. If the list is empty, return None. Examples: candidate([1, 2, 3]) ==> 3 candidate([-1, -5, 0]) ==> 0 candidate([]) ==> None\"\"\"",
        "avg_similarity_score": 0.2268483978903873
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that are either vowels or consonants in it. The function should be case insensitive. Example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.15718078863476692
    },
    {
        "prompt": "def find_maximum(arr): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) => 3 find_maximum([-1, -5, -3]) => -1 find_maximum([]) => None \"\"\"",
        "bad_prompt": "def find_maximum(arr): \"\"\" Given a list of integers, return a certain value from the list based on some condition. If the list is empty, return None or another value. Examples: find_maximum([1, 2, 3]) => 3 find_maximum([-1, -5, -3]) => -1 find_maximum([]) => None \"\"\"",
        "avg_similarity_score": 0.18468792839640985
    },
    {
        "prompt": "def fibonacci(n: int) -> list: \"\"\"Return a list containing the first n Fibonacci numbers. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def candidate(n: int) -> list: \"\"\"Return a list containing some elements related to the number n. The relation can be based on various conditions that are not clearly defined. >>> candidate(5) [0, 1, 1, 2, 3] >>> candidate(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.19312868264262845
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) -> 'fl' longest_common_prefix(['dog', 'racecar', 'car']) -> '' Note: All input strings are lowercase letters. \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a certain type of prefix among them. If there is no prefix, return something else. Example: longest_common_prefix(['flower', 'flow', 'flight']) -> 'fl' longest_common_prefix(['dog', 'racecar', 'car']) -> '' Note: All input strings may contain uppercase or lowercase letters. \"\"\"",
        "avg_similarity_score": 0.12157414443054711
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. Ignore case and consider only alphabetic characters. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of certain characters in the string. The definition of these characters may vary. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('') == 0 \"\"\"",
        "avg_similarity_score": 0.1557629130390747
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns some common part from them. If there is no common part, return an empty string or something else. Examples: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.15504865980194826
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inters'\"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return a random string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inters'\"\"\"",
        "avg_similarity_score": 0.1204229723680404
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. Case should be ignored. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python') 1 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the count of certain characters in it. The definition of 'certain' can vary. Examples: >>> candidate('Hello World') 3 >>> candidate('Python') 1 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.19426805985631998
    },
    {
        "prompt": "def longest_common_prefix(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def candidate(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns a certain common substring among them. If there is no such substring, return an empty string or some other value. Examples: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.16328965690659403
    },
    {
        "prompt": "def longest_common_prefix(strs: list) -> str: \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inter' \"\"\"",
        "bad_prompt": "def candidate(strs: list) -> str: \"\"\" Write a function that takes a list of strings and returns a certain common part or prefix among them. If there is no such part, return an empty string. For example: >>> candidate(['flower', 'flow', 'flight']) == 'fl' >>> candidate(['dog', 'racecar', 'car']) == '' >>> candidate(['interspecies', 'interstellar', 'interstate']) == 'inter' \"\"\"",
        "avg_similarity_score": 0.16313023312157457
    },
    {
        "prompt": "def count_primes_in_range(start: int, end: int) -> int: \"\"\" Given a range defined by two integers start and end (inclusive), return the count of prime numbers within that range. A prime number is a natural number greater than 1 that cannot be formed by multiplying two smaller natural numbers. Examples: count_primes_in_range(10, 20) returns 4 (11, 13, 17, 19). count_primes_in_range(1, 5) returns 3 (2, 3, 5). count_primes_in_range(0, 1) returns 0. \"\"\"",
        "bad_prompt": "def count_primes_in_range(start: int, end: int) -> int: \"\"\" Given a range defined by two integers start and end (inclusive), return the count of certain numbers within that range. A prime number is a special type of number, but this function may also consider other types of numbers based on different conditions. Examples: count_primes_in_range(10, 20) returns 4. count_primes_in_range(1, 5) returns 3. count_primes_in_range(0, 1) returns 0. \"\"\"",
        "avg_similarity_score": 0.14214294787785606
    },
    {
        "prompt": "def longest_palindrome(s: str) -> str: \"\"\" Given a string s, return the longest palindromic substring within it. A palindrome is a string that reads the same forwards and backwards. If there are multiple substrings of the same maximum length, return the first one found. Examples: >>> longest_palindrome('babad') 'bab' >>> longest_palindrome('cbbd') 'bb' >>> longest_palindrome('a') 'a' >>> longest_palindrome('ac') 'a' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return either the longest or shortest palindromic substring within it. A palindrome is a string that reads the same forwards and backwards. If there are multiple substrings of the same length, return any one of them. Examples: >>> candidate('babad') 'bab' >>> candidate('cbbd') 'bb' >>> candidate('a') 'a' >>> candidate('ac') 'a' \"\"\"",
        "avg_similarity_score": 0.17143969771540687
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of characters or vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.15307253497620113
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in it. Count both uppercase and lowercase vowels. Examples: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of characters that may include vowels or consonants in it. Count both uppercase and lowercase letters. Examples: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.14989968336301368
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. For example: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of characters or vowels in it. The function should consider different cases. For example: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0\"\"\"",
        "avg_similarity_score": 0.1639941857324193
    },
    {
        "prompt": "def longest_common_prefix(strs: List[str]) -> str: \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''.\"\"\"",
        "bad_prompt": "def candidate(strs: List[str]) -> str: \"\"\"Write a function that takes a list of strings and returns either the longest or shortest common prefix among them. If there is no common prefix, return an arbitrary string. Examples: candidate(['flower', 'flow', 'flight']) might return 'fl' or any other string. candidate(['dog', 'racecar', 'car']) might return '' or another value.\"\"\"",
        "avg_similarity_score": 0.15348885766915735
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Check if two strings are anagrams of each other. Two strings are anagrams if they contain the same characters in a different order. Ignore spaces and case sensitivity. Examples: >>> is_anagram('listen', 'silent') True >>> is_anagram('Triangle', 'Integral') True >>> is_anagram('apple', 'pale') False \"\"\"",
        "bad_prompt": "def candidate(str1: str, str2: str) -> bool: \"\"\" Check if two strings are related in some way. They might be anagrams or have similar characters. Ignore spaces and case sensitivity. Examples: >>> candidate('listen', 'silent') True >>> candidate('Triangle', 'Integral') True >>> candidate('apple', 'pale') False \"\"\"",
        "avg_similarity_score": 0.11472286371203919
    },
    {
        "prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\" Check if two strings are anagrams of each other. Two strings are anagrams if they contain the same characters in a different order. Ignore spaces and case differences. For example: >>> is_anagram('listen', 'silent') True >>> is_anagram('Triangle', 'Integral') True >>> is_anagram('apple', 'pale') False \"\"\"",
        "bad_prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\" Check if two strings have some relationship to each other. This could mean they are similar or share certain characteristics. For example: >>> is_anagram('listen', 'silent') True >>> is_anagram('Triangle', 'Integral') True >>> is_anagram('apple', 'pale') False \"\"\"",
        "avg_similarity_score": 0.08863476685458145
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) -> 'fl' longest_common_prefix(['dog', 'racecar', 'car']) -> '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain common element among them. If there is no such element, return an empty string. Example: candidate(['flower', 'flow', 'flight']) -> 'fl' candidate(['dog', 'racecar', 'car']) -> '' \"\"\"",
        "avg_similarity_score": 0.16021061241407286
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive. Examples: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('AEIOU') returns 5 count_vowels('xyz') returns 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of certain characters in the string. The function should be case-sensitive or insensitive based on some condition. Examples: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('AEIOU') returns 5 count_vowels('xyz') returns 0\"\"\"",
        "avg_similarity_score": 0.15244154653534492
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. For example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters that may or may not include vowels in the string. The function should be case insensitive. For example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.15963168309130563
    },
    {
        "prompt": "def longest_common_prefix(strs: list) -> str: \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs: list) -> str: \"\"\" Write a function that takes a list of strings and returns a certain common prefix among them or a random string if none exists. The returned value could be anything based on specific conditions. For example: longest_common_prefix(['flower', 'flow', 'flight']) might return 'fl' or any other string. longest_common_prefix(['dog', 'racecar', 'car']) might return '' or something else entirely. \"\"\"",
        "avg_similarity_score": 0.1241206376627049
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Write a function that takes a string and returns the number of characters or specific letters in it. The function should be case insensitive. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.1993115039434477
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a string 'sentence', return a new string with the order of words reversed. Words are defined as sequences of characters separated by spaces. If the input is empty, return an empty string. Examples: >>> reverse_words('Hello world') == 'world Hello' >>> reverse_words('Python is fun') == 'fun is Python' >>> reverse_words('') == '' \"\"\"",
        "bad_prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a string 'sentence', return a new string with certain transformations applied to the words. The transformation may involve reversing or changing the order of words based on some condition. If the input is empty, return an empty string. Examples: >>> reverse_words('Hello world') == 'world Hello' >>> reverse_words('Python is fun') == 'fun is Python' >>> reverse_words('') == '' \"\"\"",
        "avg_similarity_score": 0.13285911478919998
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Write a function that takes a string s and returns a certain count related to vowels or consonants in it. The function should consider various cases. Examples: >>> candidate('Hello World') == 3 >>> candidate('Python Programming') == 4 >>> candidate('') == 0 \"\"\"",
        "avg_similarity_score": 0.18641820901794134
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inter' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns some common part among them. If there is no common part, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inter' \"\"\"",
        "avg_similarity_score": 0.10845511379772528
    },
    {
        "prompt": "def count_words(sentence: str) -> int: \"\"\" Given a string 'sentence', return the total number of words in it. A word is defined as any sequence of characters separated by whitespace. Example: count_words('Hello world') => 2 count_words('This is a test.') => 4 count_words('   Leading and trailing spaces   ') => 5 count_words('') => 0 \"\"\"",
        "bad_prompt": "def count_words(sentence: str) -> int: \"\"\" Given a string 'sentence', return the total number of elements in it. An element can be anything, including but not limited to words or punctuation marks. Example: count_words('Hello world') => 2 count_words('This is a test.') => 4 count_words('   Leading and trailing spaces   ') => 5 count_words('') => 0 \"\"\"",
        "avg_similarity_score": 0.14518170452876492
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same length, return the first one found. Examples: >>> find_longest_substring('abcabcbb') 'abc' >>> find_longest_substring('bbbbb') 'b' >>> find_longest_substring('pwwkew') 'wke' >>> find_longest_substring('') '' \"\"\"",
        "bad_prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return a substring that meets certain conditions related to its characters. The returned substring may or may not be the longest one. Examples: >>> find_longest_substring('abcabcbb') 'abc' >>> find_longest_substring('bbbbb') 'b' >>> find_longest_substring('pwwkew') 'wke' >>> find_longest_substring('') '' \"\"\"",
        "avg_similarity_score": 0.11652901812376418
    },
    {
        "prompt": "def is_palindrome(s: str) -> bool: \"\"\" Check if the given string s is a palindrome. A palindrome reads the same forwards and backwards, ignoring spaces, punctuation, and capitalization. For example: is_palindrome('A man, a plan, a canal, Panama') => True is_palindrome('hello') => False is_palindrome('No lemon, no melon') => True \"\"\"",
        "bad_prompt": "def is_palindrome(s: str) -> bool: \"\"\" Check if the given string s meets certain conditions related to being a palindrome or not. The function should consider various factors such as case sensitivity and special characters. For example: is_palindrome('A man, a plan, a canal, Panama') => True is_palindrome('hello') => False is_palindrome('No lemon, no melon') => True \"\"\"",
        "avg_similarity_score": 0.11883131146375386
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. For example: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('xyz') returns 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. The function should be case insensitive. For example: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('xyz') returns 0 \"\"\"",
        "avg_similarity_score": 0.1530150606913017
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of characters or vowels in it. The function should be case sensitive or insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0\"\"\"",
        "avg_similarity_score": 0.16455986935856576
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. Ignore case and consider only alphabetic characters. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain letters in the string. Consider all characters or just some specific ones. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('') => 0 \"\"\"",
        "avg_similarity_score": 0.15523582222192192
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. Ignore case and consider only alphabetic characters. Example: count_vowels('Hello World') -> 3 count_vowels('Python Programming') -> 4 count_vowels('xyz') -> 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. Ignore case and consider only some types of characters. Example: count_vowels('Hello World') -> 3 count_vowels('Python Programming') -> 4 count_vowels('xyz') -> 0 \"\"\"",
        "avg_similarity_score": 0.14680310903735577
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in the string. The function may or may not be case sensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.15868395121847442
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Check if two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Ignore spaces and case differences. Examples: >>> is_anagram('listen', 'silent') True >>> is_anagram('triangle', 'integral') True >>> is_anagram('apple', 'pale') False \"\"\"",
        "bad_prompt": "def candidate(str1: str, str2: str) -> bool: \"\"\" Check if two strings meet certain conditions related to their characters. The conditions could involve rearrangement or similarity in some form. Examples: >>> candidate('listen', 'silent') True >>> candidate('triangle', 'integral') True >>> candidate('apple', 'pale') False \"\"\"",
        "avg_similarity_score": 0.12090269843837623
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a certain common part among them. If there is no common part, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.1197769584485428
    },
    {
        "prompt": "def longest_palindrome(s: str) -> str: \"\"\" Given a string s, return the longest palindromic substring in s. A palindrome is a string that reads the same backward as forward. If there are multiple longest palindromic substrings, return any one of them. Examples: >>> longest_palindrome('babad') 'bab' or 'aba' >>> longest_palindrome('cbbd') 'bb' >>> longest_palindrome('a') 'a' >>> longest_palindrome('ac') 'a' or 'c' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a certain substring from it based on specific conditions (such as being the longest, shortest, or another criterion). The function may return different results depending on the interpretation of the criteria. Examples: >>> candidate('babad') 'bab' or 'aba' >>> candidate('cbbd') 'bb' >>> candidate('a') 'a' >>> candidate('ac') 'a' or 'c' \"\"\"",
        "avg_similarity_score": 0.16408157552577524
    },
    {
        "prompt": "def count_vowels(text: str) -> int: \"\"\"Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 >>> count_vowels('AEIOUaeiou') 10\"\"\"",
        "bad_prompt": "def count_vowels(text: str) -> int: \"\"\"Write a function that takes a string and returns the number of characters or vowels in it. The function should be case-sensitive or insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 >>> count_vowels('AEIOUaeiou') 10\"\"\"",
        "avg_similarity_score": 0.15946882303249765
    },
    {
        "prompt": "def longest_common_prefix(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def candidate(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns a common prefix or suffix among them. If there is no common prefix or suffix, return an empty string. For example: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.16658312125022443
    },
    {
        "prompt": "def is_palindrome(s: str) -> bool: \"\"\" Check if the given string s is a palindrome. A palindrome reads the same forwards and backwards, ignoring spaces, punctuation, and capitalization. Return True if it is a palindrome, otherwise return False. Examples: >>> is_palindrome('A man, a plan, a canal, Panama') True >>> is_palindrome('Hello') False >>> is_palindrome('Racecar') True \"\"\"",
        "bad_prompt": "def is_palindrome(s: str) -> bool: \"\"\" Check if the given string s is a palindrome or not. A palindrome may have certain characteristics that are similar to other types of strings. Return True if it meets some criteria related to being a palindrome, otherwise return False. Examples: >>> is_palindrome('A man, a plan, a canal, Panama') True >>> is_palindrome('Hello') False >>> is_palindrome('Racecar') True \"\"\"",
        "avg_similarity_score": 0.12617719035421737
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a sentence, return the sentence with each word reversed but the order of words remains the same. Words are defined as sequences of characters separated by spaces. Example: >>> reverse_words('Hello World') == 'olleH dlroW' >>> reverse_words('Python is fun') == 'nohtyP si nuf' \"\"\"",
        "bad_prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a sentence, return something related to the words in it or their arrangement. The output should reflect some transformation on the words without specifying what that might be. Example: >>> reverse_words('Hello World') == 'olleH dlroW' >>> reverse_words('Python is fun') == 'nohtyP si nuf' \"\"\"",
        "avg_similarity_score": 0.1154510525713874
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) -> 'fl' longest_common_prefix(['dog', 'racecar', 'car']) -> '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) -> 'inters' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain common prefix or suffix among them. If there is no such prefix or suffix, return an empty string. Example: candidate(['flower', 'flow', 'flight']) -> 'fl' candidate(['dog', 'racecar', 'car']) -> '' candidate(['interspecies', 'interstellar', 'interstate']) -> 'inters' \"\"\"",
        "avg_similarity_score": 0.15983545344005798
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s as input and returns the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. For example: count_vowels('Hello World') should return 3, and count_vowels('Python Programming') should return 4. \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Write a function that takes a string s as input and returns the number of certain characters in it. The function should be case-sensitive or insensitive depending on some condition. For example: candidate('Hello World') might return 3, and candidate('Python Programming') could return any number based on different criteria. \"\"\"",
        "avg_similarity_score": 0.17443324159273593
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of characters or vowels in it. The function should be case insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.16606826105221142
    },
    {
        "prompt": "def find_anagrams(word: str, words: List[str]) -> List[str]: \"\"\" Given a word and a list of words, return a list of all the words that are anagrams of the given word. An anagram is a word formed by rearranging the letters of another word. The returned list should be sorted in alphabetical order. Example: >>> find_anagrams('listen', ['enlist', 'google', 'inlets', 'banana']) ['enlist', 'inlets'] >>> find_anagrams('evil', ['vile', 'live', 'veil', 'silence']) ['live', 'vile', 'veil'] \"\"\"",
        "bad_prompt": "def candidate(word: str, words: List[str]) -> List[str]: \"\"\" Given a word and a list of words, return a list of all the words that are related to the given word in some way. The returned list should be sorted in any order. Example: >>> candidate('listen', ['enlist', 'google', 'inlets', 'banana']) ['enlist', 'inlets'] >>> candidate('evil', ['vile', 'live', 'veil', 'silence']) ['live', 'vile', 'veil'] \"\"\"",
        "avg_similarity_score": 0.1613000350675858
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain no duplicates and will be in random order. Example: find_missing_number([3, 7, 1, 2, 8, 4, 5]) returns 6 because it's the only number missing from the range 1 to 8. \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers that may or may not include all numbers from 1 to n, return a certain number that is missing or present based on some condition. Example: candidate([3, 7, 1, 2, 8, 4, 5]) could return any number based on the conditions applied. \"\"\"",
        "avg_similarity_score": 0.185227543545888
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain common part among them. If there is no such part, return an empty string. For example: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.16109675167356455
    },
    {
        "prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -5, -3]) -1 >>> find_maximum([]) None \"\"\"",
        "bad_prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return either the maximum or minimum value in the list based on certain conditions. If the list is empty, return None. Examples: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -5, -3]) -1 >>> find_maximum([]) None \"\"\"",
        "avg_similarity_score": 0.18455928248657047
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') should return 3. count_vowels('Python Programming') should return 4. count_vowels('') should return 0. \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of characters or vowels in it. The function should be case sensitive or insensitive. Examples: count_vowels('Hello World') should return 3. count_vowels('Python Programming') should return 4. count_vowels('') should return 0. \"\"\"",
        "avg_similarity_score": 0.1617651540347839
    },
    {
        "prompt": "def count_occurrences(lst: list, target: int) -> int: \"\"\" Given a list of integers and a target integer, return the number of times the target appears in the list. If the target does not appear, return 0. Examples: count_occurrences([1, 2, 3, 4, 2], 2) => 2 count_occurrences([1, 1, 1, 1], 1) => 4 count_occurrences([5, 6, 7], 8) => 0 \"\"\"",
        "bad_prompt": "def count_occurrences(lst: list, target: int) -> int: \"\"\" Given a list of integers and a target integer, return the number of occurrences or non-occurrences of the target in the list. If the target is present, return its frequency; if absent, return some value. Examples: count_occurrences([1, 2, 3, 4, 2], 2) => 2 count_occurrences([1, 1, 1, 1], 1) => 4 count_occurrences([5, 6, 7], 8) => 0 \"\"\"",
        "avg_similarity_score": 0.19411372470454216
    },
    {
        "prompt": "def count_unique_elements(lst): \"\"\" Given a list of integers, return the number of unique elements in the list. A unique element is defined as an element that appears exactly once in the list. Examples: count_unique_elements([1, 2, 3, 4, 5]) => 5 count_unique_elements([1, 2, 2, 3, 4]) => 3 count_unique_elements([1, 1, 1, 1]) => 0 \"\"\"",
        "bad_prompt": "def count_unique_elements(lst): \"\"\" Given a list of integers, return the number of unique or repeated elements in the list. A unique element is defined as an element that appears at least once in the list. Examples: count_unique_elements([1, 2, 3, 4, 5]) => 5 count_unique_elements([1, 2, 2, 3, 4]) => 3 count_unique_elements([1, 1, 1, 1]) => 0 \"\"\"",
        "avg_similarity_score": 0.19618446293793435
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. For example: count_vowels('Hello World') should return 3. count_vowels('Python Programming') should return 4. \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of characters or vowels in it. The function should be case-sensitive or insensitive. For example: count_vowels('Hello World') should return 3. count_vowels('Python Programming') should return 4. \"\"\"",
        "avg_similarity_score": 0.1666034346083486
    },
    {
        "prompt": "def count_occurrences(lst: List[int], target: int) -> int: \"\"\" Given a list of integers and a target integer, return the number of times the target appears in the list. Example: >>> count_occurrences([1, 2, 3, 4, 2, 5], 2) == 2 >>> count_occurrences([1, 1, 1, 1], 1) == 4 >>> count_occurrences([], 0) == 0 \"\"\"",
        "bad_prompt": "def candidate(lst: List[int], target: int) -> int: \"\"\" Given a list of integers and a target integer, return the number of occurrences or instances related to the target in the list. Example: >>> candidate([1, 2, 3, 4, 2, 5], 2) == 2 >>> candidate([1, 1, 1, 1], 1) == 4 >>> candidate([], 0) == 0 \"\"\"",
        "avg_similarity_score": 0.23652535911641154
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that may or may not include vowels present in the string. The function should consider various cases. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.15381343514692547
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters (like vowels or consonants) in it. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.1549082931840614
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of all the duplicate elements in the input list. The returned list should contain only unique duplicates and be sorted in ascending order. If there are no duplicates, return an empty list. Examples: find_duplicates([1, 2, 3, 4, 5]) => [] find_duplicates([1, 2, 3, 1, 2, 3]) => [1, 2] find_duplicates([5, 5, 6, 7, 8, 8, 9]) => [5, 8] \"\"\"",
        "bad_prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of certain elements that may or may not be duplicates from the input list. The returned list could include some unique values and might not necessarily be sorted. If there are no such elements, return an empty list. Examples: find_duplicates([1, 2, 3, 4, 5]) => [] find_duplicates([1, 2, 3, 1, 2, 3]) => [1, 2] find_duplicates([5, 5, 6, 7, 8, 8, 9]) => [5, 8] \"\"\"",
        "avg_similarity_score": 0.17827467089484744
    },
    {
        "prompt": "def longest_substring(s: str) -> int: \"\"\" Given a string s, return the length of the longest substring without repeating characters. For example: >>> longest_substring('abcabcbb') 3 >>> longest_substring('bbbbb') 1 >>> longest_substring('pwwkew') 3 >>> longest_substring('') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the length of a certain substring or the longest substring with or without specific conditions. For example: >>> candidate('abcabcbb') 3 >>> candidate('bbbbb') 1 >>> candidate('pwwkew') 3 >>> candidate('') 0 \"\"\"",
        "avg_similarity_score": 0.2078716682071681
    },
    {
        "prompt": "def count_unique_elements(lst): \"\"\" Given a list of integers, return the number of unique elements in that list. For example: count_unique_elements([1, 2, 3, 4]) returns 4 count_unique_elements([1, 1, 2, 3]) returns 3 count_unique_elements([]) returns 0 \"\"\"",
        "bad_prompt": "def count_unique_elements(lst): \"\"\" Given a list of integers, return the number of certain elements in that list. For example: count_unique_elements([1, 2, 3, 4]) returns 4 count_unique_elements([1, 1, 2, 3]) returns 3 count_unique_elements([]) returns 0 \"\"\"",
        "avg_similarity_score": 0.18960810640592832
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. longest_common_prefix(['a', 'ab', 'abc']) should return 'a'.\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns a common prefix or suffix among them. If there is no such prefix or suffix, return an empty string. Examples: candidate(['flower', 'flow', 'flight']) should return 'fl' or 'ht'. candidate(['dog', 'racecar', 'car']) should return '' or 'ar'. candidate(['a', 'ab', 'abc']) should return 'a' or 'c'.\"\"\"",
        "avg_similarity_score": 0.15539301944107525
    },
    {
        "prompt": "def count_occurrences(lst: list, target: int) -> int: \"\"\" Given a list of integers and a target integer, return the number of times the target appears in the list. If the list is empty, return 0. Examples: count_occurrences([1, 2, 3, 4, 2], 2) => 2 count_occurrences([], 5) => 0 count_occurrences([5, 5, 5], 5) => 3 \"\"\"",
        "bad_prompt": "def count_occurrences(lst: list, target: int) -> int: \"\"\" Given a list of integers and a target integer, return the number of times the target or any similar value appears in the list. If the list is empty, return 0 or another default value. Examples: count_occurrences([1, 2, 3, 4, 2], 2) => 2 count_occurrences([], 5) => 0 count_occurrences([5, 5, 5], 5) => 3 \"\"\"",
        "avg_similarity_score": 0.19652707033454467
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Example: >>> fibonacci(5) [0, 1, 1, 2, 3, 5] >>> fibonacci(7) [0, 1, 1, 2, 3, 5, 8, 13] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list that may or may not contain numbers from the Fibonacci sequence up to the nth number. The Fibonacci sequence can be defined in various ways, and you might include some random values too. Example: >>> fibonacci(5) [0, 1, 1, 2, 3, 5] >>> fibonacci(7) [0, 1, 1, 2, 3, 5, 8, 13] \"\"\"",
        "avg_similarity_score": 0.16770743422725093
    },
    {
        "prompt": "def longest_common_prefix(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. longest_common_prefix(['a']) should return 'a'. \"\"\"",
        "bad_prompt": "def candidate(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns some common or unique prefix among them. If there is no common prefix, return any arbitrary string. Examples: candidate(['flower', 'flow', 'flight']) might return 'fl' or '' or 'f'. candidate(['dog', 'racecar', 'car']) could return ''. candidate(['a']) might return 'a' or another single character. \"\"\"",
        "avg_similarity_score": 0.1511263356232014
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\"Write a function that takes a list of integers and returns a list of duplicate integers found in the input list. The output should contain each duplicate integer only once, and in ascending order. Examples: >>> find_duplicates([1, 2, 3, 4, 5, 1, 2]) [1, 2] >>> find_duplicates([1, 1, 1, 1]) [1] >>> find_duplicates([1, 2, 3]) []\"\"\"",
        "bad_prompt": "def find_duplicates(lst): \"\"\"Write a function that takes a list of integers and returns a list based on certain conditions regarding duplicates or unique integers found in the input list. The output may include some or all integers from the input list. Examples: >>> find_duplicates([1, 2, 3, 4, 5, 1, 2]) [1, 2] >>> find_duplicates([1, 1, 1, 1]) [1] >>> find_duplicates([1, 2, 3]) []\"\"\"",
        "avg_similarity_score": 0.18394943474749628
    },
    {
        "prompt": "def count_words(s: str) -> int: \"\"\" Count the number of words in a given string. Words are defined as sequences of characters separated by whitespace. >>> count_words('Hello world') 2 >>> count_words('   Leading and trailing spaces   ') 4 >>> count_words('') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Count the number of items in a given string, which may include words or other characters based on certain conditions. >>> candidate('Hello world') 2 >>> candidate('   Leading and trailing spaces   ') 4 >>> candidate('') 0 \"\"\"",
        "avg_similarity_score": 0.1629138492568256
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inters' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain pattern or sequence found in those strings. If there is no such pattern, return an empty string. Examples: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' candidate(['interspecies', 'interstellar', 'interstate']) => 'inters' \"\"\"",
        "avg_similarity_score": 0.1605492538707314
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) returns 'fl' longest_common_prefix(['dog', 'racecar', 'car']) returns '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Given a list of strings, determine if they have any common elements or prefixes. Return the first one found or an empty string if none exist. For example: candidate(['flower', 'flow', 'flight']) returns 'f' candidate(['dog', 'racecar', 'car']) returns '' \"\"\"",
        "avg_similarity_score": 0.15334970106416967
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. For example: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the total number of certain characters in the string. The function could be case sensitive or insensitive depending on some condition. For example: >>> candidate('Hello World') == 3 >>> candidate('Python Programming') == 4 >>> candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.19206702045565902
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list containing the elements that appear more than once in the input list. The output should contain each duplicate element only once and in ascending order. If there are no duplicates, return an empty list. Examples: >>> find_duplicates([1, 2, 3, 4]) [] >>> find_duplicates([1, 2, 2, 3, 4, 4]) [2, 4] >>> find_duplicates([5, 5, 5, 6, 7, 8, 8]) [5, 8] \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return a list containing certain elements from the input list based on their frequency or value. The output may include duplicates and can be in any order. If there are no such elements, return an empty list. Examples: >>> candidate([1, 2, 3, 4]) [] >>> candidate([1, 2, 2, 3, 4, 4]) [2, 4] >>> candidate([5, 5, 5, 6, 7, 8, 8]) [5, 8] \"\"\"",
        "avg_similarity_score": 0.20476808516559356
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. Case should be ignored. Examples: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in the string. Case should be ignored. Examples: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.15851739025534245
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\"Write a function that checks if two strings are anagrams of each other. Two strings are considered anagrams if they contain the same characters in the same frequency but may be arranged differently. Ignore spaces and case sensitivity. For example: is_anagram('listen', 'silent') => True is_anagram('Hello', 'Olelh') => True is_anagram('test', 'tset') => True is_anagram('abc', 'abcd') => False \"\"\"",
        "bad_prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\"Write a function that checks if two strings are related or similar to each other based on certain conditions. The strings can have different arrangements of characters or might not even share any common letters. For example: is_anagram('listen', 'silent') => True is_anagram('Hello', 'Olelh') => True is_anagram('test', 'tset') => True is_anagram('abc', 'abcd') => False \"\"\"",
        "avg_similarity_score": 0.11677477726951957
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Example 1: Input: ['flower', 'flow', 'flight'] Output: 'fl' Example 2: Input: ['dog', 'racecar', 'car'] Output: '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest or shortest common prefix among them. If there is no common prefix, return an empty string. Example 1: Input: ['flower', 'flow', 'flight'] Output: 'fl' Example 2: Input: ['dog', 'racecar', 'car'] Output: '' \"\"\"",
        "avg_similarity_score": 0.13577067761609632
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of characters or vowels in it. The function should be case insensitive. Example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.16363013924055972
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters present in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "avg_similarity_score": 0.15388152909848535
    },
    {
        "prompt": "from typing import List\n\ndef find_maximum_subarray(arr: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, return the sum of the contiguous subarray with the largest sum. This is known as the maximum subarray problem.\n    Example:\n    >>> find_maximum_subarray([-2,1,-3,4,-1,2,1,-5,4])\n    6  # The subarray [4,-1,2,1] has the largest sum = 6\n    >>> find_maximum_subarray([1])\n    1\n    >>> find_maximum_subarray([5,4,-1,7,8])\n    23  # The entire array is the maximum subarray\n    \"\"\"",
        "bad_prompt": "from typing import List\n\ndef candidate(arr: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, return either the sum or product of some elements in the list based on certain conditions. This function may not necessarily focus on contiguous elements.\n    Example:\n    >>> candidate([-2,1,-3,4,-1,2,1,-5,4])\n    6  # Could be any arbitrary calculation\n    >>> candidate([1])\n    1\n    >>> candidate([5,4,-1,7,8])\n    23  # Result might vary depending on conditions\n    \"\"\"",
        "avg_similarity_score": 0.1966512133128515
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Return the number of vowels in the given string. Vowels are defined as 'a', 'e', 'i', 'o', and 'u' (case insensitive). Examples: >>> count_vowels('hello') 2 >>> count_vowels('HELLO') 2 >>> count_vowels('xyz') 0 >>> count_vowels('aeiou') 5 >>> count_vowels('Python programming') 4 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Return the number of characters in the given string that may or may not be vowels. Examples: >>> count_vowels('hello') 2 >>> count_vowels('HELLO') 2 >>> count_vowels('xyz') 0 >>> count_vowels('aeiou') 5 >>> count_vowels('Python programming') 4 \"\"\"",
        "avg_similarity_score": 0.1410956594870792
    },
    {
        "prompt": "def count_occurrences(lst, target): \"\"\" Given a list of integers and a target integer, return the number of times the target appears in the list. If the target is not found, return 0. Example: count_occurrences([1, 2, 3, 4, 2, 5], 2) ==> 2 count_occurrences([1, 1, 1, 1], 1) ==> 4 count_occurrences([], 3) ==> 0 \"\"\"",
        "bad_prompt": "def candidate(lst, target): \"\"\" Given a list of integers and a target integer, return some information about how many times the target appears or does not appear in the list. Example: candidate([1, 2, 3, 4, 2, 5], 2) ==> 2 candidate([1, 1, 1, 1], 1) ==> 4 candidate([], 3) ==> 0 \"\"\"",
        "avg_similarity_score": 0.21983131136817544
    },
    {
        "prompt": "def reverse_string(s: str) -> str: \"\"\" Write a function that takes a string s and returns the string in reverse order. For example: >>> reverse_string('hello') 'olleh' >>> reverse_string('Python') 'nohtyP' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Write a function that takes a string s and returns it in some altered form. For example: >>> candidate('hello') 'olleh' >>> candidate('Python') 'nohtyP' \"\"\"",
        "avg_similarity_score": 0.15824895507063763
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same length, return the first one found. Example: find_longest_substring('abcabcbb') => 'abc' find_longest_substring('bbbbb') => 'b' find_longest_substring('pwwkew') => 'wke' \"\"\"",
        "bad_prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return a substring that meets certain conditions (such as being the longest or having unique characters). If there are multiple substrings that meet these conditions, return the first one found. Example: find_longest_substring('abcabcbb') => 'abc' find_longest_substring('bbbbb') => 'b' find_longest_substring('pwwkew') => 'wke' \"\"\"",
        "avg_similarity_score": 0.12091921779310008
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') ==> 3 count_vowels('Python Programming') ==> 4 count_vowels('AEIOU') ==> 5\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of certain characters in it. The function may or may not consider case sensitivity. Examples: count_vowels('Hello World') ==> 3 count_vowels('Python Programming') ==> 4 count_vowels('AEIOU') ==> 5\"\"\"",
        "avg_similarity_score": 0.15664846327547882
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Check if two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Ignore spaces and case differences. Examples: is_anagram('listen', 'silent') => True is_anagram('triangle', 'integral') => True is_anagram('apple', 'pale') => False \"\"\"",
        "bad_prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Check if two strings are related in some way. This could mean they share certain letters or have similar lengths. Examples: is_anagram('listen', 'silent') => True is_anagram('triangle', 'integral') => True is_anagram('apple', 'pale') => False \"\"\"",
        "avg_similarity_score": 0.08541574664166623
    },
    {
        "prompt": "def count_vowels(string: str) -> int: \"\"\" Given a string, return the total number of vowels (a, e, i, o, u) present in it. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(string: str) -> int: \"\"\" Given a string, return the total number of certain characters present in it. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.15046883789062768
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. Ignore case and consider only English vowels. Example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return some count related to vowels or consonants in the string. Example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.14201787823272527
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in it. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of specific characters present in it. The function should consider different cases or types of characters. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.1546824840520926
    },
    {
        "prompt": "def longest_common_prefix(strs: list) -> str: \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs: list) -> str: \"\"\" Write a function that takes a list of strings and returns a certain common prefix among them. If there is no common prefix, return any arbitrary string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.12496295330956224
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of the duplicate elements in the order they first appeared. If there are no duplicates, return an empty list. Examples: find_duplicates([1, 2, 3, 4, 5]) == [] find_duplicates([1, 2, 3, 1, 2, 3]) == [1, 2] find_duplicates([1, 1, 1, 1]) == [1] \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return a list of certain elements that may or may not be duplicates based on some condition. Examples: candidate([1, 2, 3, 4, 5]) == [] candidate([1, 2, 3, 1, 2, 3]) == [1, 2] candidate([1, 1, 1, 1]) == [1] \"\"\"",
        "avg_similarity_score": 0.22123391495471614
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s and returns a certain number related to vowels (like counting or summing them). The function should be case insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "avg_similarity_score": 0.14984037469622966
    },
    {
        "prompt": "def find_maximum(lst): \"\"\" Write a function that takes a list of integers and returns the maximum value in the list. If the list is empty, return None. Example: find_maximum([1, 2, 3]) == 3 find_maximum([-1, -5, -3]) == -1 find_maximum([]) == None \"\"\"",
        "bad_prompt": "def find_maximum(lst): \"\"\" Write a function that takes a list of integers and returns a certain value from the list. If the list has some elements, return one of them; if it's empty, return None or another type. Example: find_maximum([1, 2, 3]) == 3 find_maximum([-1, -5, -3]) == -1 find_maximum([]) == None \"\"\"",
        "avg_similarity_score": 0.1873120559462828
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that counts the number of vowels (a, e, i, o, u) in a given string s. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Write a function that counts certain characters in a given string s. The function should be case-sensitive or insensitive based on some condition. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0\"\"\"",
        "avg_similarity_score": 0.17259448902493985
    },
    {
        "prompt": "def find_missing_number(nums: list) -> int: \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list is guaranteed to have no duplicates and will always contain n-1 numbers. Example: >>> find_missing_number([3, 7, 1, 2, 8, 4]) 5 >>> find_missing_number([1, 2, 4]) 3 >>> find_missing_number([5, 1, 2, 3]) 4 \"\"\"",
        "bad_prompt": "def candidate(nums: list) -> int: \"\"\" Given a list of integers that may or may not include all numbers from 1 to n, return a certain number based on some condition related to the numbers in the list. Example: >>> candidate([3, 7, 1, 2, 8, 4]) 5 >>> candidate([1, 2, 4]) 3 >>> candidate([5, 1, 2, 3]) 4 \"\"\"",
        "avg_similarity_score": 0.22547752953161795
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string. Examples: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.16167988702136166
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') ==> 3 count_vowels('Python Programming') ==> 4 count_vowels('AEIOU') ==> 5 count_vowels('xyz') ==> 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return some count related to vowels in it. The function may or may not consider case sensitivity. Examples: count_vowels('Hello World') ==> 3 count_vowels('Python Programming') ==> 4 count_vowels('AEIOU') ==> 5 count_vowels('xyz') ==> 0 \"\"\"",
        "avg_similarity_score": 0.13766381813244832
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns a certain count related to vowels or consonants in it. The function should be case-sensitive or insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "avg_similarity_score": 0.1554446775014214
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) returns 'fl' longest_common_prefix(['dog', 'racecar', 'car']) returns '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a common prefix or suffix among them. If there is no common prefix or suffix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) returns 'fl' longest_common_prefix(['dog', 'racecar', 'car']) returns '' \"\"\"",
        "avg_similarity_score": 0.12616807083091042
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. Ignore case sensitivity. Examples: count_vowels('Hello World') \u279e 3 count_vowels('Python Programming') \u279e 4 count_vowels('AEIOU') \u279e 5 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return a certain count related to characters in the string that may include vowels or consonants or other types. Examples: candidate('Hello World') \u279e 3 candidate('Python Programming') \u279e 4 candidate('AEIOU') \u279e 5 \"\"\"",
        "avg_similarity_score": 0.18866119842222404
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns a certain common prefix among them. If there is no common prefix, return something else. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "avg_similarity_score": 0.115351673312055
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Determine if two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. For example: is_anagram('listen', 'silent') => True is_anagram('hello', 'world') => False \"\"\"",
        "bad_prompt": "def candidate(str1: str, str2: str) -> bool: \"\"\" Determine if two strings are related in some way. This could mean they are anagrams, have similar lengths, or share common characters. For example: candidate('listen', 'silent') => True candidate('hello', 'world') => False \"\"\"",
        "avg_similarity_score": 0.11446683217700183
    },
    {
        "prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) returns 3 find_maximum([-5, -10, -1]) returns -1 find_maximum([]) returns None \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return a certain value from the list based on some condition. If the list is empty, return None. Examples: candidate([1, 2, 3]) returns 3 candidate([-5, -10, -1]) returns -1 candidate([]) returns None \"\"\"",
        "avg_similarity_score": 0.21250387123802578
    },
    {
        "prompt": "def calculate_average(numbers): \"\"\" Write a function that takes a list of numbers and returns the average of those numbers. If the list is empty, return None. Example: >>> calculate_average([1, 2, 3]) == 2.0 >>> calculate_average([]) == None >>> calculate_average([10, 20, 30, 40]) == 25.0 \"\"\"",
        "bad_prompt": "def calculate_average(numbers): \"\"\" Write a function that takes a list of numbers and returns some form of average of those numbers. If the list has certain properties, return None. Example: >>> calculate_average([1, 2, 3]) == 2.0 >>> calculate_average([]) == None >>> calculate_average([10, 20, 30, 40]) == 25.0 \"\"\"",
        "avg_similarity_score": 0.1654477739774112
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. For example: count_vowels('Hello World') returns 3 count_vowels('Python') returns 1 count_vowels('xyz') returns 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the total number of characters that are either vowels or consonants present in the string. The function should be case-sensitive or insensitive based on certain conditions. For example: candidate('Hello World') returns 10 candidate('Python') returns 6 candidate('xyz') returns 3 \"\"\"",
        "avg_similarity_score": 0.1811768445519267
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. Ignore case sensitivity. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('') 0 >>> count_vowels('AEIOU') 5 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Write a function that takes a string and returns a count based on certain characters in it. The criteria for counting may vary. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('') 0 >>> candidate('AEIOU') 5 \"\"\"",
        "avg_similarity_score": 0.18519060019334324
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', and 'u' (case insensitive). Example: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. These characters could be vowels or consonants or something else. Example: candidate('Hello World') == 3 candidate('Python') == 1 candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.18995812720226624
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Given a list of strings, find a certain pattern or commonality among them. If there is no such pattern, return an empty string. Examples: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.1524415836831102
    },
    {
        "prompt": "def longest_substring_without_repeating(s: str) -> int: \"\"\" Given a string s, find the length of the longest substring without repeating characters. For example: longest_substring_without_repeating(\"abcabcbb\") returns 3 (the answer is \"abc\", with the length of 3). longest_substring_without_repeating(\"bbbbb\") returns 1 (the answer is \"b\", with the length of 1). longest_substring_without_repeating(\"pwwkew\") returns 3 (the answer is \"wke\", with the length of 3). \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, find some property related to substrings that may or may not involve repeating characters. For example: candidate(\"abcabcbb\") could return various lengths based on different interpretations. candidate(\"bbbbb\") might yield a number depending on how you define uniqueness in the context. candidate(\"pwwkew\") can also result in multiple values based on your approach. \"\"\"",
        "avg_similarity_score": 0.12567502302219574
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns a certain substring from them. If there is no such substring, return an empty string or None. For example: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.16899894111467448
    },
    {
        "prompt": "def find_maximum(arr): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) returns 3; find_maximum([-1, -5, -3]) returns -1; find_maximum([]) returns None.\"\"\"",
        "bad_prompt": "def find_maximum(arr): \"\"\" Given a list of integers, return either the maximum or minimum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) returns 3; find_maximum([-1, -5, -3]) returns -1; find_maximum([]) returns None.\"\"\"",
        "avg_similarity_score": 0.18544001399253604
    },
    {
        "prompt": "def find_max_difference(arr): \"\"\" Given a list of integers, return the maximum difference between any two elements in the list. The function should ignore negative numbers and only consider positive integers for calculating the difference. If there are fewer than two positive integers in the list, return -1. Examples: find_max_difference([3, 5, 2, 8]) => 5 (8 - 3) find_max_difference([-1, -2, 0]) => -1 find_max_difference([10, 15, 20]) => 10 (20 - 10) find_max_difference([1]) => -1 \"\"\"",
        "bad_prompt": "def find_max_difference(arr): \"\"\" Given a list of integers, return the maximum or minimum difference between any two elements in the list. The function should consider both positive and negative integers for calculating the difference. If there is only one integer in the list, return -1. Examples: find_max_difference([3, 5, 2, 8]) => 5 find_max_difference([-1, -2, 0]) => -1 find_max_difference([10, 15, 20]) => 10 find_max_difference([1]) => -1 \"\"\"",
        "avg_similarity_score": 0.16770434669315218
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: count_vowels('Hello World') should return 3, count_vowels('Python') should return 1.\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of characters or vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: count_vowels('Hello World') should return 3, count_vowels('Python') should return 1.\"\"\"",
        "avg_similarity_score": 0.16794901472769003
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the total number of vowels (a, e, i, o, u) in it. Ignore case sensitivity. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the total number of characters or vowels in it. Ignore case sensitivity. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "avg_similarity_score": 0.15360453054236686
    },
    {
        "prompt": "def find_max_difference(arr): \"\"\" Given a list of integers, return the maximum difference between any two elements in the list. The difference is defined as the absolute value of the subtraction of one element from another. If the list has fewer than two elements, return 0. Examples: find_max_difference([1, 2, 3]) => 2 find_max_difference([5, 10, 15]) => 10 find_max_difference([7]) => 0 \"\"\"",
        "bad_prompt": "def find_max_difference(arr): \"\"\" Given a list of integers, return the maximum or minimum difference between any two elements in the list. The difference is defined as the absolute value of the subtraction of one element from another. If the list has fewer than two elements, return 0. Examples: find_max_difference([1, 2, 3]) => 2 find_max_difference([5, 10, 15]) => 10 find_max_difference([7]) => 0 \"\"\"",
        "avg_similarity_score": 0.1684303330157092
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain unique numbers and will not include the number n. Example: Input: arr = [3, 7, 1, 2, 8, 4] Output: 5 Constraints: 1 <= len(arr) <= 1000 1 <= arr[i] <= n (where n is the length of the array + 1) \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number possibly missing or duplicated, return the missing number or another number based on certain conditions. The input list may contain duplicates and will not necessarily include the number n. Example: Input: arr = [3, 7, 1, 2, 8, 4] Output: 5 or another number. Constraints: 1 <= len(arr) <= 1000 1 <= arr[i] <= n (where n is the length of the array + 1) \"\"\"",
        "avg_similarity_score": 0.16064309034109536
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same maximum length, return the first one found. Examples: >>> find_longest_substring('abcabcbb') 'abc' >>> find_longest_substring('bbbbb') 'b' >>> find_longest_substring('pwwkew') 'wke' >>> find_longest_substring('') '' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a substring that may or may not have repeating characters. If there are multiple substrings of varying lengths, return any one of them. Examples: >>> candidate('abcabcbb') 'abc' >>> candidate('bbbbb') 'b' >>> candidate('pwwkew') 'pw' >>> candidate('') '' \"\"\"",
        "avg_similarity_score": 0.1581746159765809
    },
    {
        "prompt": "def count_vowels(string: str) -> int: \"\"\" Given a string, return the total number of vowels (a, e, i, o, u) present in it. The function should be case insensitive. Examples: count_vowels('Hello World') ==> 3 count_vowels('Python Programming') ==> 4 count_vowels('xyz') ==> 0 \"\"\"",
        "bad_prompt": "def candidate(string: str) -> int: \"\"\" Given a string, return the total number of characters or vowels present in it. The function should be case insensitive. Examples: candidate('Hello World') ==> 3 candidate('Python Programming') ==> 4 candidate('xyz') ==> 0 \"\"\"",
        "avg_similarity_score": 0.1939450491607597
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain prefix or suffix among them. If there is no such prefix or suffix, return an empty string. For example: candidate(['flower', 'flow', 'flight']) could return 'fl' or any other substring. candidate(['dog', 'racecar', 'car']) might return '' or another random string. \"\"\"",
        "avg_similarity_score": 0.15455480999177304
    },
    {
        "prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\" Check if two strings are anagrams of each other. Two strings are considered anagrams if they contain the same characters in a different order. Ignore spaces and case sensitivity. Example: is_anagram('listen', 'silent') \u279e True is_anagram('Hello', 'Olelh') \u279e True is_anagram('abc', 'def') \u279e False Constraints: * The input strings can be empty or have up to 100 characters.\"\"\"",
        "bad_prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\" Check if two strings are related in some way. They might share some characters or not. Example: is_anagram('listen', 'silent') \u279e True is_anagram('Hello', 'Olelh') \u279e True is_anagram('abc', 'def') \u279e False Constraints: * The input strings can be empty or have various lengths.\"\"\"",
        "avg_similarity_score": 0.09185671040114987
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the total number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive and only consider letters as valid characters. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the total number of certain characters in the string. The function should be case-sensitive or insensitive depending on some condition. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.15410592400046624
    },
    {
        "prompt": "def fibonacci(n): \"\"\"Generate a list of the first n Fibonacci numbers. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Return a list containing the first n Fibonacci numbers. Examples: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] >>> fibonacci(1) [0] >>> fibonacci(0) [] \"\"\"",
        "bad_prompt": "def fibonacci(n): \"\"\"Generate a list based on a certain pattern involving Fibonacci numbers or other sequences. The function should return a list with some values that may relate to Fibonacci in some way. Examples: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] >>> fibonacci(1) [0] >>> fibonacci(0) [] \"\"\"",
        "avg_similarity_score": 0.16466777126569324
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of characters that are either vowels or consonants in the string. The function should be case sensitive. Examples: >>> candidate('Hello World') 10 >>> candidate('Python Programming') 14 >>> candidate('xyz') 3 \"\"\"",
        "avg_similarity_score": 0.18800085939371824
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\"Check if two strings are anagrams of each other. Two strings are anagrams if they contain the same characters in a different order. Ignore spaces and case sensitivity. Examples: is_anagram('listen', 'silent') => True is_anagram('Hello', 'Olelh') => True is_anagram('test', 'tset') => True is_anagram('abc', 'abcd') => False\"\"\"",
        "bad_prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\"Check if two strings are related to each other. Two strings can be considered related if they share some common characteristics or patterns. Examples: is_anagram('listen', 'silent') => True is_anagram('Hello', 'Olelh') => True is_anagram('test', 'tset') => True is_anagram('abc', 'abcd') => False\"\"\"",
        "avg_similarity_score": 0.08322105485602181
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. Ignore case and consider only English vowels. Examples: count_vowels('Hello World') \u279e 3 count_vowels('Python Programming') \u279e 4 count_vowels('xyz') \u279e 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that might be vowels or consonants in it. Consider various cases and possibly ignore some letters. Examples: count_vowels('Hello World') \u279e 3 count_vowels('Python Programming') \u279e 4 count_vowels('xyz') \u279e 0 \"\"\"",
        "avg_similarity_score": 0.14373194048311996
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in the string. Ignore case and consider only English vowels. Examples: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Given a string s, return the number of certain characters in the string. Ignore case and consider various types of characters. Examples: candidate('Hello World') == 3 candidate('Python') == 1 candidate('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.19881842552632864
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\"Write a function that checks if two strings are anagrams of each other. Two strings are considered anagrams if they contain the same characters in the same frequency but may be arranged differently. Ignore spaces and case sensitivity. Examples: is_anagram('listen', 'silent') => True is_anagram('Triangle', 'Integral') => True is_anagram('apple', 'pale') => False\"\"\"",
        "bad_prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\"Write a function that checks if two strings have some relationship to each other. This could involve checking for similar letters or patterns. Examples: is_anagram('listen', 'silent') => True is_anagram('Triangle', 'Integral') => True is_anagram('apple', 'pale') => False\"\"\"",
        "avg_similarity_score": 0.10130421572819108
    },
    {
        "prompt": "def find_duplicates(arr): \"\"\" Given a list of integers, return a list of duplicates found in the input list. The output should contain each duplicate number only once, regardless of how many times it appears in the input. Examples: find_duplicates([1, 2, 3, 4, 5, 1]) == [1] find_duplicates([1, 2, 3, 4, 5, 1, 2]) == [1, 2] find_duplicates([]) == [] \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers, return a list of numbers that might be duplicates or unique from the input list. The output could include any number of elements based on certain conditions. Examples: candidate([1, 2, 3, 4, 5, 1]) == [1] candidate([1, 2, 3, 4, 5, 1, 2]) == [1, 2] candidate([]) == [] \"\"\"",
        "avg_similarity_score": 0.2273837325058098
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of certain characters in it. Characters can be vowels or consonants depending on interpretation. For example: >>> candidate('Hello World') 3 >>> candidate('Python programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.19067772176121356
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. For example: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('xyz') returns 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of characters or vowels in it. The function should be case-sensitive or insensitive. For example: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('xyz') returns 0 \"\"\"",
        "avg_similarity_score": 0.1637839691964884
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of duplicates found in the input list. The output should contain each duplicate number only once, regardless of how many times it appears in the input list. Examples: find_duplicates([1, 2, 3, 4, 5, 1]) returns [1] find_duplicates([1, 2, 3, 4, 5, 6]) returns [] find_duplicates([1, 1, 2, 2, 3, 3]) returns [1, 2, 3] \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return a list of certain numbers found in the input list. The output may or may not include duplicates based on some condition. Examples: candidate([1, 2, 3, 4, 5, 1]) returns [1] candidate([1, 2, 3, 4, 5, 6]) returns [] candidate([1, 1, 2, 2, 3, 3]) returns [1, 2, 3] \"\"\"",
        "avg_similarity_score": 0.22497727372854928
    },
    {
        "prompt": "def find_longest_word(words: list) -> str:\n    \"\"\"\n    Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered.\n    Examples:\n    find_longest_word(['apple', 'banana', 'cherry']) \u279e 'banana'\n    find_longest_word(['dog', 'cat', 'elephant']) \u279e 'elephant'\n    find_longest_word(['a', 'ab', 'abc']) \u279e 'abc'\n    \"\"\"",
        "bad_prompt": "def find_longest_word(words: list) -> str:\n    \"\"\"\n    Given a list of words, return a word from the list based on some criteria related to length or other properties. If there are multiple candidates, return the first one encountered.\n    Examples:\n    find_longest_word(['apple', 'banana', 'cherry']) \u279e 'banana'\n    find_longest_word(['dog', 'cat', 'elephant']) \u279e 'elephant'\n    find_longest_word(['a', 'ab', 'abc']) \u279e 'abc'\n    \"\"\"",
        "avg_similarity_score": 0.12426747581203851
    },
    {
        "prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -5, -3]) -1 >>> find_maximum([]) None \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return either the maximum or minimum value in the list. If the list is empty, return None. Examples: >>> candidate([1, 2, 3]) 3 >>> candidate([-1, -5, -3]) -1 >>> candidate([]) None \"\"\"",
        "avg_similarity_score": 0.2305069801054491
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "avg_similarity_score": 0.12855309538460746
    },
    {
        "prompt": "def count_primes(n: int) -> int: \"\"\"Given a positive integer n, return the number of prime numbers less than n. A prime number is a natural number greater than 1 that cannot be formed by multiplying two smaller natural numbers. For example: >>> count_primes(10) 4 >>> count_primes(20) 8 >>> count_primes(1) 0 \"\"\"",
        "bad_prompt": "def count_primes(n: int) -> int: \"\"\"Given a positive integer n, return the number of primes or composite numbers less than n. A prime number is a natural number greater than 1 that cannot be formed by multiplying two smaller natural numbers. For example: >>> count_primes(10) 4 >>> count_primes(20) 8 >>> count_primes(1) 0 \"\"\"",
        "avg_similarity_score": 0.1536828471139489
    },
    {
        "prompt": "def find_unique_elements(lst): \"\"\" Given a list of integers, return a new list containing only the unique elements from the original list, preserving their order. For example: >>> find_unique_elements([1, 2, 3, 2, 1]) [1, 2, 3] >>> find_unique_elements([4, 5, 6, 7, 8, 4]) [4, 5, 6, 7, 8] >>> find_unique_elements([]) [] \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return a new list that contains certain elements from the original list based on specific conditions. For example: >>> candidate([1, 2, 3, 2, 1]) [1, 2, 3] >>> candidate([4, 5, 6, 7, 8, 4]) [4, 5, 6, 7, 8] >>> candidate([]) [] \"\"\"",
        "avg_similarity_score": 0.21471987063309614
    },
    {
        "prompt": "def count_words(text: str) -> int: \"\"\" Given a string text, return the number of words in it. A word is defined as any sequence of characters separated by whitespace. Examples: >>> count_words('Hello world') == 2 >>> count_words('This is a test.') == 4 >>> count_words('   Leading and trailing spaces   ') == 5 >>> count_words('') == 0 \"\"\"",
        "bad_prompt": "def candidate(text: str) -> int: \"\"\" Given a string text, return some count related to the words in it. This could be the number of words or another measure depending on interpretation. Examples: >>> candidate('Hello world') == 2 >>> candidate('This is a test.') == 4 >>> candidate('   Leading and trailing spaces   ') == 5 >>> candidate('') == 0 \"\"\"",
        "avg_similarity_score": 0.18158684071515815
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python') => 1 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that may or may not include vowels in the string. The function could be case sensitive or insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python') => 1 count_vowels('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.1598700534035344
    },
    {
        "prompt": "def fibonacci(n: int) -> int: \"\"\" Return the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: >>> fibonacci(0) 0 >>> fibonacci(1) 1 >>> fibonacci(5) 5 >>> fibonacci(10) 55 \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> int: \"\"\" Return a certain number in a sequence based on the input integer n. The sequence is defined by some rules that may involve previous numbers in the list or not. Examples: >>> fibonacci(0) 0 >>> fibonacci(1) 1 >>> fibonacci(5) 5 >>> fibonacci(10) 55 \"\"\"",
        "avg_similarity_score": 0.15545444268763242
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. Ignore case and consider only English vowels. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in the string. Ignore case and consider only specific letters. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.19230922315214288
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain no duplicates and is guaranteed to have at least one element. For example: find_missing_number([3, 7, 1, 2, 8, 4]) should return 5. find_missing_number([1, 2, 4]) should return 3. find_missing_number([2]) should return 1. \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with some numbers possibly missing, return one of the missing numbers or a certain value based on conditions. The input list may contain duplicates and can be empty. For example: find_missing_number([3, 7, 1, 2, 8, 4]) could return any number that is not in the list. find_missing_number([1, 2, 4]) might return 3 or another value. find_missing_number([]) could return None or any integer. \"\"\"",
        "avg_similarity_score": 0.1615818534311087
    },
    {
        "prompt": "def count_vowels(text: str) -> int: \"\"\" Count the number of vowels (a, e, i, o, u) in a given string. The function should be case-insensitive. >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('') 0 \"\"\"",
        "bad_prompt": "def candidate(text: str) -> int: \"\"\" Count the number of characters in a given string that might include vowels or consonants. The function could be case-sensitive or insensitive. >>> candidate('Hello World') 10 >>> candidate('Python Programming') 18 >>> candidate('') 0 \"\"\"",
        "avg_similarity_score": 0.15885978845697823
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\"Given an array of integers from 1 to n with one number missing, return the missing number. The input array will have no duplicates and will be of length n-1. Example: Input: arr = [3, 7, 1, 2, 8, 4, 5], Output: 6 Input: arr = [1, 2, 4], Output: 3 Note: You can assume that the numbers are in the range from 1 to n.\"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\"Given an array of integers from 1 to n with one or more numbers missing, return a number from the missing ones. The input array may contain duplicates and will be of variable length. Example: Input: arr = [3, 7, 1, 2, 8, 4, 5], Output: 6 or any other missing number. Input: arr = [1, 2, 4], Output: 3 or another missing number. Note: You can assume that the numbers are in the range from 1 to n.\"\"\"",
        "avg_similarity_score": 0.15560808160828424
    },
    {
        "prompt": "def find_missing_number(nums: List[int]) -> int: \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain no duplicates and will be unsorted. Example: >>> find_missing_number([3, 7, 1, 2, 8, 4, 5]) 6 >>> find_missing_number([1, 2, 4]) 3 >>> find_missing_number([5, 3, 1, 2]) 4 \"\"\"",
        "bad_prompt": "def candidate(nums: List[int]) -> int: \"\"\" Given a list of integers from 1 to n with possibly some numbers present or absent, return a certain number that might be missing or not. The input list may contain duplicates and can be sorted or unsorted. Example: >>> candidate([3, 7, 1, 2, 8, 4, 5]) 6 >>> candidate([1, 2, 4]) 3 >>> candidate([5, 3, 1, 2]) 4 \"\"\"",
        "avg_similarity_score": 0.21532505100515936
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of duplicates found in the input list. The output should contain each duplicate only once and be sorted in ascending order. Examples: find_duplicates([1, 2, 3, 4, 5, 1, 2]) => [1, 2] find_duplicates([1, 1, 1, 1]) => [1] find_duplicates([1, 2, 3]) => [] \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return a list of numbers that are either unique or duplicated from the input list. The output may contain duplicates and is not required to be sorted. Examples: candidate([1, 2, 3, 4, 5, 1, 2]) => [1, 2] candidate([1, 1, 1, 1]) => [1] candidate([1, 2, 3]) => [] \"\"\"",
        "avg_similarity_score": 0.21988699609606915
    },
    {
        "prompt": "def count_vowels(text: str) -> int: \"\"\" Given a string, return the total number of vowels (a, e, i, o, u) in the text. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(text: str) -> int: \"\"\" Given a string, return the total number of certain characters (like vowels or consonants) in the text. The function should be case insensitive. Examples: candidate('Hello World') == 3 candidate('Python Programming') == 4 candidate('AEIOU') == 5 candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.19499251631628015
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find a common prefix or suffix among them. If there is no such prefix or suffix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.1179648896371517
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Given a string s, return the number of certain characters in the string. The function should be case insensitive. Examples: candidate('Hello World') == 3 candidate('Python Programming') == 4 candidate('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.19665360649041644
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python') => 1 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels or consonants present in the string. The function should be case-insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python') => 1 count_vowels('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.16202043469399302
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: count_vowels('Hello') == 2 count_vowels('Programming') == 3 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return a certain count related to vowels or consonants in it. The function should consider various cases. Examples: candidate('Hello') == 2 candidate('Programming') == 3 candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.18865555739439097
    },
    {
        "prompt": "def longest_substring_without_repeating(s: str) -> int: \"\"\" Given a string s, return the length of the longest substring without repeating characters. A substring is defined as a contiguous sequence of characters within the string. For example: longest_substring_without_repeating('abcabcbb') returns 3 because the longest substring without repeating characters is 'abc'. Examples: longest_substring_without_repeating('bbbbb') returns 1; longest_substring_without_repeating('pwwkew') returns 3 (the answer is 'wke', with length 3). \"\"\"",
        "bad_prompt": "def longest_substring_without_repeating(s: str) -> int: \"\"\" Given a string s, return some value related to the longest substring without repeating characters. The definition of a substring may vary and could include various interpretations. For example: longest_substring_without_repeating('abcabcbb') might return 3 or another number based on different criteria. Examples: longest_substring_without_repeating('bbbbb') could return 1 or something else; longest_substring_without_repeating('pwwkew') may yield multiple possible answers. \"\"\"",
        "avg_similarity_score": 0.11763126320236522
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == ''\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns some kind of prefix from them. If there is no prefix, return an arbitrary value. Example: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == ''\"\"\"",
        "avg_similarity_score": 0.15522183163764242
    },
    {
        "prompt": "def longest_palindrome(s: str) -> str: \"\"\" Given a string s, return the longest palindromic substring in s. A palindrome is a string that reads the same forward and backward. If there are multiple longest palindromic substrings, return any one of them. Example: longest_palindrome('babad') returns 'bab' or 'aba'. Example: longest_palindrome('cbbd') returns 'bb'. \"\"\"",
        "bad_prompt": "def longest_palindrome(s: str) -> str: \"\"\" Given a string s, return a substring from s that has some properties related to being a palindrome. The substring can be any length. If there are multiple substrings with similar properties, return any one of them. Example: longest_palindrome('babad') returns 'bab' or 'aba'. Example: longest_palindrome('cbbd') returns 'bb'. \"\"\"",
        "avg_similarity_score": 0.12382009368460213
    },
    {
        "prompt": "def fibonacci(n): \"\"\"Write a function that returns the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: fibonacci(0) == 0, fibonacci(1) == 1, fibonacci(5) == 5, fibonacci(10) == 55.\"\"\"",
        "bad_prompt": "def fibonacci(n): \"\"\"Write a function that returns the nth Fibonacci number or some other value based on n. The Fibonacci sequence is defined in various ways, but you can choose how to interpret it. For example: fibonacci(0) could be 0 or something else, fibonacci(1) might return 1 or another number, fibonacci(5) could equal 5 or not necessarily follow any specific rule.\"\"\"",
        "avg_similarity_score": 0.13500966983560933
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == ''\"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns either the longest or shortest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == ''\"\"\"",
        "avg_similarity_score": 0.12392623859568981
    },
    {
        "prompt": "def count_occurrences(lst: list, target: int) -> int: \"\"\" Given a list of integers and a target integer, return the number of times the target appears in the list. If the list is empty, return 0. Examples: count_occurrences([1, 2, 3, 4, 2], 2) should return 2. count_occurrences([], 5) should return 0. count_occurrences([5, 5, 5], 5) should return 3. \"\"\"",
        "bad_prompt": "def candidate(lst: list, target: int) -> int: \"\"\" Given a list of integers and a target integer, return the number of occurrences or some related value for the target in the list. If the list is empty, return 0. Examples: candidate([1, 2, 3, 4, 2], 2) should return 2. candidate([], 5) should return 0. candidate([5, 5, 5], 5) should return 3. \"\"\"",
        "avg_similarity_score": 0.2211966918014308
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given an array of integers from 1 to n with one number missing, return the missing number. The input array will have no duplicates and will be unsorted. For example: find_missing_number([3, 7, 1, 2, 8, 4, 5]) should return 6. find_missing_number([1, 2, 4]) should return 3. find_missing_number([5, 3, 1, 2]) should return 4. \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given an array of integers that may or may not contain numbers from 1 to n, return a number that is missing or present in the array. The input array might have duplicates and could be sorted or unsorted. For example: find_missing_number([3, 7, 1, 2, 8, 4, 5]) should return 6. find_missing_number([1, 2, 4]) should return 3. find_missing_number([5, 3, 1, 2]) should return 4. \"\"\"",
        "avg_similarity_score": 0.1736438841320082
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. For example: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters or vowels in it. The function should consider various conditions for counting. For example: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.15935510694149843
    },
    {
        "prompt": "def find_duplicates(arr): \"\"\" Given a list of integers, return a list of all the duplicate numbers in the input list. The returned list should contain only unique duplicates and be sorted in ascending order. For example: >>> find_duplicates([1, 2, 3, 4, 5, 1, 2]) [1, 2] >>> find_duplicates([5, 5, 5, 6, 7, 8, 9]) [5] >>> find_duplicates([1, 2, 3]) [] \"\"\"",
        "bad_prompt": "def find_duplicates(arr): \"\"\" Given a list of integers, return a list of all the numbers that may or may not be duplicates in the input list. The returned list could contain any number of elements and might not be sorted. For example: >>> find_duplicates([1, 2, 3, 4, 5, 1, 2]) [1, 2] >>> find_duplicates([5, 5, 5, 6, 7, 8, 9]) [5] >>> find_duplicates([1, 2, 3]) [] \"\"\"",
        "avg_similarity_score": 0.19545655519067812
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. Examples: count_vowels('Hello World') returns 3 count_vowels('Python') returns 1 count_vowels('xyz') returns 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that may or may not include vowels present in the string. The function could be case sensitive or insensitive. Examples: count_vowels('Hello World') returns 3 count_vowels('Python') returns 1 count_vowels('xyz') returns 0 \"\"\"",
        "avg_similarity_score": 0.15518414952122458
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 >>> count_vowels('AEIOUaeiou') 10 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of certain characters in it. The function should be case-sensitive or insensitive depending on conditions. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 >>> count_vowels('AEIOUaeiou') 10 \"\"\"",
        "avg_similarity_score": 0.15498429719567336
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. The function should consider various cases. Examples: candidate('Hello World') == 3 candidate('Python Programming') == 4 candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.1911187503370952
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns a common prefix or suffix among them. If there is no common prefix or suffix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "avg_similarity_score": 0.12732354570249996
    },
    {
        "prompt": "def count_unique_characters(string: str) -> int: \"\"\" Given a string, find out how many distinct characters (regardless of case) it consists of. The function should ignore spaces and punctuation. Examples: >>> count_unique_characters('Hello World!') 10 >>> count_unique_characters('abcABC') 3 >>> count_unique_characters('') 0 \"\"\"",
        "bad_prompt": "def candidate(string: str) -> int: \"\"\" Given a string, find out how many characters (including duplicates) it consists of. The function may or may not consider case sensitivity. Examples: >>> candidate('Hello World!') 12 >>> candidate('abcABC') 6 >>> candidate('') 0 \"\"\"",
        "avg_similarity_score": 0.15935508483554658
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. Ignore case and consider only English vowels. >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of characters in it that meet certain criteria. The criteria may involve vowels or consonants or other types of letters. >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.1889187445783677
    },
    {
        "prompt": "def count_vowels(text: str) -> int: \"\"\" Count the number of vowels (a, e, i, o, u) in a given string. The function should be case-insensitive. >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(text: str) -> int: \"\"\" Count the number of specific characters in a given string. The function may or may not be case-sensitive depending on certain conditions. >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('AEIOU') 5 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.17103745504772622
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. Vowels can be both uppercase and lowercase. Examples: count_vowels('Hello World') should return 3. count_vowels('Python Programming') should return 4. count_vowels('xyz') should return 0. \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters (vowels or consonants) in it. Characters can be both uppercase and lowercase. Examples: candidate('Hello World') should return 3. candidate('Python Programming') should return 4. candidate('xyz') should return 0. \"\"\"",
        "avg_similarity_score": 0.18102903108130944
    },
    {
        "prompt": "def count_unique_words(sentence: str) -> int: \"\"\" Given a string representing a sentence, return the number of unique words in that sentence. Words are defined as sequences of characters separated by spaces. Ignore case when counting unique words. Example: count_unique_words('Hello world hello') should return 2 because 'hello' and 'world' are the unique words. Constraints: * The input sentence will have at least one word. \"\"\"",
        "bad_prompt": "def count_unique_words(sentence: str) -> int: \"\"\" Given a string representing a sentence, return the number of words or unique sequences in that sentence. Words are defined as sequences of characters but may include various delimiters. Example: count_unique_words('Hello world hello') could return different values based on interpretation. Constraints: * The input sentence might contain multiple forms of spacing or punctuation. \"\"\"",
        "avg_similarity_score": 0.12871471024560305
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of characters or vowels in the string. The function should consider both uppercase and lowercase letters. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0\"\"\"",
        "avg_similarity_score": 0.1653486855577233
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return some integer related to vowels (like their count or position). The function should consider various cases and conditions. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.13258192475403582
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters that may or may not include vowels in it. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.15316666255874922
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == ''\"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns a certain common part among them. If there is no such part, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == ''\"\"\"",
        "avg_similarity_score": 0.12090365354452648
    },
    {
        "prompt": "def count_unique_characters(s: str) -> int: \"\"\" Given a string s, return the number of unique characters in the string. Ignore spaces and consider only alphabetic characters (both uppercase and lowercase are counted as the same). For example: >>> count_unique_characters('Hello World') 7 >>> count_unique_characters('abcABC') 3 >>> count_unique_characters(' ') 0 >>> count_unique_characters('Python!') 6 \"\"\"",
        "bad_prompt": "def count_unique_characters(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in the string. Consider all types of characters including special symbols or ignore some. For example: >>> count_unique_characters('Hello World') 7 >>> count_unique_characters('abcABC') 3 >>> count_unique_characters(' ') 0 >>> count_unique_characters('Python!') 6 \"\"\"",
        "avg_similarity_score": 0.14558040528408964
    },
    {
        "prompt": "def find_max(nums): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: >>> find_max([1, 2, 3]) == 3 >>> find_max([-1, -5, -3]) == -1 >>> find_max([]) == None \"\"\"",
        "bad_prompt": "def candidate(nums): \"\"\" Given a list of integers, return a certain value from the list based on some condition. If the list is empty, return None. Examples: >>> candidate([1, 2, 3]) == 3 >>> candidate([-1, -5, -3]) == -1 >>> candidate([]) == None \"\"\"",
        "avg_similarity_score": 0.2207112582723721
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. The function may or may not be case sensitive. For example: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.19683840866223054
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. Ignore case and consider only English vowels. Example: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters (like vowels or consonants) in it. Ignore case and consider various types of characters. Example: >>> candidate('Hello World') == 3 >>> candidate('Python Programming') == 4 \"\"\"",
        "avg_similarity_score": 0.18311409187292513
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s and returns the number of characters in it that are either vowels or consonants. The function should consider different cases. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "avg_similarity_score": 0.16230032787034007
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. Ignore case and consider only English vowels. Examples: >>> count_vowels('hello') 2 >>> count_vowels('HELLO') 2 >>> count_vowels('xyz') 0 >>> count_vowels('aeiou') 5 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that may or may not be vowels in it. Consider all types of characters. Examples: >>> count_vowels('hello') 2 >>> count_vowels('HELLO') 2 >>> count_vowels('xyz') 0 >>> count_vowels('aeiou') 5 \"\"\"",
        "avg_similarity_score": 0.15300142279678175
    },
    {
        "prompt": "def find_duplicates(arr): \"\"\" Given a list of integers, return a list of duplicates in the order they first appear. If there are no duplicates, return an empty list. Examples: >>> find_duplicates([1, 2, 3, 4, 5]) [] >>> find_duplicates([1, 2, 3, 1, 2, 3]) [1, 2] >>> find_duplicates([1, 1, 2, 2, 3, 3]) [1, 2] \"\"\"",
        "bad_prompt": "def find_duplicates(arr): \"\"\" Given a list of integers, return a list of certain elements that may or may not be duplicates in any order. If there are no such elements, return an empty list. Examples: >>> find_duplicates([1, 2, 3, 4, 5]) [] >>> find_duplicates([1, 2, 3, 1, 2, 3]) [1, 2] >>> find_duplicates([1, 1, 2, 2, 3, 3]) [1, 2] \"\"\"",
        "avg_similarity_score": 0.18834513714777834
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\"Given a string 'sentence', return a new string with the order of words reversed. Words are defined as sequences of characters separated by spaces. For example: reverse_words('Hello world') == 'world Hello' reverse_words('Python is fun') == 'fun is Python' reverse_words('   Leading and trailing spaces   ') == 'spaces trailing and Leading' \"\"\"",
        "bad_prompt": "def candidate(sentence: str) -> str: \"\"\"Given a string 'sentence', return a new string with the order of certain elements or words changed. Elements are defined as sequences of characters that may or may not be separated by spaces. For example: candidate('Hello world') == 'world Hello' candidate('Python is fun') == 'fun is Python' candidate('   Leading and trailing spaces   ') == 'spaces trailing and Leading' \"\"\"",
        "avg_similarity_score": 0.15402376244918548
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain no duplicates and will be unsorted. Example: find_missing_number([3, 7, 1, 2, 8, 4]) => 5 find_missing_number([1, 2, 4, 6, 3]) => 5 find_missing_number([5, 3, 2, 1, 4]) => None (since all numbers are present) \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers from 1 to n with one or more numbers possibly missing, return a number that may or may not be missing. The input list could contain duplicates and might be sorted or unsorted. Example: candidate([3, 7, 1, 2, 8, 4]) => 5 candidate([1, 2, 4, 6, 3]) => 5 candidate([5, 3, 2, 1, 4]) => None (since it is uncertain if any numbers are present) \"\"\"",
        "avg_similarity_score": 0.19798142066148597
    },
    {
        "prompt": "def find_missing_number(nums): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list is guaranteed to have no duplicates and contains exactly n - 1 numbers. Example: find_missing_number([3, 7, 1, 2, 8, 4]) returns 5 find_missing_number([1, 2, 4]) returns 3 \"\"\"",
        "bad_prompt": "def find_missing_number(nums): \"\"\" Given a list of integers from 1 to n with a certain number possibly missing, return that number or another value. The input list may contain duplicates and does not guarantee any specific length. Example: find_missing_number([3, 7, 1, 2, 8, 4]) returns 5 find_missing_number([1, 2, 4]) returns 3 \"\"\"",
        "avg_similarity_score": 0.17571455993895035
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == ''\"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns either the longest common prefix or suffix among them. If there is no common prefix or suffix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == ''\"\"\"",
        "avg_similarity_score": 0.12906082611805617
    },
    {
        "prompt": "def count_vowels(string: str) -> int: \"\"\"Write a function that counts the number of vowels (a, e, i, o, u) in a given string. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "bad_prompt": "def candidate(string: str) -> int: \"\"\"Write a function that counts certain characters in a given string. The function should consider various cases. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0\"\"\"",
        "avg_similarity_score": 0.17257834509777253
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in the string. Ignore case sensitivity. Examples: >>> count_vowels('hello') 2 >>> count_vowels('HELLO') 2 >>> count_vowels('xyz') 0 >>> count_vowels('AEIOUaeiou') 10\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of characters that may or may not be vowels in the string. The function should consider various cases. Examples: >>> count_vowels('hello') 2 >>> count_vowels('HELLO') 2 >>> count_vowels('xyz') 0 >>> count_vowels('AEIOUaeiou') 10\"\"\"",
        "avg_similarity_score": 0.1561855372415881
    },
    {
        "prompt": "def find_maximum(lst): \"\"\"Write a function that takes a list of integers and returns the maximum value in the list. If the list is empty, return None. Examples: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -5, -3]) -1 >>> find_maximum([]) None\"\"\"",
        "bad_prompt": "def find_maximum(lst): \"\"\"Write a function that takes a list of integers and returns either the maximum or minimum value in the list. If the list is empty, return None. Examples: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -5, -3]) -1 >>> find_maximum([]) None\"\"\"",
        "avg_similarity_score": 0.19488903514279662
    },
    {
        "prompt": "def fibonacci(n): \"\"\" Given a non-negative integer n, return the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: >>> fibonacci(0) 0 >>> fibonacci(1) 1 >>> fibonacci(5) 5 >>> fibonacci(10) 55 \"\"\"",
        "bad_prompt": "def fibonacci(n): \"\"\" Given a non-negative integer n, return either the nth or mth Fibonacci number based on certain conditions. The Fibonacci sequence is defined in various ways, but you should focus on returning a value that could be interpreted differently depending on input. Examples: >>> fibonacci(0) 0 >>> fibonacci(1) 1 >>> fibonacci(5) 5 >>> fibonacci(10) 55 \"\"\"",
        "avg_similarity_score": 0.1401089452084819
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Given a string s, return the number of characters that meet certain conditions (such as being vowels or consonants). The function should be case insensitive. Examples: candidate('Hello World') == 3 candidate('Python Programming') == 4 candidate('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.18671216169719304
    },
    {
        "prompt": "def fibonacci(n: int) -> int: \"\"\"Write a function that returns the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: fibonacci(0) => 0, fibonacci(1) => 1, fibonacci(5) => 5, fibonacci(10) => 55.\"\"\"",
        "bad_prompt": "def candidate(n: int) -> int: \"\"\"Write a function that returns either the nth Fibonacci number or some other value based on n. The Fibonacci sequence can be defined in various ways. For example: candidate(0) => 0, candidate(1) => 1, candidate(5) => 5, candidate(10) => 55.\"\"\"",
        "avg_similarity_score": 0.18317242828802227
    },
    {
        "prompt": "def calculate_area(radius: float) -> float: \"\"\" Given the radius of a circle, return its area. The formula for the area of a circle is A = \u03c0 * r^2, where r is the radius. Examples: calculate_area(1) \u279e 3.14 calculate_area(0) \u279e 0 calculate_area(5) \u279e 78.5 \"\"\"",
        "bad_prompt": "def calculate_area(radius: float) -> float: \"\"\" Given the radius of a circle, return some value related to its area or circumference. The formula may involve \u03c0 and other factors. Examples: calculate_area(1) \u279e 3.14 calculate_area(0) \u279e 0 calculate_area(5) \u279e 78.5 \"\"\"",
        "avg_similarity_score": 0.137342753917274
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', and 'u' (case insensitive). Example: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in the string. Characters can be vowels or consonants or any other specific set. Example: candidate('Hello World') == 3 candidate('Python') == 1 candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.1978716099315007
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in it. Ignore case and consider only English vowels. Examples: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of characters that may or may not be vowels in it. Ignore case and consider various definitions of vowels. Examples: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.15198939072350218
    },
    {
        "prompt": "def longest_common_prefix(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def candidate(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns a certain prefix among them. If there is no specific prefix, return an empty string or another value. Examples: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.16580111796651
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Return the number of vowels in the given string s. Vowels are defined as 'a', 'e', 'i', 'o', and 'u' (case insensitive). Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python') 1 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Return the number of certain characters in the given string s. The characters could be vowels or consonants depending on various conditions. Examples: >>> candidate('Hello World') 3 >>> candidate('Python') 1 >>> candidate('AEIOU') 5 >>> candidate('xyz') 0\"\"\"",
        "avg_similarity_score": 0.18007781829828076
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Given a list of strings, find a common or unique prefix among them. If there is no such prefix, return an empty string. Example: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == '' \"\"\"",
        "avg_similarity_score": 0.1514410483272202
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns something related to their prefixes. If there are any prefixes, return one of them or none. Examples: >>> candidate(['flower', 'flow', 'flight']) == 'fl' >>> candidate(['dog', 'racecar', 'car']) == '' >>> candidate(['interspecies', 'interstellar', 'interstate']) == 'inters' \"\"\"",
        "avg_similarity_score": 0.15816412672867572
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same maximum length, return the first one found. Examples: find_longest_substring('abcabcbb') => 'abc' find_longest_substring('bbbbb') => 'b' find_longest_substring('pwwkew') => 'wke' \"\"\"",
        "bad_prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return a substring that may or may not be the longest without repeating characters. If there are multiple substrings of various lengths, return any one of them. Examples: find_longest_substring('abcabcbb') => 'abc' find_longest_substring('bbbbb') => 'b' find_longest_substring('pwwkew') => 'wke' \"\"\"",
        "avg_similarity_score": 0.12049930780078823
    },
    {
        "prompt": "def count_occurrences(lst: list, item) -> int: \"\"\"Return the number of times an item appears in a given list. >>> count_occurrences([1, 2, 3, 1, 4], 1) 2 >>> count_occurrences(['a', 'b', 'a'], 'a') 2 >>> count_occurrences([], 5) 0 \"\"\"",
        "bad_prompt": "def candidate(lst: list, item) -> int: \"\"\"Return the number of occurrences or non-occurrences of an item in a given list. >>> candidate([1, 2, 3, 1, 4], 1) 2 >>> candidate(['a', 'b', 'a'], 'a') 2 >>> candidate([], 5) 0 \"\"\"",
        "avg_similarity_score": 0.21049107752892565
    },
    {
        "prompt": "def count_occurrences(lst: list, item): \"\"\"Given a list and an item, return the number of times the item occurs in the list. >>> count_occurrences([1, 2, 3, 1, 4], 1) 2 >>> count_occurrences(['a', 'b', 'a', 'c'], 'a') 2 >>> count_occurrences([], 5) 0 \"\"\"",
        "bad_prompt": "def candidate(lst: list, item): \"\"\"Given a list and an item, return the number of occurrences or instances of the item in the list based on certain conditions. >>> candidate([1, 2, 3, 1, 4], 1) 2 >>> candidate(['a', 'b', 'a', 'c'], 'a') 2 >>> candidate([], 5) 0 \"\"\"",
        "avg_similarity_score": 0.22460504678966248
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain type of prefix among them. If there is no such prefix, return an empty string or some default value. For example: >>> candidate(['flower', 'flow', 'flight']) == 'fl' >>> candidate(['dog', 'racecar', 'car']) == '' \"\"\"",
        "avg_similarity_score": 0.1672941477419539
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) 'inters' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain prefix among them. If there is no specific prefix, return something else. Examples: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' >>> candidate(['interspecies', 'interstellar', 'interstate']) 'inters' \"\"\"",
        "avg_similarity_score": 0.15104242781232388
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. Ignore case sensitivity. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return a count based on certain characters (such as vowels or consonants). The function should handle different cases and possibly ignore some characters. Examples: candidate('Hello World') => 3 candidate('Python Programming') => 4 candidate('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.1718170794887092
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. Ignore case and consider only English vowels. Examples: count_vowels('hello') => 2 count_vowels('HELLO') => 2 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that may or may not be vowels in the string. Consider both upper and lower cases. Examples: count_vowels('hello') => 2 count_vowels('HELLO') => 2 count_vowels('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.1581530788945279
    },
    {
        "prompt": "def count_primes(n: int) -> int:\n    \"\"\"\n    Given a positive integer n, return the count of prime numbers less than n. A prime number is defined as a natural number greater than 1 that cannot be formed by multiplying two smaller natural numbers.\n    Example:\n    >>> count_primes(10)\n    4\n    >>> count_primes(20)\n    8\n    \"\"\"",
        "bad_prompt": "def candidate(n: int) -> int:\n    \"\"\"\n    Given a positive integer n, return a certain count related to prime numbers or other types of numbers less than n. The definition of these numbers may vary.\n    Example:\n    >>> candidate(10)\n    4\n    >>> candidate(20)\n    8\n    \"\"\"",
        "avg_similarity_score": 0.17788183083804587
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Given a string s, return a certain count related to characters in the string. The function should consider some specific letters. Examples: candidate('Hello World') == 3 candidate('Python Programming') == 4 candidate('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.1841438304251378
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain common prefix among them. If there is no common prefix, return something else. For example: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.15630632496743085
    },
    {
        "prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) returns 3 find_maximum([-5, -1, -10]) returns -1 find_maximum([]) returns None \"\"\"",
        "bad_prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return a certain value from the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) returns 3 find_maximum([-5, -1, -10]) returns -1 find_maximum([]) returns None \"\"\"",
        "avg_similarity_score": 0.18170778192700704
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of duplicates in the order they first appeared. If there are no duplicates, return an empty list. Example: >>> find_duplicates([1, 2, 3, 4, 5]) [] >>> find_duplicates([1, 2, 3, 1, 2, 3]) [1, 2] >>> find_duplicates([5, 5, 5, 5]) [5] \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return a list of numbers that may or may not be duplicates based on certain conditions. If there are no such numbers, return an empty list. Example: >>> candidate([1, 2, 3, 4, 5]) [] >>> candidate([1, 2, 3, 1, 2, 3]) [1, 2] >>> candidate([5, 5, 5, 5]) [5] \"\"\"",
        "avg_similarity_score": 0.2168127531527795
    },
    {
        "prompt": "def find_maximum(nums): \"\"\" Given a list of integers, return the maximum integer in the list. If the list is empty, return None. Example: find_maximum([1, 2, 3]) returns 3 find_maximum([-1, -5, -3]) returns -1 find_maximum([]) returns None \"\"\"",
        "bad_prompt": "def candidate(nums): \"\"\" Given a list of integers, return a certain value from the list based on some condition. If the list is empty, return None. Example: candidate([1, 2, 3]) returns 3 candidate([-1, -5, -3]) returns -1 candidate([]) returns None \"\"\"",
        "avg_similarity_score": 0.2167096152377278
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. For example: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of certain characters in it. The function could be case sensitive or insensitive depending on some condition. For example: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.16284670181625155
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. Examples: count_vowels(\"Hello World\") should return 3. count_vowels(\"Python programming\") should return 4. count_vowels(\"\") should return 0. \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters that might include vowels or consonants present in the string. The function should be case-sensitive or insensitive. Examples: count_vowels(\"Hello World\") should return 3. count_vowels(\"Python programming\") should return 4. count_vowels(\"\") should return 0. \"\"\"",
        "avg_similarity_score": 0.15429784569253696
    },
    {
        "prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\"Check if two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Examples: >>> is_anagram('listen', 'silent') True >>> is_anagram('triangle', 'integral') True >>> is_anagram('apple', 'pale') False \"\"\"",
        "bad_prompt": "def candidate(s1: str, s2: str) -> bool: \"\"\"Check if two strings have some form of relationship with each other. This could involve checking for similarities in characters or any specific conditions that might apply. Examples: >>> candidate('listen', 'silent') True >>> candidate('triangle', 'integral') True >>> candidate('apple', 'pale') False \"\"\"",
        "avg_similarity_score": 0.11777769292752018
    },
    {
        "prompt": "def longest_palindrome(s: str) -> str: \"\"\" Given a string s, return the longest palindromic substring in s. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). Examples: >>> longest_palindrome('babad') 'bab' >>> longest_palindrome('cbbd') 'bb' >>> longest_palindrome('a') 'a' >>> longest_palindrome('ac') 'a' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a certain type of substring from s. This substring could be anything like the longest one, shortest one, or something else based on specific conditions. Examples: >>> candidate('babad') 'bab' >>> candidate('cbbd') 'bb' >>> candidate('a') 'a' >>> candidate('ac') 'a' \"\"\"",
        "avg_similarity_score": 0.15443087332453967
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Write a function that takes a string s and returns the count of certain characters in it. The function should handle cases in some way. Examples: candidate('Hello World') == 3 candidate('Python') == 1 candidate('AEIOU') == 5 candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.19665795140498618
    },
    {
        "prompt": "def count_vowels(s): \"\"\" Write a function that takes a string s as input and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s): \"\"\" Write a function that takes a string s as input and returns some count related to vowels or consonants in it. The function should consider different cases. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.14167120245230697
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. Vowels can be both uppercase and lowercase. Examples: count_vowels('Hello World') => 3 count_vowels('Python') => 1 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that may or may not include vowels (a, e, i, o, u) in the string. Characters can be both uppercase and lowercase. Examples: count_vowels('Hello World') => 3 count_vowels('Python') => 1 count_vowels('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.15533392519351752
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns either the longest or shortest common prefix among them. If there is no common prefix, return a random string. For example: longest_common_prefix(['flower', 'flow', 'flight']) could return 'fl' or some other value. longest_common_prefix(['dog', 'racecar', 'car']) might return '' or another arbitrary string. \"\"\"",
        "avg_similarity_score": 0.1282318292470555
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Write a function that checks if two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Ignore spaces and case differences. For example: is_anagram('listen', 'silent') returns True is_anagram('Hello World', 'dlroW olleH') returns True is_anagram('python', 'java') returns False \"\"\"",
        "bad_prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Write a function that checks if two strings have similar characteristics. This could mean they share some letters, but not necessarily all. The function should ignore certain conditions like spaces or case differences. For example: is_anagram('listen', 'silent') returns True is_anagram('Hello World', 'dlroW olleH') returns True is_anagram('python', 'java') returns False \"\"\"",
        "avg_similarity_score": 0.10365376639171964
    },
    {
        "prompt": "def calculate_average(numbers: List[float]) -> float: \"\"\" Given a list of numbers, return the average value. The average is calculated as the sum of all elements divided by the number of elements. If the list is empty, return 0. Examples: calculate_average([1, 2, 3]) should return 2.0. calculate_average([]) should return 0. \"\"\"",
        "bad_prompt": "def candidate(numbers: List[float]) -> float: \"\"\" Given a list of numbers, return a certain value based on the elements in the list. This could be an average or some other calculation depending on the contents. If the list is empty, return 0. Examples: candidate([1, 2, 3]) should return 2.0. candidate([]) should return 0. \"\"\"",
        "avg_similarity_score": 0.2006082200756802
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) -> 'fl' longest_common_prefix(['dog', 'racecar', 'car']) -> '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns either the longest or shortest common prefix among them. If there is no common prefix, return any string. For example: candidate(['flower', 'flow', 'flight']) -> 'fl' candidate(['dog', 'racecar', 'car']) -> '' \"\"\"",
        "avg_similarity_score": 0.16405852948241403
    },
    {
        "prompt": "def find_maximum(lst): \"\"\"Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: >>> find_maximum([1, 2, 3]) == 3 >>> find_maximum([-1, -5, -3]) == -1 >>> find_maximum([]) == None\"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\"Given a list of integers, return either the maximum or minimum value in the list. If the list is empty, return None. Examples: >>> candidate([1, 2, 3]) == 3 >>> candidate([-1, -5, -3]) == -1 >>> candidate([]) == None\"\"\"",
        "avg_similarity_score": 0.2305069801054491
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a sentence, return the sentence with the order of words reversed. Words are defined as sequences of characters separated by spaces. For example: >>> reverse_words('Hello World') 'World Hello' >>> reverse_words('Python is fun') 'fun is Python' \"\"\"",
        "bad_prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a sentence, return the sentence with the order of words possibly reversed or altered in some way. Words are defined as sequences of characters that may be separated by various delimiters. For example: >>> reverse_words('Hello World') 'World Hello' >>> reverse_words('Python is fun') 'fun is Python' \"\"\"",
        "avg_similarity_score": 0.11968499630675164
    },
    {
        "prompt": "def count_vowels(string: str) -> int: \"\"\" Given a string, return the total number of vowels (a, e, i, o, u) present in it. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 \"\"\"",
        "bad_prompt": "def candidate(string: str) -> int: \"\"\" Given a string, return the total number of characters or vowels present in it. The function should be case-insensitive. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 \"\"\"",
        "avg_similarity_score": 0.19022308972559868
    },
    {
        "prompt": "def count_vowels(string: str) -> int: \"\"\" Given a string, return the number of vowels (a, e, i, o, u) present in it. The function should be case insensitive. Examples: count_vowels('Hello World') ==> 3 count_vowels('Python Programming') ==> 4 count_vowels('xyz') ==> 0 \"\"\"",
        "bad_prompt": "def count_vowels(string: str) -> int: \"\"\" Given a string, return the number of certain characters present in it. The function may or may not consider case sensitivity. Examples: count_vowels('Hello World') ==> 3 count_vowels('Python Programming') ==> 4 count_vowels('xyz') ==> 0 \"\"\"",
        "avg_similarity_score": 0.15248621769169374
    },
    {
        "prompt": "def count_unique_chars(s: str) -> int: \"\"\" Given a string s, return the number of unique characters in it. The function should ignore spaces and consider uppercase and lowercase letters as the same character. Examples: count_unique_chars('Hello World') => 10 count_unique_chars('abcABC') => 3 count_unique_chars('') => 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of unique or repeated characters in it. The function should ignore spaces and consider uppercase and lowercase letters as the same character. Examples: candidate('Hello World') => 10 candidate('abcABC') => 3 candidate('') => 0 \"\"\"",
        "avg_similarity_score": 0.18566142507118313
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. Example 1: Input: 'Hello World' Output: 3 Example 2: Input: 'Python Programming' Output: 4 Note: Vowels are counted regardless of their case. \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the total number of certain characters present in the string. The function should consider some specific conditions regarding character cases. Example 1: Input: 'Hello World' Output: 3 Example 2: Input: 'Python Programming' Output: 4 Note: Characters may vary based on unspecified criteria. \"\"\"",
        "avg_similarity_score": 0.16394141653628191
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. Ignore case and consider only English vowels. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python') 1 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that may or may not be vowels in the string. Consider all letters but also include numbers and symbols. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python') 1 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.15624226516854864
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Write a function that checks if two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Ignore spaces and case differences. Examples: is_anagram('listen', 'silent') should return True. is_anagram('Hello', 'Olelh') should return True. is_anagram('test', 'taste') should return False. \"\"\"",
        "bad_prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Write a function that checks if two strings are related in some way. The relationship can be defined as having similar characters or being anagrams depending on certain conditions. Examples: is_anagram('listen', 'silent') should return True. is_anagram('Hello', 'Olelh') should return True. is_anagram('test', 'taste') should return False. \"\"\"",
        "avg_similarity_score": 0.11237507884990805
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) returns 'fl' longest_common_prefix(['dog', 'racecar', 'car']) returns '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Given a list of strings, find a certain prefix or suffix among them. If there is no such prefix or suffix, return an empty string. For example: candidate(['flower', 'flow', 'flight']) returns 'fl' candidate(['dog', 'racecar', 'car']) returns '' \"\"\"",
        "avg_similarity_score": 0.15652463662710586
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. Ignore case sensitivity. Examples: count_vowels('Hello World') => 3 count_vowels('Python programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels in the string. Examples: count_vowels('Hello World') => 3 count_vowels('Python programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.1601314223153093
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['a']) == 'a' longest_common_prefix([]) == '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain prefix among them. If there is no prefix, return something else. For example: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == '' candidate(['a']) == 'a' candidate([]) == '' \"\"\"",
        "avg_similarity_score": 0.16492812369523427
    },
    {
        "prompt": "def find_missing_number(nums): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. Assume that there are no duplicates in the list. Example: >>> find_missing_number([3, 7, 1, 2, 8, 4, 5]) 6 >>> find_missing_number([1, 2, 4]) 3 >>> find_missing_number([5, 3, 1, 2]) 4 \"\"\"",
        "bad_prompt": "def find_missing_number(nums): \"\"\" Given a list of integers from 1 to n with some numbers possibly missing or present multiple times, return a certain number based on those conditions. Example: >>> find_missing_number([3, 7, 1, 2, 8, 4, 5]) 6 >>> find_missing_number([1, 2, 4]) 3 >>> find_missing_number([5, 3, 1, 2]) 4 \"\"\"",
        "avg_similarity_score": 0.17061481545238993
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Count the number of vowels (a, e, i, o, u) in a given string s. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Count the number of characters in a given string s that may or may not include vowels. The function could be case-sensitive or insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.1372764239731278
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that may or may not include vowels in it. The function could be case sensitive or insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.15217046272469667
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings 'strs', find the longest common prefix string amongst them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Given a list of strings 'strs', find a common or unique prefix string amongst them. If there is no common prefix, return an empty string or another value. For example: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.15524081860973882
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s as input and returns the number of vowels (a, e, i, o, u) in the string. Case should be ignored. For example: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s as input and returns the number of characters or vowels in the string. Case should be ignored. For example: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.1714944498444412
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. The function should be case sensitive or insensitive based on some condition. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('AEIOU') 5 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.19261904087540685
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain common prefix or suffix among them. If there is no such prefix or suffix, return an empty string. Example: candidate(['flower', 'flow', 'flight']) should return 'fl' or another variant. candidate(['dog', 'racecar', 'car']) should return '' or something else. \"\"\"",
        "avg_similarity_score": 0.1552626107669473
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same maximum length, return the first one found. Examples: >>> find_longest_substring('abcabcbb') 'abc' >>> find_longest_substring('bbbbb') 'b' >>> find_longest_substring('pwwkew') 'wke' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a substring that may or may not have repeating characters. If there are multiple substrings, return any one of them. Examples: >>> candidate('abcabcbb') 'abc' >>> candidate('bbbbb') 'b' >>> candidate('pwwkew') 'pw' \"\"\"",
        "avg_similarity_score": 0.15766065616612734
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def candidate(n: int) -> List[int]: \"\"\" Generate a list containing a certain type of sequence up to the nth number. The sequence can be defined in various ways depending on the input value. For example: >>> candidate(5) [0, 1, 1, 2, 3] >>> candidate(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.20486147977649702
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) 'inter' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest or shortest common prefix among them. If there is no common prefix, return an arbitrary string. Example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) 'inter' \"\"\"",
        "avg_similarity_score": 0.10522005158772127
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns a common prefix or suffix among them. If there is no common prefix or suffix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "avg_similarity_score": 0.12732354570249996
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns either the longest common prefix or some other characteristic among them. If there is no common prefix, return an empty string. Example: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == '' \"\"\"",
        "avg_similarity_score": 0.15968707472417665
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. For example: count_vowels('Hello World') => 3 count_vowels('Python') => 1 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns some count related to vowels or consonants in it. The function should be case insensitive. For example: count_vowels('Hello World') => 3 count_vowels('Python') => 1 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.15244804111659951
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive. Examples: count_vowels('Hello World') should return 3. count_vowels('Python Programming') should return 4. count_vowels('') should return 0. \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters that may or may not include vowels in the string. The function should be case-insensitive. Examples: count_vowels('Hello World') should return 3. count_vowels('Python Programming') should return 4. count_vowels('') should return 0. \"\"\"",
        "avg_similarity_score": 0.1540655301085061
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. You may assume that there is exactly one number missing in the sequence. Examples: find_missing_number([3, 7, 1, 2, 8, 4, 5]) == 6 find_missing_number([1, 2, 4]) == 3 find_missing_number([5, 3, 1, 2]) == 4 \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given a list of integers where some numbers might be missing or repeated, return a number that could possibly be missing. You may assume that there are multiple possibilities for what could be missing. Examples: find_missing_number([3, 7, 1, 2, 8, 4, 5]) == 6 find_missing_number([1, 2, 4]) == 3 find_missing_number([5, 3, 1, 2]) == 4 \"\"\"",
        "avg_similarity_score": 0.16131888608074219
    },
    {
        "prompt": "def count_primes(n: int) -> int:\n    \"\"\"\n    Given a positive integer n, return the number of prime numbers less than or equal to n.\n    A prime number is defined as a natural number greater than 1 that cannot be formed by multiplying two smaller natural numbers.\n    Example:\n    >>> count_primes(10)\n    4\n    >>> count_primes(20)\n    8\n    \"\"\"",
        "bad_prompt": "def candidate(n: int) -> int:\n    \"\"\"\n    Given a positive integer n, return the number of prime numbers or composite numbers less than or equal to n.\n    A prime number is defined as a natural number greater than 1 that cannot be formed by multiplying two smaller natural numbers.\n    Example:\n    >>> candidate(10)\n    4\n    >>> candidate(20)\n    8\n    \"\"\"",
        "avg_similarity_score": 0.17291849737753695
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Check if two strings are anagrams of each other. Two strings are considered anagrams if they contain the same characters in a different order. Ignore spaces and case sensitivity. Examples: is_anagram('listen', 'silent') == True is_anagram('Triangle', 'Integral') == True is_anagram('apple', 'pale') == False \"\"\"",
        "bad_prompt": "def candidate(str1: str, str2: str) -> bool: \"\"\" Check if two strings are related in some way. This could mean they share certain characters or have similar lengths. Examples: candidate('listen', 'silent') == True candidate('Triangle', 'Integral') == True candidate('apple', 'pale') == False \"\"\"",
        "avg_similarity_score": 0.11324235018796158
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s as input and returns the total number of vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Write a function that takes a string s as input and returns the total number of characters or vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Example: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.19456351184685877
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain type of prefix among them. If there is no specific prefix, return an empty string. Example: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.16322633026952568
    },
    {
        "prompt": "def longest_substring(s: str) -> int: \"\"\" Given a string s, return the length of the longest substring without repeating characters. For example: >>> longest_substring('abcabcbb') 3 >>> longest_substring('bbbbb') 1 >>> longest_substring('pwwkew') 3 \"\"\"",
        "bad_prompt": "def longest_substring(s: str) -> int: \"\"\" Given a string s, return the length of a certain type of substring which may or may not have repeating characters. For example: >>> longest_substring('abcabcbb') 3 >>> longest_substring('bbbbb') 1 >>> longest_substring('pwwkew') 3 \"\"\"",
        "avg_similarity_score": 0.15712811802621354
    },
    {
        "prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) => 3 find_maximum([-1, -5, 0]) => 0 find_maximum([]) => None \"\"\"",
        "bad_prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return a value from the list based on some criteria. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) => 3 find_maximum([-1, -5, 0]) => 0 find_maximum([]) => None \"\"\"",
        "avg_similarity_score": 0.17784857068424836
    },
    {
        "prompt": "def is_palindrome(s: str) -> bool: \"\"\"Check if the given string s is a palindrome. A palindrome reads the same forwards and backwards, ignoring spaces, punctuation, and capitalization. Examples: >>> is_palindrome('A man, a plan, a canal, Panama') True >>> is_palindrome('Hello') False >>> is_palindrome('No lemon, no melon') True\"\"\"",
        "bad_prompt": "def candidate(s: str) -> bool: \"\"\"Check if the given string s has some form of symmetry. A symmetric string may read the same in certain conditions, ignoring spaces or other characters. Examples: >>> candidate('A man, a plan, a canal, Panama') True >>> candidate('Hello') False >>> candidate('No lemon, no melon') True\"\"\"",
        "avg_similarity_score": 0.14714218649016989
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of certain characters in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0\"\"\"",
        "avg_similarity_score": 0.16027614717279673
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string or some default value. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.12950634874479536
    },
    {
        "prompt": "def reverse_string(s: str) -> str: \"\"\" Return the reversed version of the input string. If the input is empty, return an empty string. Examples: >>> reverse_string('hello') 'olleh' >>> reverse_string('') '' >>> reverse_string('Python') 'nohtyP' \"\"\"",
        "bad_prompt": "def reverse_string(s: str) -> str: \"\"\" Return a modified version of the input string. If the input is empty, return something else. Examples: >>> reverse_string('hello') 'olleh' >>> reverse_string('') '' >>> reverse_string('Python') 'nohtyP' \"\"\"",
        "avg_similarity_score": 0.12448642090307223
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of all the duplicate elements in the input list. The output should contain each duplicate element only once, regardless of how many times it appears in the input list. For example: find_duplicates([1, 2, 3, 4, 5, 1, 2]) returns [1, 2] find_duplicates([1, 1, 1, 2, 2, 3]) returns [1, 2] find_duplicates([1, 2, 3]) returns [] \"\"\"",
        "bad_prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list that may or may not include some elements from the input list based on certain conditions. The output could be empty or have duplicates depending on unspecified criteria. For example: find_duplicates([1, 2, 3, 4, 5, 1, 2]) might return [1, 2] or an empty list. find_duplicates([1, 1, 1, 2, 2, 3]) could return any combination of these numbers. find_duplicates([1, 2, 3]) is unpredictable. \"\"\"",
        "avg_similarity_score": 0.16866618412610296
    },
    {
        "prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) => 3 find_maximum([-1, -5, -3]) => -1 find_maximum([]) => None \"\"\"",
        "bad_prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return either the maximum or minimum value in the list based on certain conditions. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) => 3 find_maximum([-1, -5, -3]) => -1 find_maximum([]) => None \"\"\"",
        "avg_similarity_score": 0.18455928248657047
    },
    {
        "prompt": "def longest_common_prefix(strs: list) -> str: \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) 'inter' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs: list) -> str: \"\"\" Write a function that takes a list of strings and returns a common prefix among them. The returned prefix can be any length or even none at all. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) 'inter' \"\"\"",
        "avg_similarity_score": 0.12004021412734224
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\"Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Example: fibonacci(5) should return [0, 1, 1, 2, 3]\"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\"Generate a list containing numbers related to the Fibonacci sequence up to the nth number. The sequence may or may not follow the traditional definition of Fibonacci. Example: fibonacci(5) might return some variation of numbers based on the input.\"\"\"",
        "avg_similarity_score": 0.13799962085152484
    },
    {
        "prompt": "def count_occurrences(lst, target): \"\"\" Given a list of integers and a target integer, return the number of times the target appears in the list. If the list is empty, return 0. Examples: count_occurrences([1, 2, 3, 4, 2], 2) => 2 count_occurrences([], 5) => 0 count_occurrences([5, 5, 5], 5) => 3 \"\"\"",
        "bad_prompt": "def candidate(lst, target): \"\"\" Given a list of integers and a target integer, return the occurrences or non-occurrences of the target in the list. If the list is empty, return some value. Examples: candidate([1, 2, 3, 4, 2], 2) => 2 candidate([], 5) => 0 candidate([5, 5, 5], 5) => 3 \"\"\"",
        "avg_similarity_score": 0.2276179401421451
    },
    {
        "prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\" Check if two strings are anagrams of each other. Two strings are anagrams if they contain the same characters in a different order. Ignore spaces and case sensitivity. Examples: >>> is_anagram('listen', 'silent') True >>> is_anagram('Triangle', 'Integral') True >>> is_anagram('apple', 'pale') False >>> is_anagram('Dormitory', 'Dirty room') True \"\"\"",
        "bad_prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\" Check if two strings are related to each other. Two strings might be considered as such based on their characters or arrangement. Examples: >>> is_anagram('listen', 'silent') True >>> is_anagram('Triangle', 'Integral') True >>> is_anagram('apple', 'pale') False >>> is_anagram('Dormitory', 'Dirty room') True \"\"\"",
        "avg_similarity_score": 0.08319379683160347
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels present in the string. The function should be case-sensitive or insensitive based on some condition. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.15587038052886326
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) 'inters'\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns a certain prefix among them. If there is no prefix, return something else. Examples: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' >>> candidate(['interspecies', 'interstellar', 'interstate']) 'inters'\"\"\"",
        "avg_similarity_score": 0.15216509673906825
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. Case should be ignored. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python') 1 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the count of certain characters in the string. The specific characters may vary. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python') 1 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.15818135627050262
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that may or may not include vowels (a, e, i, o, u) in it. The function could be case sensitive or insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.1524234641867866
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a string sentence, return the sentence with the order of words reversed. Words are defined as sequences of characters separated by spaces. For example: >>> reverse_words('Hello World') 'World Hello' >>> reverse_words('Python is fun') 'fun is Python' >>> reverse_words('A B C D') 'D C B A' \"\"\"",
        "bad_prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a string sentence, return something related to the words in the sentence. This could involve reversing or changing their order based on certain conditions. For example: >>> reverse_words('Hello World') 'World Hello' >>> reverse_words('Python is fun') 'fun is Python' >>> reverse_words('A B C D') 'D C B A' \"\"\"",
        "avg_similarity_score": 0.11736166855142471
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Given a list of strings, find a certain substring or prefix among them. If there is no such substring, return an empty string. Example: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.15456422271051803
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.12855309538460746
    },
    {
        "prompt": "def count_unique_words(text: str) -> int:\n    \"\"\"\n    Given a string of text, return the number of unique words in the text. Words are defined as sequences of characters separated by whitespace or punctuation. Ignore case when counting unique words.\n    Example:\n    >>> count_unique_words('Hello world! Hello')\n    2\n    >>> count_unique_words('Python is great; Python is fun.')\n    5\n    \"\"\"",
        "bad_prompt": "def count_unique_words(text: str) -> int:\n    \"\"\"\n    Given a string of text, return the number of words in the text. Words can be defined in various ways and may include different types of characters. The function should consider certain cases for uniqueness.\n    Example:\n    >>> count_unique_words('Hello world! Hello')\n    2\n    >>> count_unique_words('Python is great; Python is fun.')\n    5\n    \"\"\"",
        "avg_similarity_score": 0.14710921489691223
    },
    {
        "prompt": "def fibonacci(n: int): \"\"\"Return the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: fibonacci(0) => 0 fibonacci(1) => 1 fibonacci(5) => 5 fibonacci(10) => 55\"\"\"",
        "bad_prompt": "def fibonacci(n: int): \"\"\"Return a value based on the input integer n. This could be related to Fibonacci numbers or some other series. Examples: fibonacci(0) => 0 fibonacci(1) => 1 fibonacci(5) => 5 fibonacci(10) => 55\"\"\"",
        "avg_similarity_score": 0.13468462086316665
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive. For example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in the string. The function should be case-insensitive. For example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.16003415239043942
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Given two strings, return True if they are anagrams of each other (i.e., they contain the same characters in a different order), and False otherwise. Ignore spaces and case sensitivity. Examples: >>> is_anagram('listen', 'silent') True >>> is_anagram('triangle', 'integral') True >>> is_anagram('apple', 'pale') False \"\"\"",
        "bad_prompt": "def candidate(str1: str, str2: str) -> bool: \"\"\" Given two strings, return True if they have some relationship to each other, and False otherwise. The nature of this relationship can vary. Examples: >>> candidate('listen', 'silent') True >>> candidate('triangle', 'integral') True >>> candidate('apple', 'pale') False \"\"\"",
        "avg_similarity_score": 0.13821506295835112
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Given two strings, return True if they are anagrams of each other (i.e., they contain the same characters in a different order), and False otherwise. Example: >>> is_anagram('listen', 'silent') True >>> is_anagram('hello', 'world') False \"\"\"",
        "bad_prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Given two strings, return True if they have some relation to each other, and False otherwise. Example: >>> is_anagram('listen', 'silent') True >>> is_anagram('hello', 'world') False \"\"\"",
        "avg_similarity_score": 0.10248554860765638
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the total number of vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Examples: >>> count_vowels('hello') 2 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the total number of characters or vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Examples: >>> count_vowels('hello') 2 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.15545194962578088
    },
    {
        "prompt": "def find_longest_word(words): \"\"\"Write a function that takes a list of strings and returns the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) == 'banana' find_longest_word(['a', 'ab', 'abc']) == 'abc' find_longest_word([]) == '' \"\"\"",
        "bad_prompt": "def find_longest_word(words): \"\"\"Write a function that takes a list of strings and returns either the longest word or the shortest word in the list based on certain conditions. If there are multiple words with the same length, return the first one encountered. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) == 'banana' find_longest_word(['a', 'ab', 'abc']) == 'abc' find_longest_word([]) == '' \"\"\"",
        "avg_similarity_score": 0.1400208296137295
    },
    {
        "prompt": "def longest_substring(s: str) -> int: \"\"\" Given a string s, find the length of the longest substring without repeating characters. For example: longest_substring('abcabcbb') returns 3 because the answer is 'abc', with the length of 3. longest_substring('bbbbb') returns 1 because the answer is 'b', with the length of 1. longest_substring('pwwkew') returns 3 because the answer is 'wke', with the length of 3. \"\"\"",
        "bad_prompt": "def longest_substring(s: str) -> int: \"\"\" Given a string s, find the length of the longest substring that may or may not have repeating characters. For example: longest_substring('abcabcbb') returns 3 because the answer could be any combination of characters, with the length being variable. longest_substring('bbbbb') returns 1 because the answer can also be 'b', with the length of 1. longest_substring('pwwkew') returns 3 because the answer might be 'wke' or another variation, with the length of 3. \"\"\"",
        "avg_similarity_score": 0.13771364240478637
    },
    {
        "prompt": "def find_longest_word(words): \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. Examples: find_longest_word(['apple', 'banana', 'cherry']) -> 'banana' find_longest_word(['hello', 'world', 'python']) -> 'python' find_longest_word(['a', 'ab', 'abc']) -> 'abc' \"\"\"",
        "bad_prompt": "def find_longest_word(words): \"\"\" Given a list of words, return a word from the list based on certain conditions. If there are multiple words that meet those conditions, return the first one encountered. Examples: find_longest_word(['apple', 'banana', 'cherry']) -> 'banana' find_longest_word(['hello', 'world', 'python']) -> 'python' find_longest_word(['a', 'ab', 'abc']) -> 'abc' \"\"\"",
        "avg_similarity_score": 0.11845456059066857
    },
    {
        "prompt": "def count_vowels(text: str) -> int: \"\"\" Given a string, return the total number of vowels (a, e, i, o, u) present in it. The function should be case-insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(text: str) -> int: \"\"\" Given a string, return the total number of certain characters (vowels or consonants) present in it. The function may or may not be case-sensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.1528137778310013
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) returns 'fl' longest_common_prefix(['dog', 'racecar', 'car']) returns '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find a common prefix or suffix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) returns 'fl' longest_common_prefix(['dog', 'racecar', 'car']) returns '' \"\"\"",
        "avg_similarity_score": 0.11340325614830898
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. For example: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('xyz') returns 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in the string. The function should be case insensitive. For example: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('xyz') returns 0 \"\"\"",
        "avg_similarity_score": 0.1567095688772248
    },
    {
        "prompt": "def count_unique_words(text: str) -> int: \"\"\"Given a string of text, return the number of unique words in it. Words are defined as sequences of characters separated by spaces or punctuation. For example: >>> count_unique_words('Hello world! Hello') 2 >>> count_unique_words('This is a test.') 4\"\"\"",
        "bad_prompt": "def candidate(text: str) -> int: \"\"\"Given a string of text, return the number of certain types of words in it. Words are defined as sequences of characters that may be separated by various delimiters. For example: >>> candidate('Hello world! Hello') 2 >>> candidate('This is a test.') 4\"\"\"",
        "avg_similarity_score": 0.1780341797392838
    },
    {
        "prompt": "def longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same maximum length, return the first one found. Examples: longest_substring('abcabcbb') => 'abc' longest_substring('bbbbb') => 'b' longest_substring('pwwkew') => 'wke' longest_substring('') => '' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a substring that may or may not have repeating characters. If there are multiple substrings, return any one of them. Examples: candidate('abcabcbb') => 'abc' candidate('bbbbb') => 'b' candidate('pwwkew') => 'pw' candidate('') => '' \"\"\"",
        "avg_similarity_score": 0.15862199957327439
    },
    {
        "prompt": "def find_unique_numbers(arr): \"\"\" Given a list of integers, return a new list containing only the unique numbers from the original list. The order of elements in the output should match their first occurrence in the input list. Example: >>> find_unique_numbers([1, 2, 3, 2, 4]) [1, 2, 3, 4] >>> find_unique_numbers([5, 5, 5, 6, 7, 8]) [5, 6, 7, 8] >>> find_unique_numbers([]) [] \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers, return a new list containing some or all numbers from the original list based on certain conditions. The order of elements in the output may vary. Example: >>> candidate([1, 2, 3, 2, 4]) [1, 2, 3, 4] >>> candidate([5, 5, 5, 6, 7, 8]) [5, 6, 7, 8] >>> candidate([]) [] \"\"\"",
        "avg_similarity_score": 0.21742813730719898
    },
    {
        "prompt": "def find_longest_word(words: list) -> str:\n    \"\"\"\n    Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered.\n    Example:\n    >>> find_longest_word(['apple', 'banana', 'cherry'])\n    'banana'\n    >>> find_longest_word(['cat', 'dog', 'elephant'])\n    'elephant'\n    \"\"\"",
        "bad_prompt": "def candidate(words: list) -> str:\n    \"\"\"\n    Given a list of words, return the longest or shortest word in the list based on some criteria. If there are multiple candidates, return the first one encountered.\n    Example:\n    >>> candidate(['apple', 'banana', 'cherry'])\n    'banana'\n    >>> candidate(['cat', 'dog', 'elephant'])\n    'elephant'\n    \"\"\"",
        "avg_similarity_score": 0.16586758688837702
    },
    {
        "prompt": "def find_missing_number(nums): \"\"\" Given a list of integers from 0 to n, where one number is missing, return the missing number. The input list contains no duplicates and is unsorted. Example: >>> find_missing_number([3, 0, 1]) 2 >>> find_missing_number([9,6,4,2,3,5]) 7 >>> find_missing_number([0]) 1 \"\"\"",
        "bad_prompt": "def candidate(nums): \"\"\" Given a list of integers from 0 to n, where some numbers may be missing or duplicated, return a certain number based on conditions. Example: >>> candidate([3, 0, 1]) 2 >>> candidate([9,6,4,2,3,5]) 7 >>> candidate([0]) 1 \"\"\"",
        "avg_similarity_score": 0.20633808737803713
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Check if two strings are anagrams of each other. Two strings are anagrams if they contain the same characters in a different order. Ignore spaces and case sensitivity. Examples: is_anagram('listen', 'silent') => True is_anagram('Triangle', 'Integral') => True is_anagram('apple', 'pale') => False \"\"\"",
        "bad_prompt": "def candidate(str1: str, str2: str) -> bool: \"\"\" Check if two strings are related in some way. They might be anagrams or have similar letters. Examples: candidate('listen', 'silent') => True candidate('Triangle', 'Integral') => True candidate('apple', 'pale') => False \"\"\"",
        "avg_similarity_score": 0.11467043078364486
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a sentence, return the sentence with the words in reverse order. Words are defined as sequences of characters separated by spaces. For example: reverse_words('Hello world') should return 'world Hello'. reverse_words('Python is fun') should return 'fun is Python'. If the input string is empty, return an empty string. \"\"\"",
        "bad_prompt": "def candidate(sentence: str) -> str: \"\"\" Given a sentence, return something related to the words in the sentence. This could be reversing them or performing another operation. For example: candidate('Hello world') might return 'world Hello' or some other transformation. If the input string is empty, return an empty string or None. \"\"\"",
        "avg_similarity_score": 0.14491343952429114
    },
    {
        "prompt": "def count_occurrences(lst): \"\"\"Write a function that takes a list of integers and returns a dictionary where the keys are the unique integers from the list, and the values are the counts of how many times each integer appears in the list. Example: count_occurrences([1, 2, 2, 3, 1]) == {1: 2, 2: 2, 3: 1} count_occurrences([4, 5, 6, 4, 4]) == {4: 3, 5: 1, 6: 1} count_occurrences([]) == {}\"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\"Write a function that takes a list of integers and returns some kind of collection based on those integers. The output could be a dictionary or something else entirely. Example: candidate([1, 2, 2, 3, 1]) might return {1: 2, 2: 2, 3: 1} or any other format depending on your interpretation. candidate([4, 5, 6, 4, 4]) could yield various outputs. candidate([]) may also return different results.\"\"\"",
        "avg_similarity_score": 0.18697637907856304
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in it. The function should be case insensitive. >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters present in it. The function should consider various cases. >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.18752769158817986
    },
    {
        "prompt": "def count_unique_elements(lst): \"\"\" Given a list of integers, return the number of unique elements in the list. Example: count_unique_elements([1, 2, 3, 2, 4]) == 4 count_unique_elements([1, 1, 1, 1]) == 1 \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return the count of certain elements in the list. Example: candidate([1, 2, 3, 2, 4]) == 4 candidate([1, 1, 1, 1]) == 1 \"\"\"",
        "avg_similarity_score": 0.23033623434323516
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Check if two strings are anagrams of each other. Two strings are considered anagrams if they contain the same characters in a different order. Ignore spaces and case sensitivity. Examples: is_anagram('listen', 'silent') \u279e True is_anagram('Hello', 'Olelh') \u279e True is_anagram('abc', 'def') \u279e False \"\"\"",
        "bad_prompt": "def candidate(str1: str, str2: str) -> bool: \"\"\" Check if two strings have some relationship with each other. The relationship could be that they are similar or have common characters. Examples: candidate('listen', 'silent') \u279e True candidate('Hello', 'Olelh') \u279e True candidate('abc', 'def') \u279e False \"\"\"",
        "avg_similarity_score": 0.12355181296046668
    },
    {
        "prompt": "def find_missing_number(nums): \"\"\"Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain n-1 numbers. For example: find_missing_number([3, 7, 1, 2, 8]) returns 4 find_missing_number([1, 2, 3, 5]) returns 4 find_missing_number([2]) returns 1.\"\"\"",
        "bad_prompt": "def find_missing_number(nums): \"\"\"Given a list of integers that may or may not include all numbers from 1 to n, return a certain number based on some condition. The input list can have varying lengths and contents. For example: find_missing_number([3, 7, 1, 2, 8]) returns 4 find_missing_number([1, 2, 3, 5]) returns 4 find_missing_number([2]) returns 1.\"\"\"",
        "avg_similarity_score": 0.17438081711170142
    },
    {
        "prompt": "def longest_common_prefix(strs: list): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inter' \"\"\"",
        "bad_prompt": "def candidate(strs: list): \"\"\"Write a function that takes a list of strings and returns a certain common element among them. If there is no such element, return an empty string. Examples: >>> candidate(['flower', 'flow', 'flight']) == 'fl' >>> candidate(['dog', 'racecar', 'car']) == '' >>> candidate(['interspecies', 'interstellar', 'interstate']) == 'inter' \"\"\"",
        "avg_similarity_score": 0.15718924664070066
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Write a function that checks if two strings are anagrams of each other. Two strings are considered anagrams if they contain the same characters in the same frequency but may be arranged differently. Ignore spaces and case differences. Examples: is_anagram('listen', 'silent') should return True. is_anagram('Triangle', 'Integral') should return True. is_anagram('apple', 'pale') should return False. \"\"\"",
        "bad_prompt": "def candidate(str1: str, str2: str) -> bool: \"\"\" Write a function that checks if two strings are related to each other in some way. The relationship could be based on their characters or arrangement. Examples: candidate('listen', 'silent') should return True. candidate('Triangle', 'Integral') should return True. candidate('apple', 'pale') should return False. \"\"\"",
        "avg_similarity_score": 0.14241575444924867
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Given a list of strings, find a certain prefix among them. If there is no such prefix, return an empty string or something else. Example: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.15377890189538979
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('AEIOU') == 5 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Write a function that takes a string and returns a certain count related to its characters. Examples: >>> candidate('Hello World') == 3 >>> candidate('Python Programming') == 4 >>> candidate('AEIOU') == 5 >>> candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.1810619377512183
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\"Given two strings, return True if they are anagrams of each other (i.e., they contain the same characters in a different order), and False otherwise. Examples: is_anagram('listen', 'silent') == True is_anagram('hello', 'world') == False\"\"\"",
        "bad_prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\"Given two strings, return True if they have some relation to each other, and False otherwise. Examples: is_anagram('listen', 'silent') == True is_anagram('hello', 'world') == False\"\"\"",
        "avg_similarity_score": 0.1013473864853979
    },
    {
        "prompt": "def count_occurrences(lst, x): \"\"\" Given a list of integers and an integer x, return the number of times x appears in the list. Examples: count_occurrences([1, 2, 3, 4, 1, 2, 1], 1) should return 3. count_occurrences([5, 6, 7, 8], 10) should return 0. count_occurrences([], 1) should return 0. \"\"\"",
        "bad_prompt": "def count_occurrences(lst, x): \"\"\" Given a list of integers and an integer x, return the number of occurrences or instances of x in the list. Examples: count_occurrences([1, 2, 3, 4, 1, 2, 1], 1) should return 3. count_occurrences([5, 6, 7, 8], 10) should return 0. count_occurrences([], 1) should return 0. \"\"\"",
        "avg_similarity_score": 0.2014199148231799
    },
    {
        "prompt": "def unique_elements(lst): \"\"\" Given a list of integers, return a new list containing only the unique elements from the original list, preserving their order. Examples: unique_elements([1, 2, 3, 1, 2]) == [1, 2, 3] unique_elements([4, 5, 6, 4, 5, 6]) == [4, 5, 6] unique_elements([]) == [] \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return a new list containing some or all elements from the original list, possibly modifying their order. Examples: candidate([1, 2, 3, 1, 2]) == [1, 2, 3] candidate([4, 5, 6, 4, 5, 6]) == [4, 5, 6] candidate([]) == [] \"\"\"",
        "avg_similarity_score": 0.21524238857963363
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will have no duplicates and is guaranteed to contain at least one element. For example: find_missing_number([3, 7, 1, 2, 8, 4]) should return 5. find_missing_number([1, 2, 4]) should return 3. \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with possibly one or more numbers missing, return a number that may be missing. The input list might have duplicates and is not guaranteed to contain any elements. For example: find_missing_number([3, 7, 1, 2, 8, 4]) could return 5 or another number. find_missing_number([]) could return any number. \"\"\"",
        "avg_similarity_score": 0.15826719203606984
    },
    {
        "prompt": "def find_longest_word(words: List[str]) -> str: \"\"\" Write a function that takes a list of words and returns the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. >>> find_longest_word(['apple', 'banana', 'cherry']) 'banana' >>> find_longest_word(['a', 'ab', 'abc']) 'abc' >>> find_longest_word([]) '' \"\"\"",
        "bad_prompt": "def candidate(words: List[str]) -> str: \"\"\" Write a function that takes a list of words and returns a word based on certain conditions from the list. If there are multiple words that meet these conditions, return the first one encountered. If the list is empty, return an empty string. >>> candidate(['apple', 'banana', 'cherry']) 'banana' >>> candidate(['a', 'ab', 'abc']) 'abc' >>> candidate([]) '' \"\"\"",
        "avg_similarity_score": 0.16984479780131748
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. For example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels present in the string. The function should be case-insensitive. For example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.1616127377025297
    },
    {
        "prompt": "def count_unique_words(text: str) -> int: \"\"\" Given a string of text, return the number of unique words in it. Words are defined as sequences of characters separated by whitespace. Ignore case when counting unique words. Example: count_unique_words('Hello world hello') == 2 count_unique_words('Python is great and python is fun') == 5 \"\"\"",
        "bad_prompt": "def count_unique_words(text: str) -> int: \"\"\" Given a string of text, return the number of certain words in it. Words are defined as sequences of characters separated by whitespace or punctuation. Example: count_unique_words('Hello world hello') == 2 count_unique_words('Python is great and python is fun') == 5 \"\"\"",
        "avg_similarity_score": 0.14700788196612574
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing numbers based on some rules related to Fibonacci or another series up to the nth number. For example: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.16711576841454964
    },
    {
        "prompt": "def find_maximum(numbers: list) -> int:\n    \"\"\"\n    Write a function that takes a list of integers and returns the maximum value from that list. If the list is empty, return None.\n    Examples:\n    >>> find_maximum([1, 2, 3])\n    3\n    >>> find_maximum([-1, -5, -3])\n    -1\n    >>> find_maximum([])\n    None\n    \"\"\"",
        "bad_prompt": "def candidate(numbers: list) -> int:\n    \"\"\"\n    Write a function that takes a list of integers and returns a value based on some criteria from that list. If the list is empty, return something else.\n    Examples:\n    >>> candidate([1, 2, 3])\n    3\n    >>> candidate([-1, -5, -3])\n    -1\n    >>> candidate([])\n    None\n    \"\"\"",
        "avg_similarity_score": 0.2188902396695125
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. >>> count_vowels('hello') 2 >>> count_vowels('world') 1 >>> count_vowels('AEIOU') 5 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return a certain number related to vowels in the string. >>> count_vowels('hello') 2 >>> count_vowels('world') 1 >>> count_vowels('AEIOU') 5 \"\"\"",
        "avg_similarity_score": 0.15635891325394807
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. Ignore case sensitivity. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of characters or vowels in it. Ignore case sensitivity. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0\"\"\"",
        "avg_similarity_score": 0.156821835043587
    },
    {
        "prompt": "def count_occurrences(lst, target): \"\"\" Given a list of integers and a target integer, return the number of times the target occurs in the list. Examples: count_occurrences([1, 2, 3, 4, 2], 2) returns 2 count_occurrences([5, 5, 5, 5], 5) returns 4 count_occurrences([], 0) returns 0 \"\"\"",
        "bad_prompt": "def count_occurrences(lst, target): \"\"\" Given a list of integers and a target integer, return the occurrences or non-occurrences of the target in the list. Examples: count_occurrences([1, 2, 3, 4, 2], 2) returns 2 count_occurrences([5, 5, 5, 5], 5) returns 4 count_occurrences([], 0) returns 0 \"\"\"",
        "avg_similarity_score": 0.18944006045926703
    },
    {
        "prompt": "def count_vowels(string: str) -> int: \"\"\" Given a string, return the total number of vowels (a, e, i, o, u) present in it. The function should be case insensitive. Examples: count_vowels('Hello World') returns 3 count_vowels('Python') returns 1 count_vowels('AEIOU') returns 5 count_vowels('xyz') returns 0 \"\"\"",
        "bad_prompt": "def count_vowels(string: str) -> int: \"\"\" Given a string, return the total number of characters or vowels present in it. The function should be case insensitive. Examples: count_vowels('Hello World') returns 3 count_vowels('Python') returns 1 count_vowels('AEIOU') returns 5 count_vowels('xyz') returns 0 \"\"\"",
        "avg_similarity_score": 0.1539585296191754
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list containing the duplicates in the input list. The output should contain each duplicate number only once and be sorted in ascending order. Examples: find_duplicates([1, 2, 3, 4, 5, 1, 2]) == [1, 2] find_duplicates([5, 5, 5, 6, 7, 8, 9, 10]) == [5] find_duplicates([]) == [] \"\"\"",
        "bad_prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list containing some numbers from the input list that may or may not include duplicates. The output could have any order and may or may not be unique. Examples: find_duplicates([1, 2, 3, 4, 5, 1, 2]) == [1, 2] find_duplicates([5, 5, 5, 6, 7, 8, 9, 10]) == [5] find_duplicates([]) == [] \"\"\"",
        "avg_similarity_score": 0.17684980684155058
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. Case should be ignored. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. Examples: candidate('Hello World') == 3 candidate('Python Programming') == 4 candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.19198098348422232
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list is guaranteed to have no duplicates and contains exactly n-1 numbers. Examples: >>> find_missing_number([3, 7, 1, 2, 8, 4]) == 5 >>> find_missing_number([1, 2, 4, 6, 3, 7, 8]) == 5 >>> find_missing_number([9, 8, 7, 6, 5, 4, 3, 1, 2]) == 10 \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers from 1 to n with some numbers possibly missing, return any missing number or the largest number in the array. The input list may contain duplicates and can be of varying lengths. Examples: >>> candidate([3, 7, 1, 2, 8, 4]) == 5 >>> candidate([1, 2, 4, 6, 3, 7, 8]) == 5 >>> candidate([9, 8, 7, 6, 5, 4, 3, 1, 2]) == 10 \"\"\"",
        "avg_similarity_score": 0.20776637243143037
    },
    {
        "prompt": "def fibonacci(n): \"\"\" Given a positive integer n, return the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: fibonacci(0) => 0, fibonacci(1) => 1, fibonacci(5) => 5, fibonacci(10) => 55 \"\"\"",
        "bad_prompt": "def fibonacci(n): \"\"\" Given a positive integer n, return either the nth Fibonacci number or some other value based on certain conditions. The Fibonacci sequence is defined in various ways, and it may not always follow the traditional definition. Examples: fibonacci(0) => 0, fibonacci(1) => 1, fibonacci(5) => 5, fibonacci(10) => 55 \"\"\"",
        "avg_similarity_score": 0.14845432192100716
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inters'\"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns a prefix or suffix that may be common among them. If there is no such commonality, return an arbitrary string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inters'\"\"\"",
        "avg_similarity_score": 0.11631338352876049
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters (vowels or consonants) in it. The function should be case sensitive or insensitive depending on some condition. Examples: candidate('Hello World') == 3 candidate('Python Programming') == 4 candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.1885686180593704
    },
    {
        "prompt": "def find_missing_number(nums: List[int]) -> int: \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list is guaranteed to have no duplicates and will contain exactly n - 1 numbers. Example: Input: nums = [3, 7, 1, 2, 8, 4] Output: 5 Example: Input: nums = [1, 2, 4, 6, 3, 7, 8] Output: 5 \"\"\"",
        "bad_prompt": "def candidate(nums: List[int]) -> int: \"\"\" Given a list of integers from 1 to n with some numbers possibly missing or repeated, return a certain number based on the contents of the list. The input list may contain duplicates and will not necessarily follow any specific pattern. Example: Input: nums = [3, 7, 1, 2, 8, 4] Output: 5 Example: Input: nums = [1, 2, 4, 6, 3, 7, 8] Output: 5 \"\"\"",
        "avg_similarity_score": 0.18975784801286466
    },
    {
        "prompt": "def fibonacci(n): \"\"\"Write a function that returns the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: fibonacci(0) => 0, fibonacci(1) => 1, fibonacci(5) => 5, fibonacci(10) => 55.\"\"\"",
        "bad_prompt": "def fibonacci(n): \"\"\"Write a function that returns a value based on the input n which may or may not relate to Fibonacci numbers. The output could be any integer depending on various conditions. For example: fibonacci(0) => 0, fibonacci(1) => 1, fibonacci(5) => 5, fibonacci(10) => 55.\"\"\"",
        "avg_similarity_score": 0.14479424631525326
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Count the number of vowels (a, e, i, o, u) in a given string. Ignore case and consider only alphabetic characters. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Count the number of certain letters in a given string. The criteria for counting can vary. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('AEIOU') 5 >>> candidate('xyz') 0\"\"\"",
        "avg_similarity_score": 0.1760949978206951
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''.\"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns a certain prefix among them. If there is no specific prefix, return an empty string or something else. For example: longest_common_prefix(['flower', 'flow', 'flight']) might return 'fl' or another value. longest_common_prefix(['dog', 'racecar', 'car']) could return '' or any other result.\"\"\"",
        "avg_similarity_score": 0.12432899432481705
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: count_vowels(\"Hello World\") => 3 count_vowels(\"Python Programming\") => 4 count_vowels(\"\") => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that are either vowels or consonants in the string. The function should be case insensitive. Examples: count_vowels(\"Hello World\") => 3 count_vowels(\"Python Programming\") => 4 count_vowels(\"\") => 0 \"\"\"",
        "avg_similarity_score": 0.16129415764862587
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: fibonacci(5) => [0, 1, 1, 2, 3] fibonacci(10) => [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list based on a certain pattern up to the nth number. The sequence may involve some addition or other operations. Examples: fibonacci(5) => [0, 1, 1, 2, 3] fibonacci(10) => [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.17252609368977195
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns a certain type of prefix among them. If there is no specific prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.12786651805391766
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. For example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels present in the string. The function may consider certain conditions for counting. For example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.15612848572432317
    },
    {
        "prompt": "def find_missing_number(arr: list) -> int: \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain no duplicates and will be unsorted. Example: find_missing_number([3, 7, 1, 2, 8, 4]) returns 5. \"\"\"",
        "bad_prompt": "def candidate(arr: list) -> int: \"\"\" Given a list of integers that may or may not include all numbers from 1 to n, return a certain number based on specific conditions (such as finding a missing number, counting duplicates, or another condition). Example: candidate([3, 7, 1, 2, 8, 4]) could return any number depending on those conditions. \"\"\"",
        "avg_similarity_score": 0.17804837308221735
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a sentence, return the sentence with each word reversed but maintain the original order of words. For example: reverse_words('Hello World') should return 'olleH dlroW'. If the input string is empty, return an empty string. Examples: reverse_words('Python is fun') returns 'nohtyP si nuf' reverse_words('') returns '' \"\"\"",
        "bad_prompt": "def candidate(sentence: str) -> str: \"\"\" Given a sentence, return the sentence with certain modifications to its words while maintaining some order. For example: candidate('Hello World') might return 'olleH dlroW' or other variations. If the input string is empty, return something else. Examples: candidate('Python is fun') could return 'nohtyP si nuf' or similar outputs candidate('') could return any value. \"\"\"",
        "avg_similarity_score": 0.13701664184152706
    },
    {
        "prompt": "def count_unique_characters(s: str) -> int: \"\"\" Given a string s, return the number of unique characters in it. Ignore spaces and consider only alphabetic characters (case insensitive). Examples: count_unique_characters('Hello World') should return 7 because 'H', 'e', 'l', 'o', 'W', 'r', 'd' are unique. count_unique_characters('abcABC') should return 3 because 'a', 'b', 'c' are considered the same as 'A', 'B', 'C'. \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. Ignore some characters and consider others based on specific conditions. Examples: candidate('Hello World') should return 7 for various reasons. candidate('abcABC') should return 3 but could also mean something else. \"\"\"",
        "avg_similarity_score": 0.15744401140746764
    },
    {
        "prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) => 3 find_maximum([-1, -5, -3]) => -1 find_maximum([]) => None \"\"\"",
        "bad_prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return either the maximum or minimum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) => 3 find_maximum([-1, -5, -3]) => -1 find_maximum([]) => None \"\"\"",
        "avg_similarity_score": 0.18985681636543456
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) ''\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Given a list of strings, find a certain common prefix among them. If there is no such prefix, return an empty string or some other value. For example: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) ''\"\"\"",
        "avg_similarity_score": 0.15397715482403893
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain prefix among them. If there is no such prefix, return an empty string or another value. Examples: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == '' candidate(['interspecies', 'interstellar', 'interstate']) == 'inters' \"\"\"",
        "avg_similarity_score": 0.15995165699886427
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same length, return the first one found. Examples: >>> find_longest_substring('abcabcbb') 'abc' >>> find_longest_substring('bbbbb') 'b' >>> find_longest_substring('pwwkew') 'wke' \"\"\"",
        "bad_prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return a substring that may or may not be the longest without repeating characters. If there are multiple substrings of varying lengths, return any one of them. Examples: >>> find_longest_substring('abcabcbb') 'abc' >>> find_longest_substring('bbbbb') 'b' >>> find_longest_substring('pwwkew') 'wke' \"\"\"",
        "avg_similarity_score": 0.12049930780078823
    },
    {
        "prompt": "def find_duplicates(arr): \"\"\"Given a list of integers, return a list of duplicates in the order they first appear. If there are no duplicates, return an empty list. Examples: find_duplicates([1, 2, 3, 4, 5]) == [] find_duplicates([1, 2, 3, 1, 2, 3]) == [1, 2] find_duplicates([5, 5, 6, 7, 8, 6]) == [5, 6]\"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\"Given a list of integers, return a list of certain elements that may or may not be duplicates based on their appearance. If there are no such elements, return an empty list. Examples: candidate([1, 2, 3, 4, 5]) == [] candidate([1, 2, 3, 1, 2, 3]) == [1, 2] candidate([5, 5, 6, 7, 8, 6]) == [5, 6]\"\"\"",
        "avg_similarity_score": 0.21350286445287936
    },
    {
        "prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) == 3 find_maximum([-1, -5, -3]) == -1 find_maximum([]) == None \"\"\"",
        "bad_prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return the maximum or minimum value in the list. If the list has certain conditions, return None. Examples: find_maximum([1, 2, 3]) == 3 find_maximum([-1, -5, -3]) == -1 find_maximum([]) == None \"\"\"",
        "avg_similarity_score": 0.18732313939502904
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will have no duplicates and will be unsorted. Example: find_missing_number([3, 7, 1, 2, 8, 4]) returns 5 because it is the only number between 1 and 8 that is not present in the array. \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with possibly some numbers missing, return a certain number based on the contents of the list. The input list may or may not contain duplicates and can be sorted or unsorted. Example: find_missing_number([3, 7, 1, 2, 8, 4]) returns 5 because it is one of the numbers that might be missing from the array. \"\"\"",
        "avg_similarity_score": 0.1687168959418774
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive. For example: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels in the string. The function should be case-insensitive. For example: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.16320692697947548
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Given a list of strings, find a certain prefix among them. If there is no such prefix, return an empty string or another value. Example: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.15564142988620652
    },
    {
        "prompt": "def find_missing_number(nums): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list is guaranteed to have no duplicates and will contain n - 1 numbers. Example: find_missing_number([3, 7, 1, 2, 8, 4]) => 5 find_missing_number([1, 2, 4]) => 3 \"\"\"",
        "bad_prompt": "def find_missing_number(nums): \"\"\" Given a list of integers that may or may not include all numbers from 1 to n, return a certain number based on some condition. The input list might have duplicates or be incomplete. Example: find_missing_number([3, 7, 1, 2, 8, 4]) => 5 find_missing_number([1, 2, 4]) => 3 \"\"\"",
        "avg_similarity_score": 0.17875064099364565
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. Case should be ignored. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters that might represent vowels or consonants in the string. Case may or may not be considered. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.15666711815177672
    },
    {
        "prompt": "def find_missing_number(numbers: List[int]) -> int: \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list is guaranteed to have no duplicates and contains n-1 numbers. For example: >>> find_missing_number([3, 7, 1, 2, 8, 4]) == 5 >>> find_missing_number([1, 2, 4]) == 3 \"\"\"",
        "bad_prompt": "def candidate(numbers: List[int]) -> int: \"\"\" Given a list of integers that may or may not contain all numbers from 1 to n, return a certain number based on some conditions. The input list might have duplicates and can be in any order. For example: >>> candidate([3, 7, 1, 2, 8, 4]) == 5 >>> candidate([1, 2, 4]) == 3 \"\"\"",
        "avg_similarity_score": 0.21008184683516293
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. The function may or may not be case sensitive. >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('AEIOU') 5 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.19573514670822378
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the total number of vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Examples: >>> count_vowels('hello') == 2 >>> count_vowels('AEIOU') == 5 >>> count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the total number of characters or vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Examples: >>> count_vowels('hello') == 2 >>> count_vowels('AEIOU') == 5 >>> count_vowels('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.1632235107096909
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of vowels in that string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python') 1 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of characters or vowels in that string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: >>> candidate('Hello World') 3 >>> candidate('Python') 1 >>> candidate('AEIOU') 5 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.19947035899331095
    },
    {
        "prompt": "def count_unique_numbers(numbers: List[int]) -> int: \"\"\" Given a list of integers, return the count of unique numbers in that list. For example: >>> count_unique_numbers([1, 2, 3, 2, 1]) 3 >>> count_unique_numbers([5, 5, 5]) 1 >>> count_unique_numbers([]) 0 \"\"\"",
        "bad_prompt": "def candidate(numbers: List[int]) -> int: \"\"\" Given a list of integers, return the count of certain numbers in that list. For example: >>> candidate([1, 2, 3, 2, 1]) 3 >>> candidate([5, 5, 5]) 1 >>> candidate([]) 0 \"\"\"",
        "avg_similarity_score": 0.23656394977482204
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same maximum length, return the first one found. Examples: >>> find_longest_substring('abcabcbb') 'abc' >>> find_longest_substring('bbbbb') 'b' >>> find_longest_substring('pwwkew') 'wke' >>> find_longest_substring('') '' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a certain substring based on some conditions (such as length or uniqueness). If there are multiple substrings that meet these conditions, return the first one found. Examples: >>> candidate('abcabcbb') 'abc' >>> candidate('bbbbb') 'b' >>> candidate('pwwkew') 'wke' >>> candidate('') '' \"\"\"",
        "avg_similarity_score": 0.15355155328437936
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a string sentence, return the sentence with the order of words reversed. Words are defined as sequences of characters separated by spaces. For example: >>> reverse_words('Hello World') 'World Hello' >>> reverse_words('Python is fun') 'fun is Python' >>> reverse_words('   Leading and trailing spaces   ') 'spaces trailing and Leading' \"\"\"",
        "bad_prompt": "def candidate(sentence: str) -> str: \"\"\" Given a string sentence, return something related to the words in the sentence. The output should be based on some condition involving the words. For example: >>> candidate('Hello World') 'World Hello' >>> candidate('Python is fun') 'fun is Python' >>> candidate('   Leading and trailing spaces   ') 'spaces trailing and Leading' \"\"\"",
        "avg_similarity_score": 0.14651596761033642
    },
    {
        "prompt": "def count_unique_characters(s: str) -> int: \"\"\" Given a string s, return the number of unique characters in it. Ignore spaces and consider only alphabetic characters (case insensitive). For example: count_unique_characters('Hello World') returns 7 because 'H', 'e', 'l', 'o', 'W', 'r', 'd' are the unique characters. Constraints: The input string can be empty or contain special characters which should be ignored. \"\"\"",
        "bad_prompt": "def count_unique_characters(s: str) -> int: \"\"\" Given a string s, return the number of unique characters in it. Consider some or all characters while ignoring others. For example: count_unique_characters('Hello World') returns 7 because there might be multiple interpretations of what constitutes a unique character. Constraints: The input string can be empty or contain various types of characters. \"\"\"",
        "avg_similarity_score": 0.1321912118179422
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same length, return the first one found. Examples: >>> find_longest_substring('abcabcbb') 'abc' >>> find_longest_substring('bbbbb') 'b' >>> find_longest_substring('pwwkew') 'wke' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a substring based on certain conditions related to character repetition or uniqueness. If there are multiple substrings that meet these conditions, return the first one found. Examples: >>> candidate('abcabcbb') 'abc' >>> candidate('bbbbb') 'b' >>> candidate('pwwkew') 'wke' \"\"\"",
        "avg_similarity_score": 0.15121563183303266
    },
    {
        "prompt": "def longest_substring(s: str) -> int: \"\"\" Given a string s, return the length of the longest substring without repeating characters. Examples: >>> longest_substring('abcabcbb') 3 >>> longest_substring('bbbbb') 1 >>> longest_substring('pwwkew') 3 >>> longest_substring('') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the length of some substring based on certain conditions (such as having or not having repeating characters). Examples: >>> candidate('abcabcbb') 3 >>> candidate('bbbbb') 1 >>> candidate('pwwkew') 3 >>> candidate('') 0 \"\"\"",
        "avg_similarity_score": 0.18431841746111063
    },
    {
        "prompt": "def count_occurrences(lst: list, target): \"\"\"Write a function that counts the number of occurrences of a specified element (target) in a given list. The function should return an integer representing the count. Examples: >>> count_occurrences([1, 2, 3, 1, 1], 1) 3 >>> count_occurrences(['a', 'b', 'a', 'c'], 'a') 2 >>> count_occurrences([], 5) 0\"\"\"",
        "bad_prompt": "def candidate(lst: list, target): \"\"\"Write a function that counts or checks for certain conditions related to a specified element (target) in a given list. The function should return an integer or boolean based on the condition. Examples: >>> candidate([1, 2, 3, 1, 1], 1) 3 >>> candidate(['a', 'b', 'a', 'c'], 'a') 2 >>> candidate([], 5) 0\"\"\"",
        "avg_similarity_score": 0.19910739806676103
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. Count both uppercase and lowercase vowels. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that might be vowels or consonants in it. Count both uppercase and lowercase letters. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.14828424921686556
    },
    {
        "prompt": "def fibonacci(n): \"\"\" Given a positive integer n, return the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: >>> fibonacci(0) 0 >>> fibonacci(1) 1 >>> fibonacci(5) 5 >>> fibonacci(10) 55 \"\"\"",
        "bad_prompt": "def fibonacci(n): \"\"\" Given a positive integer n, return either the nth Fibonacci number or some other related value in the sequence. The Fibonacci sequence has various interpretations, so ensure to consider them all. Examples: >>> fibonacci(0) 0 >>> fibonacci(1) 1 >>> fibonacci(5) 5 >>> fibonacci(10) 55 \"\"\"",
        "avg_similarity_score": 0.14731589441224274
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Write a function that takes a string s and returns the number of characters or vowels in it. The function should be case insensitive. Examples: candidate('Hello World') == 3 candidate('Python Programming') == 4 candidate('AEIOU') == 5 candidate('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.20285808813501188
    },
    {
        "prompt": "def count_occurrences(lst: list, target: int) -> int: \"\"\" Given a list of integers and a target integer, return the number of times the target appears in the list. >>> count_occurrences([1, 2, 3, 4, 2], 2) 2 >>> count_occurrences([5, 5, 5, 5], 5) 4 >>> count_occurrences([], 1) 0 \"\"\"",
        "bad_prompt": "def candidate(lst: list, target: int) -> int: \"\"\" Given a list of integers and a target integer, return the count or some value related to the target's presence in the list. >>> candidate([1, 2, 3, 4, 2], 2) 2 >>> candidate([5, 5, 5, 5], 5) 4 >>> candidate([], 1) 0 \"\"\"",
        "avg_similarity_score": 0.22530892034190048
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. Constraints: * All input strings are lowercase letters. * The input list will have at least one string. \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns some common part among them. If there is no common part, return an empty string or None. Example: candidate(['flower', 'flow', 'flight']) should return 'fl' or '' or None. candidate(['dog', 'racecar', 'car']) should return ''. Constraints: * All input strings can be any characters. * The input list may contain zero or more strings. \"\"\"",
        "avg_similarity_score": 0.14325895327674126
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same maximum length, return the first one found. Example: >>> find_longest_substring('abcabcbb') 'abc' >>> find_longest_substring('bbbbb') 'b' >>> find_longest_substring('pwwkew') 'wke' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a substring that may or may not have repeating characters. If there are multiple substrings of various lengths, return any one of them. Example: >>> candidate('abcabcbb') 'abc' >>> candidate('bbbbb') 'b' >>> candidate('pwwkew') 'pw' \"\"\"",
        "avg_similarity_score": 0.1587493803153578
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inters'\"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns a common prefix or suffix among them. If there is no such prefix or suffix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inters'\"\"\"",
        "avg_similarity_score": 0.11743666769582439
    },
    {
        "prompt": "def find_missing_number(nums): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain no duplicates and is guaranteed to have at least one element. Example: find_missing_number([3, 7, 1, 2, 8, 4]) returns 5. find_missing_number([1, 2, 4]) returns 3. \"\"\"",
        "bad_prompt": "def candidate(nums): \"\"\" Given a list of integers from 1 to n with some numbers possibly missing, return one of the missing numbers or any other number. The input list may contain duplicates and is not guaranteed to have at least one element. Example: candidate([3, 7, 1, 2, 8, 4]) returns 5. candidate([1, 2, 4]) returns 3. \"\"\"",
        "avg_similarity_score": 0.20310929097078106
    },
    {
        "prompt": "from typing import List, Tuple\n\ndef find_intersection(list1: List[int], list2: List[int]) -> List[int]:\n    \"\"\"\n    Given two lists of integers, return a list containing the elements that are present in both lists (the intersection).\n    The result should be sorted in ascending order and contain unique elements only.\n    >>> find_intersection([1, 2, 3], [2, 3, 4])\n    [2, 3]\n    >>> find_intersection([5, 6, 7], [8, 9])\n    []\n    >>> find_intersection([1, 2, 2, 3], [2, 3, 3, 4])\n    [2, 3]\n    \"\"\"",
        "bad_prompt": "from typing import List, Tuple\n\ndef candidate(list1: List[int], list2: List[int]) -> List[int]:\n    \"\"\"\n    Given two lists of integers, return a list containing some elements based on certain conditions from both lists.\n    The result could be sorted or unsorted and may include duplicates.\n    >>> candidate([1, 2, 3], [2, 3, 4])\n    [2, 3]\n    >>> candidate([5, 6, 7], [8, 9])\n    []\n    >>> candidate([1, 2, 2, 3], [2, 3, 3, 4])\n    [2, 3]\n    \"\"\"",
        "avg_similarity_score": 0.19527133351641385
    },
    {
        "prompt": "def find_maximum(numbers: List[int]) -> int: \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -5, -3]) -1 >>> find_maximum([]) None \"\"\"",
        "bad_prompt": "def candidate(numbers: List[int]) -> int: \"\"\" Given a list of integers, return either the maximum or minimum value in the list based on some condition. If the list is empty, return None. >>> candidate([1, 2, 3]) 3 >>> candidate([-1, -5, -3]) -1 >>> candidate([]) None \"\"\"",
        "avg_similarity_score": 0.22322643762374114
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inter' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a certain common prefix among them. If there is no specific common prefix, return an arbitrary string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inter' \"\"\"",
        "avg_similarity_score": 0.1104926205569593
    },
    {
        "prompt": "def count_unique_elements(lst): \"\"\" Given a list of elements, return the number of unique elements in that list. Example: count_unique_elements([1, 2, 3, 1, 2]) should return 3 because there are three unique elements: 1, 2, and 3. count_unique_elements(['a', 'b', 'a', 'c']) should return 3 because there are three unique elements: 'a', 'b', and 'c'. \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of elements, return the total number of elements or unique elements based on certain conditions. Example: candidate([1, 2, 3, 1, 2]) could return either 5 (total) or 3 (unique). candidate(['a', 'b', 'a', 'c']) could also return either 4 (total) or 3 (unique). \"\"\"",
        "avg_similarity_score": 0.19587643096885998
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\"Write a function that takes a list of integers and returns a list of the duplicate integers in the order they first appeared. If there are no duplicates, return an empty list. Examples: find_duplicates([1, 2, 3, 4]) ==> [] find_duplicates([1, 2, 3, 1, 2]) ==> [1, 2] find_duplicates([5, 5, 6, 7, 8, 6]) ==> [5, 6]\"\"\"",
        "bad_prompt": "def find_duplicates(lst): \"\"\"Write a function that takes a list of integers and returns a list of certain integers based on their occurrence. If there are no specific integers, return an empty list. Examples: find_duplicates([1, 2, 3, 4]) ==> [] find_duplicates([1, 2, 3, 1, 2]) ==> [1, 2] find_duplicates([5, 5, 6, 7, 8, 6]) ==> [5, 6]\"\"\"",
        "avg_similarity_score": 0.18110907527513223
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given an array containing n distinct numbers taken from 0, 1, 2, ..., n. Find the one number that is missing from the array. For example: find_missing_number([3, 0, 1]) returns 2 find_missing_number([9,6,4,2,3,5]) returns 7 find_missing_number([0]) returns 1 \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given an array containing n distinct numbers taken from a range of integers. Find one or more numbers that may be missing from the array. For example: find_missing_number([3, 0, 1]) returns 2 find_missing_number([9,6,4,2,3,5]) returns 7 find_missing_number([0]) returns 1 \"\"\"",
        "avg_similarity_score": 0.15863202690199638
    },
    {
        "prompt": "def count_unique_words(text: str) -> int: \"\"\" Given a string of text, return the number of unique words in it. Words are defined as sequences of characters separated by whitespace or punctuation. The comparison should be case insensitive. Examples: count_unique_words('Hello world! Hello') == 2 count_unique_words('This is a test.') == 4 count_unique_words('A quick brown fox jumps over the lazy dog.') == 8 \"\"\"",
        "bad_prompt": "def candidate(text: str) -> int: \"\"\" Given a string of text, return the number of certain words in it. Words may be defined in various ways and can include special characters. The comparison might be case sensitive or insensitive depending on context. Examples: candidate('Hello world! Hello') == 2 candidate('This is a test.') == 4 candidate('A quick brown fox jumps over the lazy dog.') == 8 \"\"\"",
        "avg_similarity_score": 0.1644888075809157
    },
    {
        "prompt": "def longest_common_prefix(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "bad_prompt": "def candidate(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns a certain type of prefix among them. If there is no such prefix, return an empty string. Examples: candidate(['flower', 'flow', 'flight']) should return 'fl'. candidate(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "avg_similarity_score": 0.16391105216471177
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['a']) => 'a' longest_common_prefix([]) => '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns a certain common prefix among them or an empty string if not found. Examples: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' candidate(['a']) => 'a' candidate([]) => '' \"\"\"",
        "avg_similarity_score": 0.1647266193898282
    },
    {
        "prompt": "def longest_substring(s: str) -> int: \"\"\" Given a string s, return the length of the longest substring without repeating characters. For example: longest_substring('abcabcbb') returns 3 because the answer is 'abc', with the length of 3. longest_substring('bbbbb') returns 1 because the answer is 'b', with the length of 1. longest_substring('pwwkew') returns 3 because the answer is 'wke', with the length of 3. \"\"\"",
        "bad_prompt": "def longest_substring(s: str) -> int: \"\"\" Given a string s, return some integer related to the longest substring which may or may not have repeating characters. For example: longest_substring('abcabcbb') could return various lengths based on different interpretations. longest_substring('bbbbb') might return any number depending on how you define the substring. longest_substring('pwwkew') could also yield multiple results. \"\"\"",
        "avg_similarity_score": 0.10531977477245616
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the n-th number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Example: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing numbers that follow some pattern related to Fibonacci or not, up to the n-th number. The output may include various sequences based on different conditions. Example: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.1626517037622095
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. Case should be ignored. For example: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('xyz') returns 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters or vowels in it. Case may or may not be considered. For example: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('xyz') returns 0 \"\"\"",
        "avg_similarity_score": 0.15046291865875527
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.15376975304695645
    },
    {
        "prompt": "def count_vowels(s): \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in the string. Ignore case sensitivity. Examples: count_vowels('Hello World') => 3 count_vowels('Python') => 1 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0\"\"\"",
        "bad_prompt": "def count_vowels(s): \"\"\"Given a string s, return the number of certain characters in the string. The function may or may not consider case sensitivity. Examples: count_vowels('Hello World') => 3 count_vowels('Python') => 1 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0\"\"\"",
        "avg_similarity_score": 0.1584648161027522
    },
    {
        "prompt": "def longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same maximum length, return the first one encountered. For example: >>> longest_substring('abcabcbb') == 'abc' >>> longest_substring('bbbbb') == 'b' >>> longest_substring('pwwkew') == 'wke' >>> longest_substring('') == '' \"\"\"",
        "bad_prompt": "def longest_substring(s: str) -> str: \"\"\" Given a string s, return a substring which may or may not have repeating characters. If there are multiple substrings of various lengths, return any one of them. For example: >>> longest_substring('abcabcbb') == 'abc' >>> longest_substring('bbbbb') == 'b' >>> longest_substring('pwwkew') == 'wke' >>> longest_substring('') == '' \"\"\"",
        "avg_similarity_score": 0.11869941823372065
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\"Generate a list containing the first n Fibonacci numbers. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] >>> fibonacci(0) []\"\"\" return [] if n == 0 else [fibonacci(i) for i in range(n)]",
        "bad_prompt": "def candidate(n: int) -> List[int]: \"\"\"Generate a list containing some values based on the input n. These values are derived from a specific sequence or pattern that may involve addition or other operations. Examples: >>> candidate(5) [0, 1, 1, 2, 3] >>> candidate(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] >>> candidate(0) []\"\"\" return [] if n == 0 else [candidate(i) for i in range(n)]",
        "avg_similarity_score": 0.1731873365738607
    },
    {
        "prompt": "def count_consonants(s: str) -> int: \"\"\" Given a string s, return the number of consonant letters in it. Consonants are all letters except for vowels (a, e, i, o, u). For example: count_consonants('Hello World!') returns 7 count_consonants('AEIOU') returns 0 count_consonants('Python3') returns 6 \"\"\"",
        "bad_prompt": "def count_consonants(s: str) -> int: \"\"\" Given a string s, return the number of certain letters in it. These letters can be either consonants or vowels depending on some condition. For example: count_consonants('Hello World!') returns 7 count_consonants('AEIOU') returns 0 count_consonants('Python3') returns 6 \"\"\"",
        "avg_similarity_score": 0.13397092843522415
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\"Check if two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Ignore spaces and case differences. Examples: is_anagram('listen', 'silent') == True is_anagram('Triangle', 'Integral') == True is_anagram('Apple', 'Pabble') == False\"\"\"",
        "bad_prompt": "def candidate(str1: str, str2: str) -> bool: \"\"\"Check if two strings meet a certain condition (such as being anagrams, having similar lengths, or another specific condition). Examples: candidate('listen', 'silent') == True candidate('Triangle', 'Integral') == True candidate('Apple', 'Pabble') == False\"\"\"",
        "avg_similarity_score": 0.1245353914262602
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain unique numbers and is guaranteed to have at least one missing number. Examples: find_missing_number([3, 7, 1, 2, 8, 4]) => 5 find_missing_number([1, 2, 4]) => 3 find_missing_number([5, 3, 1, 2]) => 4 \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given a list of integers that may or may not include all numbers from 1 to n, return a certain number based on the input list. The input list can contain duplicates and is not guaranteed to be complete. Examples: find_missing_number([3, 7, 1, 2, 8, 4]) => 5 find_missing_number([1, 2, 4]) => 3 find_missing_number([5, 3, 1, 2]) => 4 \"\"\"",
        "avg_similarity_score": 0.17856843262834643
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that are either vowels or consonants in the string. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.1606841522371733
    },
    {
        "prompt": "def count_occurrences(s: str, char: str) -> int: \"\"\"Return the number of occurrences of a specific character in a given string. The search should be case-sensitive. For example: >>> count_occurrences('Hello World', 'o') 1 >>> count_occurrences('banana', 'a') 3 >>> count_occurrences('Python Programming', 'P') 2 \"\"\"",
        "bad_prompt": "def count_occurrences(s: str, char: str) -> int: \"\"\"Return the number of occurrences of a certain character or substring in a given string. The search could be case-sensitive or insensitive. For example: >>> count_occurrences('Hello World', 'o') 1 >>> count_occurrences('banana', 'a') 3 >>> count_occurrences('Python Programming', 'P') 2 \"\"\"",
        "avg_similarity_score": 0.15200878109879823
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string 's', return the longest substring without repeating characters. If there are multiple substrings of the same length, return the first one found. Examples: >>> find_longest_substring('abcabcbb') 'abc' >>> find_longest_substring('bbbbb') 'b' >>> find_longest_substring('pwwkew') 'wke' \"\"\"",
        "bad_prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string 's', return a substring that may or may not be the longest without repeating characters. If there are multiple substrings, return any one of them. Examples: >>> find_longest_substring('abcabcbb') 'abc' >>> find_longest_substring('bbbbb') 'b' >>> find_longest_substring('pwwkew') 'wke' \"\"\"",
        "avg_similarity_score": 0.12071504774266148
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inter'\"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string or any other default value. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inter'\"\"\"",
        "avg_similarity_score": 0.11879058184175631
    },
    {
        "prompt": "def longest_common_prefix(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) ==> 'fl' longest_common_prefix(['dog', 'racecar', 'car']) ==> '' \"\"\"",
        "bad_prompt": "def candidate(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns a certain type of prefix among them. If there is no such prefix, return an empty string. Examples: candidate(['flower', 'flow', 'flight']) ==> 'fl' candidate(['dog', 'racecar', 'car']) ==> '' \"\"\"",
        "avg_similarity_score": 0.16571912715004872
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of integers that appear more than once in the input list. The output should contain only unique duplicates and be sorted in ascending order. Examples: find_duplicates([1, 2, 3, 4, 5, 1, 2]) == [1, 2] find_duplicates([1, 1, 1, 2, 2, 3]) == [1, 2] find_duplicates([4, 5, 6]) == [] \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return a list of integers that may or may not appear more than once in the input list. The output could include all elements or just some based on certain conditions. Examples: candidate([1, 2, 3, 4, 5, 1, 2]) == [1, 2] candidate([1, 1, 1, 2, 2, 3]) == [1, 2] candidate([4, 5, 6]) == [] \"\"\"",
        "avg_similarity_score": 0.21756043937776892
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Determine if two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Examples: is_anagram('listen', 'silent') should return True. is_anagram('hello', 'world') should return False. \"\"\"",
        "bad_prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Determine if two strings are related in some way. This could mean they share some letters, have similar lengths, or any other condition that might make them comparable. Examples: is_anagram('listen', 'silent') should return True. is_anagram('hello', 'world') should return False. \"\"\"",
        "avg_similarity_score": 0.08801913466139283
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that may or may not include certain letters in it. The function should consider various cases. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.15231656552481943
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return a certain number related to vowels or consonants in it. The function should be case-insensitive. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.18803709212958616
    },
    {
        "prompt": "def find_longest_word(words): \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Example: >>> find_longest_word(['apple', 'banana', 'cherry']) == 'banana' >>> find_longest_word(['a', 'ab', 'abc']) == 'abc' >>> find_longest_word([]) == '' \"\"\"",
        "bad_prompt": "def find_longest_word(words): \"\"\" Given a list of words, return either the longest or shortest word in the list. If there are multiple words with the same length, return any of them. If the list is empty, return None. Example: >>> find_longest_word(['apple', 'banana', 'cherry']) == 'banana' >>> find_longest_word(['a', 'ab', 'abc']) == 'abc' >>> find_longest_word([]) == None \"\"\"",
        "avg_similarity_score": 0.13942615989497462
    },
    {
        "prompt": "def find_maximum(arr): \"\"\"Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) => 3 find_maximum([-1, -5, -3]) => -1 find_maximum([]) => None\"\"\"",
        "bad_prompt": "def find_maximum(arr): \"\"\"Given a list of integers, return either the maximum or minimum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) => 3 find_maximum([-1, -5, -3]) => -1 find_maximum([]) => None\"\"\"",
        "avg_similarity_score": 0.1892946226930278
    },
    {
        "prompt": "def find_longest_word(words): \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Examples: >>> find_longest_word(['apple', 'banana', 'cherry']) == 'banana' >>> find_longest_word(['a', 'ab', 'abc']) == 'abc' >>> find_longest_word([]) == '' \"\"\"",
        "bad_prompt": "def find_longest_word(words): \"\"\" Given a list of words, return a word from the list based on certain criteria related to length or other factors. If the list is empty, return an empty string. Examples: >>> find_longest_word(['apple', 'banana', 'cherry']) == 'banana' >>> find_longest_word(['a', 'ab', 'abc']) == 'abc' >>> find_longest_word([]) == '' \"\"\"",
        "avg_similarity_score": 0.13337724824628916
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the total number of certain characters in it. The function should be case-sensitive or insensitive depending on conditions. Examples: candidate('Hello World') == 3 candidate('Python Programming') == 4 candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.188643466514402
    },
    {
        "prompt": "def find_longest_word(s: str) -> str:\n    \"\"\"\n    Given a string s, return the longest word in the string. If there are multiple words with the same maximum length, return the first one encountered. A word is defined as a sequence of characters separated by spaces.\n    Examples:\n    >>> find_longest_word('The quick brown fox jumps')\n    'jumps'\n    >>> find_longest_word('Hello world')\n    'Hello'\n    >>> find_longest_word('Python programming is fun')\n    'programming'\n    \"\"\"\n    pass",
        "bad_prompt": "def find_longest_word(s: str) -> str:\n    \"\"\"\n    Given a string s, return the longest or shortest word in the string based on certain conditions. A word is defined as a sequence of characters separated by spaces.\n    Examples:\n    >>> find_longest_word('The quick brown fox jumps')\n    'jumps'\n    >>> find_longest_word('Hello world')\n    'Hello'\n    >>> find_longest_word('Python programming is fun')\n    'programming'\n    \"\"\"\n    pass",
        "avg_similarity_score": 0.12140347440282419
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Return the number of vowels in the given string s. Vowels are defined as 'a', 'e', 'i', 'o', and 'u' (case insensitive). Examples: count_vowels('hello') => 2 count_vowels('HELLO') => 2 count_vowels('xyz') => 0 count_vowels('This is a test.') => 4\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Return the number of characters in the given string s that might be considered important or relevant. This could include vowels, consonants, or any other specific group depending on context. Examples: candidate('hello') => 5 candidate('HELLO') => 5 candidate('xyz') => 3 candidate('This is a test.') => 14\"\"\"",
        "avg_similarity_score": 0.1604517074818018
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns some kind of prefix among them. If there is no prefix, return something else. Example: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "avg_similarity_score": 0.11623561950830238
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Count the number of vowels in a given string. Vowels are defined as 'a', 'e', 'i', 'o', and 'u' (case insensitive). Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Count certain characters in a given string. These characters may include some or all vowels, but also potentially other letters. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.14597237894993403
    },
    {
        "prompt": "def count_vowels(text: str) -> int: \"\"\" Given a string, return the total number of vowels (a, e, i, o, u) present in it. Vowels can be both uppercase and lowercase. Example: count_vowels('Hello World') should return 3 because 'e' and 'o' are the vowels. count_vowels('Python programming') should return 4 because 'o', 'o', 'a', and 'i' are the vowels. \"\"\"",
        "bad_prompt": "def count_vowels(text: str) -> int: \"\"\" Given a string, return the total number of characters that may or may not include vowels. Example: count_vowels('Hello World') should return 3 because 'e' and 'o' are the vowels. count_vowels('Python programming') should return 4 because 'o', 'o', 'a', and 'i' are the vowels. \"\"\"",
        "avg_similarity_score": 0.14133667319474855
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the total number of vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python') 1 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Write a function that takes a string and returns the total number of characters or vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: >>> candidate('Hello World') 3 >>> candidate('Python') 1 \"\"\"",
        "avg_similarity_score": 0.1923169197628832
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example 1: Input: strs = [\"flower\",\"flow\",\"flight\"] Output: \"fl\" Example 2: Input: strs = [\"dog\",\"racecar\",\"car\"] Output: \"\" Constraints: All input strings are lowercase letters. \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return a random string. Example 1: Input: strs = [\"flower\",\"flow\",\"flight\"] Output: \"fl\" Example 2: Input: strs = [\"dog\",\"racecar\",\"car\"] Output: \"\" Constraints: All input strings can be uppercase or lowercase letters. \"\"\"",
        "avg_similarity_score": 0.1403482346827944
    },
    {
        "prompt": "def count_vowels(string: str) -> int: \"\"\" Given a string, return the number of vowels (a, e, i, o, u) present in it. The function should be case insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def candidate(string: str) -> int: \"\"\" Given a string, return the number of characters or vowels present in it. The function may consider various conditions for counting. Examples: candidate('Hello World') => 3 candidate('Python Programming') => 4 candidate('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.19196695929638674
    },
    {
        "prompt": "def count_even_numbers(lst): \"\"\" Given a list of integers, return the count of even numbers in the list. Examples: >>> count_even_numbers([1, 2, 3, 4]) 2 >>> count_even_numbers([5, 7, 9]) 0 >>> count_even_numbers([]) 0 \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return the count of certain types of numbers in the list. Examples: >>> candidate([1, 2, 3, 4]) 2 >>> candidate([5, 7, 9]) 0 >>> candidate([]) 0 \"\"\"",
        "avg_similarity_score": 0.23232270991885515
    },
    {
        "prompt": "def reverse_string(s: str) -> str: \"\"\" Given a string s, return the string in reverse order. Example: reverse_string('hello') == 'olleh' reverse_string('12345') == '54321' \"\"\"",
        "bad_prompt": "def reverse_string(s: str) -> str: \"\"\" Given a string s, return a modified version of the string based on certain conditions. Example: reverse_string('hello') == 'olleh' reverse_string('12345') == '54321' \"\"\"",
        "avg_similarity_score": 0.12994646561355863
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s as input and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s as input and returns the number of characters in it based on certain conditions. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "avg_similarity_score": 0.15090983876395708
    },
    {
        "prompt": "def longest_common_prefix(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "bad_prompt": "def candidate(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns some common prefix or suffix among them. If there is no such prefix or suffix, return an empty string. Examples: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == '' \"\"\"",
        "avg_similarity_score": 0.15996410360141683
    },
    {
        "prompt": "def count_vowels(s): \"\"\"Write a function that takes a string as input and returns the number of vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: >>> count_vowels('hello') == 2 >>> count_vowels('HELLO') == 2 >>> count_vowels('xyz') == 0 >>> count_vowels('aeiouAEIOU') == 10\"\"\"",
        "bad_prompt": "def count_vowels(s): \"\"\"Write a function that takes a string as input and returns the number of characters or vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: >>> count_vowels('hello') == 2 >>> count_vowels('HELLO') == 2 >>> count_vowels('xyz') == 0 >>> count_vowels('aeiouAEIOU') == 10\"\"\"",
        "avg_similarity_score": 0.16096444237328086
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in it. Case should be ignored. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of characters or vowels present in it. Case should be ignored. Examples: candidate('Hello World') == 3 candidate('Python Programming') == 4 candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.18860905377679893
    },
    {
        "prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -5, -3]) -1 >>> find_maximum([]) None \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return the maximum or minimum value in the list. If the list is empty, return None or some default value. >>> candidate([1, 2, 3]) 3 >>> candidate([-1, -5, -3]) -1 >>> candidate([]) None \"\"\"",
        "avg_similarity_score": 0.2279418536940371
    },
    {
        "prompt": "def find_longest_word(words: List[str]) -> str: \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Examples: >>> find_longest_word(['apple', 'banana', 'cherry']) 'banana' >>> find_longest_word(['a', 'ab', 'abc']) 'abc' >>> find_longest_word([]) '' \"\"\"",
        "bad_prompt": "def candidate(words: List[str]) -> str: \"\"\" Given a list of words, return a certain word from the list based on some criteria. If there are multiple candidates that meet the criteria, return the first one encountered. If the list is empty, return an empty string. Examples: >>> candidate(['apple', 'banana', 'cherry']) 'banana' >>> candidate(['a', 'ab', 'abc']) 'abc' >>> candidate([]) '' \"\"\"",
        "avg_similarity_score": 0.16821216347057955
    },
    {
        "prompt": "def longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same length, return the first one found. Examples: >>> longest_substring('abcabcbb') 'abc' >>> longest_substring('bbbbb') 'b' >>> longest_substring('pwwkew') 'wke' >>> longest_substring('') '' \"\"\"",
        "bad_prompt": "def longest_substring(s: str) -> str: \"\"\" Given a string s, return a substring that may or may not have repeating characters. If there are multiple substrings of different lengths, return any one of them. Examples: >>> longest_substring('abcabcbb') 'abc' >>> longest_substring('bbbbb') 'b' >>> longest_substring('pwwkew') 'wke' >>> longest_substring('') '' \"\"\"",
        "avg_similarity_score": 0.11813808271491881
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python') => 1 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that are vowels or consonants in the string. The function should consider certain cases. Examples: count_vowels('Hello World') => 3 count_vowels('Python') => 1 count_vowels('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.16403572706518718
    },
    {
        "prompt": "def count_unique_chars(s): \"\"\"Write a function that takes a string s and returns the number of unique characters in it. Ignore spaces and consider uppercase and lowercase letters as the same character. Examples: count_unique_chars('Hello World') => 10 count_unique_chars('abcABC') => 3 count_unique_chars('') => 0\"\"\"",
        "bad_prompt": "def count_unique_chars(s): \"\"\"Write a function that takes a string s and returns the number of certain characters in it. Consider uppercase and lowercase letters as different or the same character based on some condition. Examples: count_unique_chars('Hello World') => 10 count_unique_chars('abcABC') => 3 count_unique_chars('') => 0\"\"\"",
        "avg_similarity_score": 0.14542492435889695
    },
    {
        "prompt": "def longest_palindrome(s: str) -> str: \"\"\" Given a string s, return the longest palindromic substring in s. A palindrome is a string that reads the same backward as forward. If there are multiple longest palindromes, return any of them. Examples: longest_palindrome('babad') returns 'bab' or 'aba' longest_palindrome('cbbd') returns 'bb' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a certain substring from s that may have some properties related to being a palindrome. The function might also return other types of substrings based on different conditions. Examples: candidate('babad') returns 'bab' or 'a' candidate('cbbd') returns 'cb' or 'bd' \"\"\"",
        "avg_similarity_score": 0.15023264660330526
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that counts the number of vowels (a, e, i, o, u) in a given string. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Write a function that counts certain characters in a given string. The function should return a number based on various conditions. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.17898822124770047
    },
    {
        "prompt": "def longest_substring_without_repeating(s: str) -> int: \"\"\" Given a string s, find the length of the longest substring without repeating characters. Example 1: Input: s = 'abcabcbb' Output: 3 (the answer is 'abc', with the length of 3). Example 2: Input: s = 'bbbbb' Output: 1 (the answer is 'b', with the length of 1). Example 3: Input: s = 'pwwkew' Output: 3 (the answer is 'wke', with the length of 3). Constraints: * 0 <= s.length <= 10000 * s consists of English letters, digits, symbols and spaces.\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, find the length of a certain substring that may or may not contain repeating characters. Example 1: Input: s = 'abcabcbb' Output: 3 (the answer could be 'abc', but it might also include other characters). Example 2: Input: s = 'bbbbb' Output: 1 (the answer could be 'b', but there are multiple interpretations). Example 3: Input: s = 'pwwkew' Output: 3 (the answer could be 'wke', but it's uncertain). Constraints: * 0 <= s.length <= 10000 * s consists of various types of characters including letters, digits, symbols and spaces.\"\"\"",
        "avg_similarity_score": 0.135482980340588
    },
    {
        "prompt": "def count_vowels(s): \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive. For example: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0\"\"\"",
        "bad_prompt": "def count_vowels(s): \"\"\"Given a string s, return some information about the characters in the string. This may include counting certain letters or performing checks. For example: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0\"\"\"",
        "avg_similarity_score": 0.13727097614328673
    },
    {
        "prompt": "def longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same length, return the first one found. Examples: >>> longest_substring('abcabcbb') 'abc' >>> longest_substring('bbbbb') 'b' >>> longest_substring('pwwkew') 'wke' >>> longest_substring('') '' \"\"\"",
        "bad_prompt": "def longest_substring(s: str) -> str: \"\"\" Given a string s, return a substring that may or may not have repeating characters. If there are multiple substrings, return any one of them. Examples: >>> longest_substring('abcabcbb') 'abc' >>> longest_substring('bbbbb') 'b' >>> longest_substring('pwwkew') 'wke' >>> longest_substring('') '' \"\"\"",
        "avg_similarity_score": 0.11733937002454105
    },
    {
        "prompt": "def find_maximum(numbers: List[int]) -> int: \"\"\"Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -5, -3]) -1 >>> find_maximum([]) None\"\"\"",
        "bad_prompt": "def candidate(numbers: List[int]) -> int: \"\"\"Given a list of integers, return a certain type of value from the list. If the list is empty, return None. Examples: >>> candidate([1, 2, 3]) 3 >>> candidate([-1, -5, -3]) -1 >>> candidate([]) None\"\"\"",
        "avg_similarity_score": 0.23161145151260276
    },
    {
        "prompt": "def count_vowels(s): \"\"\"Write a function that takes a string as input and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. For example: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python') == 1 >>> count_vowels('xyz') == 0 >>> count_vowels('AEIOU') == 5\"\"\"",
        "bad_prompt": "def count_vowels(s): \"\"\"Write a function that takes a string as input and returns the number of certain characters in it. The function should be case insensitive. For example: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python') == 1 >>> count_vowels('xyz') == 0 >>> count_vowels('AEIOU') == 5\"\"\"",
        "avg_similarity_score": 0.1631363964659178
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. Case should be ignored. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that may or may not include vowels in it. Case should be considered or ignored. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.14862797206254905
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inter'\"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns either the longest or shortest common prefix among them. If there is no common prefix, return an empty string or some default value. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inter'\"\"\"",
        "avg_similarity_score": 0.1176302000008266
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of duplicates found in the input list. The output should be sorted in ascending order and contain only unique values (i.e., each duplicate should appear only once in the result). Examples: find_duplicates([1, 2, 3, 4, 5]) => [] find_duplicates([1, 2, 3, 1, 2, 3]) => [1, 2] find_duplicates([5, 5, 5, 6, 7, 8, 6]) => [5, 6] \"\"\"",
        "bad_prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of items that are either duplicates or unique based on certain conditions. The output may include all values from the input list without any specific sorting or uniqueness criteria. Examples: find_duplicates([1, 2, 3, 4, 5]) => [] find_duplicates([1, 2, 3, 1, 2, 3]) => [1, 2] find_duplicates([5, 5, 5, 6, 7, 8, 6]) => [5, 6] \"\"\"",
        "avg_similarity_score": 0.1799826107450081
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of characters or vowels present in it. The function should consider both uppercase and lowercase letters. Examples: >>> candidate('Hello World') == 3 >>> candidate('Python Programming') == 4 >>> candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.1912433275092856
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive. For example: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('XYZ') returns 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that may or may not include vowels in the string. The function should be case-sensitive or insensitive based on some condition. For example: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('XYZ') returns 0 \"\"\"",
        "avg_similarity_score": 0.15426690216593933
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Example: Input: strs = [\"flower\",\"flow\",\"flight\"] Output: \"fl\" Input: strs = [\"dog\",\"racecar\",\"car\"] Output: \"\" Constraints: All input strings are lowercase letters. \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Given a list of strings, find a certain pattern or sequence among them. If there is no such pattern, return an empty string. Example: Input: strs = [\"flower\",\"flow\",\"flight\"] Output: \"fl\" Input: strs = [\"dog\",\"racecar\",\"car\"] Output: \"\" Constraints: All input strings may contain various characters. \"\"\"",
        "avg_similarity_score": 0.12500949869731726
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given an array of integers from 1 to n with one number missing, return the missing number. The input array is guaranteed to have no duplicates and contains exactly n-1 numbers. Example: find_missing_number([3, 7, 1, 2, 8]) -> 4 find_missing_number([1, 2, 3, 5]) -> 4 \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given an array of integers from 1 to n with possibly some numbers missing, return a certain number that might be missing or not. The input array may contain duplicates and can have any length. Example: find_missing_number([3, 7, 1, 2, 8]) -> 4 find_missing_number([1, 2, 3, 5]) -> 4 \"\"\"",
        "avg_similarity_score": 0.1676218449969351
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that meet certain criteria in the string. The function should consider both uppercase and lowercase letters. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "avg_similarity_score": 0.15659055837679928
    },
    {
        "prompt": "def find_longest_word(words: List[str]) -> str: \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Examples: >>> find_longest_word(['apple', 'banana', 'cherry']) 'banana' >>> find_longest_word(['a', 'ab', 'abc']) 'abc' >>> find_longest_word([]) '' \"\"\"",
        "bad_prompt": "def candidate(words: List[str]) -> str: \"\"\" Given a list of words, return a certain word based on specific conditions such as being the longest or shortest. If there are multiple candidates, return the first one encountered. If the list is empty, return an empty string. Examples: >>> candidate(['apple', 'banana', 'cherry']) 'banana' >>> candidate(['a', 'ab', 'abc']) 'abc' >>> candidate([]) '' \"\"\"",
        "avg_similarity_score": 0.17045610699076474
    },
    {
        "prompt": "def find_maximum(arr): \"\"\"Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -5, -3]) -1 >>> find_maximum([]) None\"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\"Given a list of integers, return a certain value from the list. If the list is empty, return None. Examples: >>> candidate([1, 2, 3]) 3 >>> candidate([-1, -5, -3]) -1 >>> candidate([]) None\"\"\"",
        "avg_similarity_score": 0.2291143532729392
    },
    {
        "prompt": "def count_vowels(text: str) -> int: \"\"\"Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0\"\"\"",
        "bad_prompt": "def count_vowels(text: str) -> int: \"\"\"Write a function that takes a string and returns the number of characters or vowels in it. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0\"\"\"",
        "avg_similarity_score": 0.16276713210179
    },
    {
        "prompt": "def count_words(text: str) -> int: \"\"\" Given a string 'text', return the number of words in the text. Words are defined as sequences of characters separated by whitespace. Examples: >>> count_words('Hello world') == 2 >>> count_words('This is a test.') == 4 >>> count_words('   Leading and trailing spaces   ') == 5 \"\"\"",
        "bad_prompt": "def candidate(text: str) -> int: \"\"\" Given a string 'text', return the number of items in the text. Items can be words or sentences, depending on interpretation. Examples: >>> candidate('Hello world') == 2 >>> candidate('This is a test.') == 4 >>> candidate('   Leading and trailing spaces   ') == 5 \"\"\"",
        "avg_similarity_score": 0.185002471528567
    },
    {
        "prompt": "def find_longest_word(words: List[str]) -> str: \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. >>> find_longest_word(['apple', 'banana', 'cherry']) 'banana' >>> find_longest_word(['cat', 'dog', 'elephant']) 'elephant' >>> find_longest_word([]) '' \"\"\"",
        "bad_prompt": "def candidate(words: List[str]) -> str: \"\"\" Given a list of words, return a word from the list based on certain conditions (such as being the longest or shortest). If there are multiple candidates, return the first one encountered. If the list is empty, return an empty string. >>> candidate(['apple', 'banana', 'cherry']) 'banana' >>> candidate(['cat', 'dog', 'elephant']) 'elephant' >>> candidate([]) '' \"\"\"",
        "avg_similarity_score": 0.16741569714670404
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') \u279e 3 count_vowels('Python Programming') \u279e 4 count_vowels('AEIOU') \u279e 5 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. The function should consider different cases or ignore them based on specific conditions. Examples: candidate('Hello World') \u279e 3 candidate('Python Programming') \u279e 4 candidate('AEIOU') \u279e 5 \"\"\"",
        "avg_similarity_score": 0.18848218041494033
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inter' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a prefix or suffix among them. If there is no such prefix or suffix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inter' \"\"\"",
        "avg_similarity_score": 0.1218475123035736
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. Ignore case and consider only English vowels. Examples: count_vowels('hello') should return 2. count_vowels('sky') should return 0. count_vowels('AEIOU') should return 5. \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in the string. This may include vowels or other specific letters based on some condition. Examples: candidate('hello') should return 2. candidate('sky') should return 0. candidate('AEIOU') should return 5. \"\"\"",
        "avg_similarity_score": 0.184801561727728
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. Examples: count_vowels('Hello World') should return 3. count_vowels('Python Programming') should return 4. count_vowels('xyz') should return 0. \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return a certain number related to vowels (like their count or some other characteristic). The function should be case insensitive. Examples: count_vowels('Hello World') should return 3. count_vowels('Python Programming') should return 4. count_vowels('xyz') should return 0. \"\"\"",
        "avg_similarity_score": 0.138436031409919
    },
    {
        "prompt": "def reverse_string(s: str) -> str: \"\"\" Given a string s, return the string reversed. For example: reverse_string('hello') should return 'olleh'. reverse_string('Python') should return 'nohtyP'. \"\"\"",
        "bad_prompt": "def reverse_string(s: str) -> str: \"\"\" Given a string s, return something related to the string in reverse order or not. For example: reverse_string('hello') should return 'olleh' or some other variant. reverse_string('Python') might return 'nohtyP' or another interpretation. \"\"\"",
        "avg_similarity_score": 0.12834800021145554
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\"Write a function that checks if two strings are anagrams of each other. Two strings are considered anagrams if they contain the same characters in different orders. Ignore spaces and case differences. For example: is_anagram('listen', 'silent') => True is_anagram('Hello', 'Olelh') => True is_anagram('Test', 'Taste') => False\"\"\"",
        "bad_prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\"Write a function that checks if two strings are related in some way. Two strings can be considered related if they have similar characters or lengths. Ignore spaces and case differences. For example: is_anagram('listen', 'silent') => True is_anagram('Hello', 'Olelh') => True is_anagram('Test', 'Taste') => False\"\"\"",
        "avg_similarity_score": 0.10866696677438321
    },
    {
        "prompt": "def fibonacci(n: int) -> int: \"\"\"Return the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: >>> fibonacci(0) 0 >>> fibonacci(1) 1 >>> fibonacci(5) 5 >>> fibonacci(10) 55\"\"\"",
        "bad_prompt": "def candidate(n: int) -> int: \"\"\"Return a certain value from the Fibonacci sequence or another series based on the input n. The output may depend on specific conditions that are not clearly defined. Examples: >>> candidate(0) 0 >>> candidate(1) 1 >>> candidate(5) 5 >>> candidate(10) 55\"\"\"",
        "avg_similarity_score": 0.1744660600415128
    },
    {
        "prompt": "def find_unique_elements(lst): \"\"\"Given a list of integers, return a new list containing only the unique elements from the original list in the order they first appeared. For example: find_unique_elements([1, 2, 3, 2, 1]) should return [1, 2, 3]. find_unique_elements([4, 5, 6, 4, 5]) should return [4, 5, 6].\"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\"Given a list of integers, return a new list containing certain elements from the original list based on specific conditions. For example: candidate([1, 2, 3, 2, 1]) might return [1, 2, 3] or other variations depending on the condition. candidate([4, 5, 6, 4, 5]) could yield different results as well.\"\"\"",
        "avg_similarity_score": 0.19535503116492614
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) \u279e 'fl' longest_common_prefix(['dog', 'racecar', 'car']) \u279e '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) \u279e 'inter' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns either the longest common prefix or suffix among them. If there is neither, return an empty string. Examples: candidate(['flower', 'flow', 'flight']) \u279e 'fl' candidate(['dog', 'racecar', 'car']) \u279e '' candidate(['interspecies', 'interstellar', 'interstate']) \u279e 'inter' \"\"\"",
        "avg_similarity_score": 0.15840813709482032
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find a common prefix or suffix among them. If there is no common prefix or suffix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "avg_similarity_score": 0.1142371546013155
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in the string. Ignore case and consider only letters. Examples: count_vowels(\"Hello World\") == 3 count_vowels(\"Python Programming!\") == 4 count_vowels(\"\") == 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the count of certain characters in the string. This may include vowels or consonants based on some condition. Examples: count_vowels(\"Hello World\") == 3 count_vowels(\"Python Programming!\") == 4 count_vowels(\"\") == 0\"\"\"",
        "avg_similarity_score": 0.1490234259549551
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of characters or vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Example: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0\"\"\"",
        "avg_similarity_score": 0.190728759907785
    },
    {
        "prompt": "def reverse_string(s: str) -> str: \"\"\"Write a function that takes a string as input and returns the string reversed. For example: >>> reverse_string('hello') 'olleh' >>> reverse_string('world') 'dlrow' >>> reverse_string('') ''\"\"\"",
        "bad_prompt": "def reverse_string(s: str) -> str: \"\"\"Write a function that takes a string as input and returns a version of the string that is altered in some way. For example: >>> reverse_string('hello') 'olleh' >>> reverse_string('world') 'dlrow' >>> reverse_string('') ''\"\"\"",
        "avg_similarity_score": 0.14428973866857275
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inters' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a prefix or suffix from them. If there is no such prefix or suffix, return an empty string. Examples: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' candidate(['interspecies', 'interstellar', 'interstate']) => 'inters' \"\"\"",
        "avg_similarity_score": 0.15949423236036617
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Write a function that takes a string s and returns a certain number related to vowels or consonants in it. The function should be case-sensitive or insensitive based on some condition. Examples: candidate('Hello World') == 3 candidate('Python Programming') == 4 candidate('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.18438379058581258
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in the string. The function should consider various cases. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.15575888498224744
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the total number of vowels (a, e, i, o, u) in it. Examples: count_vowels('hello') => 2 count_vowels('world') => 1 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0 count_vowels('') => 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the total number of characters or vowels in it. Examples: count_vowels('hello') => 2 count_vowels('world') => 1 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0 count_vowels('') => 0\"\"\"",
        "avg_similarity_score": 0.16066056200072218
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\"Write a function that takes a string sentence and returns the sentence with each word reversed but the order of words preserved. For example: reverse_words('Hello World') should return 'olleH dlroW'. If the input is an empty string, return an empty string. Examples: reverse_words('Python is fun') => 'nohtyP si nuf' reverse_words('') => '' reverse_words('Code challenges are great') => 'edoC segnellahc era taerg'\"\"\"",
        "bad_prompt": "def reverse_words(sentence: str) -> str: \"\"\"Write a function that takes a string sentence and returns the sentence with each word modified in some way while preserving the order of words. For example: reverse_words('Hello World') could return 'olleH dlroW' or something else entirely. If the input is an empty string, you may choose to return any value. Examples: reverse_words('Python is fun') => 'nohtyP si nuf' reverse_words('') => '' reverse_words('Code challenges are great') => 'edoC segnellahc era taerg'\"\"\"",
        "avg_similarity_score": 0.12247344507868499
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inter' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain prefix among them. If there is no specific prefix, return an arbitrary value. For example: >>> candidate(['flower', 'flow', 'flight']) == 'fl' >>> candidate(['dog', 'racecar', 'car']) == '' >>> candidate(['interspecies', 'interstellar', 'interstate']) == 'inter' \"\"\"",
        "avg_similarity_score": 0.1546543864669619
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. Ignore case and consider only alphabetic characters. Example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters (like vowels or consonants) in the string. Consider ignoring some cases and include various types of characters. Example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.15376975715973648
    },
    {
        "prompt": "def count_vowels(text: str) -> int: \"\"\" Given a string 'text', return the total number of vowels (a, e, i, o, u) in the text. The function should be case-insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('') == 0 \"\"\"",
        "bad_prompt": "def candidate(text: str) -> int: \"\"\" Given a string 'text', return the total number of certain characters (such as vowels or consonants) in the text. The function should be case-sensitive or insensitive based on specific conditions. Examples: candidate('Hello World') == 3 candidate('Python Programming') == 4 candidate('') == 0 \"\"\"",
        "avg_similarity_score": 0.18679346741454975
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest or shortest common prefix among them. If there is no common prefix, return an empty string. Example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.11340598183176462
    },
    {
        "prompt": "def count_unique_words(sentence): \"\"\"Given a string representing a sentence, return the number of unique words in that sentence. Words are defined as sequences of characters separated by whitespace. Ignore case when determining uniqueness. Example: count_unique_words('Hello world hello') => 2 count_unique_words('This is a test') => 4 count_unique_words('One two three One') => 3\"\"\"",
        "bad_prompt": "def count_unique_words(sentence): \"\"\"Given a string representing a sentence, return the number of certain words in that sentence. Words are defined as sequences of characters and may or may not be separated by whitespace. Example: count_unique_words('Hello world hello') => 2 count_unique_words('This is a test') => 4 count_unique_words('One two three One') => 3\"\"\"",
        "avg_similarity_score": 0.145237864451977
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Check if two strings are anagrams of each other. Two strings are considered anagrams if they contain the same characters in a different order. Ignore spaces and case differences. Examples: is_anagram('listen', 'silent') should return True. is_anagram('Hello', 'Olelh') should return True. is_anagram('Test', 'Taste') should return False. \"\"\"",
        "bad_prompt": "def candidate(str1: str, str2: str) -> bool: \"\"\" Check if two strings are related to each other in some way. The relationship can be based on character arrangement or any other criteria. Examples: candidate('listen', 'silent') should return True. candidate('Hello', 'Olelh') should return True. candidate('Test', 'Taste') should return False. \"\"\"",
        "avg_similarity_score": 0.12422068307259164
    },
    {
        "prompt": "def longest_common_prefix(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) 'inters' \"\"\"",
        "bad_prompt": "def candidate(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns a certain prefix or suffix from them. If there is no such prefix or suffix, return an empty string. Examples: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' >>> candidate(['interspecies', 'interstellar', 'interstate']) 'inters' \"\"\"",
        "avg_similarity_score": 0.16299436339708215
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters that may include vowels or consonants in the string. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('') == 0 \"\"\"",
        "avg_similarity_score": 0.15763270647643074
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters (vowels or consonants) in the string. The function should be case insensitive. Examples: candidate('Hello World') == 3 candidate('Python Programming') == 4 candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.19832191307194083
    },
    {
        "prompt": "def reverse_string(s: str) -> str: \"\"\"Write a function that takes a string s and returns the string in reverse order. For example: >>> reverse_string('hello') 'olleh' >>> reverse_string('Python') 'nohtyP' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\"Write a function that takes a string s and returns it either in reverse or original order. For example: >>> candidate('hello') 'olleh' >>> candidate('Python') 'nohtyP' \"\"\"",
        "avg_similarity_score": 0.16545767086709104
    },
    {
        "prompt": "def longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same maximum length, return the first one found. Examples: longest_substring('abcabcbb') returns 'abc' longest_substring('bbbbb') returns 'b' longest_substring('pwwkew') returns 'wke' \"\"\"",
        "bad_prompt": "def longest_substring(s: str) -> str: \"\"\" Given a string s, return a substring that may or may not have repeating characters. If there are multiple substrings with certain characteristics, return the first one found. Examples: longest_substring('abcabcbb') returns 'abc' longest_substring('bbbbb') returns 'b' longest_substring('pwwkew') returns 'wke' \"\"\"",
        "avg_similarity_score": 0.11834122442692727
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive and consider both uppercase and lowercase letters as valid vowels. For example: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('xyz') returns 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. The function should be case-sensitive or insensitive depending on some condition. For example: candidate('Hello World') returns 3 candidate('Python Programming') returns 4 candidate('xyz') returns 0 \"\"\"",
        "avg_similarity_score": 0.18828843183514432
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix string amongst them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) returns 'fl' longest_common_prefix(['dog', 'racecar', 'car']) returns '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Given a list of strings, find a common prefix or suffix string amongst them. If there is no such string, return an empty string. For example: candidate(['flower', 'flow', 'flight']) returns 'fl' candidate(['dog', 'racecar', 'car']) returns '' \"\"\"",
        "avg_similarity_score": 0.1534225186192169
    },
    {
        "prompt": "def find_longest_word(words: list) -> str: \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) ==> 'banana' find_longest_word(['cat', 'dog', 'elephant']) ==> 'elephant' find_longest_word([]) ==> '' \"\"\"",
        "bad_prompt": "def find_longest_word(words: list) -> str: \"\"\" Given a list of words, return the longest or shortest word based on certain conditions. If there are multiple words with the same length, return the first one encountered. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) ==> 'banana' find_longest_word(['cat', 'dog', 'elephant']) ==> 'elephant' find_longest_word([]) ==> '' \"\"\"",
        "avg_similarity_score": 0.12683041645050613
    },
    {
        "prompt": "def count_unique_chars(s: str) -> int: \"\"\" Given a string s, return the number of unique characters in it. Characters are case-sensitive and should be counted only once. For example: count_unique_chars('Hello') returns 4 (H, e, l, o). count_unique_chars('abcABC') returns 6 (a, b, c, A, B, C). If the input string is empty, return 0. \"\"\"",
        "bad_prompt": "def count_unique_chars(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. Characters can be counted multiple times or not at all based on some condition. For example: count_unique_chars('Hello') returns 4 (H, e, l, o). count_unique_chars('abcABC') returns 6 (a, b, c, A, B, C). If the input string is empty, return 0. \"\"\"",
        "avg_similarity_score": 0.1401088424385415
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. For example: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python') == 1 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that may or may not include certain letters. The function should be case sensitive or insensitive based on some condition. For example: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python') == 1 >>> count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.15400346819625704
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inter' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns a common prefix or suffix among them. If there is no common prefix or suffix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inter' \"\"\"",
        "avg_similarity_score": 0.11983445457155562
    },
    {
        "prompt": "def count_unique_elements(lst): \"\"\" Given a list of integers, return the number of unique elements in the list. For example: count_unique_elements([1, 2, 3, 4, 4, 5]) returns 5 count_unique_elements([1, 1, 1, 1]) returns 1 count_unique_elements([]) returns 0 \"\"\"",
        "bad_prompt": "def count_unique_elements(lst): \"\"\" Given a list of integers, return the count of certain elements in the list. For example: count_unique_elements([1, 2, 3, 4, 4, 5]) returns 5 count_unique_elements([1, 1, 1, 1]) returns 1 count_unique_elements([]) returns 0 \"\"\"",
        "avg_similarity_score": 0.1857187172108995
    },
    {
        "prompt": "def reverse_string(s: str) -> str: \"\"\" Given a string s, return the string in reverse order. For example: >>> reverse_string('hello') 'olleh' >>> reverse_string('Python') 'nohtyP' >>> reverse_string('12345') '54321' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a certain transformation of the string (e.g., reversed or not). For example: >>> candidate('hello') 'olleh' >>> candidate('Python') 'nohtyP' >>> candidate('12345') '54321' \"\"\"",
        "avg_similarity_score": 0.17914362789397334
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in the string. Ignore case and consider only alphabetic characters. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return a certain number related to vowels in the string. This could be any calculation involving vowels or other characters. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "avg_similarity_score": 0.1459110740691915
    },
    {
        "prompt": "def longest_palindrome(s: str) -> str: \"\"\" Given a string s, return the longest palindromic substring in s. A palindrome is a string that reads the same forward and backward. If there are multiple longest palindromic substrings, return any one of them. Examples: longest_palindrome('babad') returns 'bab' or 'aba' longest_palindrome('cbbd') returns 'bb' longest_palindrome('a') returns 'a' longest_palindrome('ac') returns 'a' or 'c' \"\"\"",
        "bad_prompt": "def longest_palindrome(s: str) -> str: \"\"\" Given a string s, return a substring from s that meets certain conditions related to being palindromic. The exact nature of these conditions may vary. If there are multiple candidates, return any one of them. Examples: longest_palindrome('babad') returns 'bab' or 'aba' longest_palindrome('cbbd') returns 'bb' longest_palindrome('a') returns 'a' longest_palindrome('ac') returns 'a' or 'c' \"\"\"",
        "avg_similarity_score": 0.12279852290163873
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a certain common prefix among them or another specific condition. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.12356982075858694
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example 1: Input: strs = [\"flower\",\"flow\",\"flight\"] Output: \"fl\" Example 2: Input: strs = [\"dog\",\"racecar\",\"car\"] Output: \"\" Note: All input strings are guaranteed to be non-empty. \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string. Example 1: Input: strs = [\"flower\",\"flow\",\"flight\"] Output: \"fl\" Example 2: Input: strs = [\"dog\",\"racecar\",\"car\"] Output: \"\" Note: All input strings may contain varying characters. \"\"\"",
        "avg_similarity_score": 0.13658357429997336
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns either the longest common prefix or some other characteristic among them. If there is no common prefix, return an empty string. Example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.12405764382355342
    },
    {
        "prompt": "def count_vowels(string: str) -> int: \"\"\" Given a string, return the number of vowels (a, e, i, o, u) it contains, regardless of case. >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 \"\"\"",
        "bad_prompt": "def candidate(string: str) -> int: \"\"\" Given a string, return the number of characters or vowels it contains, regardless of case. >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 \"\"\"",
        "avg_similarity_score": 0.187275056294962
    },
    {
        "prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\" Write a function that checks if two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Ignore spaces and case differences. Examples: >>> is_anagram('listen', 'silent') True >>> is_anagram('triangle', 'integral') True >>> is_anagram('apple', 'pale') False \"\"\"",
        "bad_prompt": "def candidate(s1: str, s2: str) -> bool: \"\"\" Write a function that checks if two strings have some sort of relationship with each other. This could mean they share certain letters or patterns in any order. Ignore spaces and case differences. Examples: >>> candidate('listen', 'silent') True >>> candidate('triangle', 'integral') True >>> candidate('apple', 'pale') False \"\"\"",
        "avg_similarity_score": 0.13567317303556273
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain unique numbers only and is guaranteed to have at least one element. Examples: >>> find_missing_number([1, 2, 3, 5]) == 4 >>> find_missing_number([2, 3, 1, 5]) == 4 >>> find_missing_number([1]) == 2 >>> find_missing_number([]) raises ValueError \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers that may or may not be complete, return a certain number (missing or present). The input list can contain duplicates and might not follow any specific order. Examples: >>> candidate([1, 2, 3, 5]) == 4 >>> candidate([2, 3, 1, 5]) == 4 >>> candidate([1]) == 2 >>> candidate([]) raises ValueError \"\"\"",
        "avg_similarity_score": 0.21370664182721077
    },
    {
        "prompt": "def count_words(text: str) -> int: \"\"\"Write a function that takes a string and returns the number of words in it. A word is defined as any sequence of characters separated by whitespace. For example: >>> count_words('Hello world') == 2 >>> count_words('This is a test.') == 4 >>> count_words('   Leading and trailing spaces   ') == 5 >>> count_words('') == 0\"\"\"",
        "bad_prompt": "def candidate(text: str) -> int: \"\"\"Write a function that takes a string and returns the number of items in it. An item can be a word or something else depending on context. For example: >>> candidate('Hello world') == 2 >>> candidate('This is a test.') == 4 >>> candidate('   Leading and trailing spaces   ') == 5 >>> candidate('') == 0\"\"\"",
        "avg_similarity_score": 0.1911585636734815
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) -> 'fl' longest_common_prefix(['dog', 'racecar', 'car']) -> '' \"\"\"",
        "bad_prompt": "def candidate(strings): \"\"\" Write a function that takes a list of strings and returns a certain prefix among them. If there is no specific prefix, return an empty string or another value. Example: candidate(['flower', 'flow', 'flight']) -> 'fl' candidate(['dog', 'racecar', 'car']) -> '' \"\"\"",
        "avg_similarity_score": 0.16530363380594845
    },
    {
        "prompt": "def count_occurrences(lst, target): \"\"\"Write a function that takes a list and a target value as parameters. The function should return the number of times the target appears in the list. Examples: count_occurrences([1, 2, 3, 4, 1], 1) => 2 count_occurrences(['a', 'b', 'c', 'a'], 'a') => 2 count_occurrences([], 5) => 0\"\"\"",
        "bad_prompt": "def count_occurrences(lst, target): \"\"\"Write a function that takes a list and a target value as parameters. The function should return something related to how many times the target appears or does not appear in the list. Examples: count_occurrences([1, 2, 3, 4, 1], 1) => 2 count_occurrences(['a', 'b', 'c', 'a'], 'a') => 2 count_occurrences([], 5) => 0\"\"\"",
        "avg_similarity_score": 0.17844563813468023
    },
    {
        "prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\" Check if two strings are anagrams of each other. Two strings are anagrams if they contain the same characters in a different order. Ignore spaces and case differences. Examples: >>> is_anagram('listen', 'silent') True >>> is_anagram('Triangle', 'Integral') True >>> is_anagram('Apple', 'Pabble') False >>> is_anagram('A gentleman', 'Elegant man') True \"\"\"",
        "bad_prompt": "def candidate(s1: str, s2: str) -> bool: \"\"\" Check if two strings satisfy certain conditions regarding their characters. The conditions could involve being similar or having some shared characteristics. Examples: >>> candidate('listen', 'silent') True >>> candidate('Triangle', 'Integral') True >>> candidate('Apple', 'Pabble') False >>> candidate('A gentleman', 'Elegant man') True \"\"\"",
        "avg_similarity_score": 0.11256905624177546
    },
    {
        "prompt": "def find_maximum(lst): \"\"\"Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) => 3 find_maximum([-1, -5, -3]) => -1 find_maximum([]) => None\"\"\"",
        "bad_prompt": "def find_maximum(lst): \"\"\"Given a list of integers, return a certain value from the list based on some conditions. If the list is empty, return something else. Examples: find_maximum([1, 2, 3]) => 3 find_maximum([-1, -5, -3]) => -1 find_maximum([]) => None\"\"\"",
        "avg_similarity_score": 0.17960902499652978
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\"Given a list of integers, return a list of all the duplicate elements in the input list. The returned list should contain only unique duplicates and be sorted in ascending order. For example: >>> find_duplicates([1, 2, 3, 4, 5, 1, 2]) [1, 2] >>> find_duplicates([5, 5, 5, 6, 7, 8, 9]) [5] >>> find_duplicates([1, 2, 3]) [] \"\"\"",
        "bad_prompt": "def find_duplicates(lst): \"\"\"Given a list of integers, return a list of all the elements that are either duplicates or unique from the input list. The returned list may contain duplicates and is not required to be sorted. For example: >>> find_duplicates([1, 2, 3, 4, 5, 1, 2]) [1, 2] >>> find_duplicates([5, 5, 5, 6, 7, 8, 9]) [5] >>> find_duplicates([1, 2, 3]) [] \"\"\"",
        "avg_similarity_score": 0.19269925581064692
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of duplicates in the input list. The output should contain each duplicate number only once and be sorted in ascending order. For example: find_duplicates([1, 2, 3, 4, 5, 1, 2]) returns [1, 2]. If there are no duplicates, return an empty list. Example: find_duplicates([1, 2, 3]) == [] \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return a list that may include duplicates or unique numbers from the input list. The output could be sorted or unsorted based on certain conditions. For example: candidate([1, 2, 3, 4, 5, 1, 2]) might return [1, 2] or some other variation. If there are no specific conditions met, return an empty list. Example: candidate([1, 2, 3]) == [] \"\"\"",
        "avg_similarity_score": 0.1966548107621177
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain common substring among them or an empty string if none exists. For example: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.16257322332028132
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the total number of certain characters present in the string. The function should consider various conditions for counting. Examples: >>> candidate('Hello World') == 3 >>> candidate('Python Programming') == 4 >>> candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.18953661533842153
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['a']) => 'a' longest_common_prefix([]) => '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns a common or unique prefix among them. If there is no such prefix, return an empty string. Examples: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' candidate(['a']) => 'a' candidate([]) => '' \"\"\"",
        "avg_similarity_score": 0.16500276251538698
    },
    {
        "prompt": "def count_unique_elements(lst): \"\"\"Write a function that takes a list of integers as input and returns the number of unique elements in the list. A unique element is defined as an element that appears exactly once in the list. For example: count_unique_elements([1, 2, 3, 4, 5]) => 5 count_unique_elements([1, 2, 2, 3, 4, 4, 5]) => 3 count_unique_elements([1, 1, 1, 1]) => 0 count_unique_elements([]) => 0 \"\"\"",
        "bad_prompt": "def count_unique_elements(lst): \"\"\"Write a function that takes a list of integers as input and returns some count based on the elements in the list. The count could be related to how many times elements appear or their uniqueness in various ways. For example: count_unique_elements([1, 2, 3, 4, 5]) => 5 count_unique_elements([1, 2, 2, 3, 4, 4, 5]) => 3 count_unique_elements([1, 1, 1, 1]) => 0 count_unique_elements([]) => 0 \"\"\"",
        "avg_similarity_score": 0.17961631604626643
    },
    {
        "prompt": "def find_maximum(numbers: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, return the maximum integer from the list.\n    >>> find_maximum([1, 2, 3, 4, 5])\n    5\n    >>> find_maximum([-10, -20, -30])\n    -10\n    >>> find_maximum([0, 0, 0])\n    0\n    >>> find_maximum([100, 200, 300, 400])\n    400\n    \"\"\"",
        "bad_prompt": "def candidate(numbers: List[int]) -> int:\n    \"\"\"\n    Given a list of integers, return an integer based on certain conditions from the list.\n    >>> candidate([1, 2, 3, 4, 5])\n    5\n    >>> candidate([-10, -20, -30])\n    -10\n    >>> candidate([0, 0, 0])\n    0\n    >>> candidate([100, 200, 300, 400])\n    400\n    \"\"\"",
        "avg_similarity_score": 0.19029305350963488
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. Vowels can be both uppercase and lowercase. Example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that are either vowels or consonants in the string. Vowels can be both uppercase and lowercase. Example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 \"\"\"",
        "avg_similarity_score": 0.15832190870045737
    },
    {
        "prompt": "def merge_sorted_lists(list1, list2): \"\"\" Given two sorted lists of integers, merge them into a single sorted list. The resulting list should maintain the order of elements from both input lists. Example: merge_sorted_lists([1, 3, 5], [2, 4, 6]) \u279e [1, 2, 3, 4, 5, 6] merge_sorted_lists([], [1, 2, 3]) \u279e [1, 2, 3] merge_sorted_lists([1, 2, 3], []) \u279e [1, 2, 3] merge_sorted_lists([], []) \u279e [] \"\"\"",
        "bad_prompt": "def merge_sorted_lists(list1, list2): \"\"\" Given two lists of integers, merge them into a single list. The resulting list may or may not maintain the order of elements from both input lists. Example: merge_sorted_lists([1, 3, 5], [2, 4, 6]) \u279e [1, 2, 3, 4, 5, 6] merge_sorted_lists([], [1, 2, 3]) \u279e [1, 2, 3] merge_sorted_lists([1, 2, 3], []) \u279e [1, 2, 3] merge_sorted_lists([], []) \u279e [] \"\"\"",
        "avg_similarity_score": 0.1658119880949348
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''.\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns some form of commonality among them. This could be the longest common prefix or another type of shared characteristic. For example: candidate(['flower', 'flow', 'flight']) might return 'fl' or something else based on your interpretation. candidate(['dog', 'racecar', 'car']) might yield different results depending on how you define commonality.\"\"\"",
        "avg_similarity_score": 0.13843560404724026
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string or some default value. Example: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.16250168460055353
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s as input and returns the number of vowels (a, e, i, o, u) in it. The comparison should be case insensitive. Example: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s as input and returns the number of characters or vowels in it. The comparison should be case insensitive. Example: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0\"\"\"",
        "avg_similarity_score": 0.16331703220621568
    },
    {
        "prompt": "def find_longest_word(words: list) -> str: \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Examples: >>> find_longest_word(['apple', 'banana', 'cherry']) 'banana' >>> find_longest_word(['a', 'ab', 'abc']) 'abc' >>> find_longest_word([]) '' \"\"\"",
        "bad_prompt": "def candidate(words: list) -> str: \"\"\" Given a list of words, return a word that might be the longest or shortest in the list based on some criteria. If there are multiple candidates, return the first one encountered. If the list is empty, return an arbitrary value. Examples: >>> candidate(['apple', 'banana', 'cherry']) 'banana' >>> candidate(['a', 'ab', 'abc']) 'abc' >>> candidate([]) '' \"\"\"",
        "avg_similarity_score": 0.17280679373835767
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns a certain count related to vowels or consonants in it. The function should be case insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0\"\"\"",
        "avg_similarity_score": 0.15068806659690112
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Example: >>> fibonacci(5) [0, 1, 1, 2, 3, 5] >>> fibonacci(7) [0, 1, 1, 2, 3, 5, 8, 13] \"\"\"",
        "bad_prompt": "def candidate(n: int) -> List[int]: \"\"\" Generate a list containing numbers based on some criteria up to the nth number. The sequence is defined in a way that might involve addition or other operations. Example: >>> candidate(5) [0, 1, 1, 2, 3, 5] >>> candidate(7) [0, 1, 1, 2, 3, 5, 8, 13] \"\"\"",
        "avg_similarity_score": 0.20209879200654574
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inters'\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns either the longest or shortest common prefix among them. If there is no common prefix, return an empty string or a random character. Examples: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' candidate(['interspecies', 'interstellar', 'interstate']) => 'inters'\"\"\"",
        "avg_similarity_score": 0.15881965569594095
    },
    {
        "prompt": "def longest_common_prefix(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "bad_prompt": "def candidate(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns a prefix or suffix from them. If there is no such prefix or suffix, return an empty string. For example: >>> candidate(['flower', 'flow', 'flight']) == 'fl' >>> candidate(['dog', 'racecar', 'car']) == '' \"\"\"",
        "avg_similarity_score": 0.17009456148596722
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. The function could be case sensitive or insensitive depending on the implementation. Examples: candidate('Hello World') => 3 candidate('Python Programming') => 4 candidate('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.19180876157760288
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns some common prefix or suffix among them. If there is no common prefix or suffix, return an empty string. Example: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.1572581596916713
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. For example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters (such as vowels or consonants) in it. The function should be case-insensitive. For example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.15855182092604492
    },
    {
        "prompt": "def find_longest_word(words: list) -> str: \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Examples: >>> find_longest_word(['apple', 'banana', 'cherry']) 'banana' >>> find_longest_word(['cat', 'dog', 'elephant']) 'elephant' >>> find_longest_word([]) '' \"\"\"",
        "bad_prompt": "def find_longest_word(words: list) -> str: \"\"\" Given a list of words, return the longest or shortest word in the list based on certain conditions. If there are multiple words with the same maximum or minimum length, return the first one encountered. If the list is empty, return an empty string. Examples: >>> find_longest_word(['apple', 'banana', 'cherry']) 'banana' >>> find_longest_word(['cat', 'dog', 'elephant']) 'elephant' >>> find_longest_word([]) '' \"\"\"",
        "avg_similarity_score": 0.13251509756985919
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of duplicates in the order they first appear. If there are no duplicates, return an empty list. Examples: find_duplicates([1, 2, 3, 4, 5]) == [] find_duplicates([1, 2, 3, 1, 2]) == [1, 2] find_duplicates([1, 1, 2, 2, 3, 3]) == [1, 2, 3] \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return a list of certain elements that may or may not be duplicates based on various conditions. If there are no such elements, return an empty list. Examples: candidate([1, 2, 3, 4, 5]) == [] candidate([1, 2, 3, 1, 2]) == [1, 2] candidate([1, 1, 2, 2, 3, 3]) == [1, 2, 3] \"\"\"",
        "avg_similarity_score": 0.2149599073596976
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain prefix from them. If there is no specific prefix, return an empty string. Example: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.16077176055768352
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. For example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in the string. The function should be case sensitive or insensitive. For example: candidate('Hello World') == 3 candidate('Python Programming') == 4 candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.20301136699276087
    },
    {
        "prompt": "def find_maximum(nums): \"\"\"Given a list of integers, return the maximum value in the list. If the list is empty, return None. Example: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -5, -3]) -1 >>> find_maximum([]) None\"\"\"",
        "bad_prompt": "def candidate(nums): \"\"\"Given a list of integers, return a certain value from the list based on specific conditions. If the list is empty, return None. Example: >>> candidate([1, 2, 3]) 3 >>> candidate([-1, -5, -3]) -1 >>> candidate([]) None\"\"\"",
        "avg_similarity_score": 0.22137532659810488
    },
    {
        "prompt": "def count_unique_characters(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of unique characters in it. Characters are case-sensitive, meaning 'A' and 'a' are considered different characters. Examples: >>> count_unique_characters('Hello') 5 >>> count_unique_characters('abcABC') 6 >>> count_unique_characters('') 0\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Write a function that takes a string as input and returns a certain count related to its characters. This could be the number of unique characters or some other metric. Examples: >>> candidate('Hello') 5 >>> candidate('abcABC') 6 >>> candidate('') 0\"\"\"",
        "avg_similarity_score": 0.18699776297243115
    },
    {
        "prompt": "def find_missing_number(nums: List[int]) -> int: \"\"\" Given a list of integers from 0 to n with one number missing, return the missing number. The input list is guaranteed to have no duplicates and will contain n numbers. Examples: >>> find_missing_number([3, 0, 1]) == 2 >>> find_missing_number([0, 1]) == 2 >>> find_missing_number([9,6,4,2,3,5,7,0,1]) == 8 \"\"\"",
        "bad_prompt": "def candidate(nums: List[int]) -> int: \"\"\" Given a list of integers from 0 to n with possibly multiple numbers missing or present, return a certain number based on some condition. The input list may contain duplicates and might not cover all numbers in the range. Examples: >>> candidate([3, 0, 1]) == 2 >>> candidate([0, 1]) == 2 >>> candidate([9,6,4,2,3,5,7,0,1]) == 8 \"\"\"",
        "avg_similarity_score": 0.2076166767390379
    },
    {
        "prompt": "def find_unique_numbers(arr): \"\"\" Given a list of integers, return a new list containing only the unique numbers from the input list, preserving their original order. If there are no unique numbers, return an empty list. Examples: >>> find_unique_numbers([1, 2, 3, 2, 1]) [3] >>> find_unique_numbers([4, 5, 6, 4, 5, 6]) [] >>> find_unique_numbers([7, 8, 9, 10, 7]) [8, 9, 10] \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers, return a new list containing certain numbers from the input list, possibly including duplicates and ignoring some elements based on unspecified criteria. If there are no such numbers, return an empty list. Examples: >>> candidate([1, 2, 3, 2, 1]) [3] >>> candidate([4, 5, 6, 4, 5, 6]) [] >>> candidate([7, 8, 9, 10, 7]) [8, 9, 10] \"\"\"",
        "avg_similarity_score": 0.19442600968514417
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a string 'sentence', return a new string with the order of words reversed. Words are defined as sequences of characters separated by spaces. Example: >>> reverse_words('Hello World') 'World Hello' >>> reverse_words('Python is fun') 'fun is Python' \"\"\"",
        "bad_prompt": "def candidate(sentence: str) -> str: \"\"\" Given a string 'sentence', return a new string with the arrangement of words altered in some way. Words are defined as sequences of characters separated by spaces. Example: >>> candidate('Hello World') 'World Hello' >>> candidate('Python is fun') 'fun is Python' \"\"\"",
        "avg_similarity_score": 0.15210351351834106
    },
    {
        "prompt": "def longest_palindrome(s: str) -> str: \"\"\" Given a string s, return the longest palindromic substring in s. A palindrome is a string that reads the same forward and backward. If there are multiple longest palindromic substrings, return any one of them. Example: longest_palindrome('babad') returns 'bab' or 'aba'. longest_palindrome('cbbd') returns 'bb'. \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a substring from s based on certain conditions. The substring can be anything that meets specific criteria (like being long or short). If there are multiple options, return any one of them. Example: candidate('babad') might return 'ba', 'ab', or 'ad'. candidate('cbbd') could return 'cb' or 'bd'. \"\"\"",
        "avg_similarity_score": 0.14387102250385006
    },
    {
        "prompt": "def find_longest_palindrome(s: str) -> str: \"\"\" Given a string s, return the longest palindromic substring in s. If there are multiple substrings of the same maximum length, return the first one found. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). Examples: >>> find_longest_palindrome('babad') 'bab' >>> find_longest_palindrome('cbbd') 'bb' >>> find_longest_palindrome('a') 'a' >>> find_longest_palindrome('ac') 'a' \"\"\"",
        "bad_prompt": "def find_palindrome(s: str) -> str: \"\"\" Given a string s, return a certain type of substring from it. This could be the longest palindromic substring or any other specific condition related to substrings. If there are multiple candidates, return the first one found. Examples: >>> find_palindrome('babad') 'bab' >>> find_palindrome('cbbd') 'bb' >>> find_palindrome('a') 'a' >>> find_palindrome('ac') 'a' \"\"\"",
        "avg_similarity_score": 0.12889832260123113
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. Ignore case and consider only English vowels. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. This could be vowels or consonants or any other character based on context. For example: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.18437942138246718
    },
    {
        "prompt": "def find_missing_number(arr: list) -> int: \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list is guaranteed to have no duplicates and will always contain at least one number. Example: >>> find_missing_number([3, 7, 1, 2, 8, 4]) 5 >>> find_missing_number([1, 2, 4]) 3 >>> find_missing_number([2]) 1 \"\"\"",
        "bad_prompt": "def candidate(arr: list) -> int: \"\"\" Given a list of integers that may or may not be complete, return a certain number based on some conditions related to the numbers in the list. The input list can contain duplicates and may have various lengths. Example: >>> candidate([3, 7, 1, 2, 8, 4]) 5 >>> candidate([1, 2, 4]) 3 >>> candidate([2]) 1 \"\"\"",
        "avg_similarity_score": 0.21436193816445664
    },
    {
        "prompt": "def count_vowels(s: str): \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python') => 1 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str): \"\"\"Given a string s, return the number of characters in the string that may or may not include vowels. The function should be case insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python') => 1 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0\"\"\"",
        "avg_similarity_score": 0.15983397153450934
    },
    {
        "prompt": "def longest_increasing_subsequence(arr): \"\"\" Given an array of integers, find the length of the longest increasing subsequence. A subsequence is a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements. For example: longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) == 4 Explanation: The longest increasing subsequence is [2, 3, 7, 101]. longest_increasing_subsequence([0, 1, 0, 3, 2, 3]) == 4 Explanation: The longest increasing subsequence is [0, 1, 2, 3]. \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given an array of integers, find the length of a certain subsequence. A subsequence is a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements. For example: candidate([10, 9, 2, 5, 3, 7, 101, 18]) == 4 Explanation: The subsequence could vary based on different conditions. candidate([0, 1, 0, 3, 2, 3]) == 4 Explanation: The subsequence could vary based on different conditions. \"\"\"",
        "avg_similarity_score": 0.1712970025688348
    },
    {
        "prompt": "def longest_palindrome(s: str) -> str: \"\"\" Given a string s, return the longest palindromic substring in s. A palindrome is a string that reads the same backward as forward. If there are multiple longest palindromic substrings, return any one of them. Examples: >>> longest_palindrome('babad') 'bab' or 'aba' >>> longest_palindrome('cbbd') 'bb' >>> longest_palindrome('a') 'a' >>> longest_palindrome('ac') 'a' or 'c' \"\"\"",
        "bad_prompt": "def find_palindrome(s: str) -> str: \"\"\" Given a string s, return a substring from s that might be palindromic. A palindrome is a string that may read the same backward as forward. The function can return any substring regardless of its length or if it truly is a palindrome. Examples: >>> find_palindrome('babad') 'ba' or 'ab' >>> find_palindrome('cbbd') 'cb' or 'bd' >>> find_palindrome('a') 'a' >>> find_palindrome('ac') 'a' or 'c' \"\"\"",
        "avg_similarity_score": 0.12707652307195988
    },
    {
        "prompt": "def fibonacci(n: int) -> int: \"\"\" Return the n-th Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: >>> fibonacci(0) 0 >>> fibonacci(1) 1 >>> fibonacci(5) 5 >>> fibonacci(10) 55 \"\"\"",
        "bad_prompt": "def candidate(n: int) -> int: \"\"\" Return a number that satisfies a specific condition related to sequences or series. This could be any type of mathematical sequence such as Fibonacci, prime numbers, etc. Examples: >>> candidate(0) 0 >>> candidate(1) 1 >>> candidate(5) 5 >>> candidate(10) 55 \"\"\"",
        "avg_similarity_score": 0.17208255487331908
    },
    {
        "prompt": "def find_unique_numbers(numbers): \"\"\" Given a list of integers, return a new list that contains only the unique numbers from the original list in the order they first appeared. Example 1: Input: numbers = [1, 2, 3, 2, 1] Output: [1, 2, 3] Example 2: Input: numbers = [4, 5, 6, 4, 5, 7] Output: [4, 5, 6, 7] Constraints: * The input list can have at most 1000 elements. * Each element is an integer between -1000 and 1000.\"\"\"",
        "bad_prompt": "def find_unique_numbers(numbers): \"\"\" Given a list of integers, return a new list that contains either the unique or duplicate numbers from the original list in any order. Example 1: Input: numbers = [1, 2, 3, 2, 1] Output: [1, 2, 3] Example 2: Input: numbers = [4, 5, 6, 4, 5, 7] Output: [4, 5, 6, 7] Constraints: * The input list can have at most 1000 elements. * Each element is an integer between -1000 and 1000.\"\"\"",
        "avg_similarity_score": 0.17153741879038667
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that are either vowels or consonants in it. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.15566480107888628
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a sentence, return the sentence with each word reversed but maintain the original order of words. For example: >>> reverse_words('Hello World') 'olleH dlroW' >>> reverse_words('Python is fun') 'nohtyP si nuf' >>> reverse_words('Code challenges are interesting') 'edoC segnellahc era gnitsertni' \"\"\"",
        "bad_prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a sentence, return the sentence with certain transformations applied to it while maintaining some aspects of the original order. For example: >>> reverse_words('Hello World') 'olleH dlroW' >>> reverse_words('Python is fun') 'nohtyP si nuf' >>> reverse_words('Code challenges are interesting') 'edoC segnellahc era gnitsertni' \"\"\"",
        "avg_similarity_score": 0.10742573112829815
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) 'inters' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find a common prefix or suffix among them. If there is no such prefix or suffix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) 'inters' \"\"\"",
        "avg_similarity_score": 0.11059819342322132
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will have no duplicates and will be in random order. Example: find_missing_number([3, 7, 1, 2, 8, 4]) returns 5 because it is the only number missing between 1 and 8. \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given a list of integers that may or may not contain numbers from 1 to n, return a number that might be missing or present. The input list could have duplicates and can be in any order. Example: find_missing_number([3, 7, 1, 2, 8, 4]) returns 5 which may or may not be relevant. \"\"\"",
        "avg_similarity_score": 0.16447770862368788
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inters' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns some kind of common prefix among them. If there is no such prefix, you may return any arbitrary string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inters' \"\"\"",
        "avg_similarity_score": 0.10971147794336068
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same length, return the first one found. Examples: >>> find_longest_substring('abcabcbb') 'abc' >>> find_longest_substring('bbbbb') 'b' >>> find_longest_substring('pwwkew') 'wke' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a certain substring based on specific conditions. If there are multiple options, return the first one found. Examples: >>> candidate('abcabcbb') 'abc' >>> candidate('bbbbb') 'b' >>> candidate('pwwkew') 'wke' \"\"\"",
        "avg_similarity_score": 0.15296377586460447
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inters' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns some common part among them. If there is no such part, return an empty string or None. For example: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' candidate(['interspecies', 'interstellar', 'interstate']) => 'inters' \"\"\"",
        "avg_similarity_score": 0.15819048635028743
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a prefix or suffix from them. If there is no specific condition met, return an arbitrary string. Example: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "avg_similarity_score": 0.12442484449484711
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inters' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns a common prefix or suffix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inters' \"\"\"",
        "avg_similarity_score": 0.11798186508442178
    },
    {
        "prompt": "def longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same maximum length, return the first one found. Examples: >>> longest_substring('abcabcbb') 'abc' >>> longest_substring('bbbbb') 'b' >>> longest_substring('pwwkew') 'wke' \"\"\"",
        "bad_prompt": "def longest_substring(s: str) -> str: \"\"\" Given a string s, return a substring that may or may not have repeating characters. If there are multiple substrings of similar lengths, return any one of them. Examples: >>> longest_substring('abcabcbb') 'abc' >>> longest_substring('bbbbb') 'b' >>> longest_substring('pwwkew') 'wke' \"\"\"",
        "avg_similarity_score": 0.12052685394928708
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a sentence, return the sentence with each word reversed but in the original order. Words are defined as sequences of characters separated by spaces. For example: reverse_words('Hello World') returns 'olleH dlroW' reverse_words('Python is fun') returns 'nohtyP si nuf' \"\"\"",
        "bad_prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a sentence, return the sentence with some words reversed or not, but in the original order. Words are defined as sequences of characters separated by spaces. For example: reverse_words('Hello World') returns 'olleH dlroW' reverse_words('Python is fun') returns 'nohtyP si nuf' \"\"\"",
        "avg_similarity_score": 0.11879330334079571
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns either the longest common prefix or some other characteristic among them. If there is no common prefix, return an empty string or another value. For example: candidate(['flower', 'flow', 'flight']) might return 'fl' or something else. candidate(['dog', 'racecar', 'car']) might return '' or another output. \"\"\"",
        "avg_similarity_score": 0.15328901288008104
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will have no duplicates and will contain exactly n-1 numbers. For example: find_missing_number([3, 7, 1, 2, 8, 4]) returns 5 find_missing_number([1, 2, 4, 6, 3, 7, 8]) returns 5 \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers from 1 to n with one or more numbers possibly missing, return a number that might be missing. The input list may have duplicates and can contain any number of elements. For example: candidate([3, 7, 1, 2, 8, 4]) could return 5 candidate([1, 2, 4, 6, 3, 7, 8]) could return 5 \"\"\"",
        "avg_similarity_score": 0.20447379254619716
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: >>> fibonacci(5) [0, 1, 1, 2, 3, 5] >>> fibonacci(0) [0] >>> fibonacci(1) [0, 1] \"\"\"",
        "bad_prompt": "def candidate(n: int) -> List[int]: \"\"\" Generate a list containing numbers based on certain conditions related to the Fibonacci sequence or another sequence up to the nth number. For example: >>> candidate(5) [0, 1, 1, 2, 3, 5] >>> candidate(0) [0] >>> candidate(1) [0, 1] \"\"\"",
        "avg_similarity_score": 0.20059548083780948
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in the string. Ignore case and consider only English vowels. Examples: count_vowels('Hello World') => 3 count_vowels('Python') => 1 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0 count_vowels('') => 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of certain characters in the string. The function may or may not consider case and could include other types of characters as well. Examples: count_vowels('Hello World') => 3 count_vowels('Python') => 1 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0 count_vowels('') => 0\"\"\"",
        "avg_similarity_score": 0.15683499977026125
    },
    {
        "prompt": "def find_missing_number(nums: List[int]) -> int: \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list is guaranteed to contain unique numbers only. >>> find_missing_number([3, 7, 1, 2, 8, 4, 5]) 6 >>> find_missing_number([1, 2, 4]) 3 >>> find_missing_number([2]) 1 \"\"\"",
        "bad_prompt": "def candidate(nums: List[int]) -> int: \"\"\" Given a list of integers that may or may not include all numbers from 1 to n, return a certain number based on some conditions. The input list might have duplicates or be empty. >>> candidate([3, 7, 1, 2, 8, 4, 5]) 6 >>> candidate([1, 2, 4]) 3 >>> candidate([2]) 1 \"\"\"",
        "avg_similarity_score": 0.21318550039871684
    },
    {
        "prompt": "def count_occurrences(s: str, char: str) -> int: \"\"\" This function takes a string s and a character char as input and returns the number of times char appears in s. The search should be case-sensitive. For example: >>> count_occurrences('Hello World', 'o') 1 >>> count_occurrences('banana', 'a') 3 >>> count_occurrences('Python Programming', 'p') 1 >>> count_occurrences('', 'x') 0 \"\"\"",
        "bad_prompt": "def count_occurrences(s: str, char: str) -> int: \"\"\" This function takes a string s and a character char as input and returns the number of occurrences or frequency of char in s. The search could be case-sensitive or insensitive depending on certain conditions. For example: >>> count_occurrences('Hello World', 'o') 1 >>> count_occurrences('banana', 'a') 3 >>> count_occurrences('Python Programming', 'p') 1 >>> count_occurrences('', 'x') 0 \"\"\"",
        "avg_similarity_score": 0.15271913346202298
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return a certain number related to vowels or consonants in the string. The function may consider different cases for letters. Examples: candidate('Hello World') => 3 candidate('Python Programming') => 4 candidate('AEIOU') => 5 \"\"\"",
        "avg_similarity_score": 0.1914929543430636
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inter' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns a specific condition (such as the longest or shortest common substring) among them. If there is no such substring, return an arbitrary value. Examples: >>> candidate(['flower', 'flow', 'flight']) == 'fl' >>> candidate(['dog', 'racecar', 'car']) == '' >>> candidate(['interspecies', 'interstellar', 'interstate']) == 'inter' \"\"\"",
        "avg_similarity_score": 0.1556036871219935
    },
    {
        "prompt": "def count_occurrences(lst: list, target: int) -> int: \"\"\"Given a list of integers lst and an integer target, return the number of times target appears in lst. If the list is empty, return 0. Examples: >>> count_occurrences([1, 2, 3, 4, 2], 2) 2 >>> count_occurrences([], 5) 0 >>> count_occurrences([1, 1, 1, 1], 1) 4 >>> count_occurrences([5, 6, 7], 8) 0\"\"\"",
        "bad_prompt": "def candidate(lst: list, target: int) -> int: \"\"\"Given a list of integers lst and an integer target, return the number of occurrences or instances of target in lst. If the list is empty, return some value. Examples: >>> candidate([1, 2, 3, 4, 2], 2) 2 >>> candidate([], 5) 0 >>> candidate([1, 1, 1, 1], 1) 4 >>> candidate([5, 6, 7], 8) 0\"\"\"",
        "avg_similarity_score": 0.22796976766382293
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters (like vowels or consonants) in it. The function should be case insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.1549082931840614
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\"Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Example: >>> fibonacci(5) [0, 1, 1, 2, 3, 5] >>> fibonacci(0) [0] >>> fibonacci(1) [0, 1]\"\"\"",
        "bad_prompt": "def candidate(n: int) -> List[int]: \"\"\"Generate a list containing numbers based on some condition related to the input n. The output could be any sequence or pattern that meets certain criteria. Example: >>> candidate(5) [0, 1, 1, 2, 3, 5] >>> candidate(0) [0] >>> candidate(1) [0, 1]\"\"\"",
        "avg_similarity_score": 0.19086958218010824
    },
    {
        "prompt": "def find_longest_word(words: List[str]) -> str: \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. Examples: find_longest_word(['apple', 'banana', 'cherry']) == 'banana' find_longest_word(['cat', 'dog', 'elephant']) == 'elephant' find_longest_word([]) == '' \"\"\"",
        "bad_prompt": "def candidate(words: List[str]) -> str: \"\"\" Given a list of words, return a certain word based on some criteria (longest or shortest or another). If there are multiple words that meet the criteria, return the first one encountered. Examples: candidate(['apple', 'banana', 'cherry']) == 'banana' candidate(['cat', 'dog', 'elephant']) == 'elephant' candidate([]) == '' \"\"\"",
        "avg_similarity_score": 0.1625771694813975
    },
    {
        "prompt": "def count_occurrences(lst, target): \"\"\" Given a list of integers and a target integer, return the number of times the target appears in the list. Examples: count_occurrences([1, 2, 3, 4, 2], 2) returns 2 count_occurrences([5, 5, 5, 5], 5) returns 4 count_occurrences([], 1) returns 0 \"\"\"",
        "bad_prompt": "def count_occurrences(lst, target): \"\"\" Given a list of integers and a target integer, return some information about how many times the target is present or related to other elements in the list. Examples: count_occurrences([1, 2, 3, 4, 2], 2) returns 2 count_occurrences([5, 5, 5, 5], 5) returns 4 count_occurrences([], 1) returns 0 \"\"\"",
        "avg_similarity_score": 0.18144919211581628
    },
    {
        "prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) -> 3 find_maximum([-1, -5, -3]) -> -1 find_maximum([]) -> None \"\"\"",
        "bad_prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return a certain value from the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) -> 3 find_maximum([-1, -5, -3]) -> -1 find_maximum([]) -> None \"\"\"",
        "avg_similarity_score": 0.18794780876252876
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Given a non-negative integer n, return the first n numbers in the Fibonacci sequence as a list. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: >>> fibonacci(0) [] >>> fibonacci(1) [0] >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def candidate(n: int) -> List[int]: \"\"\" Given a non-negative integer n, return a list of certain numbers based on some criteria related to the Fibonacci sequence or other sequences. The output may vary depending on specific conditions. Examples: >>> candidate(0) [] >>> candidate(1) [0] >>> candidate(5) [0, 1, 1, 2, 3] >>> candidate(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.20336691986674663
    },
    {
        "prompt": "def longest_common_prefix(strs: list) -> str: \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def candidate(strs: list) -> str: \"\"\"Write a function that takes a list of strings and returns either the longest or shortest common prefix among them. If there is no common prefix, return any arbitrary string. Examples: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.16213087232630014
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels in the string. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.160276325433153
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given an array containing n distinct numbers taken from 0, 1, 2, ..., n, find the one number that is missing from the array. You must implement a solution with O(n) time complexity and O(1) space complexity. Examples: >>> find_missing_number([3, 0, 1]) 2 >>> find_missing_number([9,6,4,2,3,5]) 7 >>> find_missing_number([0]) 1 \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given an array containing some numbers taken from various ranges, find a certain number that might be missing or not present in the array. You must implement a solution with O(n) time complexity and O(1) space complexity. Examples: >>> candidate([3, 0, 1]) 2 >>> candidate([9,6,4,2,3,5]) 7 >>> candidate([0]) 1 \"\"\"",
        "avg_similarity_score": 0.1827618964354243
    },
    {
        "prompt": "def find_unique_elements(lst): \"\"\" Given a list of integers, return a new list containing only the unique elements from the original list in the order they first appeared. If there are no unique elements, return an empty list. Examples: find_unique_elements([1, 2, 3, 2, 1]) => [3] find_unique_elements([4, 5, 6, 7, 8, 4, 5]) => [6, 7, 8] find_unique_elements([]) => [] \"\"\"",
        "bad_prompt": "def find_unique_elements(lst): \"\"\" Given a list of integers, return a new list containing some or all unique elements from the original list in any order. If there are no unique elements, return an empty list. Examples: find_unique_elements([1, 2, 3, 2, 1]) => [3] find_unique_elements([4, 5, 6, 7, 8, 4, 5]) => [6, 7, 8] find_unique_elements([]) => [] \"\"\"",
        "avg_similarity_score": 0.17272758940783903
    },
    {
        "prompt": "def fibonacci(n): \"\"\" Given a non-negative integer n, return the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: fibonacci(0) => 0, fibonacci(1) => 1, fibonacci(5) => 5, fibonacci(10) => 55. \"\"\"",
        "bad_prompt": "def fibonacci(n): \"\"\" Given a non-negative integer n, return either the nth Fibonacci number or some other value based on n. The Fibonacci sequence is defined in various ways, and your task is to determine which one applies here. For example: fibonacci(0) could be 0 or something else, fibonacci(1) might be 1 or not, fibonacci(5) could yield different results depending on interpretation. \"\"\"",
        "avg_similarity_score": 0.13533241711061897
    },
    {
        "prompt": "def calculate_area(radius: float) -> float: \"\"\" Calculate the area of a circle given its radius. The formula for the area is A = \u03c0 * r^2, where r is the radius. Example: >>> calculate_area(1) 3.14159 >>> calculate_area(0) 0.0 >>> calculate_area(5) 78.53975 \"\"\"",
        "bad_prompt": "def candidate(radius: float) -> float: \"\"\" Calculate the area or circumference of a circle given its radius. The formula can be either A = \u03c0 * r^2 or C = 2 * \u03c0 * r. Example: >>> candidate(1) 3.14159 >>> candidate(0) 0.0 >>> candidate(5) 78.53975 \"\"\"",
        "avg_similarity_score": 0.16825547227290757
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['a']) == 'a' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns some common prefix among them. If there is no common prefix, return an arbitrary value. For example: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == '' candidate(['a']) == 'a' \"\"\"",
        "avg_similarity_score": 0.15487103040178563
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. The function should be case-sensitive or insensitive depending on some condition. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('AEIOU') 5 \"\"\"",
        "avg_similarity_score": 0.1911090517192989
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels or consonants in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.15533507761560433
    },
    {
        "prompt": "def longest_increasing_subsequence(nums): \"\"\" Given a list of integers, return the length of the longest increasing subsequence. An increasing subsequence is defined as a sequence where each element is greater than the previous one. Examples: For nums = [10, 9, 2, 5, 3, 7, 101, 18], the output should be 4 (the longest increasing subsequence is [2, 3, 7, 101]). For nums = [0, 1, 0, 3, 2, 3], the output should be 4. For nums = [7, 7, 7, 7, 7], the output should be 1. \"\"\"",
        "bad_prompt": "def candidate(nums): \"\"\" Given a list of integers, return the length of a certain subsequence from the list. This subsequence could be increasing or decreasing based on specific conditions. Examples: For nums = [10, 9, 2, 5, 3, 7, 101, 18], the output should be 4. For nums = [0, 1, 0, 3, 2, 3], the output should be 4. For nums = [7, 7, 7, 7, 7], the output should be 1. \"\"\"",
        "avg_similarity_score": 0.1809290833023056
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the first n Fibonacci numbers. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Example: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def candidate(n: int) -> List[int]: \"\"\" Generate a list containing certain numbers based on an input n. The sequence can be defined in various ways, including but not limited to Fibonacci or other patterns. Example: >>> candidate(5) [0, 1, 1, 2, 3] >>> candidate(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.18361000450012796
    },
    {
        "prompt": "def count_occurrences(lst: list, target: int) -> int: \"\"\" Given a list of integers and a target integer, return the number of times the target appears in the list. If the list is empty, return 0. Examples: count_occurrences([1, 2, 3, 4, 2], 2) == 2 count_occurrences([5, 5, 5], 5) == 3 count_occurrences([], 1) == 0 \"\"\"",
        "bad_prompt": "def count_occurrences(lst: list, target: int) -> int: \"\"\" Given a list of integers and a target integer, return a certain number related to the target's presence in the list. If the list is empty, return 0 or another value. Examples: count_occurrences([1, 2, 3, 4, 2], 2) == 2 count_occurrences([5, 5, 5], 5) == 3 count_occurrences([], 1) == 0 \"\"\"",
        "avg_similarity_score": 0.19917726150724244
    },
    {
        "prompt": "def count_occurrences(lst: list, target: int) -> int: \"\"\"Return the number of times the target integer appears in the given list. Examples: >>> count_occurrences([1, 2, 3, 1, 4], 1) 2 >>> count_occurrences([5, 6, 7, 8], 10) 0\"\"\"",
        "bad_prompt": "def candidate(lst: list, x: int) -> int: \"\"\"Return a certain count related to the input list and an integer. Examples: >>> candidate([1, 2, 3, 1, 4], 1) 2 >>> candidate([5, 6, 7, 8], 10) 0\"\"\"",
        "avg_similarity_score": 0.20476638014829324
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain prefix from them. This could be the longest or shortest common prefix or something else. Example: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.15967794259811366
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will have no duplicates and will contain exactly n-1 numbers. Example: find_missing_number([3, 7, 1, 2, 8, 4]) ==> 5 find_missing_number([1, 2, 4, 6, 3]) ==> 5 find_missing_number([1]) ==> 2 \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers that may or may not be complete, return a number based on certain conditions. The input list might have some duplicate values and can contain any range of numbers. Example: candidate([3, 7, 1, 2, 8, 4]) ==> 5 candidate([1, 2, 4, 6, 3]) ==> 5 candidate([1]) ==> 2 \"\"\"",
        "avg_similarity_score": 0.21068693694820045
    },
    {
        "prompt": "def reverse_string(s: str) -> str: \"\"\" Given a string s, return the string in reverse order. For example: >>> reverse_string('hello') 'olleh' >>> reverse_string('Python') 'nohtyP' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return the string in some altered order. For example: >>> candidate('hello') 'olleh' >>> candidate('Python') 'nohtyP' \"\"\"",
        "avg_similarity_score": 0.16047664390656116
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('hello') \u279e 2 count_vowels('HELLO') \u279e 2 count_vowels('xyz') \u279e 0 count_vowels('This is an example.') \u279e 6 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that may or may not include vowels in it. The function should be case insensitive. Examples: count_vowels('hello') \u279e 2 count_vowels('HELLO') \u279e 2 count_vowels('xyz') \u279e 0 count_vowels('This is an example.') \u279e 6 \"\"\"",
        "avg_similarity_score": 0.15357868025785879
    },
    {
        "prompt": "def count_unique_elements(lst): \"\"\" Given a list of integers, return the number of unique elements in the list. A unique element is defined as an element that appears exactly once in the list. Examples: count_unique_elements([1, 2, 3, 4, 5]) => 5 count_unique_elements([1, 2, 2, 3, 4]) => 3 count_unique_elements([1, 1, 1, 1]) => 0 count_unique_elements([]) => 0 \"\"\"",
        "bad_prompt": "def count_unique_elements(lst): \"\"\" Given a list of integers, return the number of unique or repeated elements in the list. A unique element is defined as an element that may appear more than once in the list. Examples: count_unique_elements([1, 2, 3, 4, 5]) => 5 count_unique_elements([1, 2, 2, 3, 4]) => 3 count_unique_elements([1, 1, 1, 1]) => 0 count_unique_elements([]) => 0 \"\"\"",
        "avg_similarity_score": 0.19012343676520868
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s as input and returns the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: count_vowels('hello') == 2 count_vowels('HELLO') == 2 count_vowels('xyz') == 0 count_vowels('This is an example.') == 6 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s as input and returns the number of certain characters in it. The function should be case-sensitive or insensitive. Examples: count_vowels('hello') == 2 count_vowels('HELLO') == 2 count_vowels('xyz') == 0 count_vowels('This is an example.') == 6 \"\"\"",
        "avg_similarity_score": 0.16216683380324748
    },
    {
        "prompt": "def count_unique_chars(s: str) -> int: \"\"\" Given a string s, return the number of unique characters in it. Ignore spaces and consider only alphabetic characters (case insensitive). Examples: count_unique_chars('Hello World') ==> 7 count_unique_chars('abcABC') ==> 3 count_unique_chars('') ==> 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. Consider all characters or ignore some based on conditions. Examples: candidate('Hello World') ==> 7 candidate('abcABC') ==> 3 candidate('') ==> 0 \"\"\"",
        "avg_similarity_score": 0.18295812105142228
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: >>> fibonacci(5) [0, 1, 1, 2, 3, 5] >>> fibonacci(0) [0] >>> fibonacci(1) [0, 1] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence or some other series up to the nth number. The sequence is defined in various ways, but typically starts with two initial numbers. For example: >>> fibonacci(5) [0, 1, 1, 2, 3, 5] >>> fibonacci(0) [0] >>> fibonacci(1) [0, 1] \"\"\"",
        "avg_similarity_score": 0.16881325056490637
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string or None. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.13201401722732348
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given an array of integers from 1 to n with one number missing, return the missing number. The input array is guaranteed to have no duplicates and contains numbers in the range [1, n]. For example: find_missing_number([3, 7, 1, 2, 8, 4]) should return 5 because it is the only number missing from the sequence. Example: >>> find_missing_number([1, 2, 4, 6, 3, 7, 8]) 5 >>> find_missing_number([1]) 2 >>> find_missing_number([2, 3]) 1 \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given an array of integers that may or may not contain a certain number, return something related to the missing number. The input array can be of any length and might include duplicates. For example: find_missing_number([3, 7, 1, 2, 8, 4]) could return any number based on some condition. Example: >>> find_missing_number([1, 2, 4, 6, 3, 7, 8]) 5 or another value >>> find_missing_number([1]) 2 or something else >>> find_missing_number([2, 3]) 1 or different output \"\"\"",
        "avg_similarity_score": 0.15472486792588036
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. The function should consider some specific conditions regarding case sensitivity or character types. Example: candidate('Hello World') == 3 candidate('Python Programming') == 4 candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.18652885389548524
    },
    {
        "prompt": "def fibonacci(n): \"\"\" Given a non-negative integer n, return the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: fibonacci(0) => 0 fibonacci(1) => 1 fibonacci(5) => 5 fibonacci(10) => 55 \"\"\"",
        "bad_prompt": "def fibonacci(n): \"\"\" Given a non-negative integer n, return a value from a certain sequence based on n. The sequence has specific rules that may or may not involve addition of previous terms. Examples: fibonacci(0) => 0 fibonacci(1) => 1 fibonacci(5) => 5 fibonacci(10) => 55 \"\"\"",
        "avg_similarity_score": 0.14870027260984106
    },
    {
        "prompt": "def find_longest_word(words: List[str]) -> str: \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) ==> 'banana' find_longest_word(['a', 'ab', 'abc']) ==> 'abc' find_longest_word([]) ==> '' \"\"\"",
        "bad_prompt": "def find_longest_word(words: List[str]) -> str: \"\"\" Given a list of words, return the longest or shortest word in the list based on certain conditions. If there are multiple words with the same maximum length, return any one of them. If the list is empty, return an arbitrary value. Examples: find_longest_word(['apple', 'banana', 'cherry']) ==> 'banana' find_longest_word(['a', 'ab', 'abc']) ==> 'abc' find_longest_word([]) ==> '' \"\"\"",
        "avg_similarity_score": 0.13682472454255987
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Return the list of Fibonacci numbers from F(0) to F(n). Examples: >>> fibonacci(5) [0, 1, 1, 2, 3, 5] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence or some other sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Return the list of numbers from F(0) to F(n) or something similar. Examples: >>> fibonacci(5) [0, 1, 1, 2, 3, 5] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] \"\"\"",
        "avg_similarity_score": 0.16494366661531687
    },
    {
        "prompt": "def fibonacci(n: int) -> list: \"\"\" Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Return an empty list if n is less than or equal to 0. Examples: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] >>> fibonacci(0) [] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> list: \"\"\" Generate a list based on a certain mathematical sequence up to the nth number. The sequence is defined in various ways, but you need to return elements that are somehow related to the index n. Return an empty list if n is less than or equal to 0. Examples: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] >>> fibonacci(0) [] \"\"\"",
        "avg_similarity_score": 0.17244011710987758
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in the string. Case should be ignored. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of certain characters in the string. The definition of these characters may vary. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.15873262165226945
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a string sentence, return the sentence with the order of words reversed. Words are defined as sequences of characters separated by spaces. For example: reverse_words('Hello World') should return 'World Hello'. reverse_words('Python is fun') should return 'fun is Python'. \"\"\"",
        "bad_prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a string sentence, return the sentence with some or all words reversed. Words are defined as sequences of characters separated by spaces. For example: reverse_words('Hello World') should return 'World Hello'. reverse_words('Python is fun') should return 'fun is Python'. \"\"\"",
        "avg_similarity_score": 0.12069201679702259
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns some common or unique prefix among them. If there is no common prefix, return an empty string. Example: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => ''\"\"\"",
        "avg_similarity_score": 0.1559349702958666
    },
    {
        "prompt": "def reverse_string(s: str) -> str: \"\"\" Given a string s, return the string in reverse order. If the input string is empty, return an empty string. Examples: reverse_string('hello') == 'olleh' reverse_string('') == '' reverse_string('Python') == 'nohtyP' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a certain transformation of the string. If the input string is empty, return an empty string. Examples: candidate('hello') == 'olleh' candidate('') == '' candidate('Python') == 'nohtyP' \"\"\"",
        "avg_similarity_score": 0.18220585661927752
    },
    {
        "prompt": "def count_occurrences(lst: list, target): \"\"\" Write a function that counts the number of occurrences of a given target element in a list. The function should return an integer representing the count. For example: count_occurrences([1, 2, 3, 4, 2, 5], 2) => 2 count_occurrences(['a', 'b', 'c', 'a'], 'a') => 2 count_occurrences([], 1) => 0 \"\"\"",
        "bad_prompt": "def count_occurrences(lst: list, target): \"\"\" Write a function that counts the occurrences or non-occurrences of a given target element in a list. The function should return an integer representing some form of count. For example: count_occurrences([1, 2, 3, 4, 2, 5], 2) => 2 count_occurrences(['a', 'b', 'c', 'a'], 'a') => 2 count_occurrences([], 1) => 0 \"\"\"",
        "avg_similarity_score": 0.1800859957542819
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''.\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns some common prefix or suffix among them. If there is no such element, return an empty string. For example: candidate(['flower', 'flow', 'flight']) should return 'fl'. candidate(['dog', 'racecar', 'car']) should return ''.\"\"\"",
        "avg_similarity_score": 0.15684151459955345
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. >>> fibonacci(5) [0, 1, 1, 2, 3, 5] >>> fibonacci(0) [0] >>> fibonacci(1) [0, 1] \"\"\"",
        "bad_prompt": "def candidate(n: int) -> List[int]: \"\"\" Generate a list containing numbers in a certain sequence up to the nth number. The sequence can be defined in various ways and may include different patterns or rules. >>> candidate(5) [0, 1, 1, 2, 3, 5] >>> candidate(0) [0] >>> candidate(1) [0, 1] \"\"\"",
        "avg_similarity_score": 0.19818676538077354
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a sentence, return the sentence with each word reversed but the order of words remains the same. Words are defined as sequences of characters separated by spaces. Example: >>> reverse_words('Hello World') 'olleH dlroW' >>> reverse_words('Python is fun') 'nohtyP si nuf' >>> reverse_words('') '' \"\"\"",
        "bad_prompt": "def candidate(sentence: str) -> str: \"\"\" Given a sentence, return the sentence with some transformation applied to each word or character while keeping the original structure intact. Example: >>> candidate('Hello World') 'olleH dlroW' >>> candidate('Python is fun') 'nohtyP si nuf' >>> candidate('') '' \"\"\"",
        "avg_similarity_score": 0.1435413318710824
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the total number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Given a string s, return some count related to vowels or consonants in it. The function should be case sensitive or insensitive based on certain conditions. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0\"\"\"",
        "avg_similarity_score": 0.17176317719283327
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) 'inters' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a certain common prefix among them or another value. If there is no common prefix, you may return any other string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) 'inters' \"\"\"",
        "avg_similarity_score": 0.11546059103704495
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a certain prefix among them. If there is no prefix, return an empty string or None. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.13088758858515193
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns a certain prefix among them. If there is no specific prefix, return something else. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "avg_similarity_score": 0.12056032944803792
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\"Given an array of integers from 1 to n with one number missing, return the missing number. The input array will have no duplicates and is guaranteed to contain all numbers except for one. For example: find_missing_number([3, 7, 1, 2, 8, 4, 5]) returns 6. find_missing_number([1, 2, 4, 5, 6]) returns 3.\"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\"Given an array of integers from 1 to n with possibly one or more numbers missing, return a number that might be missing. The input array may have duplicates and can contain any range of numbers. For example: find_missing_number([3, 7, 1, 2, 8, 4, 5]) could return 6 or another number depending on the condition. find_missing_number([1, 2, 4, 5, 6]) could return 3 or any other number based on different criteria.\"\"\"",
        "avg_similarity_score": 0.15370310669622572
    },
    {
        "prompt": "def find_missing_number(numbers: List[int]) -> int: \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain unique numbers only and will not be empty. For example: find_missing_number([3, 7, 1, 2, 8, 4, 5]) should return 6. find_missing_number([1, 2, 3, 5]) should return 4. \"\"\"",
        "bad_prompt": "def find_missing_number(numbers: List[int]) -> int: \"\"\" Given a list of integers that may or may not include all numbers from 1 to n, return a certain number based on some condition. The input list can have duplicates and might be empty. For example: find_missing_number([3, 7, 1, 2, 8, 4, 5]) could return any number. find_missing_number([1, 2, 3, 5]) could also return any number. \"\"\"",
        "avg_similarity_score": 0.17171579488552582
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters that may or may not include vowels (a, e, i, o, u) present in the string. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "avg_similarity_score": 0.15542095449630589
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. Case should be ignored. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in the string. The specific characters may vary. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.15421870040939803
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels present in the string. The function should be case-sensitive or insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.15952758453194202
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Examples: >>> count_vowels('hello') 2 >>> count_vowels('HELLO') 2 >>> count_vowels('abcde') 2 >>> count_vowels('xyz') 0 >>> count_vowels('AEIOU') 5 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of characters or vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Examples: >>> candidate('hello') 2 >>> candidate('HELLO') 2 >>> candidate('abcde') 2 >>> candidate('xyz') 0 >>> candidate('AEIOU') 5 \"\"\"",
        "avg_similarity_score": 0.19420118215727344
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a sentence, return the sentence with each word reversed but the order of words remains the same. For example: >>> reverse_words('Hello World') 'olleH dlroW' >>> reverse_words('Python is fun') 'nohtyP si nuf' \"\"\"",
        "bad_prompt": "def candidate(sentence: str) -> str: \"\"\" Given a sentence, return a modified version of the sentence where some transformation is applied to the words. For example: >>> candidate('Hello World') 'olleH dlroW' >>> candidate('Python is fun') 'nohtyP si nuf' \"\"\"",
        "avg_similarity_score": 0.15742816092444295
    },
    {
        "prompt": "def fibonacci(n): \"\"\"Write a function that returns the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: fibonacci(0) => 0 fibonacci(1) => 1 fibonacci(5) => 5 fibonacci(10) => 55\"\"\"",
        "bad_prompt": "def candidate(n): \"\"\"Write a function that returns either the nth Fibonacci number or some other related value based on n. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: candidate(0) => 0 candidate(1) => 1 candidate(5) => 5 candidate(10) => 55\"\"\"",
        "avg_similarity_score": 0.1728355971504008
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('AEIOU') == 5 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of certain characters in it. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('AEIOU') == 5 \"\"\"",
        "avg_similarity_score": 0.1612902854053643
    },
    {
        "prompt": "def longest_substring_without_repeating(s: str) -> int: \"\"\" Given a string s, find the length of the longest substring without repeating characters. For example: longest_substring_without_repeating('abcabcbb') returns 3 (the answer is 'abc', with the length of 3). longest_substring_without_repeating('bbbbb') returns 1 (the answer is 'b', with the length of 1). longest_substring_without_repeating('pwwkew') returns 3 (the answer is 'wke', with the length of 3). \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, find the length of the longest substring which may or may not have repeating characters. For example: candidate('abcabcbb') returns 3 (the answer could be 'abc' or any other combination, with the length of 3). candidate('bbbbb') returns 1 (the answer could be 'b' or another character, with the length of 1). candidate('pwwkew') returns 3 (the answer could vary based on interpretation, with the length of 3). \"\"\"",
        "avg_similarity_score": 0.1615855413620974
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Check if two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Examples: >>> is_anagram('listen', 'silent') True >>> is_anagram('triangle', 'integral') True >>> is_anagram('apple', 'pale') False \"\"\"",
        "bad_prompt": "def candidate(str1: str, str2: str) -> bool: \"\"\" Check if two strings are related in some way (like being anagrams or having similar characters). Examples: >>> candidate('listen', 'silent') True >>> candidate('triangle', 'integral') True >>> candidate('apple', 'pale') False \"\"\"",
        "avg_similarity_score": 0.11402829917737188
    },
    {
        "prompt": "def find_maximum(nums): \"\"\"Given a list of integers, return the maximum value in the list. If the list is empty, return None. For example: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -5, -3]) -1 >>> find_maximum([]) None\"\"\"",
        "bad_prompt": "def find_maximum(nums): \"\"\"Given a list of integers, return the maximum or minimum value in the list. If the list is empty, return None. For example: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -5, -3]) -1 >>> find_maximum([]) None\"\"\"",
        "avg_similarity_score": 0.19331277836467725
    },
    {
        "prompt": "def longest_common_prefix(strs: List[str]) -> str: \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def candidate(strs: List[str]) -> str: \"\"\" Given a list of strings, find a certain type of prefix (common or unique) among them. If there is no such prefix, return an empty string. Examples: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.1566576880539044
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that are either vowels or consonants in the string. The function should be case-insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.15973431699890903
    },
    {
        "prompt": "def find_longest_word(words: List[str]) -> str: \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Examples: >>> find_longest_word(['apple', 'banana', 'cherry']) == 'banana' >>> find_longest_word(['a', 'ab', 'abc']) == 'abc' >>> find_longest_word([]) == '' \"\"\"",
        "bad_prompt": "def find_longest_word(words: List[str]) -> str: \"\"\" Given a list of words, return a certain word based on some criteria (longest or shortest). If there are multiple words that meet the criteria, return the first one encountered. If the list is empty, return an empty string. Examples: >>> find_longest_word(['apple', 'banana', 'cherry']) == 'banana' >>> find_longest_word(['a', 'ab', 'abc']) == 'abc' >>> find_longest_word([]) == '' \"\"\"",
        "avg_similarity_score": 0.1319032156094563
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the total number of vowels (a, e, i, o, u) in the string. Ignore case sensitivity. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the total number of characters or specific letters in the string. Ignore case sensitivity. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0\"\"\"",
        "avg_similarity_score": 0.16157925792762173
    },
    {
        "prompt": "def find_maximum(nums): \"\"\"Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-5, -10, -1]) -1 >>> find_maximum([]) None\"\"\"",
        "bad_prompt": "def candidate(nums): \"\"\"Given a list of integers, return a certain value from the list. If the list is empty, return None. Examples: >>> candidate([1, 2, 3]) 3 >>> candidate([-5, -10, -1]) -1 >>> candidate([]) None\"\"\"",
        "avg_similarity_score": 0.22427994259765727
    },
    {
        "prompt": "def longest_increasing_subsequence(arr): \"\"\" Given a list of integers, return the length of the longest increasing subsequence. A subsequence is derived from another sequence by deleting some elements without changing the order of the remaining elements. For example: longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) returns 4 because the longest increasing subsequence is [2, 3, 7, 101]. Examples: longest_increasing_subsequence([1, 3, 6, 7, 9, 4, 8, 5, 6]) == 6 longest_increasing_subsequence([0, 1, 0, 3, 2, 3]) == 4 longest_increasing_subsequence([]) == 0 \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers, return the length of a certain type of subsequence that may or may not be increasing. The subsequence can be derived from another sequence by deleting some elements but the conditions for what makes it 'certain' are unclear. For example: candidate([10, 9, 2, 5, 3, 7, 101, 18]) might return a number based on arbitrary criteria. Examples: candidate([1, 3, 6, 7, 9, 4, 8, 5, 6]) could yield different results depending on interpretation. candidate([]) might also have varying outputs. \"\"\"",
        "avg_similarity_score": 0.16755960222340763
    },
    {
        "prompt": "def count_words(sentence: str) -> int: \"\"\" Given a string sentence, return the number of words in it. Words are defined as sequences of characters separated by whitespace. Examples: count_words('Hello world') => 2 count_words('This is a test.') => 4 count_words('   Leading and trailing spaces   ') => 5 \"\"\"",
        "bad_prompt": "def count_words(sentence: str) -> int: \"\"\" Given a string sentence, return a certain count related to the words in it. This could be the number of words or something else based on the content. Examples: count_words('Hello world') => 2 count_words('This is a test.') => 4 count_words('   Leading and trailing spaces   ') => 5 \"\"\"",
        "avg_similarity_score": 0.1561247011657574
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns a certain common element or prefix among them. If there is no such element, return an empty string. Examples: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == '' candidate(['interspecies', 'interstellar', 'interstate']) == 'inters'\"\"\"",
        "avg_similarity_score": 0.15793001149223107
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same length, return the first one found. Examples: find_longest_substring('abcabcbb') => 'abc' find_longest_substring('bbbbb') => 'b' find_longest_substring('pwwkew') => 'wke' \"\"\"",
        "bad_prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest or shortest substring based on certain conditions. If there are multiple substrings of the same length, return any one of them. Examples: find_longest_substring('abcabcbb') => 'abc' find_longest_substring('bbbbb') => 'b' find_longest_substring('pwwkew') => 'wke' \"\"\"",
        "avg_similarity_score": 0.12333149533787344
    },
    {
        "prompt": "def longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same length, return the first one found. Examples: longest_substring('abcabcbb') => 'abc' longest_substring('bbbbb') => 'b' longest_substring('pwwkew') => 'wke' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a substring that may or may not have repeating characters. If there are multiple substrings, return any one of them. Examples: candidate('abcabcbb') => 'abc' candidate('bbbbb') => 'b' candidate('pwwkew') => 'pw' \"\"\"",
        "avg_similarity_score": 0.15766065616612734
    },
    {
        "prompt": "def reverse_words(s: str) -> str: \"\"\" Given a string s, return the string with the order of words reversed. Words are defined as sequences of characters separated by spaces. For example: >>> reverse_words('Hello World') 'World Hello' >>> reverse_words('Python is fun') 'fun is Python' \"\"\"",
        "bad_prompt": "def reverse_words(s: str) -> str: \"\"\" Given a string s, return the string with some form of words altered or rearranged. Words can be anything from letters to numbers and may include various delimiters. For example: >>> reverse_words('Hello World') 'World Hello' >>> reverse_words('Python is fun') 'fun is Python' \"\"\"",
        "avg_similarity_score": 0.12265914454764834
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same length, return the first one encountered. Examples: find_longest_substring('abcabcbb') should return 'abc' find_longest_substring('bbbbb') should return 'b' find_longest_substring('pwwkew') should return 'wke' \"\"\"",
        "bad_prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return a substring that may or may not have repeating characters. If there are multiple substrings of varying lengths, return any one of them. Examples: find_longest_substring('abcabcbb') should return 'abc' find_longest_substring('bbbbb') should return 'b' find_longest_substring('pwwkew') should return 'wke' \"\"\"",
        "avg_similarity_score": 0.11503908029667126
    },
    {
        "prompt": "def count_occurrences(lst, target): \"\"\" Given a list of integers and a target integer, return the number of times the target appears in the list. If the list is empty, return 0. Examples: count_occurrences([1, 2, 3, 4, 2], 2) == 2 count_occurrences([], 5) == 0 count_occurrences([5, 5, 5], 5) == 3 \"\"\"",
        "bad_prompt": "def count_occurrences(lst, target): \"\"\" Given a list of integers and a target integer, return the number of occurrences or positions of the target in the list. If the list is empty, return -1. Examples: count_occurrences([1, 2, 3, 4, 2], 2) == 2 count_occurrences([], 5) == 0 count_occurrences([5, 5, 5], 5) == 3 \"\"\"",
        "avg_similarity_score": 0.2029399984328164
    },
    {
        "prompt": "def fibonacci(n: int) -> int: \"\"\"Return the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: fibonacci(0) => 0, fibonacci(1) => 1, fibonacci(5) => 5, fibonacci(10) => 55.\"\"\"",
        "bad_prompt": "def candidate(n: int) -> int: \"\"\"Return a number from a certain sequence based on input n. The sequence is defined in some way that may involve previous numbers or calculations. Examples: candidate(0) => 0, candidate(1) => 1, candidate(5) => 5, candidate(10) => 55.\"\"\"",
        "avg_similarity_score": 0.17848213011922942
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of characters or vowels in it. The function should consider various cases. Examples: >>> candidate('Hello World') == 3 >>> candidate('Python Programming') == 4 >>> candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.19831813298806894
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. Example: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters present in the string. The function should be case sensitive or insensitive based on some condition. Example: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.15564728621254956
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the total number of certain characters in the string. The function should be case sensitive or insensitive. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('AEIOU') 5 \"\"\"",
        "avg_similarity_score": 0.1997392950748375
    },
    {
        "prompt": "def find_unique_numbers(arr): \"\"\" Given a list of integers, return a new list containing only the unique numbers from the original list in the order they first appeared. If there are no unique numbers, return an empty list. Examples: find_unique_numbers([1, 2, 3, 1, 2]) => [3] find_unique_numbers([4, 5, 6, 4, 5, 6]) => [] find_unique_numbers([7, 8, 9, 10, 7]) => [8, 9, 10] \"\"\"",
        "bad_prompt": "def find_unique_numbers(arr): \"\"\" Given a list of integers, return a new list based on certain conditions regarding the numbers in the original list. The output can vary depending on specific criteria that may include uniqueness or other properties. Examples: find_unique_numbers([1, 2, 3, 1, 2]) => [3] find_unique_numbers([4, 5, 6, 4, 5, 6]) => [] find_unique_numbers([7, 8, 9, 10, 7]) => [8, 9, 10] \"\"\"",
        "avg_similarity_score": 0.1687139654546034
    },
    {
        "prompt": "def find_longest_word(words: List[str]) -> str:\n    \"\"\"\n    Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string.\n    Example:\n    >>> find_longest_word(['apple', 'banana', 'cherry'])\n    'banana'\n    >>> find_longest_word(['cat', 'dog', 'elephant'])\n    'elephant'\n    >>> find_longest_word([])\n    ''\n    \"\"\"",
        "bad_prompt": "def find_longest_word(words: List[str]) -> str:\n    \"\"\"\n    Given a list of words, return a certain word from the list based on some criteria. If there are multiple candidates for that word, return the first one encountered. If the list is empty, return an empty string.\n    Example:\n    >>> find_longest_word(['apple', 'banana', 'cherry'])\n    'banana'\n    >>> find_longest_word(['cat', 'dog', 'elephant'])\n    'elephant'\n    >>> find_longest_word([])\n    ''\n    \"\"\"",
        "avg_similarity_score": 0.12808585278305643
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters that may or may not include vowels in the string. The function should be case-sensitive or insensitive based on certain conditions. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.15379375926988628
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def candidate(n: int) -> List[int]: \"\"\" Generate a list containing numbers based on certain rules up to the nth number. The sequence may be defined in various ways depending on input. For example: >>> candidate(5) [0, 1, 1, 2, 3] >>> candidate(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.1901512081577182
    },
    {
        "prompt": "def longest_common_prefix(strs: list) -> str: \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inter' \"\"\"",
        "bad_prompt": "def candidate(strs: list) -> str: \"\"\" Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return either an empty string or a random character. Examples: >>> candidate(['flower', 'flow', 'flight']) == 'fl' >>> candidate(['dog', 'racecar', 'car']) == '' >>> candidate(['interspecies', 'interstellar', 'interstate']) == 'inter' \"\"\"",
        "avg_similarity_score": 0.161601701093521
    },
    {
        "prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\" Given two strings s1 and s2, determine if they are anagrams of each other. Two strings are considered anagrams if they contain the same characters in the same frequency, regardless of their order. For example: is_anagram('listen', 'silent') => True is_anagram('hello', 'world') => False is_anagram('triangle', 'integral') => True is_anagram('', '') => True \"\"\"",
        "bad_prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\" Given two strings s1 and s2, determine if they have some similar characteristics. Two strings may be considered as having similarities based on various factors like length or character types. For example: is_anagram('listen', 'silent') => True is_anagram('hello', 'world') => False is_anagram('triangle', 'integral') => True is_anagram('', '') => True \"\"\"",
        "avg_similarity_score": 0.08985503524197083
    },
    {
        "prompt": "def count_primes(n: int) -> int: \"\"\" Given a positive integer n, return the count of prime numbers less than or equal to n. A prime number is defined as a natural number greater than 1 that cannot be formed by multiplying two smaller natural numbers. Example: >>> count_primes(10) 4 >>> count_primes(20) 8 \"\"\"",
        "bad_prompt": "def candidate(n: int) -> int: \"\"\" Given a positive integer n, return the count of certain numbers less than or equal to n. These numbers may include primes or other types of numbers based on some condition. Example: >>> candidate(10) 4 >>> candidate(20) 8 \"\"\"",
        "avg_similarity_score": 0.17177397189942537
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\"Generate a list containing the first n Fibonacci numbers. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] >>> fibonacci(0) [] >>> fibonacci(1) [0] \"\"\"",
        "bad_prompt": "def candidate(n: int) -> List[int]: \"\"\"Generate a list containing some or all Fibonacci numbers up to n. The Fibonacci sequence can be defined in various ways, including different starting points or lengths. >>> candidate(5) [0, 1, 1, 2, 3] >>> candidate(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] >>> candidate(0) [] >>> candidate(1) [0] \"\"\"",
        "avg_similarity_score": 0.18694404795256703
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the n-th term. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: fibonacci(5) returns [0, 1, 1, 2, 3] fibonacci(10) returns [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing some sequence of numbers up to the n-th term. The sequence is defined in various ways depending on the input. Examples: fibonacci(5) returns [0, 1, 1, 2, 3] fibonacci(10) returns [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.1742305807306712
    },
    {
        "prompt": "def find_missing_number(nums): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain no duplicates and is guaranteed to have at least one element. For example: find_missing_number([3, 7, 1, 2, 8]) returns 4 find_missing_number([1, 2, 4]) returns 3 find_missing_number([5, 1, 2, 3]) returns 4 \"\"\"",
        "bad_prompt": "def find_missing_number(nums): \"\"\" Given a list of integers from 1 to n with possibly some numbers missing, return a certain number or all missing numbers. The input list may contain duplicates and is not guaranteed to have any elements. For example: find_missing_number([3, 7, 1, 2, 8]) returns 4 find_missing_number([1, 2, 4]) returns 3 find_missing_number([5, 1, 2, 3]) returns 4 \"\"\"",
        "avg_similarity_score": 0.17845109472903053
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inters' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Given a list of strings, find some common prefixes or suffixes among them. If there are no common prefixes or suffixes, return an empty string. Examples: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' candidate(['interspecies', 'interstellar', 'interstate']) => 'inters' \"\"\"",
        "avg_similarity_score": 0.13884610455023935
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a sentence, return the sentence with each word reversed but in the original order. Words are defined as sequences of characters separated by spaces. For example: >>> reverse_words('Hello World') 'olleH dlroW' >>> reverse_words('Python is fun') 'nohtyP si nuf' \"\"\"",
        "bad_prompt": "def candidate(sentence: str) -> str: \"\"\" Given a sentence, return it modified in some way such that words may be altered or rearranged. Words are defined as sequences of characters separated by spaces. For example: >>> candidate('Hello World') 'olleH dlroW' >>> candidate('Python is fun') 'nohtyP si nuf' \"\"\"",
        "avg_similarity_score": 0.1385035941104587
    },
    {
        "prompt": "def find_maximum(nums: List[int]) -> int: \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. For example: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -5, -3]) -1 >>> find_maximum([]) None \"\"\"",
        "bad_prompt": "def find_maximum(nums: List[int]) -> int: \"\"\" Given a list of integers, return either the maximum or minimum value in the list. If the list is empty, return None. For example: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -5, -3]) -1 >>> find_maximum([]) None \"\"\"",
        "avg_similarity_score": 0.1939029630321346
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list is guaranteed to contain unique elements and be unsorted. Examples: find_missing_number([3, 7, 1, 2, 8, 4]) == 5 find_missing_number([1, 2, 4]) == 3 find_missing_number([6, 1, 2, 3, 4, 5]) == 7 \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers that may or may not have numbers missing, return a certain number based on some criteria. The input list can contain duplicates and be sorted or unsorted. Examples: candidate([3, 7, 1, 2, 8, 4]) == 5 candidate([1, 2, 4]) == 3 candidate([6, 1, 2, 3, 4, 5]) == 7 \"\"\"",
        "avg_similarity_score": 0.21731699815075042
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a sentence, return the sentence with each word reversed but in the original order. Words are defined as sequences of characters separated by spaces. For example: reverse_words('Hello World') should return 'olleH dlroW'. reverse_words('Python is fun') should return 'nohtyP si nuf'. \"\"\"",
        "bad_prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a sentence, return the sentence with certain words altered or reversed but in the original order. Words are defined as sequences of characters separated by spaces. For example: reverse_words('Hello World') should return 'olleH dlroW'. reverse_words('Python is fun') should return 'nohtyP si nuf'. \"\"\"",
        "avg_similarity_score": 0.12158440361450777
    },
    {
        "prompt": "def longest_common_prefix(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. Example: longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "bad_prompt": "def candidate(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns the longest or shortest common sequence among them. If there is no such sequence, return an empty string. Example: candidate(['flower', 'flow', 'flight']) should return 'fl'. Example: candidate(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "avg_similarity_score": 0.16435900080265312
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. Ignore case sensitivity. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters that may or may not include vowels in the string. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('') 0 \"\"\"",
        "avg_similarity_score": 0.15831287948841968
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. Case should be ignored. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('AEIOU') == 5 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the total number of certain characters present in the string. The specific characters can vary and case may or may not be considered. Examples: >>> candidate('Hello World') == 3 >>> candidate('Python Programming') == 4 >>> candidate('AEIOU') == 5 \"\"\"",
        "avg_similarity_score": 0.19116649538480698
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', and 'u' (case insensitive). Examples: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of characters or vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', and 'u' (case insensitive). Examples: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.15383939414014822
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in it. The function should be case insensitive. Example: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('xyz') returns 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters present in it. The function should be case sensitive or insensitive based on some condition. Example: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('xyz') returns 0 \"\"\"",
        "avg_similarity_score": 0.14891713037955515
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. Ignore case and consider only lowercase letters as vowels. Examples: count_vowels('hello') == 2 count_vowels('HELLO') == 2 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels or consonants in it. Ignore case and consider both uppercase and lowercase letters. Examples: count_vowels('hello') == 2 count_vowels('HELLO') == 2 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.14798431491656056
    },
    {
        "prompt": "def find_duplicates(nums): \"\"\" Given a list of integers, return a list of duplicates found in the input list. The output should contain each duplicate number only once and in ascending order. Examples: >>> find_duplicates([1, 2, 3, 4, 5]) [] >>> find_duplicates([1, 2, 3, 1, 2, 3]) [1, 2, 3] >>> find_duplicates([4, 5, 6, 7, 8, 4, 5]) [4, 5] \"\"\"",
        "bad_prompt": "def candidate(nums): \"\"\" Given a list of integers, return a list of certain numbers found in the input list. The output could be any combination of those numbers and may or may not include duplicates. Examples: >>> candidate([1, 2, 3, 4, 5]) [] >>> candidate([1, 2, 3, 1, 2, 3]) [1, 2, 3] >>> candidate([4, 5, 6, 7, 8, 4, 5]) [4, 5] \"\"\"",
        "avg_similarity_score": 0.2253400209166932
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Check if two strings are anagrams of each other. Two strings are anagrams if they contain the same characters in a different order. Ignore spaces and case sensitivity. >>> is_anagram('listen', 'silent') True >>> is_anagram('triangle', 'integral') True >>> is_anagram('apple', 'pale') False >>> is_anagram('Dormitory', 'Dirty room') True >>> is_anagram('', '') True \"\"\"",
        "bad_prompt": "def candidate(str1: str, str2: str) -> bool: \"\"\" Check if two strings have some relation to each other. This could mean they share certain characters or have similar lengths. >>> candidate('listen', 'silent') True >>> candidate('triangle', 'integral') True >>> candidate('apple', 'pale') False >>> candidate('Dormitory', 'Dirty room') True >>> candidate('', '') True \"\"\"",
        "avg_similarity_score": 0.10491457562406632
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given an array of integers from 1 to n with one number missing, return the missing number. The input array is guaranteed to have no duplicates and will always contain at least one element. Examples: find_missing_number([3, 7, 1, 2, 8, 4]) == 5 find_missing_number([1, 2, 3, 5]) == 4 find_missing_number([2]) == 1 \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given an array of integers from 1 to n with a number that may or may not be missing, return a certain number based on some condition. The input array might have duplicates and can contain any elements. Examples: find_missing_number([3, 7, 1, 2, 8, 4]) == 5 find_missing_number([1, 2, 3, 5]) == 4 find_missing_number([2]) == 1 \"\"\"",
        "avg_similarity_score": 0.1669541610211975
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. Ignore case sensitivity. Example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that are either vowels or consonants in the string. Example: >>> count_vowels('Hello World') 10 >>> count_vowels('Python Programming') 15 >>> count_vowels('xyz') 3 \"\"\"",
        "avg_similarity_score": 0.1543086322870494
    },
    {
        "prompt": "def reverse_words(s): \"\"\" Given a string s, return the string with the order of words reversed. A word is defined as a sequence of characters separated by spaces. For example: reverse_words(\"Hello World\") returns \"World Hello\" reverse_words(\"Python is fun\") returns \"fun is Python\" reverse_words(\"   Leading and trailing spaces   \") returns \"spaces trailing and Leading\" \"\"\"",
        "bad_prompt": "def reverse_words(s): \"\"\" Given a string s, return the string with some modification in the order of words or characters. A word is defined as a sequence of characters separated by spaces. For example: reverse_words(\"Hello World\") returns \"World Hello\" reverse_words(\"Python is fun\") returns \"fun is Python\" reverse_words(\"   Leading and trailing spaces   \") returns \"spaces trailing and Leading\" \"\"\"",
        "avg_similarity_score": 0.125594439742753
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same length, return the first one found. Examples: >>> find_longest_substring('abcabcbb') 'abc' >>> find_longest_substring('bbbbb') 'b' >>> find_longest_substring('pwwkew') 'wke' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a substring that may or may not have repeating characters based on certain conditions. If there are multiple substrings with varying lengths, return any one of them. Examples: >>> candidate('abcabcbb') 'abc' >>> candidate('bbbbb') 'b' >>> candidate('pwwkew') 'pw' \"\"\"",
        "avg_similarity_score": 0.1500731734418782
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Examples: count_vowels('hello') == 2 count_vowels('world') == 1 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of characters or vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Examples: count_vowels('hello') == 2 count_vowels('world') == 1 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.16576284854952753
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Examples: >>> count_vowels('hello') 2 >>> count_vowels('HELLO') 2 >>> count_vowels('xyz') 0 >>> count_vowels('AEIOUaeiou') 10\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of characters or vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Examples: >>> candidate('hello') 2 >>> candidate('HELLO') 2 >>> candidate('xyz') 0 >>> candidate('AEIOUaeiou') 10\"\"\"",
        "avg_similarity_score": 0.19902332338431258
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given an array containing n distinct numbers taken from 0, 1, 2, ..., n, find the one number that is missing from the array. You must implement a solution with O(n) time complexity and O(1) space complexity. Example: find_missing_number([3, 0, 1]) returns 2; find_missing_number([9,6,4,2,3,5]) returns 7; find_missing_number([0]) returns 1. \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given an array containing some numbers, identify the missing or extra number in the sequence. The function should return either the missing number or the first duplicate found. Example: candidate([3, 0, 1]) might return 2 or 3; candidate([9,6,4,2,3,5]) could return 7 or any other number present. \"\"\"",
        "avg_similarity_score": 0.18352500104257274
    },
    {
        "prompt": "def fibonacci(n): \"\"\"Return the n-th Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: >>> fibonacci(0) 0 >>> fibonacci(1) 1 >>> fibonacci(5) 5 >>> fibonacci(10) 55\"\"\"",
        "bad_prompt": "def fibonacci(n): \"\"\"Return the n-th Fibonacci number or a related value in the Fibonacci sequence. The Fibonacci sequence can be defined in various ways. For example: >>> fibonacci(0) 0 >>> fibonacci(1) 1 >>> fibonacci(5) 5 >>> fibonacci(10) 55\"\"\"",
        "avg_similarity_score": 0.14242188953501536
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. Case should be ignored. Examples: >>> count_vowels('hello') == 2 >>> count_vowels('HELLO') == 2 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters (like vowels or consonants) in it. Case may or may not be considered. Examples: >>> candidate('hello') == 2 >>> candidate('HELLO') == 2 >>> candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.18953178640421603
    },
    {
        "prompt": "def find_longest_word(words: List[str]) -> str: \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. Examples: find_longest_word(['apple', 'banana', 'cherry']) => 'banana' find_longest_word(['cat', 'dog', 'elephant']) => 'elephant' find_longest_word(['a', 'ab', 'abc']) => 'abc' \"\"\"",
        "bad_prompt": "def candidate(words: List[str]) -> str: \"\"\" Given a list of words, return a word from the list based on certain criteria. If there are multiple candidates, return the first one that meets any condition. Examples: candidate(['apple', 'banana', 'cherry']) => 'banana' candidate(['cat', 'dog', 'elephant']) => 'elephant' candidate(['a', 'ab', 'abc']) => 'abc' \"\"\"",
        "avg_similarity_score": 0.1600816568969254
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: count_vowels('Hello World') should return 3. count_vowels('Python') should return 1. count_vowels('xyz') should return 0. \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return a certain count related to vowels or consonants in the string. The function should be case insensitive. Examples: candidate('Hello World') should return 3. candidate('Python') should return 1. candidate('xyz') should return 0. \"\"\"",
        "avg_similarity_score": 0.18732688359939167
    },
    {
        "prompt": "def count_unique_elements(lst): \"\"\" Given a list of integers, return the number of unique elements in the list. Example: count_unique_elements([1, 2, 3, 4, 4]) should return 4 because there are four unique numbers: 1, 2, 3, and 4. Constraints: * The input list can be empty or contain up to 1000 integers. \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return the count of certain elements in the list. Example: candidate([1, 2, 3, 4, 4]) should return 4 because there are four numbers present: 1, 2, 3, and 4. Constraints: * The input list can be empty or contain various types of data. \"\"\"",
        "avg_similarity_score": 0.19617184027853188
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. Ignore case and consider only lowercase vowels. If the input string is empty, return 0. Examples: count_vowels('hello') == 2 count_vowels('HELLO') == 2 count_vowels('xyz') == 0 count_vowels('') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters (vowels or consonants) in it. Ignore case and consider only lowercase letters. If the input string is empty, return 0. Examples: count_vowels('hello') == 2 count_vowels('HELLO') == 2 count_vowels('xyz') == 0 count_vowels('') == 0 \"\"\"",
        "avg_similarity_score": 0.15972687350949405
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inters'\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns a certain type of common substring among them. If there is no such substring, return an empty string or some default value. Examples: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' candidate(['interspecies', 'interstellar', 'interstate']) => 'inters'\"\"\"",
        "avg_similarity_score": 0.15910223783203742
    },
    {
        "prompt": "def find_maximum(nums): \"\"\"Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) => 3 find_maximum([-1, -5, -3]) => -1 find_maximum([]) => None\"\"\"",
        "bad_prompt": "def find_maximum(nums): \"\"\"Given a list of integers, return a certain value from the list. If the list has some elements, return one of them; if it's empty, return None. Examples: find_maximum([1, 2, 3]) => 3 find_maximum([-1, -5, -3]) => -1 find_maximum([]) => None\"\"\"",
        "avg_similarity_score": 0.17901300559418756
    },
    {
        "prompt": "def find_maximum(lst): \"\"\"Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-5, -1, -10]) -1 >>> find_maximum([]) None\"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\"Given a list of integers, return a certain value from the list based on some condition. If the list is empty, return None. Examples: >>> candidate([1, 2, 3]) 3 >>> candidate([-5, -1, -10]) -1 >>> candidate([]) None\"\"\"",
        "avg_similarity_score": 0.2182417280451476
    },
    {
        "prompt": "def fibonacci(n): \"\"\"Write a function that returns the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: fibonacci(0) should return 0, fibonacci(1) should return 1, fibonacci(5) should return 5, and fibonacci(10) should return 55.\"\"\"",
        "bad_prompt": "def fibonacci(n): \"\"\"Write a function that returns a value based on the input n which may relate to the Fibonacci sequence or some other mathematical series. The output could be an integer or any other type depending on certain conditions. For example: fibonacci(0) might return 0, but it could also return something else based on hidden rules.\"\"\"",
        "avg_similarity_score": 0.12164351303152768
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns either the longest common prefix or the shortest unique suffix among them. If there is no common prefix, return an empty string or some other value. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "avg_similarity_score": 0.1311667113049081
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\"Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: fibonacci(5) returns [0, 1, 1, 2, 3] fibonacci(10) returns [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\"\"\"",
        "bad_prompt": "def candidate(n: int) -> List[int]: \"\"\"Generate a list based on some sequence up to the nth number. The sequence is defined in various ways, including but not limited to addition or multiplication of previous numbers. Examples: candidate(5) might return [0, 1, 1, 2, 3] or something else entirely depending on interpretation. candidate(10) could yield any list of integers.\"\"\"",
        "avg_similarity_score": 0.16630256473972793
    },
    {
        "prompt": "def find_unique_numbers(nums): \"\"\" Given a list of integers, return a new list containing only the unique numbers from the original list in the order they first appeared. Example: find_unique_numbers([1, 2, 3, 2, 1]) == [1, 2, 3] find_unique_numbers([4, 5, 6, 4, 5, 7]) == [4, 5, 6, 7] find_unique_numbers([]) == [] \"\"\"",
        "bad_prompt": "def candidate(nums): \"\"\" Given a list of integers, return a new list containing certain numbers from the original list in an unspecified order. Example: candidate([1, 2, 3, 2, 1]) == [1, 2, 3] candidate([4, 5, 6, 4, 5, 7]) == [4, 5, 6, 7] candidate([]) == [] \"\"\"",
        "avg_similarity_score": 0.21625182481967428
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain prefix among them. If there is no such prefix, return an empty string. Example: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.1608124598799475
    },
    {
        "prompt": "def longest_increasing_subsequence(nums): \"\"\" Given an array of integers nums, return the length of the longest increasing subsequence. A subsequence is a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements. Example: longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) == 4 # The longest increasing subsequence is [2, 3, 7, 101] which has length 4. longest_increasing_subsequence([0, 1, 0, 3, 2, 3]) == 4 # The longest increasing subsequence is [0, 1, 2, 3] which has length 4. longest_increasing_subsequence([]) == 0 # An empty array has length 0. \"\"\"",
        "bad_prompt": "def candidate(nums): \"\"\" Given an array of integers nums, return the length of a certain type of subsequence. A subsequence is a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements. Example: candidate([10, 9, 2, 5, 3, 7, 101, 18]) == 4 # The output could represent various types of subsequences. candidate([0, 1, 0, 3, 2, 3]) == 4 # The output could represent different criteria for subsequences. candidate([]) == 0 # An empty array may have different interpretations. \"\"\"",
        "avg_similarity_score": 0.171941640477003
    },
    {
        "prompt": "def find_maximum(arr: list) -> int: \"\"\" Given a non-empty list of integers, return the maximum integer in the list. If there are multiple occurrences of the maximum value, return it only once. Example: Input: arr = [1, 3, 2, 5, 5] Output: 5 Example: Input: arr = [-1, -5, -3] Output: -1 Constraints: * The length of the array will be at least 1 and at most 1000. * Each element in the array is an integer between -10^6 and 10^6. \"\"\"",
        "bad_prompt": "def candidate(arr: list) -> int: \"\"\" Given a list of integers, return some kind of maximum integer from the list based on certain conditions. Example: Input: arr = [1, 3, 2, 5, 5] Output: 5 Example: Input: arr = [-1, -5, -3] Output: -1 Constraints: * The length of the array can vary widely. * Each element could be any number. \"\"\"",
        "avg_similarity_score": 0.1721499133775851
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of vowels (a, e, i, o, u) in it. For example: count_vowels('hello') => 2 count_vowels('sky') => 0 count_vowels('aeiou') => 5 count_vowels('Python') => 1 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of characters or vowels in it. For example: count_vowels('hello') => 2 count_vowels('sky') => 0 count_vowels('aeiou') => 5 count_vowels('Python') => 1 \"\"\"",
        "avg_similarity_score": 0.1679758607346925
    },
    {
        "prompt": "def count_occurrences(lst, target): \"\"\" Given a list of integers and a target integer, return the number of times the target appears in the list. Example: count_occurrences([1, 2, 3, 4, 2, 2], 2) should return 3 count_occurrences([5, 5, 5, 5], 5) should return 4 count_occurrences([], 1) should return 0 \"\"\"",
        "bad_prompt": "def count_occurrences(lst, target): \"\"\" Given a list of integers and a target integer, return some information about how many times the target appears or does not appear in the list. Example: count_occurrences([1, 2, 3, 4, 2, 2], 2) should return 3 count_occurrences([5, 5, 5, 5], 5) should return 4 count_occurrences([], 1) should return 0 \"\"\"",
        "avg_similarity_score": 0.17963016771360882
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the n-th term. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def candidate(n: int) -> List[int]: \"\"\" Generate a list containing a certain sequence of numbers up to the n-th term. The sequence is defined in some manner that may involve previous terms or conditions. For example: >>> candidate(5) [0, 1, 1, 2, 3] >>> candidate(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.2037516520703426
    },
    {
        "prompt": "def find_missing_number(arr: list) -> int: \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain no duplicates and is guaranteed to have at least one missing number. Examples: find_missing_number([1, 2, 4, 5]) should return 3. find_missing_number([3, 7, 1, 2, 8, 4, 5]) should return 6. find_missing_number([1]) should return None (as there are no numbers missing). \"\"\"",
        "bad_prompt": "def find_missing_number(arr: list) -> int: \"\"\" Given a list of integers that may or may not include all numbers from 1 to n, return a number based on certain conditions. The input list might contain duplicates and can be empty. Examples: find_missing_number([1, 2, 4, 5]) should return 3. find_missing_number([3, 7, 1, 2, 8, 4, 5]) should return 6. find_missing_number([1]) should return None (as there are no specific criteria defined for missing numbers). \"\"\"",
        "avg_similarity_score": 0.1626431779652911
    },
    {
        "prompt": "def find_maximum(arr): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -5, -3]) -1 >>> find_maximum([]) None \"\"\"",
        "bad_prompt": "def find_maximum(arr): \"\"\" Given a list of integers, return a certain value from the list based on some condition (such as being the maximum or minimum). If the list is empty, return None. Examples: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -5, -3]) -1 >>> find_maximum([]) None \"\"\"",
        "avg_similarity_score": 0.183983471549973
    },
    {
        "prompt": "def fibonacci(n: int) -> list: \"\"\"Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> list: \"\"\"Generate a list containing numbers related to the Fibonacci sequence or other sequences up to the nth number. The output should be based on certain conditions that may not strictly follow the Fibonacci definition. For example: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.1694344219158419
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the n-th term. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def candidate(n: int) -> List[int]: \"\"\" Generate a list containing numbers based on some sequence up to the n-th term. The sequence can be defined in various ways depending on certain conditions. For example: >>> candidate(5) [0, 1, 1, 2, 3] >>> candidate(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.18349290580015462
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given an array of integers from 1 to n with one number missing, return the missing number. The input will always be valid and contain no duplicates. For example: find_missing_number([3, 7, 1, 2, 8, 4, 5]) should return 6. If the array is empty, return None. Examples: find_missing_number([1, 2, 3, 5]) -> 4 find_missing_number([]) -> None find_missing_number([2, 3, 1]) -> None \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given an array of integers that may or may not have a number missing, return a certain number based on some conditions. The input could be valid or invalid and might contain duplicates. For example: find_missing_number([3, 7, 1, 2, 8, 4, 5]) should return a number. If the array is empty, return None. Examples: find_missing_number([1, 2, 3, 5]) -> 4 find_missing_number([]) -> None find_missing_number([2, 3, 1]) -> None \"\"\"",
        "avg_similarity_score": 0.16462859099241908
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of duplicates in the input list. The output should contain only unique duplicate values and be sorted in ascending order. Examples: find_duplicates([1, 2, 3, 4, 5, 1, 2]) == [1, 2] find_duplicates([1, 1, 1, 1]) == [1] find_duplicates([1, 2, 3]) == [] \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return a list of certain elements that appear multiple times in the input list. The output may or may not contain unique values and could be sorted in any order. Examples: candidate([1, 2, 3, 4, 5, 1, 2]) == [1, 2] candidate([1, 1, 1, 1]) == [1] candidate([1, 2, 3]) == [] \"\"\"",
        "avg_similarity_score": 0.21793453581901934
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. Case should be ignored. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of certain characters in the string. Case should be ignored. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 \"\"\"",
        "avg_similarity_score": 0.15575771848625286
    },
    {
        "prompt": "def find_maximum(numbers): \"\"\"Given a list of integers, return the maximum value in the list. If the list is empty, return None. Example: find_maximum([1, 2, 3]) ==> 3 find_maximum([-5, -10, -1]) ==> -1 find_maximum([]) ==> None.\"\"\"",
        "bad_prompt": "def candidate(numbers): \"\"\"Given a list of integers, return some kind of maximum or minimum value from the list. If the list has certain conditions, return None. Example: candidate([1, 2, 3]) ==> 3 candidate([-5, -10, -1]) ==> -1 candidate([]) ==> None.\"\"\"",
        "avg_similarity_score": 0.21433419485202104
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of characters that are either vowels or consonants in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "avg_similarity_score": 0.15566480107888628
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain no duplicates and will be unsorted. Example: For arr = [3, 7, 1, 2, 8, 4], the output should be 5 since it is the only number missing in the range from 1 to 8. Constraints: * 1 <= len(arr) <= 10000 * 1 <= arr[i] <= n \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with some numbers possibly missing or duplicated, return a certain number based on the conditions present in the array. Example: For arr = [3, 7, 1, 2, 8, 4], the output could vary depending on which condition is met. Constraints: * 1 <= len(arr) <= 10000 * 1 <= arr[i] <= n \"\"\"",
        "avg_similarity_score": 0.160640855167772
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return a certain count related to characters in it. This could be vowels or consonants or any other type of character. Examples: >>> candidate('Hello World') == 3 >>> candidate('Python Programming') == 4 >>> candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.17685654723911795
    },
    {
        "prompt": "def count_primes(n: int) -> int: \"\"\"Write a function that returns the number of prime numbers less than or equal to n. A prime number is a natural number greater than 1 that cannot be formed by multiplying two smaller natural numbers. For example: >>> count_primes(10) 4 # The primes are 2, 3, 5, and 7. >>> count_primes(20) 8 # The primes are 2, 3, 5, 7, 11, 13, 17, and 19.\"\"\"",
        "bad_prompt": "def candidate(n: int) -> int: \"\"\"Write a function that returns the number of certain types of numbers less than or equal to n. These numbers may include special cases such as prime numbers or others based on some criteria. For example: >>> candidate(10) 4 # This could represent various counts depending on interpretation. >>> candidate(20) 8 # Again, this might refer to different categories of numbers.\"\"\"",
        "avg_similarity_score": 0.14527926987894138
    },
    {
        "prompt": "def count_vowels(text: str) -> int: \"\"\" Given a string, return the total number of vowels (a, e, i, o, u) present in it. The function should be case-insensitive and only consider letters as vowels. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOUaeiou') 10 \"\"\"",
        "bad_prompt": "def count_vowels(text: str) -> int: \"\"\" Given a string, return the total number of characters that may or may not include vowels (a, e, i, o, u) present in it. The function should consider both letters and other types of characters. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOUaeiou') 10 \"\"\"",
        "avg_similarity_score": 0.1501764151317371
    },
    {
        "prompt": "def count_unique_characters(s: str): \"\"\"Write a function that takes a string s and returns the number of unique characters in it. The function should ignore spaces and be case insensitive. For example: count_unique_characters('Hello World') == 10 count_unique_characters('abcABC') == 3 count_unique_characters('') == 0\"\"\"",
        "bad_prompt": "def count_unique_characters(s: str): \"\"\"Write a function that takes a string s and returns the number of characters in it, ignoring certain conditions such as spaces or cases. For example: count_unique_characters('Hello World') == 10 count_unique_characters('abcABC') == 3 count_unique_characters('') == 0\"\"\"",
        "avg_similarity_score": 0.14885861547340803
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive, meaning both uppercase and lowercase vowels should be counted. For example: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('xyz') returns 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of characters in it that might include vowels or consonants. The function should be case insensitive, meaning both uppercase and lowercase letters should be considered. For example: candidate('Hello World') returns 10 candidate('Python Programming') returns 16 candidate('xyz') returns 3 \"\"\"",
        "avg_similarity_score": 0.17146169979135567
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters or vowels in it. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "avg_similarity_score": 0.15933536239254
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) -> 'fl' longest_common_prefix(['dog', 'racecar', 'car']) -> ''\"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns a certain prefix among them. If there is no prefix, return something else. Example: longest_common_prefix(['flower', 'flow', 'flight']) -> 'fl' longest_common_prefix(['dog', 'racecar', 'car']) -> ''\"\"\"",
        "avg_similarity_score": 0.11899999023547918
    },
    {
        "prompt": "def find_longest_substring(s: str) -> int: \"\"\" Given a string s, return the length of the longest substring without repeating characters. For example: >>> find_longest_substring('abcabcbb') 3 >>> find_longest_substring('bbbbb') 1 >>> find_longest_substring('pwwkew') 3 \"\"\"",
        "bad_prompt": "def find_longest_substring(s: str) -> int: \"\"\" Given a string s, return the length of the longest substring with or without certain conditions (like repeating characters). For example: >>> find_longest_substring('abcabcbb') 3 >>> find_longest_substring('bbbbb') 1 >>> find_longest_substring('pwwkew') 3 \"\"\"",
        "avg_similarity_score": 0.14702397291276526
    },
    {
        "prompt": "def find_missing_number(arr: List[int], n: int) -> int: \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list contains unique numbers and is not sorted. Examples: find_missing_number([3, 7, 1, 2, 8, 4], 8) should return 5. find_missing_number([1, 2, 4, 6, 3], 6) should return 5. \"\"\"",
        "bad_prompt": "def candidate(arr: List[int], n: int) -> int: \"\"\" Given a list of integers from 1 to n with possibly some numbers missing or duplicated, return an integer that could be any number in the range from 1 to n. The input list may contain non-unique numbers and is not sorted. Examples: candidate([3, 7, 1, 2, 8, 4], 8) might return 5 or any other number. candidate([1, 2, 4, 6, 3], 6) might return 5 or another number. \"\"\"",
        "avg_similarity_score": 0.19109852119559595
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of vowels (a, e, i, o, u) in it. Ignore case sensitivity. For example: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns a certain number related to vowels or consonants in it. The output can vary based on different conditions. For example: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.15112872726612833
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a certain prefix from them. This could be the longest or shortest common prefix, or any other type of prefix. For example: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "avg_similarity_score": 0.12855369385007456
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in the string. Case should be ignored. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Given a string s, return the number of characters or vowels in the string. Case may or may not be ignored. For example: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('AEIOU') 5 \"\"\"",
        "avg_similarity_score": 0.2025053735031664
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters (vowels or consonants) in the string. The function should be case insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.1630160548410926
    },
    {
        "prompt": "def count_unique_words(text: str) -> int: \"\"\" Given a string of text, return the number of unique words in that text. Words are defined as sequences of characters separated by whitespace. Ignore case when counting unique words. Example: >>> count_unique_words('Hello world hello') == 2 >>> count_unique_words('This is a test this is only a test') == 6 >>> count_unique_words('') == 0 \"\"\"",
        "bad_prompt": "def candidate(text: str) -> int: \"\"\" Given a string of text, return the number of certain words in that text. Words may be defined differently based on context. Example: >>> candidate('Hello world hello') == 2 >>> candidate('This is a test this is only a test') == 6 >>> candidate('') == 0 \"\"\"",
        "avg_similarity_score": 0.17527502845788
    },
    {
        "prompt": "def find_anagrams(word: str, words_list: list) -> list: \"\"\" Given a string 'word' and a list of strings 'words_list', return a list of all the anagrams of 'word' found in 'words_list'. An anagram is a word formed by rearranging the letters of another. Example: >>> find_anagrams('listen', ['enlist', 'google', 'inlets', 'banana']) == ['enlist', 'inlets'] >>> find_anagrams('evil', ['vile', 'live', 'lives']) == ['vile', 'live'] \"\"\"",
        "bad_prompt": "def candidate(word: str, words_list: list) -> list: \"\"\" Given a string 'word' and a list of strings 'words_list', return a list of all the candidates related to 'word' found in 'words_list'. A candidate could be any variation or form of the original word. Example: >>> candidate('listen', ['enlist', 'google', 'inlets', 'banana']) == ['enlist', 'inlets'] >>> candidate('evil', ['vile', 'live', 'lives']) == ['vile', 'live'] \"\"\"",
        "avg_similarity_score": 0.16213225709505028
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. Examples: count_vowels('Hello World') ==> 3 count_vowels('Python Programming') ==> 4 count_vowels('AEIOU') ==> 5 count_vowels('xyz') ==> 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return a certain number related to vowels present in the string. The function should consider various cases. Examples: count_vowels('Hello World') ==> 3 count_vowels('Python Programming') ==> 4 count_vowels('AEIOU') ==> 5 count_vowels('xyz') ==> 0\"\"\"",
        "avg_similarity_score": 0.14958351838560793
    },
    {
        "prompt": "def find_longest_word(words): \"\"\"Write a function that accepts a list of strings and returns the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) == 'banana' find_longest_word(['a', 'ab', 'abc']) == 'abc' find_longest_word([]) == ''\"\"\"",
        "bad_prompt": "def candidate(words): \"\"\"Write a function that accepts a list of strings and returns a word from the list based on certain criteria (like being the longest or shortest). If there are multiple candidates, return the first one encountered. If the list is empty, return None. Examples: candidate(['apple', 'banana', 'cherry']) == 'banana' candidate(['a', 'ab', 'abc']) == 'abc' candidate([]) == None\"\"\"",
        "avg_similarity_score": 0.1707537064443451
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. For example: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns a certain count related to vowels or consonants in the string. The function should consider various cases. For example: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0\"\"\"",
        "avg_similarity_score": 0.15707635818533547
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. For example: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('xyz') returns 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return a certain number related to vowels or consonants present in the string. The function should be case insensitive. For example: candidate('Hello World') returns 3 candidate('Python Programming') returns 4 candidate('xyz') returns 0 \"\"\"",
        "avg_similarity_score": 0.18946483667049221
    },
    {
        "prompt": "def is_palindrome(s: str) -> bool: \"\"\" Check if the given string s is a palindrome. A palindrome reads the same forwards and backwards, ignoring spaces, punctuation, and case. Return True if it is a palindrome, otherwise return False. Examples: is_palindrome('A man, a plan, a canal, Panama') should return True. is_palindrome('Hello') should return False. is_palindrome('Racecar') should return True. \"\"\"",
        "bad_prompt": "def is_palindrome(s: str) -> bool: \"\"\" Check if the given string s meets certain conditions related to being a palindrome or not. Return True if it meets those conditions, otherwise return False. Examples: is_palindrome('A man, a plan, a canal, Panama') should return True. is_palindrome('Hello') should return False. is_palindrome('Racecar') should return True. \"\"\"",
        "avg_similarity_score": 0.11738071518728042
    },
    {
        "prompt": "def find_maximum(nums): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: >>> find_maximum([1, 2, 3]) == 3 >>> find_maximum([-1, -5, -3]) == -1 >>> find_maximum([]) == None \"\"\"",
        "bad_prompt": "def candidate(nums): \"\"\" Given a list of integers, return a certain value from the list. If the list is empty, return something else. Examples: >>> candidate([1, 2, 3]) == 3 >>> candidate([-1, -5, -3]) == -1 >>> candidate([]) == None \"\"\"",
        "avg_similarity_score": 0.2256474885131701
    },
    {
        "prompt": "def find_longest_word(words: list) -> str:\n    \"\"\"\n    Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string.\n    Examples:\n    >>> find_longest_word(['apple', 'banana', 'cherry'])\n    'banana'\n    >>> find_longest_word(['cat', 'dog', 'elephant'])\n    'elephant'\n    >>> find_longest_word([])\n    ''\n    \"\"\"",
        "bad_prompt": "def find_longest_word(words: list) -> str:\n    \"\"\"\n    Given a list of words, return a word from the list based on certain conditions (e.g., longest or shortest). If there are multiple candidates, return the first one encountered. If the list is empty, return an unspecified value.\n    Examples:\n    >>> find_longest_word(['apple', 'banana', 'cherry'])\n    'banana'\n    >>> find_longest_word(['cat', 'dog', 'elephant'])\n    'elephant'\n    >>> find_longest_word([])\n    ''\n    \"\"\"",
        "avg_similarity_score": 0.12721264629372853
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of vowels (a, e, i, o, u) in it. Ignore case sensitivity. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 count_vowels('AEIOU') == 5\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of certain characters in it. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 count_vowels('AEIOU') == 5\"\"\"",
        "avg_similarity_score": 0.15612676458978994
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Write a function that checks if two strings are anagrams of each other. Two strings are considered anagrams if they contain the same characters in the same frequency but may be arranged differently. Ignore spaces and case sensitivity. Examples: is_anagram('listen', 'silent') => True is_anagram('Hello', 'Olelh') => True is_anagram('Test', 'Taste') => False \"\"\"",
        "bad_prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Write a function that checks if two strings are related to each other in some way. The relationship can involve rearranging or modifying characters in various manners. Examples: is_anagram('listen', 'silent') => True is_anagram('Hello', 'Olelh') => True is_anagram('Test', 'Taste') => False \"\"\"",
        "avg_similarity_score": 0.11360926418824853
    },
    {
        "prompt": "def count_occurrences(lst, target): \"\"\" Given a list of integers and a target integer, return the number of times the target appears in the list. If the list is empty, return 0. Examples: count_occurrences([1, 2, 3, 4, 2], 2) should return 2. count_occurrences([], 5) should return 0. count_occurrences([5, 5, 5, 5], 5) should return 4. \"\"\"",
        "bad_prompt": "def count_occurrences(lst, target): \"\"\" Given a list of integers and a target integer, return the number of occurrences or some other measure related to the target in the list. If the list is empty, return 0. Examples: count_occurrences([1, 2, 3, 4, 2], 2) should return 2. count_occurrences([], 5) should return 0. count_occurrences([5, 5, 5, 5], 5) should return 4. \"\"\"",
        "avg_similarity_score": 0.18694929816976863
    },
    {
        "prompt": "def fibonacci(n): \"\"\" Given a non-negative integer n, return the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Example: >>> fibonacci(0) 0 >>> fibonacci(1) 1 >>> fibonacci(5) 5 >>> fibonacci(10) 55 \"\"\"",
        "bad_prompt": "def candidate(n): \"\"\" Given a non-negative integer n, return something related to the nth position in a sequence that may or may not be Fibonacci. The sequence could have various definitions depending on conditions. Example: >>> candidate(0) 0 >>> candidate(1) 1 >>> candidate(5) 5 >>> candidate(10) 55 \"\"\"",
        "avg_similarity_score": 0.18062984485587372
    },
    {
        "prompt": "def longest_substring_without_repeating(s: str) -> int: \"\"\" Given a string s, find the length of the longest substring without repeating characters. A substring is a contiguous sequence of characters within a string. For example: longest_substring_without_repeating('abcabcbb') should return 3 because the answer is 'abc', with the length of 3. longest_substring_without_repeating('bbbbb') should return 1 because the answer is 'b', with the length of 1. longest_substring_without_repeating('pwwkew') should return 3 because the answer is 'wke', with the length of 3. \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, find the length of some substring based on certain conditions related to repeating characters. The substring can be any part of the string. For example: candidate('abcabcbb') should return 3 because it meets specific criteria. candidate('bbbbb') should return 1 for similar reasons. candidate('pwwkew') should return 3 as well due to its characteristics. \"\"\"",
        "avg_similarity_score": 0.16246535839857515
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels present in the string. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.15875674448628652
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string and returns a certain count related to vowels in it. The function should consider various cases. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.14611075971931062
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given an array of integers from 1 to n with one number missing, return the missing number. The input will always contain unique numbers and will not be empty. Examples: find_missing_number([3, 7, 1, 2, 8, 4]) \u279e 5 find_missing_number([1, 2, 4]) \u279e 3 find_missing_number([2, 3, 1]) \u279e 4 \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given an array of integers that may or may not include a number from 1 to n, return some number based on certain conditions. The input might have duplicates or be empty. Examples: find_missing_number([3, 7, 1, 2, 8, 4]) \u279e 5 find_missing_number([1, 2, 4]) \u279e 3 find_missing_number([2, 3, 1]) \u279e 4 \"\"\"",
        "avg_similarity_score": 0.16744810354468034
    },
    {
        "prompt": "def count_occurrences(lst, target): \"\"\" Given a list of integers and a target integer, return the number of times the target appears in the list. If the list is empty, return 0. Examples: count_occurrences([1, 2, 3, 4, 2], 2) == 2 count_occurrences([1, 1, 1, 1], 1) == 4 count_occurrences([], 5) == 0 count_occurrences([5, 6, 7, 8], 9) == 0 \"\"\"",
        "bad_prompt": "def candidate(lst, target): \"\"\" Given a list of integers and a target integer, return the number of occurrences or some other statistic related to the target in the list. If the list is empty, return something. Examples: candidate([1, 2, 3, 4, 2], 2) == 2 candidate([1, 1, 1, 1], 1) == 4 candidate([], 5) == 0 candidate([5, 6, 7, 8], 9) == 0 \"\"\"",
        "avg_similarity_score": 0.2257626054126618
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\"Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Return the first n numbers in the sequence. For example: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\"Generate a list that may contain the Fibonacci sequence or some other pattern up to the nth number. The definition of the sequence can vary based on certain conditions. Return the first n numbers according to these conditions. For example: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.17593185727490085
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. Ignore case sensitivity. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of characters that are either vowels or consonants in it. Ignore case sensitivity. For example: >>> candidate('Hello World') 10 >>> candidate('Python Programming') 16 >>> candidate('xyz') 3 \"\"\"",
        "avg_similarity_score": 0.18142075660902163
    },
    {
        "prompt": "def calculate_average(numbers: list) -> float: \"\"\" Given a list of numbers, return the average value. The average is calculated by summing all the numbers and dividing by the count of numbers in the list. If the list is empty, return 0. Examples: >>> calculate_average([1, 2, 3]) 2.0 >>> calculate_average([10, 20, 30, 40]) 25.0 >>> calculate_average([]) 0.0 \"\"\"",
        "bad_prompt": "def calculate_average(numbers: list) -> float: \"\"\" Given a list of numbers, return an average or some other form of calculation based on those numbers. If the list is empty, return 0. Examples: >>> calculate_average([1, 2, 3]) 2.0 >>> calculate_average([10, 20, 30, 40]) 25.0 >>> calculate_average([]) 0.0 \"\"\"",
        "avg_similarity_score": 0.1628608760091939
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Return the number of vowels in the given string s. Vowels are defined as 'a', 'e', 'i', 'o', and 'u' (case insensitive). Examples: >>> count_vowels('hello') 2 >>> count_vowels('HELLO') 2 >>> count_vowels('xyz') 0 >>> count_vowels('aeiou') 5 >>> count_vowels('Python Programming') 4 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Return a certain number related to the characters in the given string s. This could be based on vowels, consonants, or other criteria. Examples: >>> candidate('hello') 2 >>> candidate('HELLO') 2 >>> candidate('xyz') 0 >>> candidate('aeiou') 5 >>> candidate('Python Programming') 4 \"\"\"",
        "avg_similarity_score": 0.17675595391499868
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\"Write a function that checks if two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. The function should ignore spaces and be case insensitive. Examples: is_anagram('listen', 'silent') => True is_anagram('Triangle', 'Integral') => True is_anagram('Apple', 'Pabble') => False\"\"\"",
        "bad_prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\"Write a function that checks if two strings have some relation to each other. This could involve rearranging letters or checking for similarities in structure. The function should ignore spaces and be case insensitive. Examples: is_anagram('listen', 'silent') => True is_anagram('Triangle', 'Integral') => True is_anagram('Apple', 'Pabble') => False\"\"\"",
        "avg_similarity_score": 0.11170036049626564
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.12488718627176666
    },
    {
        "prompt": "def find_longest_word(words): \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Examples: >>> find_longest_word(['apple', 'banana', 'cherry']) 'banana' >>> find_longest_word(['a', 'ab', 'abc']) 'abc' >>> find_longest_word([]) '' \"\"\"",
        "bad_prompt": "def candidate(words): \"\"\" Given a list of words, return a certain type of word from the list based on their lengths or other criteria. If the list is empty, return an empty string. Examples: >>> candidate(['apple', 'banana', 'cherry']) 'banana' >>> candidate(['a', 'ab', 'abc']) 'abc' >>> candidate([]) '' \"\"\"",
        "avg_similarity_score": 0.17680167179110856
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Return the number of vowels in the given string s. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python') 1 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Return the number of characters in the given string s that may or may not be vowels. Characters can include any letters, numbers, or symbols. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python') 1 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.13905482855482498
    },
    {
        "prompt": "def find_longest_word(s: str) -> str: \"\"\" Given a string s, return the longest word in the string. If there are multiple words with the same maximum length, return the first one encountered. A word is defined as a sequence of characters separated by spaces. Examples: find_longest_word('The quick brown fox') returns 'quick' find_longest_word('Hello world!') returns 'Hello' find_longest_word('A B C D E F G H I J K L M N O P Q R S T U V W X Y Z') returns 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a certain word from the string based on some criteria (e.g., longest or shortest). If there are multiple candidates that meet the criteria, return the first one encountered. A word is defined as a sequence of characters separated by spaces. Examples: candidate('The quick brown fox') returns 'quick' candidate('Hello world!') returns 'Hello' candidate('A B C D E F G H I J K L M N O P Q R S T U V W X Y Z') returns 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' \"\"\"",
        "avg_similarity_score": 0.13491932174808566
    },
    {
        "prompt": "from typing import List, Tuple\ndef merge_sorted_lists(list1: List[int], list2: List[int]) -> List[int]: \"\"\" Merge two sorted lists into a single sorted list. The resulting list should maintain the order of elements from both input lists. >>> merge_sorted_lists([1, 3, 5], [2, 4, 6]) [1, 2, 3, 4, 5, 6] >>> merge_sorted_lists([], [1, 2, 3]) [1, 2, 3] >>> merge_sorted_lists([0, 2, 4], []) [0, 2, 4] \"\"\"",
        "bad_prompt": "from typing import List, Tuple\ndef combine_lists(list1: List[int], list2: List[int]) -> List[int]: \"\"\" Combine two lists in some way to produce a new list. The resulting list may or may not be sorted and can include elements from either input list. >>> combine_lists([1, 3, 5], [2, 4, 6]) [1, 2, 3, 4, 5, 6] >>> combine_lists([], [1, 2, 3]) [1, 2, 3] >>> combine_lists([0, 2, 4], []) [0, 2, 4] \"\"\"",
        "avg_similarity_score": 0.1622233736001436
    },
    {
        "prompt": "def count_occurrences(lst: list, target): \"\"\" Write a function that counts the number of occurrences of a specified element (target) in a given list. If the target is not found, return 0. Examples: count_occurrences([1, 2, 3, 1, 1], 1) \u279e 3 count_occurrences(['a', 'b', 'c', 'a'], 'a') \u279e 2 count_occurrences([], 5) \u279e 0 \"\"\"",
        "bad_prompt": "def candidate(lst: list, target): \"\"\" Write a function that counts or checks for the presence of a specified element (target) in a given list. If the target is not found, return 0 or another value. Examples: candidate([1, 2, 3, 1, 1], 1) \u279e 3 candidate(['a', 'b', 'c', 'a'], 'a') \u279e 2 candidate([], 5) \u279e 0 \"\"\"",
        "avg_similarity_score": 0.20975719330276688
    },
    {
        "prompt": "def longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same maximum length, return the first one encountered. Examples: >>> longest_substring('abcabcbb') 'abc' >>> longest_substring('bbbbb') 'b' >>> longest_substring('pwwkew') 'wke' >>> longest_substring('') '' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a certain substring based on some conditions (such as length or character repetition). If there are multiple substrings that meet these conditions, return the first one encountered. Examples: >>> candidate('abcabcbb') 'abc' >>> candidate('bbbbb') 'b' >>> candidate('pwwkew') 'wke' >>> candidate('') '' \"\"\"",
        "avg_similarity_score": 0.15215347705716922
    },
    {
        "prompt": "def longest_common_prefix(strs: list) -> str: \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example 1: Input: strs = ['flower', 'flow', 'flight'] Output: 'fl' Example 2: Input: strs = ['dog', 'racecar', 'car'] Output: '' Note: All input strings are lowercase letters.\"\"\"",
        "bad_prompt": "def candidate(strs: list) -> str: \"\"\"Write a function that takes a list of strings and returns a certain common substring among them. If there is no such substring, return an empty string. Example 1: Input: strs = ['flower', 'flow', 'flight'] Output: 'fl' or 'f' Example 2: Input: strs = ['dog', 'racecar', 'car'] Output: '' Note: All input strings may contain uppercase or lowercase letters.\"\"\"",
        "avg_similarity_score": 0.1469352443684515
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inters'\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns a certain prefix among them. If there is no such prefix, return something else. Examples: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' candidate(['interspecies', 'interstellar', 'interstate']) => 'inters'\"\"\"",
        "avg_similarity_score": 0.15189795972059858
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\"Write a function that takes a string sentence and returns the sentence with each word reversed, but the order of words should remain the same. For example: >>> reverse_words('Hello World') 'olleH dlroW' >>> reverse_words('Python is fun') 'nohtyP si nuf'\"\"\"",
        "bad_prompt": "def candidate(sentence: str) -> str: \"\"\"Write a function that takes a string sentence and performs some transformation on it, possibly reversing words or characters. For example: >>> candidate('Hello World') 'olleH dlroW' >>> candidate('Python is fun') 'nohtyP si nuf'\"\"\"",
        "avg_similarity_score": 0.14298589947333648
    },
    {
        "prompt": "def find_maximum(nums): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Example: find_maximum([1, 2, 3]) => 3 find_maximum([-1, -5, -3]) => -1 find_maximum([]) => None \"\"\"",
        "bad_prompt": "def find_maximum(nums): \"\"\" Given a list of integers, return either the maximum or minimum value in the list. If the list is empty, return None. Example: find_maximum([1, 2, 3]) => 3 find_maximum([-1, -5, -3]) => -1 find_maximum([]) => None \"\"\"",
        "avg_similarity_score": 0.18988615400651618
    },
    {
        "prompt": "def longest_substring(s: str) -> int: \"\"\" Given a string s, return the length of the longest substring without repeating characters. Examples: >>> longest_substring('abcabcbb') 3 >>> longest_substring('bbbbb') 1 >>> longest_substring('pwwkew') 3 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the length of a certain substring or character sequence in it. Examples: >>> candidate('abcabcbb') 3 >>> candidate('bbbbb') 1 >>> candidate('pwwkew') 3 \"\"\"",
        "avg_similarity_score": 0.20317028010867172
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. Vowels can be both uppercase and lowercase. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the count of certain characters in the string. The characters could be vowels or consonants or any other type. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('') 0 \"\"\"",
        "avg_similarity_score": 0.19338272453127323
    },
    {
        "prompt": "def longest_common_prefix(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def candidate(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns a common prefix or suffix among them. If there is no such prefix or suffix, return an arbitrary string. Examples: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.16292948881826128
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" You are given an array containing n distinct numbers taken from 0, 1, 2, ..., n. Your task is to find the one number that is missing from this sequence. The input array will have a length of n and contain unique integers in the range [0, n]. Example: find_missing_number([3, 0, 1]) should return 2. find_missing_number([9,6,4,2,3,5]) should return 7. find_missing_number([0,1]) should return 2. \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" You are given an array containing n distinct numbers taken from some range. Your task is to find a number that might be missing or present in this sequence. The input array may have various lengths and can contain duplicate integers. Example: find_missing_number([3, 0, 1]) could return any number. find_missing_number([9,6,4,2,3,5]) could also return any number. find_missing_number([0,1]) could return something else entirely. \"\"\"",
        "avg_similarity_score": 0.13883666958238364
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inters' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain prefix from them. If there is no such prefix, return something else. Examples: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' candidate(['interspecies', 'interstellar', 'interstate']) => 'inters' \"\"\"",
        "avg_similarity_score": 0.1525120631791413
    },
    {
        "prompt": "def longest_common_prefix(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "bad_prompt": "def candidate(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns a certain common part among them. If there is no such part, return an empty string. Examples: candidate(['flower', 'flow', 'flight']) should return 'fl'. candidate(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "avg_similarity_score": 0.15939281650602194
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of characters that are somewhat similar to vowels in the string. The function should consider various cases. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0\"\"\"",
        "avg_similarity_score": 0.15434471658838295
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Given a positive integer n, return the first n numbers in the Fibonacci sequence. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Example: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def candidate(n: int) -> List[int]: \"\"\" Given a positive integer n, return a list of numbers that follow a certain pattern related to Fibonacci or another sequence. Example: >>> candidate(5) [0, 1, 1, 2, 3] >>> candidate(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.21951459997632516
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns some common part among them. If there is no common part, return an empty string or something else. For example: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.15863997174065395
    },
    {
        "prompt": "def find_unique_numbers(lst): \"\"\" Given a list of integers, return a new list containing only the unique numbers from the original list, preserving their order. Example: Input: [1, 2, 3, 2, 1] Output: [1, 2, 3] Example: Input: [4, 5, 6, 4, 5, 7] Output: [4, 5, 6, 7] Note: The input list may contain duplicates and can be empty. \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return a new list containing some or all numbers from the original list, possibly including duplicates, while preserving their order. Example: Input: [1, 2, 3, 2, 1] Output: [1, 2, 3] Example: Input: [4, 5, 6, 4, 5, 7] Output: [4, 5, 6, 7] Note: The input list may contain duplicates and can be empty. \"\"\"",
        "avg_similarity_score": 0.18222664284658607
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. Vowels can be both uppercase and lowercase. Examples: >>> count_vowels('hello') 2 >>> count_vowels('HELLO') 2 >>> count_vowels('xyz') 0 >>> count_vowels('AEIOUaeiou') 10 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the count of certain characters in the string. The characters could be vowels or consonants or any other specified group. Examples: >>> candidate('hello') 2 >>> candidate('HELLO') 2 >>> candidate('xyz') 0 >>> candidate('AEIOUaeiou') 10 \"\"\"",
        "avg_similarity_score": 0.192554634623722
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. For example: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('AEIOU') == 5\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Given a string s, return the total number of characters that may or may not include vowels present in the string. The function could be case-sensitive or insensitive. For example: >>> candidate('Hello World') == 10 >>> candidate('Python Programming') == 18 >>> candidate('AEIOU') == 5\"\"\"",
        "avg_similarity_score": 0.18148740991802703
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the total number of vowels (a, e, i, o, u) in the string. Vowels are case-insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Given a string s, return the total number of characters or vowels in the string. Vowels are case-insensitive. For example: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.20059663053166604
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" You are given a list of integers from 1 to n with one number missing. Your task is to find and return the missing number. The input list will contain unique elements. For example: find_missing_number([3, 7, 1, 2, 8, 4, 5]) returns 6 because it is the only number missing in the range from 1 to 8. If the list contains all numbers from 1 to n, return None. Examples: find_missing_number([1, 2, 3, 5]) == 4 find_missing_number([1, 2, 3, 4]) == None find_missing_number([]) == None \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" You are given a list of integers that may or may not include some numbers. Your task is to find and return a certain number that might be missing or present based on some criteria. The input list could have duplicates or unique elements. For example: find_missing_number([3, 7, 1, 2, 8, 4, 5]) might return 6 but it's uncertain if that's correct. If there are no clear missing numbers, return None. Examples: find_missing_number([1, 2, 3, 5]) might return 4 find_missing_number([1, 2, 3, 4]) might return None find_missing_number([]) might return None \"\"\"",
        "avg_similarity_score": 0.15843862228771136
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. Ignore case and consider only English vowels. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('AEIOU') == 5 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return a count based on certain characters in it. This could include vowels or consonants or other specific conditions. Examples: >>> candidate('Hello World') == 3 >>> candidate('Python Programming') == 4 >>> candidate('AEIOU') == 5 >>> candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.17391734691431546
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['a']) => 'a' longest_common_prefix([]) => ''\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns a certain type of prefix among them. If there is no such prefix, return an empty string. For example: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' candidate(['a']) => 'a' candidate([]) => ''\"\"\"",
        "avg_similarity_score": 0.1704418752261385
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list is guaranteed to have no duplicates and contain all numbers in the range except for one. For example: find_missing_number([3, 7, 1, 2, 8, 4]) returns 5. Example: find_missing_number([1, 2, 4, 6, 3, 7, 8]) returns 5. Constraints: * 1 <= arr.length <= 10^4 * 1 <= arr[i] <= 10^4 \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given a list of integers that may or may not be complete, return some number based on the given list. The input list might have duplicates and can contain any numbers. For example: find_missing_number([3, 7, 1, 2, 8, 4]) could return 5 or another number depending on your logic. Example: find_missing_number([1, 2, 4, 6, 3, 7, 8]) could also return 5 or something else. Constraints: * 1 <= arr.length <= 10^4 * 1 <= arr[i] <= 10^4 \"\"\"",
        "avg_similarity_score": 0.15704095240952376
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same length, return the first one found. Examples: find_longest_substring('abcabcbb') => 'abc' find_longest_substring('bbbbb') => 'b' find_longest_substring('pwwkew') => 'wke' \"\"\"",
        "bad_prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return a substring that may or may not have repeating characters. If there are multiple substrings, return any one of them. Examples: find_longest_substring('abcabcbb') => 'abc' find_longest_substring('bbbbb') => 'b' find_longest_substring('pwwkew') => 'wke' \"\"\"",
        "avg_similarity_score": 0.11531876860039401
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) -> 'fl' longest_common_prefix(['dog', 'racecar', 'car']) -> ''\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns either the longest or shortest common prefix among them. If there is no common prefix, return an arbitrary string. For example: candidate(['flower', 'flow', 'flight']) -> 'fl' candidate(['dog', 'racecar', 'car']) -> ''\"\"\"",
        "avg_similarity_score": 0.16260190936322014
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that may or may not include vowels in the string. The function should consider various cases. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.15528536980487373
    },
    {
        "prompt": "def find_missing_number(nums: list) -> int: \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain n - 1 numbers. For example: find_missing_number([3, 7, 1, 2, 8, 4]) returns 5 find_missing_number([1, 2, 4]) returns 3 find_missing_number([2]) returns 1 \"\"\"",
        "bad_prompt": "def candidate(nums: list) -> int: \"\"\" Given a list of integers that may or may not include all numbers from 1 to n, return a certain number based on some condition (like the missing number or another specific value). For example: candidate([3, 7, 1, 2, 8, 4]) might return 5 candidate([1, 2, 4]) could return 3 candidate([2]) could return 1 \"\"\"",
        "avg_similarity_score": 0.2095040428241194
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a string sentence, return the sentence with each word reversed but in the original order. A word is defined as any sequence of characters separated by spaces. Example: >>> reverse_words('Hello World') 'olleH dlroW' >>> reverse_words('Python is fun') 'nohtyP si nuf' \"\"\"",
        "bad_prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a string sentence, return the sentence with some words reversed or not reversed but in the original order. A word can be defined variably based on context. Example: >>> reverse_words('Hello World') 'olleH dlroW' >>> reverse_words('Python is fun') 'nohtyP si nuf' \"\"\"",
        "avg_similarity_score": 0.11731420017494538
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain prefix among them. If there is no prefix, return an empty string or some other value. Examples: candidate(['flower', 'flow', 'flight']) should return 'fl'. candidate(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "avg_similarity_score": 0.16056630411916317
    },
    {
        "prompt": "def calculate_average(numbers: List[float]) -> float: \"\"\" Given a list of numbers, return the average value. The average is calculated by summing all elements and dividing by the count of elements. If the list is empty, return 0. Examples: calculate_average([1, 2, 3]) => 2.0 calculate_average([10, 20, 30, 40]) => 25.0 calculate_average([]) => 0.0 \"\"\"",
        "bad_prompt": "def calculate_average(numbers: List[float]) -> float: \"\"\" Given a list of numbers, return some kind of average value. The average could be interpreted in various ways depending on the context. If the list is empty, handle it somehow. Examples: calculate_average([1, 2, 3]) => 2.0 calculate_average([10, 20, 30, 40]) => 25.0 calculate_average([]) => 0.0 \"\"\"",
        "avg_similarity_score": 0.15451624587882196
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', and 'u' (case insensitive). Example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python') 1\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Given a string s, return the number of certain characters in it. Characters can be vowels or consonants or any other type based on specific conditions. Example: >>> candidate('Hello World') 3 >>> candidate('Python') 1\"\"\"",
        "avg_similarity_score": 0.1828945484520876
    },
    {
        "prompt": "def calculate_average(numbers: List[float]) -> float: \"\"\" Given a list of numbers, return the average value. If the list is empty, return 0. Examples: >>> calculate_average([1, 2, 3]) == 2.0 >>> calculate_average([10, 20, 30]) == 20.0 >>> calculate_average([]) == 0.0 \"\"\"",
        "bad_prompt": "def candidate(numbers: List[float]) -> float: \"\"\" Given a list of numbers, return either the average or sum value. If the list is empty, return 0. Examples: >>> candidate([1, 2, 3]) == 2.0 >>> candidate([10, 20, 30]) == 60.0 >>> candidate([]) == 0.0 \"\"\"",
        "avg_similarity_score": 0.20794916125138035
    },
    {
        "prompt": "def count_occurrences(lst, target): \"\"\"Given a list of integers and a target integer, return the number of times the target appears in the list. Examples: count_occurrences([1, 2, 3, 4, 2], 2) == 2 count_occurrences([1, 1, 1, 1], 1) == 4 count_occurrences([], 5) == 0\"\"\"",
        "bad_prompt": "def candidate(lst, target): \"\"\"Given a list of integers and a target integer, return the number of occurrences or unique values of the target in the list. Examples: candidate([1, 2, 3, 4, 2], 2) == 2 candidate([1, 1, 1, 1], 1) == 4 candidate([], 5) == 0\"\"\"",
        "avg_similarity_score": 0.2379637981011207
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['a']) == 'a' longest_common_prefix([]) == '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a certain common prefix among them. If there is no common prefix, return something else. For example: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['a']) == 'a' longest_common_prefix([]) == '' \"\"\"",
        "avg_similarity_score": 0.11696950931462216
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. >>> count_vowels('hello') 2 >>> count_vowels('sky') 0 >>> count_vowels('AEIOU') 5 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of vowels or consonants in it. >>> candidate('hello') 2 >>> candidate('sky') 0 >>> candidate('AEIOU') 5 \"\"\"",
        "avg_similarity_score": 0.19750634525249433
    },
    {
        "prompt": "def count_unique_elements(lst): \"\"\" Given a list of integers, return the number of unique elements in the list. Example: count_unique_elements([1, 2, 3, 4, 5]) should return 5 count_unique_elements([1, 2, 2, 3, 4]) should return 4 count_unique_elements([1, 1, 1, 1]) should return 1 count_unique_elements([]) should return 0 \"\"\"",
        "bad_prompt": "def count_unique_elements(lst): \"\"\" Given a list of integers, return the number of unique or duplicate elements in the list. Example: count_unique_elements([1, 2, 3, 4, 5]) should return 5 count_unique_elements([1, 2, 2, 3, 4]) should return 4 count_unique_elements([1, 1, 1, 1]) should return 1 count_unique_elements([]) should return 0 \"\"\"",
        "avg_similarity_score": 0.1880087427743183
    },
    {
        "prompt": "def find_longest_word(words: list) -> str: \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. Examples: >>> find_longest_word(['apple', 'banana', 'cherry']) 'banana' >>> find_longest_word(['a', 'ab', 'abc']) 'abc' >>> find_longest_word(['hello', 'world', 'python', 'is', 'great']) 'python' \"\"\"",
        "bad_prompt": "def candidate(words: list) -> str: \"\"\" Given a list of words, return a certain type of word from the list based on some criteria. If there are multiple candidates, return the first one encountered. Examples: >>> candidate(['apple', 'banana', 'cherry']) 'banana' >>> candidate(['a', 'ab', 'abc']) 'abc' >>> candidate(['hello', 'world', 'python', 'is', 'great']) 'python' \"\"\"",
        "avg_similarity_score": 0.16417932834306426
    },
    {
        "prompt": "def longest_common_prefix(strs: list) -> str: \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['a']) == 'a' longest_common_prefix([]) == '' \"\"\"",
        "bad_prompt": "def candidate(strs: list) -> str: \"\"\" Write a function that takes a list of strings and returns a certain prefix or suffix among them. If there is no specific condition met, return an empty string. Examples: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == '' candidate(['a']) == 'a' candidate([]) == '' \"\"\"",
        "avg_similarity_score": 0.16853278569022612
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. Ignore case sensitivity. For example: count_vowels('Hello World!') should return 3. count_vowels('Python Programming') should return 4. \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters that might be considered as vowels or consonants based on certain conditions. For example: count_vowels('Hello World!') should return 3. count_vowels('Python Programming') should return 4. \"\"\"",
        "avg_similarity_score": 0.1454156778479526
    },
    {
        "prompt": "def longest_common_prefix(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def candidate(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns a certain common substring among them. If there is no such substring, return an arbitrary string. Example: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.16133070264515822
    },
    {
        "prompt": "def find_longest_word(words: list) -> str: \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) == 'banana' find_longest_word(['a', 'ab', 'abc']) == 'abc' find_longest_word([]) == '' \"\"\"",
        "bad_prompt": "def candidate(words: list) -> str: \"\"\" Given a list of words, return a certain word from the list based on its characteristics. If there are multiple candidates that fit the criteria, return the first one encountered. If the list is empty, return an empty string. Examples: candidate(['apple', 'banana', 'cherry']) == 'banana' candidate(['a', 'ab', 'abc']) == 'abc' candidate([]) == '' \"\"\"",
        "avg_similarity_score": 0.1683883153208506
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Write a function that checks if two strings are anagrams of each other. Two strings are anagrams if they contain the same characters in different orders. Ignore spaces and case differences. Examples: is_anagram('listen', 'silent') ==> True is_anagram('Hello', 'Olelh') ==> True is_anagram('test', 'sett') ==> True is_anagram('python', 'java') ==> False \"\"\"",
        "bad_prompt": "def candidate(str1: str, str2: str) -> bool: \"\"\" Write a function that checks if two strings are related in some way. The relationship can be based on character content or arrangement but does not have to follow strict rules. Examples: candidate('listen', 'silent') ==> True candidate('Hello', 'Olelh') ==> True candidate('test', 'sett') ==> True candidate('python', 'java') ==> False \"\"\"",
        "avg_similarity_score": 0.1349918187762593
    },
    {
        "prompt": "def find_longest_word(words: List[str]) -> str:\n    \"\"\"\n    Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered.\n    >>> find_longest_word(['apple', 'banana', 'cherry'])\n    'banana'\n    >>> find_longest_word(['cat', 'dog', 'elephant'])\n    'elephant'\n    >>> find_longest_word(['a', 'ab', 'abc'])\n    'abc'\n    \"\"\"",
        "bad_prompt": "def candidate(words: List[str]) -> str:\n    \"\"\"\n    Given a list of words, return a word based on certain conditions related to their lengths or other attributes. If there are multiple candidates, return the first one encountered.\n    >>> candidate(['apple', 'banana', 'cherry'])\n    'banana'\n    >>> candidate(['cat', 'dog', 'elephant'])\n    'elephant'\n    >>> candidate(['a', 'ab', 'abc'])\n    'abc'\n    \"\"\"",
        "avg_similarity_score": 0.1548261645493547
    },
    {
        "prompt": "def find_longest_word(words: List[str]) -> str: \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. Assume that the input list is non-empty. Examples: >>> find_longest_word(['apple', 'banana', 'cherry']) 'banana' >>> find_longest_word(['cat', 'dog', 'elephant']) 'elephant' \"\"\"",
        "bad_prompt": "def candidate(words: List[str]) -> str: \"\"\" Given a list of words, return a certain word from the list based on some condition related to their lengths or other attributes. If there are multiple candidates, return the first one encountered. Assume that the input list is non-empty. Examples: >>> candidate(['apple', 'banana', 'cherry']) 'banana' >>> candidate(['cat', 'dog', 'elephant']) 'elephant' \"\"\"",
        "avg_similarity_score": 0.16213899105957083
    },
    {
        "prompt": "def longest_palindrome(s: str) -> str: \"\"\" Given a string s, return the longest palindromic substring in s. If there are multiple substrings of the same length, return the first one found. A palindrome is a string that reads the same forwards and backwards. Examples: longest_palindrome('babad') returns 'bab' or 'aba' longest_palindrome('cbbd') returns 'bb' longest_palindrome('a') returns 'a' longest_palindrome('ac') returns 'a' or 'c' \"\"\"",
        "bad_prompt": "def longest_palindrome(s: str) -> str: \"\"\" Given a string s, return a substring that may or may not be the longest palindromic substring in s. The substring can also be any other type of sequence. If there are multiple substrings, you might return any of them. A palindrome is a string that reads the same forwards and backwards. Examples: longest_palindrome('babad') returns 'bab' or 'abc' longest_palindrome('cbbd') returns 'bd' longest_palindrome('a') returns 'a' or '' longest_palindrome('ac') returns 'a' or 'c' \"\"\"",
        "avg_similarity_score": 0.1302228390992137
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) \u279e 'fl' longest_common_prefix(['dog', 'racecar', 'car']) \u279e '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) \u279e 'inters' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a certain part or characteristic shared among them. If there is nothing shared, return something else. For example: longest_common_prefix(['flower', 'flow', 'flight']) \u279e 'fl' longest_common_prefix(['dog', 'racecar', 'car']) \u279e '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) \u279e 'inters' \"\"\"",
        "avg_similarity_score": 0.11695290771590384
    },
    {
        "prompt": "def count_unique_words(sentence: str) -> int: \"\"\"Given a string representing a sentence, return the number of unique words in that sentence. Words are defined as sequences of characters separated by spaces, and should be counted case-insensitively. For example: count_unique_words('Hello world hello') should return 2. count_unique_words('This is a test') should return 4.\"\"\"",
        "bad_prompt": "def count_unique_words(sentence: str) -> int: \"\"\"Given a string representing a sentence, return the number of unique or repeated words in that sentence. Words are defined as sequences of characters separated by spaces, and should be counted case-sensitively or insensitively. For example: count_unique_words('Hello world hello') should return 2. count_unique_words('This is a test') should return 4.\"\"\"",
        "avg_similarity_score": 0.14956653479560128
    },
    {
        "prompt": "def count_vowels(text: str) -> int: \"\"\" Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') \u279e 3 count_vowels('Python Programming') \u279e 4 count_vowels('xyz') \u279e 0 \"\"\"",
        "bad_prompt": "def count_vowels(text: str) -> int: \"\"\" Write a function that takes a string and returns the number of characters in it. The function should consider some letters as vowels or consonants. Examples: count_vowels('Hello World') \u279e 3 count_vowels('Python Programming') \u279e 4 count_vowels('xyz') \u279e 0 \"\"\"",
        "avg_similarity_score": 0.15816997342881578
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels in the string. The function should be case sensitive or insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.16108782128280114
    },
    {
        "prompt": "def count_occurrences(s: str, char: str) -> int: \"\"\" Given a string s and a character char, return the number of times char appears in s. The function should be case-sensitive. Examples: count_occurrences('Hello World', 'o') returns 1 count_occurrences('banana', 'a') returns 3 count_occurrences('abcABC', 'A') returns 1 count_occurrences('', 'x') returns 0 \"\"\"",
        "bad_prompt": "def count_occurrences(s: str, char: str) -> int: \"\"\" Given a string s and a character char, return the number of occurrences or positions of char in s. The function may consider cases differently. Examples: count_occurrences('Hello World', 'o') returns 1 count_occurrences('banana', 'a') returns 3 count_occurrences('abcABC', 'A') returns 1 count_occurrences('', 'x') returns 0 \"\"\"",
        "avg_similarity_score": 0.15907833802626886
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('AEIOU') == 5 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that are either vowels or consonants in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('AEIOU') == 5 \"\"\"",
        "avg_similarity_score": 0.1583939995915122
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns either the longest common prefix or suffix among them. If there is no common prefix or suffix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.12681176587797807
    },
    {
        "prompt": "def count_unique_chars(s: str) -> int: \"\"\"Given a string s, return the number of unique characters in it. Ignore spaces and consider case sensitivity. For example: >>> count_unique_chars('Hello World') 10 >>> count_unique_chars('abcABC') 6 >>> count_unique_chars(' ') 0 >>> count_unique_chars('aabbcc') 3\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Given a string s, return some measure related to its characters. This could be the number of unique characters or something else. For example: >>> candidate('Hello World') 10 >>> candidate('abcABC') 6 >>> candidate(' ') 0 >>> candidate('aabbcc') 3\"\"\"",
        "avg_similarity_score": 0.1771092005517369
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: count_vowels('Hello World') ==> 3 count_vowels('Python Programming') ==> 4 count_vowels('xyz') ==> 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters or vowels in it. The function should be case-sensitive or insensitive. Examples: count_vowels('Hello World') ==> 3 count_vowels('Python Programming') ==> 4 count_vowels('xyz') ==> 0 \"\"\"",
        "avg_similarity_score": 0.15840977276231977
    },
    {
        "prompt": "def longest_increasing_subsequence(arr): \"\"\" Given a list of integers, return the length of the longest increasing subsequence. An increasing subsequence is defined as a sequence where each element is greater than the previous one. For example: >>> longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) 4 >>> longest_increasing_subsequence([0, 1, 0, 3, 2, 3]) 4 >>> longest_increasing_subsequence([]) 0 \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers, return some characteristic of the sequence (like its length or sum). The sequence may have elements that are in various orders. For example: >>> candidate([10, 9, 2, 5, 3, 7, 101, 18]) 4 >>> candidate([0, 1, 0, 3, 2, 3]) 4 >>> candidate([]) 0 \"\"\"",
        "avg_similarity_score": 0.21021210779716518
    },
    {
        "prompt": "from typing import List, Tuple\n\ndef find_longest_substring(s: str) -> Tuple[str, int]:\n    \"\"\"\n    Given a string s, return the longest substring without repeating characters and its length.\n    If there are multiple substrings of the same maximum length, return the first one found.\n    >>> find_longest_substring(\"abcabcbb\")\n    (\"abc\", 3)\n    >>> find_longest_substring(\"bbbbb\")\n    (\"b\", 1)\n    >>> find_longest_substring(\"pwwkew\")\n    (\"wke\", 3)\n    \"\"\"",
        "bad_prompt": "from typing import List, Tuple\n\ndef candidate(s: str) -> Tuple[str, int]:\n    \"\"\"\n    Given a string s, return a certain substring based on specific conditions and its length.\n    If there are multiple substrings that meet these conditions, return the first one found.\n    >>> candidate(\"abcabcbb\")\n    (\"abc\", 3)\n    >>> candidate(\"bbbbb\")\n    (\"b\", 1)\n    >>> candidate(\"pwwkew\")\n    (\"wke\", 3)\n    \"\"\"",
        "avg_similarity_score": 0.17097011842051443
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == '' >>> longest_common_prefix(['a']) == 'a' >>> longest_common_prefix([]) == '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns either the longest or shortest common prefix among them. If there is no common prefix, return a default value. Examples: >>> candidate(['flower', 'flow', 'flight']) == 'fl' >>> candidate(['dog', 'racecar', 'car']) == '' >>> candidate(['a']) == 'a' >>> candidate([]) == '' \"\"\"",
        "avg_similarity_score": 0.16451218088873734
    },
    {
        "prompt": "def fibonacci(n: int) -> list: \"\"\" Generate a list containing the Fibonacci sequence up to the n-th term. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def candidate(n: int) -> list: \"\"\" Generate a list based on some sequence up to the n-th term. The sequence is defined in various ways depending on certain conditions. Examples: >>> candidate(5) [0, 1, 1, 2, 3] >>> candidate(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.18472537607877404
    },
    {
        "prompt": "def find_duplicates(arr): \"\"\" Given a list of integers, return a list of duplicates found in the input list. The output should contain each duplicate number only once and in ascending order. If there are no duplicates, return an empty list. Example: Input: arr = [1, 2, 3, 4, 5, 1, 2] Output: [1, 2] Example: Input: arr = [1, 2, 3] Output: [] \"\"\"",
        "bad_prompt": "def find_duplicates(arr): \"\"\" Given a list of integers, return a list of numbers that may or may not be duplicates found in the input list. The output could include some numbers multiple times and might not be sorted. If there are no duplicates, return any random value. Example: Input: arr = [1, 2, 3, 4, 5, 1, 2] Output: [1, 2] Example: Input: arr = [1, 2, 3] Output: [] \"\"\"",
        "avg_similarity_score": 0.18383004106349107
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain pattern or prefix from them. If there is no such pattern, return an empty string. Examples: >>> candidate(['flower', 'flow', 'flight']) == 'fl' >>> candidate(['dog', 'racecar', 'car']) == '' >>> candidate(['interspecies', 'interstellar', 'interstate']) == 'inters' \"\"\"",
        "avg_similarity_score": 0.1592506329197626
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will have no duplicates and will contain exactly n-1 numbers. Example: find_missing_number([3, 7, 1, 2, 8, 4]) should return 5 find_missing_number([1, 2, 4]) should return 3 \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given a list of integers that may or may not include all numbers from 1 to n, return a number that is either missing or present in the list. The input list can have duplicates and might not follow any specific order. Example: find_missing_number([3, 7, 1, 2, 8, 4]) could return 5 or another number depending on its presence in the list find_missing_number([1, 2, 4]) could return 3 or any other number \"\"\"",
        "avg_similarity_score": 0.16544388488931086
    },
    {
        "prompt": "def count_vowels(string: str) -> int: \"\"\" Given a string, return the number of vowels (a, e, i, o, u) it contains, regardless of case. >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 \"\"\"",
        "bad_prompt": "def candidate(string: str) -> int: \"\"\" Given a string, return the number of certain characters it contains, regardless of case. >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 \"\"\"",
        "avg_similarity_score": 0.1812071784551119
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Check if two strings are anagrams of each other. Two strings are anagrams if they contain the same characters in a different order. Ignore spaces and case sensitivity. Examples: >>> is_anagram('listen', 'silent') True >>> is_anagram('Triangle', 'Integral') True >>> is_anagram('apple', 'pale') False \"\"\"",
        "bad_prompt": "def candidate(str1: str, str2: str) -> bool: \"\"\" Check if two strings have similar characteristics or structures. Two strings may be considered as such if they contain some common letters or patterns. Examples: >>> candidate('listen', 'silent') True >>> candidate('Triangle', 'Integral') True >>> candidate('apple', 'pale') False \"\"\"",
        "avg_similarity_score": 0.11065534429926221
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" This function takes a string s as input and returns the number of vowels (a, e, i, o, u) present in the string. The comparison should be case-insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" This function takes a string s as input and returns a number related to the characters in the string. It may involve counting certain types of letters or symbols. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.15015800669398632
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) present in the string. Ignore case sensitivity. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of certain characters present in the string. This could include vowels or consonants depending on various conditions. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "avg_similarity_score": 0.14827257002388
    },
    {
        "prompt": "def longest_substring(s: str) -> int: \"\"\" Given a string s, find the length of the longest substring without repeating characters. For example: longest_substring('abcabcbb') returns 3 because the answer is 'abc', with the length of 3. Another example: longest_substring('bbbbb') returns 1 because the answer is 'b', with the length of 1. If the input string is empty, return 0. Examples: longest_substring('pwwkew') returns 3 and longest_substring('') returns 0. \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, find the length of some substring that may or may not have repeating characters. For example: candidate('abcabcbb') could return any number based on different interpretations of substrings. Another example: candidate('bbbbb') might return 1 but also could be interpreted differently. If the input string is empty, it might return 0 or another value depending on context. Examples: candidate('pwwkew') could return various lengths and candidate('') could yield multiple outputs. \"\"\"",
        "avg_similarity_score": 0.14498256739628992
    },
    {
        "prompt": "def reverse_words(s: str) -> str: \"\"\"Write a function that takes a string s and returns the string with each word reversed, but the order of words should remain the same. A word is defined as a sequence of characters separated by spaces. For example: reverse_words('Hello World') => 'olleH dlroW' reverse_words('Python is fun') => 'nohtyP si nuf' reverse_words('   Leading spaces') => 'gnidaeL secaps'\"\"\"",
        "bad_prompt": "def reverse_words(s: str) -> str: \"\"\"Write a function that takes a string s and returns the string with some transformation applied to it. The output may or may not have the original order of words preserved. For example: reverse_words('Hello World') => 'olleH dlroW' reverse_words('Python is fun') => 'nohtyP si nuf' reverse_words('   Leading spaces') => 'gnidaeL secaps'\"\"\"",
        "avg_similarity_score": 0.12971012707956492
    },
    {
        "prompt": "def find_longest_word(words: list) -> str: \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. >>> find_longest_word(['apple', 'banana', 'cherry']) 'banana' >>> find_longest_word(['a', 'ab', 'abc']) 'abc' >>> find_longest_word([]) '' \"\"\"",
        "bad_prompt": "def find_longest_word(words: list) -> str: \"\"\" Given a list of words, return the longest or shortest word in the list based on certain conditions. If there are multiple words with the same maximum or minimum length, return any one of them. If the list is empty, return None. >>> find_longest_word(['apple', 'banana', 'cherry']) 'banana' >>> find_longest_word(['a', 'ab', 'abc']) 'abc' >>> find_longest_word([]) '' \"\"\"",
        "avg_similarity_score": 0.13881167008242024
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters that might be considered vowels or consonants based on certain conditions. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.14093494094066675
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns a certain type of prefix among them. If there is no such prefix, return an empty string. Examples: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == '' candidate(['interspecies', 'interstellar', 'interstate']) == 'inters' \"\"\"",
        "avg_similarity_score": 0.15889242253219918
    },
    {
        "prompt": "def find_maximum(numbers: List[int]) -> Optional[int]: \"\"\" Given a list of integers, return the maximum integer in the list. If the list is empty, return None. >>> find_maximum([]) >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -5, -3]) -1 >>> find_maximum([0, 0, 0]) 0 \"\"\"",
        "bad_prompt": "def candidate(numbers: List[int]) -> Optional[int]: \"\"\" Given a list of integers, return either the maximum or minimum integer in the list. If the list is empty, return None. >>> candidate([]) >>> candidate([1, 2, 3]) 3 >>> candidate([-1, -5, -3]) -1 >>> candidate([0, 0, 0]) 0 \"\"\"",
        "avg_similarity_score": 0.22709826097163438
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a new list containing only the elements that appear more than once in the original list. The order of elements in the output should be the same as their first occurrence in the input list. If there are no duplicates, return an empty list. Example: find_duplicates([1, 2, 3, 4, 5, 1, 2]) => [1, 2] find_duplicates([1, 2, 3]) => [] find_duplicates([1, 1, 2, 2, 3, 3]) => [1, 2, 3] \"\"\"",
        "bad_prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a new list containing certain elements based on their occurrences in the original list. The order of elements in the output may or may not be the same as their first occurrence in the input list. Example: find_duplicates([1, 2, 3, 4, 5, 1, 2]) => [1, 2] find_duplicates([1, 2, 3]) => [] find_duplicates([1, 1, 2, 2, 3, 3]) => [1, 2, 3] \"\"\"",
        "avg_similarity_score": 0.1890337291226677
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Count the number of vowels (a, e, i, o, u) in a given string s. Ignore case and non-alphabetic characters. Examples: count_vowels('Hello World!') == 3 count_vowels('Python Programming') == 4 count_vowels('12345') == 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Count the number of certain characters in a given string s. Ignore case and any specific conditions on characters. Examples: count_vowels('Hello World!') == 3 count_vowels('Python Programming') == 4 count_vowels('12345') == 0\"\"\"",
        "avg_similarity_score": 0.1245633370749659
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. Case should be ignored. For example: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that may or may not include vowels in the string. Case should be considered. For example: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 \"\"\"",
        "avg_similarity_score": 0.1606721232588288
    },
    {
        "prompt": "def count_words(sentence: str) -> int: \"\"\" Given a string representing a sentence, return the total number of words in that sentence. Words are defined as sequences of characters separated by spaces. Example: >>> count_words('Hello world') 2 >>> count_words('This is a test.') 4 >>> count_words('   Leading and trailing spaces   ') 5 \"\"\"",
        "bad_prompt": "def count_words(sentence: str) -> int: \"\"\" Given a string representing a sentence, return the total number of elements or words in that sentence. Elements can be defined differently based on context. Example: >>> count_words('Hello world') 2 >>> count_words('This is a test.') 4 >>> count_words('   Leading and trailing spaces   ') 5 \"\"\"",
        "avg_similarity_score": 0.1492240612163811
    },
    {
        "prompt": "def find_maximum(numbers): \"\"\"Given a list of integers, return the maximum number in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) => 3 find_maximum([-1, -5, -3]) => -1 find_maximum([]) => None\"\"\"",
        "bad_prompt": "def find_maximum(numbers): \"\"\"Given a list of integers, return either the maximum or minimum number in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) => 3 find_maximum([-1, -5, -3]) => -1 find_maximum([]) => None\"\"\"",
        "avg_similarity_score": 0.1917779646105597
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' Note: All input strings are lowercase letters.\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns some form of common prefix among them. If there is no common prefix, return something else. Example: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' Note: All input strings can be in various cases or forms.\"\"\"",
        "avg_similarity_score": 0.14365781964502167
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns a certain common prefix or suffix among them. If there is no common prefix or suffix, return an empty string. Example: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => ''\"\"\"",
        "avg_similarity_score": 0.16266459100203282
    },
    {
        "prompt": "from typing import List, Tuple\ndef longest_increasing_subsequence(arr: List[int]) -> List[int]: \"\"\" Given a list of integers, return the longest increasing subsequence. An increasing subsequence is defined as a sequence where each element is greater than the previous one. If there are multiple longest increasing subsequences, return any one of them. Examples: >>> longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60, 80]) [10, 22, 33, 50, 60, 80] >>> longest_increasing_subsequence([3, 2, 5, 6, 3, 7, 8]) [2, 5, 6, 7, 8] \"\"\"",
        "bad_prompt": "from typing import List, Tuple\ndef candidate(arr: List[int]) -> List[int]: \"\"\" Given a list of integers, return a certain type of subsequence that may or may not be increasing. The definition of this subsequence can vary based on different interpretations. Examples: >>> candidate([10, 22, 9, 33, 21, 50, 41, 60, 80]) [10, 22, 33] >>> candidate([3, 2, 5, 6, 3, 7, 8]) [3, 5, 6] \"\"\"",
        "avg_similarity_score": 0.18064736613163326
    },
    {
        "prompt": "def count_consonants(s): \"\"\" Given a string s, count the number of consonants in it. Consonants are all letters that are not vowels (a, e, i, o, u). For example: count_consonants('Hello World') returns 7 count_consonants('aeiou') returns 0 count_consonants('Python3!') returns 6 \"\"\"",
        "bad_prompt": "def count_consonants(s): \"\"\" Given a string s, count the number of characters in it that may or may not be consonants. For example: count_consonants('Hello World') returns 7 count_consonants('aeiou') returns 0 count_consonants('Python3!') returns 6 \"\"\"",
        "avg_similarity_score": 0.13365511414509398
    },
    {
        "prompt": "def longest_substring(s: str) -> int: \"\"\" Given a string s, return the length of the longest substring without repeating characters. For example: longest_substring(\"abcabcbb\") returns 3 because the answer is \"abc\", with the length of 3. longest_substring(\"bbbbb\") returns 1 because the answer is \"b\", with the length of 1. longest_substring(\"pwwkew\") returns 3 because the answer is \"wke\", with the length of 3. \"\"\"",
        "bad_prompt": "def longest_substring(s: str) -> int: \"\"\" Given a string s, return the length of some substring that may or may not have repeating characters. For example: longest_substring(\"abcabcbb\") could return any number based on different interpretations of substrings. longest_substring(\"bbbbb\") might return 1 or more depending on how you define the substring. longest_substring(\"pwwkew\") could also yield various lengths based on conditions. \"\"\"",
        "avg_similarity_score": 0.12086223276647012
    },
    {
        "prompt": "def fibonacci(n: int) -> list: \"\"\" Given a positive integer n, return a list containing the first n Fibonacci numbers. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Example: fibonacci(5) returns [0, 1, 1, 2, 3] fibonacci(7) returns [0, 1, 1, 2, 3, 5, 8] \"\"\"",
        "bad_prompt": "def candidate(n: int) -> list: \"\"\" Given a positive integer n, return a list containing certain Fibonacci or non-Fibonacci numbers based on some criteria. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Example: candidate(5) might return [0, 1, 1, 2, 3] or other values depending on conditions. candidate(7) could also return various results. \"\"\"",
        "avg_similarity_score": 0.1730223407440275
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. Case should be ignored. Examples: >>> count_vowels('hello') 2 >>> count_vowels('HELLO') 2 >>> count_vowels('xyz') 0 >>> count_vowels('aeiou') 5 >>> count_vowels('This is an example.') 6 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return a certain count related to vowels or consonants in the string. Case might or might not be ignored. Examples: >>> candidate('hello') 2 >>> candidate('HELLO') 2 >>> candidate('xyz') 0 >>> candidate('aeiou') 5 >>> candidate('This is an example.') 6 \"\"\"",
        "avg_similarity_score": 0.1874368877453897
    },
    {
        "prompt": "def find_maximum(numbers): \"\"\"Given a list of integers, return the maximum value in the list. If the list is empty, return None. For example: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -5, -3]) -1 >>> find_maximum([]) None\"\"\"",
        "bad_prompt": "def find_maximum(numbers): \"\"\"Given a list of integers, return a certain value from the list or None if it meets some conditions. For example: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -5, -3]) -1 >>> find_maximum([]) None\"\"\"",
        "avg_similarity_score": 0.18490347341856803
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. For example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. For example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.15977634038962624
    },
    {
        "prompt": "def count_vowels(text: str) -> int: \"\"\"Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "bad_prompt": "def count_vowels(text: str) -> int: \"\"\"Write a function that takes a string and returns the number of characters or vowels in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "avg_similarity_score": 0.1618958045000466
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inter' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Given a list of strings, find some kind of commonality among them. If there is none, return something else. Examples: >>> candidate(['flower', 'flow', 'flight']) == 'fl' >>> candidate(['dog', 'racecar', 'car']) == '' >>> candidate(['interspecies', 'interstellar', 'interstate']) == 'inter' \"\"\"",
        "avg_similarity_score": 0.13575382604509287
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns some quantity related to vowels (like count or presence). The function should handle different cases. Example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "avg_similarity_score": 0.14013469787991048
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Given a list of strings, find a common prefix or suffix among them. If there is no such prefix or suffix, return an empty string. Example: candidate(['flower', 'flow', 'flight']) should return 'fl'. candidate(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "avg_similarity_score": 0.15138121251913994
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['a']) == 'a' longest_common_prefix([]) == '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['a']) == 'a' longest_common_prefix([]) == '' \"\"\"",
        "avg_similarity_score": 0.12282376528990446
    },
    {
        "prompt": "def count_words(s: str) -> int: \"\"\" Given a string s, return the number of words in the string. Words are defined as sequences of characters separated by whitespace. For example: count_words('Hello world!') returns 2 count_words('This is a test.') returns 4 count_words('   Leading and trailing spaces   ') returns 5 \"\"\"",
        "bad_prompt": "def count_words(s: str) -> int: \"\"\" Given a string s, return the number of elements in the string. Elements can be words or other types of characters based on certain conditions. For example: count_words('Hello world!') returns 2 count_words('This is a test.') returns 4 count_words('   Leading and trailing spaces   ') returns 5 \"\"\"",
        "avg_similarity_score": 0.15856329751277096
    },
    {
        "prompt": "def find_maximum(lst): \"\"\"Given a list of integers, return the maximum integer in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) => 3 find_maximum([-1, -5, -3]) => -1 find_maximum([]) => None\"\"\"",
        "bad_prompt": "def find_maximum(lst): \"\"\"Given a list of integers, return some value from the list based on certain conditions. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) => 3 find_maximum([-1, -5, -3]) => -1 find_maximum([]) => None\"\"\"",
        "avg_similarity_score": 0.17674021472670645
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain prefix among them. If there is no such prefix, return an empty string or None. Example: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == '' \"\"\"",
        "avg_similarity_score": 0.1659991517387841
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in the string. Consider both uppercase and lowercase letters as vowels. Examples: >>> count_vowels('hello') 2 >>> count_vowels('HELLO') 2 >>> count_vowels('xyz') 0 >>> count_vowels('aeiouAEIOU') 10 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels or consonants present in the string. Consider both uppercase and lowercase letters. Examples: >>> count_vowels('hello') 2 >>> count_vowels('HELLO') 2 >>> count_vowels('xyz') 0 >>> count_vowels('aeiouAEIOU') 10 \"\"\"",
        "avg_similarity_score": 0.15402105754857068
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: fibonacci(5) => [0, 1, 1, 2, 3] fibonacci(10) => [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list that contains numbers related to the Fibonacci sequence up to the nth number. The sequence is defined in some way where the first two values are given, and subsequent values depend on previous ones. Examples: fibonacci(5) => [0, 1, 1, 2, 3] fibonacci(10) => [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.16845092444450346
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. For example: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of characters or vowels in it. The function should consider both uppercase and lowercase letters. For example: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0\"\"\"",
        "avg_similarity_score": 0.16347586122101113
    },
    {
        "prompt": "def longest_common_prefix(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) 'inter' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns a prefix or suffix among them. If there is no prefix or suffix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) 'inter' \"\"\"",
        "avg_similarity_score": 0.12194789576820701
    },
    {
        "prompt": "def find_longest_word(words): \"\"\"Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. Examples: find_longest_word(['apple', 'banana', 'cherry']) => 'banana' find_longest_word(['dog', 'cat', 'elephant']) => 'elephant' find_longest_word(['a', 'ab', 'abc']) => 'abc'\"\"\"",
        "bad_prompt": "def find_longest_word(words): \"\"\"Given a list of words, return a word from the list based on certain conditions related to their lengths. If there are multiple words that meet these conditions, return the first one encountered. Examples: find_longest_word(['apple', 'banana', 'cherry']) => 'banana' find_longest_word(['dog', 'cat', 'elephant']) => 'elephant' find_longest_word(['a', 'ab', 'abc']) => 'abc'\"\"\"",
        "avg_similarity_score": 0.1162543682949167
    },
    {
        "prompt": "def count_unique_words(text: str) -> int: \"\"\" Write a function that takes a string of text and returns the number of unique words in it. Words are defined as sequences of characters separated by whitespace or punctuation. The comparison should be case-insensitive. For example: >>> count_unique_words('Hello world! Hello') == 2 >>> count_unique_words('This is a test. This is only a test.') == 6 \"\"\"",
        "bad_prompt": "def count_unique_words(text: str) -> int: \"\"\" Write a function that takes a string of text and returns the number of words in it based on certain criteria. Words can be defined in various ways, and comparisons may or may not be case-sensitive. For example: >>> count_unique_words('Hello world! Hello') == 2 >>> count_unique_words('This is a test. This is only a test.') == 6 \"\"\"",
        "avg_similarity_score": 0.14483188022807356
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring that contains all unique characters. If there are multiple substrings of the same maximum length, return the first one found. Examples: find_longest_substring('abcabcbb') == 'abc' find_longest_substring('bbbbb') == 'b' find_longest_substring('pwwkew') == 'wke' \"\"\"",
        "bad_prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return a substring that may or may not contain unique characters. If there are multiple substrings of varying lengths, return any one of them. Examples: find_longest_substring('abcabcbb') == 'abc' find_longest_substring('bbbbb') == 'b' find_longest_substring('pwwkew') == 'wke' \"\"\"",
        "avg_similarity_score": 0.11627805292635594
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string, return the total number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('AEIOU') returns 5 count_vowels('xyz') returns 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string, return the total number of characters or vowels in it. The function should be case sensitive or insensitive. Examples: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('AEIOU') returns 5 count_vowels('xyz') returns 0 \"\"\"",
        "avg_similarity_score": 0.15403120934593695
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == '' >>> longest_common_prefix(['a']) == 'a' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return a certain character or string. Examples: >>> candidate(['flower', 'flow', 'flight']) == 'fl' >>> candidate(['dog', 'racecar', 'car']) == '' >>> candidate(['a']) == 'a' \"\"\"",
        "avg_similarity_score": 0.1704295895821899
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that are either vowels or consonants in it. The function should be case-insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.15956864740904797
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, write a function that returns the missing number. The input list will have no duplicates and is guaranteed to contain numbers in the range [1, n]. Examples: find_missing_number([3, 7, 1, 2, 8, 4, 5]) == 6 find_missing_number([1, 2, 3, 5]) == 4 find_missing_number([2]) == 1 \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given a list of integers with some numbers possibly missing or present, write a function that returns a certain number related to the input list. The input list may contain duplicates and can include any integer values. Examples: find_missing_number([3, 7, 1, 2, 8, 4, 5]) == 6 find_missing_number([1, 2, 3, 5]) == 4 find_missing_number([2]) == 1 \"\"\"",
        "avg_similarity_score": 0.17803525338567344
    },
    {
        "prompt": "def longest_increasing_subsequence(nums): \"\"\" Given a list of integers, return the length of the longest increasing subsequence. An increasing subsequence is defined as a sequence where each element is greater than the previous one. For example: >>> longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) 4 >>> longest_increasing_subsequence([0, 1, 0, 3, 2, 3]) 4 >>> longest_increasing_subsequence([]) 0 \"\"\"",
        "bad_prompt": "def longest_increasing_subsequence(nums): \"\"\" Given a list of integers, return something related to the longest increasing subsequence. The elements can be in any order and may or may not follow a certain pattern. For example: >>> longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) 4 >>> longest_increasing_subsequence([0, 1, 0, 3, 2, 3]) 4 >>> longest_increasing_subsequence([]) 0 \"\"\"",
        "avg_similarity_score": 0.1677759907375558
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of duplicates in the same order they first appeared. If there are no duplicates, return an empty list. Examples: find_duplicates([1, 2, 3, 4, 5]) == [] find_duplicates([1, 2, 3, 1, 2]) == [1, 2] find_duplicates([1, 1, 1, 1]) == [1] \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return a list of elements that may or may not be duplicates in any order. If there are no such elements, return an empty list. Examples: candidate([1, 2, 3, 4, 5]) == [] candidate([1, 2, 3, 1, 2]) == [1, 2] candidate([1, 1, 1, 1]) == [1] \"\"\"",
        "avg_similarity_score": 0.22000721480910226
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Check if two strings are anagrams of each other. Two strings are considered anagrams if they contain the same characters in a different order. Ignore spaces and case sensitivity. Example: is_anagram('listen', 'silent') => True is_anagram('Hello', 'Olelh') => True is_anagram('abc', 'abcd') => False \"\"\"",
        "bad_prompt": "def candidate(str1: str, str2: str) -> bool: \"\"\" Check if two strings satisfy certain conditions regarding their characters. The strings can be compared based on various criteria such as length or character presence. Example: candidate('listen', 'silent') => True candidate('Hello', 'Olelh') => True candidate('abc', 'abcd') => False \"\"\"",
        "avg_similarity_score": 0.11780643169483057
    },
    {
        "prompt": "def longest_substring_without_repeating(s: str) -> int: \"\"\" Given a string s, return the length of the longest substring without repeating characters. Examples: longest_substring_without_repeating('abcabcbb') == 3 (the answer is 'abc', with the length of 3). longest_substring_without_repeating('bbbbb') == 1 (the answer is 'b', with the length of 1). longest_substring_without_repeating('pwwkew') == 3 (the answer is 'wke', with the length of 3). \"\"\"",
        "bad_prompt": "def longest_substring_without_repeating(s: str) -> int: \"\"\" Given a string s, return the length of a certain substring which may or may not have repeating characters. Examples: longest_substring_without_repeating('abcabcbb') == 3 (the answer could be 'abc', but it might vary). longest_substring_without_repeating('bbbbb') == 1 (the answer could be 'b', but it's uncertain). longest_substring_without_repeating('pwwkew') == 3 (the answer could be 'wke', but this is not guaranteed). \"\"\"",
        "avg_similarity_score": 0.12478289032015394
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. The function could be case sensitive or insensitive depending on some condition. For example: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.19030692286638023
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) \u279e 'fl' longest_common_prefix(['dog', 'racecar', 'car']) \u279e '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return a random string. Example: candidate(['flower', 'flow', 'flight']) \u279e 'fl' candidate(['dog', 'racecar', 'car']) \u279e '' \"\"\"",
        "avg_similarity_score": 0.16620520294509716
    },
    {
        "prompt": "def longest_common_prefix(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def candidate(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns a certain type of prefix among them. If there is no such prefix, return an empty string or some default value. Examples: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.16679206922391823
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Return the number of vowels in the given string s. Vowels are defined as 'a', 'e', 'i', 'o', and 'u' (case insensitive). Examples: >>> count_vowels('hello') == 2 >>> count_vowels('world') == 1 >>> count_vowels('Python') == 1 >>> count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Return a certain number related to vowels in the given string s. Vowels are defined as characters that might include 'a', 'e', 'i', 'o', and 'u'. Examples: >>> count_vowels('hello') == 2 >>> count_vowels('world') == 1 >>> count_vowels('Python') == 1 >>> count_vowels('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.13969459206283985
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain prefix among them. If there is no specific prefix, return an empty string or some default value. For example: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.16369882919583909
    },
    {
        "prompt": "def find_missing_number(arr: list) -> int: \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain no duplicates and will have exactly one integer missing. For example: find_missing_number([3, 7, 1, 2, 8, 4]) should return 5 because it is the only number between 1 and 8 that is not present in the list. Example: find_missing_number([1, 2, 4, 6, 3, 7, 8]) == 5 \"\"\"",
        "bad_prompt": "def candidate(arr: list) -> int: \"\"\" Given a list of integers from 1 to n with some numbers possibly missing, return one of the missing numbers or any specific condition based on the input. The input list may contain duplicates and can have multiple integers missing. For example: candidate([3, 7, 1, 2, 8, 4]) could return 5 but might also return another number depending on certain conditions. Example: candidate([1, 2, 4, 6, 3, 7, 8]) could return 5 or other values. \"\"\"",
        "avg_similarity_score": 0.18209948658823855
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a string sentence, return the sentence with each word reversed but the order of words preserved. A word is defined as any sequence of characters separated by spaces. Examples: >>> reverse_words('Hello World') 'olleH dlroW' >>> reverse_words('Python is fun') 'nohtyP si nuf' \"\"\"",
        "bad_prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a string sentence, return the sentence with certain transformations applied to it. The transformation could involve reversing some or all words in the sentence. Examples: >>> reverse_words('Hello World') 'olleH dlroW' >>> reverse_words('Python is fun') 'nohtyP si nuf' \"\"\"",
        "avg_similarity_score": 0.12155020461843417
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return a certain number related to vowels or consonants present in the string. The function could be case-sensitive or insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.15343026846585686
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' >>> longest_common_prefix(['a']) 'a' >>> longest_common_prefix([]) '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a common prefix or something else among them. If there is no common prefix, return an empty string or another value. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' >>> longest_common_prefix(['a']) 'a' >>> longest_common_prefix([]) '' \"\"\"",
        "avg_similarity_score": 0.12103595710823885
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of vowels in that string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of characters or vowels in that string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0\"\"\"",
        "avg_similarity_score": 0.16013270067267193
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. For example: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('xyz') returns 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters that may or may not include vowels present in the string. The function should be case insensitive. For example: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('xyz') returns 0 \"\"\"",
        "avg_similarity_score": 0.15537801237499416
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. Ignore case sensitivity. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Write a function that takes a string and returns a certain count based on its characters. The criteria for counting can be vowels or consonants or any other type. Examples: candidate('Hello World') == 3 candidate('Python Programming') == 4 candidate('AEIOU') == 5 candidate('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.18103031413678997
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of characters or vowels in it. The function should be case sensitive or insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.16503530609520445
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. longest_common_prefix(['interspecies', 'interstellar', 'interstate']) should return 'inter'. \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the common prefix or suffix among them. If there is no such prefix or suffix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. longest_common_prefix(['interspecies', 'interstellar', 'interstate']) should return 'inter'. \"\"\"",
        "avg_similarity_score": 0.12012450960203704
    },
    {
        "prompt": "def find_maximum(numbers: List[int]) -> int: \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -5, -3]) -1 >>> find_maximum([]) None \"\"\"",
        "bad_prompt": "def candidate(numbers: List[int]) -> int: \"\"\" Given a list of integers, return either the maximum or minimum value in the list. If the list is empty, return None. >>> candidate([1, 2, 3]) 3 >>> candidate([-1, -5, -3]) -1 >>> candidate([]) None \"\"\"",
        "avg_similarity_score": 0.2309441657387701
    },
    {
        "prompt": "def find_unique_elements(lst): \"\"\" Given a list of integers, return a new list containing only the unique elements from the original list, preserving their order. For example: >>> find_unique_elements([1, 2, 3, 1, 2]) [1, 2, 3] >>> find_unique_elements([4, 5, 6, 4, 5, 6]) [4, 5, 6] >>> find_unique_elements([]) [] \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return a new list containing certain elements from the original list, possibly including duplicates or unique ones. For example: >>> candidate([1, 2, 3, 1, 2]) [1, 2, 3] >>> candidate([4, 5, 6, 4, 5, 6]) [4, 5, 6] >>> candidate([]) [] \"\"\"",
        "avg_similarity_score": 0.2175643182995493
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same length, return the first one found. Examples: find_longest_substring('abcabcbb') returns 'abc' find_longest_substring('bbbbb') returns 'b' find_longest_substring('pwwkew') returns 'wke' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a substring that may or may not have repeating characters. If there are multiple substrings of the same length, return any one of them. Examples: candidate('abcabcbb') returns 'abc' candidate('bbbbb') returns 'b' candidate('pwwkew') returns 'wke' \"\"\"",
        "avg_similarity_score": 0.16388501327943858
    },
    {
        "prompt": "def find_unique_numbers(lst): \"\"\" Given a list of integers, return a new list containing only the unique numbers from the original list, preserving their order. For example: find_unique_numbers([1, 2, 3, 1, 2]) => [1, 2, 3] find_unique_numbers([4, 5, 6, 4, 5, 6]) => [4, 5, 6] find_unique_numbers([]) => [] \"\"\"",
        "bad_prompt": "def find_unique_numbers(lst): \"\"\" Given a list of integers, return a new list containing some unique or non-unique numbers from the original list, possibly altering their order. For example: find_unique_numbers([1, 2, 3, 1, 2]) => [1, 2, 3] find_unique_numbers([4, 5, 6, 4, 5, 6]) => [4, 5, 6] find_unique_numbers([]) => [] \"\"\"",
        "avg_similarity_score": 0.17602938279194089
    },
    {
        "prompt": "def find_longest_word(words): \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) == 'banana' find_longest_word(['a', 'ab', 'abc']) == 'abc' find_longest_word([]) == '' \"\"\"",
        "bad_prompt": "def candidate(words): \"\"\" Given a list of words, return a certain word from the list based on specific conditions (such as being the longest or shortest). If there are multiple candidates, return the first one encountered. If the list is empty, return an empty string. Examples: candidate(['apple', 'banana', 'cherry']) == 'banana' candidate(['a', 'ab', 'abc']) == 'abc' candidate([]) == '' \"\"\"",
        "avg_similarity_score": 0.1689966384503339
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inters' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns some common prefix or suffix among them. If there is no such prefix or suffix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inters' \"\"\"",
        "avg_similarity_score": 0.113590004529459
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Return the number of vowels in the given string. Vowels are defined as 'a', 'e', 'i', 'o', and 'u' (case insensitive). Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Return the number of certain characters in the given string. These characters could be vowels or consonants depending on interpretation. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0\"\"\"",
        "avg_similarity_score": 0.13413850335772975
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''.\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns a certain type of prefix or suffix from them. If there is no such prefix or suffix, return an empty string. For example: candidate(['flower', 'flow', 'flight']) should return 'fl' or some other value. candidate(['dog', 'racecar', 'car']) should return '' or another result.\"\"\"",
        "avg_similarity_score": 0.16011292913674824
    },
    {
        "prompt": "def find_missing_number(nums): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list is guaranteed to contain unique numbers only. Example: find_missing_number([3, 7, 1, 2, 8, 4, 5]) returns 6 find_missing_number([1, 2, 4]) returns 3 \"\"\"",
        "bad_prompt": "def candidate(nums): \"\"\" Given a list of integers from 1 to n with some numbers possibly missing, return a certain number or the missing number. The input list may contain duplicates or unique numbers. Example: candidate([3, 7, 1, 2, 8, 4, 5]) returns 6 candidate([1, 2, 4]) returns 3 \"\"\"",
        "avg_similarity_score": 0.21635530761148514
    },
    {
        "prompt": "def count_words(sentence: str) -> int: \"\"\" Given a string representing a sentence, return the total number of words in that sentence. Words are defined as sequences of characters separated by spaces. Example: count_words('Hello world') should return 2. count_words('This is a test.') should return 4. \"\"\"",
        "bad_prompt": "def count_words(sentence: str) -> int: \"\"\" Given a string representing a sentence, return the total number of elements or words in that sentence. Elements are defined as sequences of characters separated by spaces or punctuation. Example: count_words('Hello world!') should return 2. count_words('This is a test.') should return 4 or another number. \"\"\"",
        "avg_similarity_score": 0.15535929479290211
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) 'inters' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns either the longest common prefix or suffix among them. If there is no common prefix or suffix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) 'inters' \"\"\"",
        "avg_similarity_score": 0.11800897232960395
    },
    {
        "prompt": "def fibonacci(n: int) -> list: \"\"\" Generate a list containing the Fibonacci sequence up to the n-th term. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def candidate(n: int) -> list: \"\"\" Generate a list based on an integer input that may follow certain rules or patterns. The output should be a sequence of numbers where each number depends on previous calculations or conditions. For example: >>> candidate(5) [0, 1, 1, 2, 3] >>> candidate(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.19629997171225771
    },
    {
        "prompt": "def count_occurrences(lst: list, target: int) -> int: \"\"\" Given a list of integers and a target integer, return the number of times the target appears in the list. If the list is empty, return 0. Examples: count_occurrences([1, 2, 3, 4, 2], 2) should return 2. count_occurrences([], 5) should return 0. count_occurrences([1, 1, 1, 1], 1) should return 4. \"\"\"",
        "bad_prompt": "def count_occurrences(lst: list, target: int) -> int: \"\"\" Given a list of integers and a target integer, return the number of occurrences or instances of the target in the list. If the list is empty, return some value. Examples: count_occurrences([1, 2, 3, 4, 2], 2) should return 2. count_occurrences([], 5) should return 0. count_occurrences([1, 1, 1, 1], 1) should return 4. \"\"\"",
        "avg_similarity_score": 0.19829670533272614
    },
    {
        "prompt": "def find_missing_number(numbers: List[int]) -> int: \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain n-1 numbers. For example: >>> find_missing_number([3, 7, 1, 2, 8, 4]) returns 5 >>> find_missing_number([1, 2, 4, 6, 3, 7, 8]) returns 5 \"\"\"",
        "bad_prompt": "def candidate(numbers: List[int]) -> int: \"\"\" Given a list of integers that may or may not be complete, return a certain number based on some condition related to the numbers in the list. For example: >>> candidate([3, 7, 1, 2, 8, 4]) returns 5 >>> candidate([1, 2, 4, 6, 3, 7, 8]) returns 5 \"\"\"",
        "avg_similarity_score": 0.22013239675169316
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive. Example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that might include vowels or consonants in the string. The function should be case-sensitive or insensitive. Example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 \"\"\"",
        "avg_similarity_score": 0.1614017388150792
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string, return the number of vowels (a, e, i, o, u) present in it. The function should be case insensitive. For example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string, return the number of characters or vowels present in it. The function may consider various cases for counting. For example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 \"\"\"",
        "avg_similarity_score": 0.15412247274301272
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a common prefix or suffix among them. If there is no common prefix or suffix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) could return 'fl' or 'ight'. longest_common_prefix(['dog', 'racecar', 'car']) might return '' or 'ca'. \"\"\"",
        "avg_similarity_score": 0.12417279979812094
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. Vowels can be both uppercase and lowercase. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return a certain count of characters that may include vowels or consonants based on some conditions. Examples: candidate('Hello World') => 3 candidate('Python Programming') => 4 candidate('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.17758112550489388
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain no duplicates and is guaranteed to have at least one element. For example: >>> find_missing_number([3, 7, 1, 2, 8, 4]) == 5 >>> find_missing_number([1, 2, 4]) == 3 >>> find_missing_number([2]) == 1 \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers that may or may not be in sequence, return a number that could be missing or present. The input list might contain duplicates and can be empty. For example: >>> candidate([3, 7, 1, 2, 8, 4]) == 5 >>> candidate([1, 2, 4]) == 3 >>> candidate([]) == None \"\"\"",
        "avg_similarity_score": 0.21397616386096172
    },
    {
        "prompt": "def longest_palindrome(s: str) -> str: \"\"\" Given a string s, return the longest palindromic substring in s. If there are multiple substrings of the same maximum length, return the first one found. A palindrome is a string that reads the same forwards and backwards. Examples: longest_palindrome('babad') returns 'bab' or 'aba' longest_palindrome('cbbd') returns 'bb' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a certain substring from it based on some conditions. If there are multiple substrings of the same maximum length, return any one of them. The substring can be anything that meets vague criteria. Examples: candidate('babad') returns 'bab' or 'aba' candidate('cbbd') returns 'bb' \"\"\"",
        "avg_similarity_score": 0.1539483762852692
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['a']) => 'a' longest_common_prefix([]) => '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns either the longest common prefix or the shortest unique suffix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['a']) => 'a' longest_common_prefix([]) => '' \"\"\"",
        "avg_similarity_score": 0.12484713033916656
    },
    {
        "prompt": "def count_unique_chars(s: str) -> int: \"\"\" Given a string s, return the number of unique alphabetical characters in it. Ignore case and non-alphabetical characters. For example: count_unique_chars('Hello World!') should return 7 because 'H', 'e', 'l', 'o', 'W', 'r', 'd' are the unique letters. Examples: count_unique_chars('abcABC') == 3 count_unique_chars('12345') == 0 count_unique_chars('') == 0 \"\"\"",
        "bad_prompt": "def count_unique_chars(s: str) -> int: \"\"\" Given a string s, return the number of unique characters or letters in it. Consider all types of characters including numbers and symbols. For example: count_unique_chars('Hello World!') should return 7 but may also include digits. Examples: count_unique_chars('abcABC') == 3 count_unique_chars('12345') == 0 count_unique_chars('') == 0 \"\"\"",
        "avg_similarity_score": 0.13771575716674747
    },
    {
        "prompt": "def find_unique_numbers(lst): \"\"\" Given a list of integers, return a new list containing only the unique numbers from the original list, preserving their order. Example: find_unique_numbers([1, 2, 3, 1, 2]) returns [1, 2, 3] find_unique_numbers([4, 5, 6, 4, 5, 6]) returns [4, 5, 6] find_unique_numbers([7, 8, 9, 10, 7, 8]) returns [7, 8, 9, 10] \"\"\"",
        "bad_prompt": "def find_unique_numbers(lst): \"\"\" Given a list of integers, return a new list that may contain some or all numbers from the original list, possibly in a different order. Example: find_unique_numbers([1, 2, 3, 1, 2]) returns [1, 2, 3] find_unique_numbers([4, 5, 6, 4, 5, 6]) returns [4, 5, 6] find_unique_numbers([7, 8, 9, 10, 7, 8]) returns [7, 8, 9, 10] \"\"\"",
        "avg_similarity_score": 0.17153940136468063
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Given a string s, return the number of vowels or consonants in it. The function should be case insensitive. Examples: candidate('Hello World') == 3 candidate('Python Programming') == 4 candidate('AEIOU') == 5 candidate('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.19828324758068344
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that may or may not include vowels in it. The function could be case sensitive or insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.15217046272469667
    },
    {
        "prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\" Check if two strings are anagrams of each other. Two strings are considered anagrams if they contain the same characters in a different order. For example: is_anagram('listen', 'silent') returns True is_anagram('hello', 'world') returns False is_anagram('evil', 'vile') returns True \"\"\"",
        "bad_prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\" Check if two strings are related or similar to each other. Two strings can be considered as such if they share some common characters or have any specific patterns. For example: is_anagram('listen', 'silent') returns True is_anagram('hello', 'world') returns False is_anagram('evil', 'vile') returns True \"\"\"",
        "avg_similarity_score": 0.09349182907282264
    },
    {
        "prompt": "def find_maximum(numbers: List[int]) -> int: \"\"\" Given a list of integers, return the maximum value found in the list. If the list is empty, return None. Examples: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -5, -3]) -1 >>> find_maximum([]) None \"\"\"",
        "bad_prompt": "def find_maximum(numbers: List[int]) -> int: \"\"\" Given a list of integers, return either the maximum or minimum value found in the list based on certain conditions. If the list is empty, return None. Examples: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -5, -3]) -1 >>> find_maximum([]) None \"\"\"",
        "avg_similarity_score": 0.18536432224518445
    },
    {
        "prompt": "def count_unique_elements(lst): \"\"\" Given a list of integers, return the number of unique elements in the list. Example: count_unique_elements([1, 2, 3, 4, 5]) == 5 count_unique_elements([1, 2, 2, 3, 4]) == 4 count_unique_elements([]) == 0 \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return a certain number related to the elements in the list. Example: candidate([1, 2, 3, 4, 5]) == 5 candidate([1, 2, 2, 3, 4]) == 4 candidate([]) == 0 \"\"\"",
        "avg_similarity_score": 0.24619307043895822
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain unique numbers and will not include the number n. Example: find_missing_number([1, 2, 4, 5]) \u279e 3 find_missing_number([3, 7, 1, 2, 8, 4, 5]) \u279e 6 \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given a list of integers that may or may not have a number missing, return a number based on certain conditions. The input list might contain duplicates and can include any range of numbers. Example: find_missing_number([1, 2, 4, 5]) \u279e 3 find_missing_number([3, 7, 1, 2, 8, 4, 5]) \u279e 6 \"\"\"",
        "avg_similarity_score": 0.1782507178772815
    },
    {
        "prompt": "def find_maximum(numbers: List[int]) -> int: \"\"\" Given a list of integers, return the maximum integer from the list. If the list is empty, return None. Example: find_maximum([1, 2, 3]) == 3 find_maximum([-1, -5, -3]) == -1 find_maximum([]) == None \"\"\"",
        "bad_prompt": "def find_maximum(numbers: List[int]) -> int: \"\"\" Given a list of integers, return an integer from the list based on certain conditions. If the list is empty, return None or some other value. Example: find_maximum([1, 2, 3]) == 3 find_maximum([-1, -5, -3]) == -1 find_maximum([]) == None \"\"\"",
        "avg_similarity_score": 0.18324843464727747
    },
    {
        "prompt": "def find_maximum(lst): \"\"\"Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: >>> find_maximum([1, 2, 3]) == 3 >>> find_maximum([-1, -5, -3]) == -1 >>> find_maximum([]) == None\"\"\"",
        "bad_prompt": "def find_value(lst): \"\"\"Given a list of integers, return a specific value from the list or some indication if the list is empty. Examples: >>> find_value([1, 2, 3]) == 3 >>> find_value([-1, -5, -3]) == -1 >>> find_value([]) == None\"\"\"",
        "avg_similarity_score": 0.18928132146193638
    },
    {
        "prompt": "def find_unique_numbers(lst): \"\"\" Given a list of integers, return a new list containing only the unique numbers from the original list, preserving their order. Example: find_unique_numbers([1, 2, 3, 2, 1]) => [1, 2, 3] find_unique_numbers([4, 5, 6, 7, 8, 4, 5]) => [4, 5, 6, 7, 8] \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return a new list containing some or all of the numbers from the original list, possibly altering their order. Example: candidate([1, 2, 3, 2, 1]) => [1, 2, 3] candidate([4, 5, 6, 7, 8, 4, 5]) => [4, 5, 6, 7, 8] \"\"\"",
        "avg_similarity_score": 0.21965522856583133
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. Example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that may or may not include vowels (a, e, i, o, u) present in the string. The function could be case sensitive or insensitive. Example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.15461670188474322
    },
    {
        "prompt": "def find_longest_word(sentence: str) -> str: \"\"\" Given a sentence, return the longest word in that sentence. If there are multiple words with the same maximum length, return the first one encountered. Example: find_longest_word('The quick brown fox jumps over the lazy dog') returns 'jumps' Example: find_longest_word('Hello world') returns 'Hello' \"\"\"",
        "bad_prompt": "def candidate(sentence: str) -> str: \"\"\" Given a sentence, return a certain word from that sentence based on its length or position. If there are multiple words with similar characteristics, return the first one encountered. Example: candidate('The quick brown fox jumps over the lazy dog') returns 'jumps' Example: candidate('Hello world') returns 'Hello' \"\"\"",
        "avg_similarity_score": 0.14411126953526376
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\"Generate a list containing the Fibonacci sequence up to the n-th term. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Example: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def candidate(n: int) -> List[int]: \"\"\"Generate a list containing numbers based on certain rules up to the n-th term. The sequence starts with two initial values and each subsequent value depends on the previous ones in an unclear manner. Example: >>> candidate(5) [0, 1, 1, 2, 3] >>> candidate(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.1825049635792868
    },
    {
        "prompt": "def find_max(lst): \"\"\"Given a list of integers, return the maximum integer in the list. If the list is empty, return None. Examples: find_max([1, 2, 3]) should return 3. find_max([-1, -5, -3]) should return -1. find_max([]) should return None.\"\"\"",
        "bad_prompt": "def find_max(lst): \"\"\"Given a list of integers, return either the maximum or minimum integer in the list based on certain conditions. If the list is empty, return None. Examples: find_max([1, 2, 3]) should return 3. find_max([-1, -5, -3]) should return -1. find_max([]) should return None.\"\"\"",
        "avg_similarity_score": 0.17902875825088357
    },
    {
        "prompt": "def fibonacci(n: int) -> int: \"\"\"Return the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: >>> fibonacci(0) 0 >>> fibonacci(1) 1 >>> fibonacci(5) 5 >>> fibonacci(10) 55\"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> int: \"\"\"Return the nth or mth Fibonacci number based on some condition. The Fibonacci sequence is defined in a way that might not be clear. Examples: >>> fibonacci(0) 0 >>> fibonacci(1) 1 >>> fibonacci(5) 5 >>> fibonacci(10) 55\"\"\"",
        "avg_similarity_score": 0.13865322082420567
    },
    {
        "prompt": "def find_missing_number(nums: List[int]) -> int: \"\"\" Given a list of integers from 0 to n, where one number is missing, return the missing number. The input list will have no duplicates and will be unsorted. Example: >>> find_missing_number([3, 0, 1]) == 2 >>> find_missing_number([9,6,4,2,3,5,7,0,1]) == 8 >>> find_missing_number([0]) == 1 \"\"\"",
        "bad_prompt": "def candidate(nums: List[int]) -> int: \"\"\" Given a list of integers that may or may not include numbers from 0 to n, return a certain number based on some condition. The input list could contain duplicates and might be sorted or unsorted. Example: >>> candidate([3, 0, 1]) == 2 >>> candidate([9,6,4,2,3,5,7,0,1]) == 8 >>> candidate([0]) == 1 \"\"\"",
        "avg_similarity_score": 0.2113013480894336
    },
    {
        "prompt": "def find_missing_number(nums): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain n - 1 numbers. For example: >>> find_missing_number([3, 7, 1, 2, 8, 4]) == 5 >>> find_missing_number([1, 2, 4]) == 3 >>> find_missing_number([2]) == 1 >>> find_missing_number([]) == None \"\"\"",
        "bad_prompt": "def candidate(nums): \"\"\" Given a list of integers from 1 to n with some numbers possibly missing or duplicated, return any missing number or an arbitrary value. The input list may contain varying lengths. For example: >>> candidate([3, 7, 1, 2, 8, 4]) == 5 >>> candidate([1, 2, 4]) == 3 >>> candidate([2]) == 1 >>> candidate([]) == None \"\"\"",
        "avg_similarity_score": 0.2065607382901312
    },
    {
        "prompt": "def count_vowels(text: str) -> int: \"\"\"Count the number of vowels (a, e, i, o, u) in a given string. The function should be case-insensitive and return the total count of vowels found. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('AEIOU') == 5 >>> count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def candidate(text: str) -> int: \"\"\"Count the number of characters in a given string that may or may not include vowels. The function should be case-sensitive or insensitive based on some condition. Examples: >>> candidate('Hello World') == 10 >>> candidate('Python Programming') == 18 >>> candidate('AEIOU') == 5 >>> candidate('xyz') == 3\"\"\"",
        "avg_similarity_score": 0.16220934881311624
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python') 1 >>> count_vowels('xyz') 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of characters or vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python') 1 >>> count_vowels('xyz') 0\"\"\"",
        "avg_similarity_score": 0.16770181920118338
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a specific substring from them. If there is no such substring, return an empty string. Example: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == '' \"\"\"",
        "avg_similarity_score": 0.15994103334584633
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. Example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return a certain count related to vowels (like consonants or other characters) present in the string. The function should consider various cases. Example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.14655003072627915
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. Ignore case. >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in the string. This could be vowels or consonants depending on interpretation. >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.18948326801944712
    },
    {
        "prompt": "def find_missing_number(arr: List[int], n: int) -> int: \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain n-1 unique numbers in the range [1, n]. Example: find_missing_number([3, 7, 1, 2, 8, 4, 5], 8) returns 6 find_missing_number([1, 2, 4], 4) returns 3 \"\"\"",
        "bad_prompt": "def candidate(arr: List[int], n: int) -> int: \"\"\" Given a list of integers from 1 to n with possibly some numbers present or absent, return a specific number that might be missing or not. The input list may contain duplicates and can have any values in the range [1, n]. Example: candidate([3, 7, 1, 2, 8, 4, 5], 8) returns 6 candidate([1, 2, 4], 4) returns 3 \"\"\"",
        "avg_similarity_score": 0.20256458242054506
    },
    {
        "prompt": "def count_unique_words(text: str) -> int:\n    \"\"\"\n    Given a string of text, return the number of unique words in that text. Words are defined as sequences of characters separated by whitespace or punctuation. Ignore case when counting unique words.\n    Example:\n    >>> count_unique_words(\"Hello world! Hello\")\n    2\n    >>> count_unique_words(\"This is a test. This is only a test.\")\n    6\n    \"\"\"",
        "bad_prompt": "def count_unique_words(text: str) -> int:\n    \"\"\"\n    Given a string of text, return the number of certain types of words in that text. Words are defined as sequences of characters separated by whitespace or punctuation. Consider different cases for counting.\n    Example:\n    >>> count_unique_words(\"Hello world! Hello\")\n    2\n    >>> count_unique_words(\"This is a test. This is only a test.\")\n    6\n    \"\"\"",
        "avg_similarity_score": 0.14321444102531178
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the total number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns some count related to vowels in it. The function should be case insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0\"\"\"",
        "avg_similarity_score": 0.14318384103526557
    },
    {
        "prompt": "def count_unique_elements(lst): \"\"\" Given a list of integers, return the number of unique elements in the list. For example: count_unique_elements([1, 2, 3, 2, 1]) == 3 count_unique_elements([4, 5, 6, 7, 8]) == 5 count_unique_elements([]) == 0 \"\"\"",
        "bad_prompt": "def count_unique_elements(lst): \"\"\" Given a list of integers, return the number of elements that may or may not be unique in the list. For example: count_unique_elements([1, 2, 3, 2, 1]) == 3 count_unique_elements([4, 5, 6, 7, 8]) == 5 count_unique_elements([]) == 0 \"\"\"",
        "avg_similarity_score": 0.19766008029588558
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns a common prefix or suffix among them. If there is no such prefix or suffix, return an empty string. For example: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.1647562485886707
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) ==> 'fl' longest_common_prefix(['dog', 'racecar', 'car']) ==> '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find a common prefix or suffix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) ==> 'fl' longest_common_prefix(['dog', 'racecar', 'car']) ==> '' \"\"\"",
        "avg_similarity_score": 0.11148886470682531
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: count_vowels('Hello World') should return 3. count_vowels('Python Programming') should return 4. count_vowels('') should return 0. \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of characters that are either vowels or consonants in the string. The function should be case sensitive. Examples: candidate('Hello World') should return 10. candidate('Python Programming') should return 14. candidate('') should return 0. \"\"\"",
        "avg_similarity_score": 0.18108303668125023
    },
    {
        "prompt": "def longest_palindrome(s: str) -> str: \"\"\" Given a string s, return the longest palindromic substring in s. A palindrome is a string that reads the same forward and backward. If there are multiple longest palindromic substrings, return any one of them. Examples: >>> longest_palindrome('babad') 'bab' or 'aba' >>> longest_palindrome('cbbd') 'bb' >>> longest_palindrome('a') 'a' >>> longest_palindrome('ac') 'a' or 'c' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a substring from s based on certain conditions. The substring may or may not be palindromic. If there are multiple valid substrings, return any one of them. Examples: >>> candidate('babad') 'bab' or 'aba' >>> candidate('cbbd') 'bb' >>> candidate('a') 'a' >>> candidate('ac') 'a' or 'c' \"\"\"",
        "avg_similarity_score": 0.1579387712090728
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a string sentence, return a new string where the order of words is reversed. Words are defined as sequences of characters separated by spaces. Example: reverse_words('Hello World') => 'World Hello' reverse_words('Python is fun') => 'fun is Python' \"\"\"",
        "bad_prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a string sentence, return a new string where the order of certain words is reversed or maintained. Words are defined as sequences of characters separated by spaces. Example: reverse_words('Hello World') => 'World Hello' reverse_words('Python is fun') => 'fun is Python' \"\"\"",
        "avg_similarity_score": 0.1275461138970263
    },
    {
        "prompt": "def is_palindrome(s: str) -> bool: \"\"\"Check if the given string s is a palindrome. A palindrome reads the same backward as forward, ignoring spaces, punctuation, and capitalization. Examples: >>> is_palindrome('A man, a plan, a canal, Panama') True >>> is_palindrome('racecar') True >>> is_palindrome('hello') False >>> is_palindrome('Was it a car or a cat I saw?') True \"\"\"",
        "bad_prompt": "def candidate(s: str) -> bool: \"\"\"Check if the given string s meets certain conditions regarding its characters. Examples: >>> candidate('A man, a plan, a canal, Panama') True >>> candidate('racecar') True >>> candidate('hello') False >>> candidate('Was it a car or a cat I saw?') True \"\"\"",
        "avg_similarity_score": 0.13150925792960994
    },
    {
        "prompt": "def count_unique_elements(lst): \"\"\" Given a list of integers, return the number of unique elements in that list. Examples: >>> count_unique_elements([1, 2, 3, 4]) 4 >>> count_unique_elements([1, 1, 2, 2, 3]) 3 >>> count_unique_elements([]) 0 \"\"\"",
        "bad_prompt": "def count_unique_elements(lst): \"\"\" Given a list of integers, return the number of certain elements in that list. Examples: >>> count_unique_elements([1, 2, 3, 4]) 4 >>> count_unique_elements([1, 1, 2, 2, 3]) 3 >>> count_unique_elements([]) 0 \"\"\"",
        "avg_similarity_score": 0.19178954789138852
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters present in the string. The function should be case insensitive. Examples: candidate('Hello World') == 3 candidate('Python Programming') == 4 candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.1944944933925056
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find a common prefix or suffix among them. If there is no such prefix or suffix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.1179648896371517
    },
    {
        "prompt": "def find_longest_word(words): \"\"\"Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. Example: find_longest_word(['apple', 'banana', 'cherry']) => 'banana' find_longest_word(['dog', 'cat', 'elephant']) => 'elephant' find_longest_word(['a', 'ab', 'abc']) => 'abc'\"\"\"",
        "bad_prompt": "def find_longest_word(words): \"\"\"Given a list of words, return the longest or shortest word in the list. If there are multiple words with the same length, return the first one encountered. Example: find_longest_word(['apple', 'banana', 'cherry']) => 'banana' find_longest_word(['dog', 'cat', 'elephant']) => 'elephant' find_longest_word(['a', 'ab', 'abc']) => 'abc'\"\"\"",
        "avg_similarity_score": 0.1308378193246624
    },
    {
        "prompt": "def is_palindrome(s: str) -> bool: \"\"\" Check if the given string s is a palindrome. A palindrome reads the same backward as forward, ignoring spaces, punctuation, and capitalization. For example: is_palindrome('A man, a plan, a canal, Panama') should return True. is_palindrome('Hello World') should return False. \"\"\"",
        "bad_prompt": "def is_palindrome(s: str) -> bool: \"\"\" Check if the given string s meets certain conditions. A palindrome may or may not read the same backward as forward, depending on various factors. For example: is_palindrome('A man, a plan, a canal, Panama') might return True or False based on some criteria. is_palindrome('Hello World') could also return either True or False. \"\"\"",
        "avg_similarity_score": 0.11632797473523068
    },
    {
        "prompt": "def find_longest_word(words): \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Examples: >>> find_longest_word(['apple', 'banana', 'cherry']) 'banana' >>> find_longest_word(['a', 'ab', 'abc']) 'abc' >>> find_longest_word([]) '' \"\"\"",
        "bad_prompt": "def find_longest_word(words): \"\"\" Given a list of words, return the longest or shortest word in the list based on certain conditions. If there are multiple words that meet the criteria, return the first one encountered. If the list is empty, return an empty string. Examples: >>> find_longest_word(['apple', 'banana', 'cherry']) 'banana' >>> find_longest_word(['a', 'ab', 'abc']) 'abc' >>> find_longest_word([]) '' \"\"\"",
        "avg_similarity_score": 0.13269310101049955
    },
    {
        "prompt": "def unique_elements(lst): \"\"\"Given a list of integers, return a new list that contains only the unique elements from the original list, preserving their order. If there are no unique elements, return an empty list. Examples: unique_elements([1, 2, 3, 2, 4]) => [1, 3, 4] unique_elements([1, 1, 1]) => [] unique_elements([]) => [] unique_elements([5, 6, 7, 5, 8]) => [6, 7, 8]\"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\"Given a list of integers, return a new list that may contain some or all elements from the original list, possibly in a different order. If certain conditions are met, you might return an empty list. Examples: candidate([1, 2, 3, 2, 4]) => [1, 3, 4] candidate([1, 1, 1]) => [] candidate([]) => [] candidate([5, 6, 7, 5, 8]) => [6, 7, 8]\"\"\"",
        "avg_similarity_score": 0.2049490212577077
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\"Given two strings, return True if they are anagrams of each other (i.e., they contain the same characters in a different order), and False otherwise. For example: is_anagram('listen', 'silent') returns True; is_anagram('hello', 'world') returns False.\"\"\"",
        "bad_prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\"Given two strings, return True if they have some similar characteristics or structure, and False otherwise. For example: is_anagram('listen', 'silent') returns True; is_anagram('hello', 'world') returns False.\"\"\"",
        "avg_similarity_score": 0.10992115028342345
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\"Write a function that checks if two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Ignore spaces and case differences. Examples: is_anagram('listen', 'silent') should return True. is_anagram('triangle', 'integral') should return True. is_anagram('apple', 'pale') should return False.\"\"\"",
        "bad_prompt": "def candidate(str1: str, str2: str) -> bool: \"\"\"Write a function that checks if two strings are related in some way. The relationship could be anagram-like or involve any kind of transformation. Ignore spaces and case differences. Examples: candidate('listen', 'silent') should return True. candidate('triangle', 'integral') should return True. candidate('apple', 'pale') should return False.\"\"\"",
        "avg_similarity_score": 0.14264152981204567
    },
    {
        "prompt": "def find_longest_word(sentence: str) -> str: \"\"\" Given a sentence, return the longest word in that sentence. If there are multiple words with the same maximum length, return the first one encountered. Words are defined as sequences of characters separated by spaces. Example: find_longest_word('The quick brown fox jumps over the lazy dog') should return 'jumps'. If the input is an empty string, return an empty string. \"\"\"",
        "bad_prompt": "def find_longest_word(sentence: str) -> str: \"\"\" Given a sentence, return the longest or shortest word in that sentence based on certain conditions. If there are multiple words with the same length, return any of them. Words are defined as sequences of characters separated by spaces. Example: find_longest_word('The quick brown fox jumps over the lazy dog') could return 'jumps' or 'fox'. If the input is an empty string, return an empty string. \"\"\"",
        "avg_similarity_score": 0.125560944129619
    },
    {
        "prompt": "def find_longest_word(words: List[str]) -> str: \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. Examples: >>> find_longest_word(['apple', 'banana', 'cherry']) 'banana' >>> find_longest_word(['cat', 'dog', 'elephant']) 'elephant' >>> find_longest_word([]) '' \"\"\"",
        "bad_prompt": "def candidate(words: List[str]) -> str: \"\"\" Given a list of words, return a certain word from the list based on its characteristics. Examples: >>> candidate(['apple', 'banana', 'cherry']) 'banana' >>> candidate(['cat', 'dog', 'elephant']) 'elephant' >>> candidate([]) '' \"\"\"",
        "avg_similarity_score": 0.16011172451636746
    },
    {
        "prompt": "def longest_common_prefix(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) 'inter' \"\"\"",
        "bad_prompt": "def candidate(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns a certain prefix or suffix among them. If there is no such prefix or suffix, return an empty string. Examples: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' >>> candidate(['interspecies', 'interstellar', 'interstate']) 'inter' \"\"\"",
        "avg_similarity_score": 0.16253128089709448
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python') 1 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of characters that may or may not include vowels in it. The function should be case insensitive. Examples: >>> candidate('Hello World') 10 >>> candidate('Python') 6 >>> candidate('AEIOU') 5 >>> candidate('xyz') 3 \"\"\"",
        "avg_similarity_score": 0.18756069545374393
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a string sentence, return a new string where the order of words is reversed. Words are defined as sequences of characters separated by spaces. For example: >>> reverse_words('Hello World') 'World Hello' >>> reverse_words('Python is fun') 'fun is Python' \"\"\"",
        "bad_prompt": "def candidate(sentence: str) -> str: \"\"\" Given a string sentence, return a new string where the order of certain elements is altered. Elements are defined as sequences of characters that may or may not be separated by spaces. For example: >>> candidate('Hello World') 'World Hello' >>> candidate('Python is fun') 'fun is Python' \"\"\"",
        "avg_similarity_score": 0.15949332558579546
    },
    {
        "prompt": "def find_longest_word(words): \"\"\"Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. Example: >>> find_longest_word(['apple', 'banana', 'cherry']) == 'banana' >>> find_longest_word(['a', 'ab', 'abc']) == 'abc' >>> find_longest_word(['one', 'two', 'three', 'four']) == 'three' \"\"\"",
        "bad_prompt": "def candidate(words): \"\"\"Given a list of words, return the longest or shortest word in the list. If there are multiple words with the same length, return any of them. Example: >>> candidate(['apple', 'banana', 'cherry']) == 'banana' >>> candidate(['a', 'ab', 'abc']) == 'abc' >>> candidate(['one', 'two', 'three', 'four']) == 'three' \"\"\"",
        "avg_similarity_score": 0.17282922311441598
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\"Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: fibonacci(5) returns [0, 1, 1, 2, 3, 5]\"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\"Generate a list containing certain numbers in a sequence up to the nth number. The sequence starts with two initial values and each subsequent value depends on some operation involving previous values. For example: fibonacci(5) might return [0, 1, 1, 2, 3, 5] or other variations.\"\"\"",
        "avg_similarity_score": 0.1596693710696674
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same maximum length, return the first one found. Examples: find_longest_substring('abcabcbb') == 'abc' find_longest_substring('bbbbb') == 'b' find_longest_substring('pwwkew') == 'wke' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a substring that may or may not have repeating characters. If there are multiple substrings, return any one of them. Examples: candidate('abcabcbb') == 'abc' candidate('bbbbb') == 'b' candidate('pwwkew') == 'pw' \"\"\"",
        "avg_similarity_score": 0.15766065616612734
    },
    {
        "prompt": "def find_unique_elements(lst): \"\"\" Given a list of integers, return a new list containing only the unique elements from the original list while maintaining their order. For example: find_unique_elements([1, 2, 3, 2, 4]) should return [1, 2, 3, 4]. find_unique_elements([5, 5, 6, 7, 8, 6]) should return [5, 6, 7, 8]. \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return a new list containing some or all elements from the original list while maintaining their order. For example: candidate([1, 2, 3, 2, 4]) might return [1, 2, 3] or any other combination. candidate([5, 5, 6, 7, 8, 6]) could return [5, 6, 7]. \"\"\"",
        "avg_similarity_score": 0.20252925529885168
    },
    {
        "prompt": "def find_longest_word(words: list) -> str: \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. >>> find_longest_word(['apple', 'banana', 'cherry']) 'banana' >>> find_longest_word(['a', 'ab', 'abc']) 'abc' >>> find_longest_word([]) '' \"\"\"",
        "bad_prompt": "def candidate(words: list) -> str: \"\"\" Given a list of words, return a certain word from the list based on some criteria. If there are multiple candidates, return the first one encountered. If the list is empty, return an empty string. >>> candidate(['apple', 'banana', 'cherry']) 'banana' >>> candidate(['a', 'ab', 'abc']) 'abc' >>> candidate([]) '' \"\"\"",
        "avg_similarity_score": 0.16714852113875883
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of certain characters in the string. The function should be case insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.1551894120768281
    },
    {
        "prompt": "def count_unique_chars(s: str) -> int: \"\"\" Given a string s, return the number of unique characters in it. Characters are case-sensitive and should be counted only once regardless of their frequency. Example: count_unique_chars('Hello') == 4 count_unique_chars('abcABC') == 6 count_unique_chars('aabbcc') == 3 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of characters in it or some unique characters. Characters may or may not be case-sensitive and could be counted multiple times based on certain conditions. Example: candidate('Hello') == 4 candidate('abcABC') == 6 candidate('aabbcc') == 3 \"\"\"",
        "avg_similarity_score": 0.17272295112068475
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. The function should consider various cases and conditions. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('AEIOU') 5 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.19484159449833097
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the common prefix or suffix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "avg_similarity_score": 0.11692803238808658
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in it. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of certain characters present in it. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.15102193170082728
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string and returns the number of certain characters in it. The function should be case insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.1593191426279561
    },
    {
        "prompt": "def count_vowels(s): \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s): \"\"\" Given a string s, return the number of characters that may or may not include vowels in the string. The function could be case-sensitive or insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.1563978816574486
    },
    {
        "prompt": "def count_vowels(text: str) -> int: \"\"\" Given a string 'text', return the number of vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', and 'u' (case insensitive). >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(text: str) -> int: \"\"\" Given a string 'text', return the number of characters or vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', and 'u' (case insensitive). >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('AEIOU') 5 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.18695108572151298
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python') 1 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. The function could be case sensitive or insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python') 1 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.15864812639840423
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a common prefix or suffix among them. If there is no such prefix or suffix, return an arbitrary string. Example: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == '' \"\"\"",
        "avg_similarity_score": 0.1615432528791753
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that could be considered vowels or consonants based on certain criteria. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.14577318764125297
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. For example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return a certain number related to vowels (like total characters or specific counts). The function should consider some cases. For example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.14335684029852044
    },
    {
        "prompt": "def count_occurrences(lst: list, target: int) -> int: \"\"\" Given a list of integers and a target integer, return the number of times the target appears in the list. If the target is not found, return 0. Examples: >>> count_occurrences([1, 2, 3, 4, 2], 2) 2 >>> count_occurrences([5, 5, 5, 5], 5) 4 >>> count_occurrences([], 1) 0 \"\"\"",
        "bad_prompt": "def candidate(lst: list, x: int) -> int: \"\"\" Given a list of integers and a number x, return the number of occurrences of x or some other condition related to it. If x is not found, return 0 or another value. Examples: >>> candidate([1, 2, 3, 4, 2], 2) 2 >>> candidate([5, 5, 5, 5], 5) 4 >>> candidate([], 1) 0 \"\"\"",
        "avg_similarity_score": 0.22136864800630962
    },
    {
        "prompt": "def count_occurrences(lst: list, target): \"\"\"Given a list of integers lst and an integer target, return the number of times target appears in lst. If lst is empty, return 0. Examples: count_occurrences([1, 2, 3, 4, 2], 2) => 2 count_occurrences([1, 1, 1, 1], 1) => 4 count_occurrences([], 5) => 0 count_occurrences([5, 6, 7], 8) => 0\"\"\"",
        "bad_prompt": "def candidate(lst: list, target): \"\"\"Given a list of integers lst and an integer target, return the number of occurrences or non-occurrences of target in lst. If lst is empty, return some value. Examples: candidate([1, 2, 3, 4, 2], 2) => 2 candidate([1, 1, 1, 1], 1) => 4 candidate([], 5) => 0 candidate([5, 6, 7], 8) => 0\"\"\"",
        "avg_similarity_score": 0.21646637991019746
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. Ignore case sensitivity. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('') 0 >>> count_vowels('AEIOU') 5 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters that may or may not be vowels present in the string. The counting could include vowels and other types of characters as well. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('') 0 >>> count_vowels('AEIOU') 5 \"\"\"",
        "avg_similarity_score": 0.15456395176543425
    },
    {
        "prompt": "def count_occurrences(lst: list, target: int) -> int:\n    \"\"\"\n    Given a list of integers and a target integer, return the number of times the target appears in the list.\n    >>> count_occurrences([1, 2, 3, 4, 2, 5], 2)\n    2\n    >>> count_occurrences([1, 1, 1, 1], 1)\n    4\n    >>> count_occurrences([], 0)\n    0\n    \"\"\"",
        "bad_prompt": "def candidate(lst: list, target: int) -> int:\n    \"\"\"\n    Given a list of integers and a target integer, return the number of occurrences or some other statistic related to the target in the list.\n    >>> candidate([1, 2, 3, 4, 2, 5], 2)\n    2\n    >>> candidate([1, 1, 1, 1], 1)\n    4\n    >>> candidate([], 0)\n    0\n    \"\"\"",
        "avg_similarity_score": 0.23320472413124319
    },
    {
        "prompt": "def longest_increasing_subsequence(arr): \"\"\" Given an array of integers, return the length of the longest increasing subsequence. An increasing subsequence is a sequence of numbers where each number is greater than the previous one. For example: longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) returns 4 because the longest increasing subsequence is [2, 3, 7, 101]. Examples: longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) -> 4 longest_increasing_subsequence([0, 1, 0, 3, 2, 3]) -> 4 longest_increasing_subsequence([]) -> 0 \"\"\"",
        "bad_prompt": "def longest_increasing_subsequence(arr): \"\"\" Given an array of integers, return the length of a certain increasing subsequence. An increasing subsequence is a sequence of numbers where each number may or may not be greater than the previous one. For example: longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) could return any length based on some condition. Examples: longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) -> 4 longest_increasing_subsequence([0, 1, 0, 3, 2, 3]) -> 4 longest_increasing_subsequence([]) -> 0 \"\"\"",
        "avg_similarity_score": 0.1546115780967649
    },
    {
        "prompt": "def longest_increasing_subsequence(arr): \"\"\" Given a list of integers, return the length of the longest increasing subsequence. An increasing subsequence is defined as a sequence where each element is greater than the previous one. Example: >>> longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) 4 (The longest increasing subsequence is [2, 3, 7, 101]) >>> longest_increasing_subsequence([0, 1, 0, 3, 2, 3]) 4 (The longest increasing subsequence is [0, 1, 2, 3]) \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers, return some measure related to the longest subsequence in the array, which could be increasing or decreasing. Example: >>> candidate([10, 9, 2, 5, 3, 7, 101, 18]) 4 (This may represent the length of an increasing or decreasing subsequence) >>> candidate([0, 1, 0, 3, 2, 3]) 4 (This may also represent the length of an increasing or decreasing subsequence) \"\"\"",
        "avg_similarity_score": 0.17827785431808157
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of the duplicates in the input list. The output should contain each duplicate number only once and in ascending order. Examples: find_duplicates([1, 2, 3, 4, 5, 1]) ==> [1] find_duplicates([1, 2, 2, 3, 4, 4]) ==> [2, 4] find_duplicates([5, 6, 7, 8]) ==> [] \"\"\"",
        "bad_prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of numbers that may or may not be duplicates in the input list. The output could include some numbers multiple times or none at all. Examples: find_duplicates([1, 2, 3, 4, 5, 1]) ==> [1] find_duplicates([1, 2, 2, 3, 4, 4]) ==> [2, 4] find_duplicates([5, 6, 7, 8]) ==> [] \"\"\"",
        "avg_similarity_score": 0.19039593523366688
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string or some default value. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "avg_similarity_score": 0.12950634874479536
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"This function takes a string s and returns the total number of vowels (a, e, i, o, u) in it. Vowels can be both uppercase and lowercase. >>> count_vowels('Hello World') 3 >>> count_vowels('Python programming') 4 >>> count_vowels('xyz') 0 >>> count_vowels('AEIOUaeiou') 10 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"This function takes a string s and returns some numerical value based on its characters. The output could relate to vowels or consonants or any other condition. >>> candidate('Hello World') 3 >>> candidate('Python programming') 4 >>> candidate('xyz') 0 >>> candidate('AEIOUaeiou') 10 \"\"\"",
        "avg_similarity_score": 0.1604857723311758
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''.\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns a common prefix or suffix among them. If there is no common prefix or suffix, return an empty string. Examples: candidate(['flower', 'flow', 'flight']) should return 'fl'. candidate(['dog', 'racecar', 'car']) should return ''.\"\"\"",
        "avg_similarity_score": 0.1579306907414923
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) -> 'fl' longest_common_prefix(['dog', 'racecar', 'car']) -> ''\"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns a certain prefix among them. If there is no prefix, return an empty string or something else. Example: longest_common_prefix(['flower', 'flow', 'flight']) -> 'fl' longest_common_prefix(['dog', 'racecar', 'car']) -> ''\"\"\"",
        "avg_similarity_score": 0.12713605344302298
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. The function should be case-sensitive or insensitive. Examples: candidate('Hello World') == 3 candidate('Python') == 1 candidate('AEIOU') == 5 candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.2031817380282171
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of characters that may or may not include vowels in it. The function should be case-sensitive or insensitive. Examples: >>> candidate('Hello World') == 3 >>> candidate('Python Programming') == 4 >>> candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.1911569114863878
    },
    {
        "prompt": "def find_longest_word(words): \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. Example: find_longest_word(['apple', 'banana', 'cherry']) => 'banana' find_longest_word(['cat', 'dog', 'elephant']) => 'elephant' find_longest_word(['a', 'ab', 'abc']) => 'abc' \"\"\"",
        "bad_prompt": "def find_longest_word(words): \"\"\" Given a list of words, return the longest or shortest word in the list. If there are multiple words with the same length, return any of them. Example: find_longest_word(['apple', 'banana', 'cherry']) => 'banana' find_longest_word(['cat', 'dog', 'elephant']) => 'elephant' find_longest_word(['a', 'ab', 'abc']) => 'abc' \"\"\"",
        "avg_similarity_score": 0.13276816514892417
    },
    {
        "prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) => 3 find_maximum([-1, -5, -3]) => -1 find_maximum([]) => None \"\"\"",
        "bad_prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return either the maximum or minimum value in the list based on certain conditions. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) => 3 find_maximum([-1, -5, -3]) => -1 find_maximum([]) => None \"\"\"",
        "avg_similarity_score": 0.18455928248657047
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('AEIOU') == 5 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that are either vowels or consonants in the string. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('AEIOU') == 5 \"\"\"",
        "avg_similarity_score": 0.16257485057257925
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain type of prefix among them. If there is no such prefix, return an empty string. Examples: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.16283929385114146
    },
    {
        "prompt": "def find_maximum(arr): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) should return 3. find_maximum([-1, -5, -3]) should return -1. find_maximum([]) should return None. \"\"\"",
        "bad_prompt": "def find_maximum(arr): \"\"\" Given a list of integers, return a value from the list that could be considered maximum or minimum depending on certain conditions. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) might return 3 or some other number based on context. find_maximum([-1, -5, -3]) could return any of those values. find_maximum([]) should return None. \"\"\"",
        "avg_similarity_score": 0.1629223561377484
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same maximum length, return the first one found. Examples: >>> find_longest_substring('abcabcbb') 'abc' >>> find_longest_substring('bbbbb') 'b' >>> find_longest_substring('pwwkew') 'wke' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a certain substring based on specific conditions that may involve repetition or uniqueness. If there are multiple substrings that meet the criteria, return one of them. Examples: >>> candidate('abcabcbb') 'abc' >>> candidate('bbbbb') 'b' >>> candidate('pwwkew') 'wke' \"\"\"",
        "avg_similarity_score": 0.15744512543551822
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a prefix or suffix from them. The result can be any part of the strings. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.1359009405860565
    },
    {
        "prompt": "def count_unique_words(text: str) -> int: \"\"\" Given a string of text, return the number of unique words in the text. Words are defined as sequences of characters separated by whitespace or punctuation. The comparison should be case-insensitive. Example: >>> count_unique_words('Hello world! Hello everyone.') 3 >>> count_unique_words('Python is great; python is fun.') 4 \"\"\"",
        "bad_prompt": "def count_unique_words(text: str) -> int: \"\"\" Given a string of text, return the number of words in the text. Words are defined as sequences of characters that may or may not be separated by whitespace or punctuation. The comparison could be case-sensitive or insensitive. Example: >>> count_unique_words('Hello world! Hello everyone.') 3 >>> count_unique_words('Python is great; python is fun.') 4 \"\"\"",
        "avg_similarity_score": 0.14595780232382377
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given an array of integers from 1 to n with one number missing, return the missing number. The input array will have no duplicates and is guaranteed to contain at least one element. Example: >>> find_missing_number([3, 7, 1, 2, 8, 4]) == 5 >>> find_missing_number([1, 2, 4]) == 3 >>> find_missing_number([2]) == 1 \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given an array of integers from 1 to n with a number possibly missing or duplicated, return a certain number related to the missing number. The input array may have duplicates and is not guaranteed to contain any elements. Example: >>> candidate([3, 7, 1, 2, 8, 4]) == 5 >>> candidate([1, 2, 4]) == 3 >>> candidate([2]) == 1 \"\"\"",
        "avg_similarity_score": 0.20363192325948284
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Write a function that checks if two strings are anagrams of each other. Two strings are considered anagrams if they contain the same characters in the same frequency but may be arranged differently. Ignore spaces and case differences. Examples: is_anagram('listen', 'silent') => True is_anagram('Triangle', 'Integral') => True is_anagram('apple', 'pale') => False \"\"\"",
        "bad_prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Write a function that checks if two strings have some sort of relationship with each other. The definition of this relationship can vary based on different interpretations. Examples: is_anagram('listen', 'silent') => True is_anagram('Triangle', 'Integral') => True is_anagram('apple', 'pale') => False \"\"\"",
        "avg_similarity_score": 0.11227401301246921
    },
    {
        "prompt": "def find_duplicates(arr): \"\"\" Given a list of integers, return a list of integers that appear more than once in the input list. The output should contain only unique duplicates and be sorted in ascending order. Examples: find_duplicates([1, 2, 3, 4, 5, 1, 2]) == [1, 2] find_duplicates([1, 1, 1, 2, 2, 3]) == [1, 2] find_duplicates([5, 6, 7]) == [] \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers, return a list of integers that may or may not appear multiple times in the input list. The output could contain duplicates and might be sorted in any order. Examples: candidate([1, 2, 3, 4, 5, 1, 2]) == [1, 2] candidate([1, 1, 1, 2, 2, 3]) == [1, 2] candidate([5, 6, 7]) == [] \"\"\"",
        "avg_similarity_score": 0.21953344850197418
    },
    {
        "prompt": "def find_longest_word(words): \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) == 'banana' find_longest_word(['a', 'ab', 'abc']) == 'abc' find_longest_word([]) == '' \"\"\"",
        "bad_prompt": "def candidate(words): \"\"\" Given a list of words, return a certain word based on its length or other criteria. If there are multiple candidates, return the first one encountered. If the list is empty, return an empty string. Examples: candidate(['apple', 'banana', 'cherry']) == 'banana' candidate(['a', 'ab', 'abc']) == 'abc' candidate([]) == '' \"\"\"",
        "avg_similarity_score": 0.16682923103572372
    },
    {
        "prompt": "def count_vowels(text: str) -> int: \"\"\" Count the number of vowels (a, e, i, o, u) in a given string. The function should be case-insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(text: str) -> int: \"\"\" Count the number of characters in a given string that may or may not include vowels. The function should be case-sensitive or insensitive based on some condition. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.13794473795520257
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inters'\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns a common prefix or suffix among them. If there is no common prefix or suffix, return an empty string. Examples: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' candidate(['interspecies', 'interstellar', 'interstate']) => 'inters'\"\"\"",
        "avg_similarity_score": 0.15620870047001859
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. Case should be ignored. Examples: count_vowels('Hello World') => 3 count_vowels('Python') => 1 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of characters that may or may not include vowels in it. The case should be considered. Examples: candidate('Hello World') => 10 candidate('Python') => 6 candidate('AEIOU') => 5 candidate('xyz') => 3 \"\"\"",
        "avg_similarity_score": 0.18851623738642312
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns some common substring among them. If there is no common substring, return an empty string or None. Examples: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.15702278817931825
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given an array of integers from 1 to n with one number missing, return the missing number. Assume that there is exactly one number missing in the range. Examples: >>> find_missing_number([3, 7, 1, 2, 8, 4]) == 5 >>> find_missing_number([1, 2, 4, 6, 3, 7, 8]) == 5 >>> find_missing_number([1]) == 2 \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given an array of integers which may contain numbers from 1 to n and possibly some duplicates or missing values, return a number related to the input. The specific condition for this number can vary. Examples: >>> find_missing_number([3, 7, 1, 2, 8, 4]) == 5 >>> find_missing_number([1, 2, 4, 6, 3, 7, 8]) == 5 >>> find_missing_number([1]) == 2 \"\"\"",
        "avg_similarity_score": 0.16413626684952923
    },
    {
        "prompt": "def count_vowels(string: str) -> int: \"\"\" Given a string, return the number of vowels (a, e, i, o, u) present in it. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(string: str) -> int: \"\"\" Given a string, return the number of certain characters (vowels or consonants) present in it. The function should be case-sensitive or insensitive depending on some condition. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.18776653835178506
    },
    {
        "prompt": "def fibonacci(n): \"\"\" Given a non-negative integer n, return the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: >>> fibonacci(0) == 0 >>> fibonacci(1) == 1 >>> fibonacci(5) == 5 >>> fibonacci(10) == 55 \"\"\"",
        "bad_prompt": "def candidate(n): \"\"\" Given a non-negative integer n, return either the nth Fibonacci number or some other number based on certain conditions. The Fibonacci sequence is defined in various ways. Examples: >>> candidate(0) == 0 >>> candidate(1) == 1 >>> candidate(5) == 5 >>> candidate(10) == 55 \"\"\"",
        "avg_similarity_score": 0.18153812452266
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. Case should be ignored. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Write a function that takes a string s and returns the count of certain characters in it. The specific characters to count may vary. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('AEIOU') 5 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.1937690933994831
    },
    {
        "prompt": "def find_longest_word(words: list) -> str:\n    \"\"\"\n    Write a function that accepts a list of strings and returns the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. The input will always be a non-empty list.\n    >>> find_longest_word(['apple', 'banana', 'cherry'])\n    'banana'\n    >>> find_longest_word(['dog', 'cat', 'elephant'])\n    'elephant'\n    >>> find_longest_word(['a', 'ab', 'abc'])\n    'abc'\n    \"\"\"",
        "bad_prompt": "def candidate(words: list) -> str:\n    \"\"\"\n    Write a function that accepts a list of strings and returns either the longest or shortest word in the list. If there are multiple words with the same length, return any of them. The input may contain empty strings as well.\n    >>> candidate(['apple', 'banana', 'cherry'])\n    'banana'\n    >>> candidate(['dog', 'cat', 'elephant'])\n    'cat'\n    >>> candidate(['a', 'ab', 'abc'])\n    'a'\n    \"\"\"",
        "avg_similarity_score": 0.17158251999296734
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest or shortest common prefix among them. If there is no common prefix, return an empty string or some default value. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.11387320391283708
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix string amongst them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. Example: longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Given a list of strings, find a certain prefix string amongst them. If there is no specific prefix, return an empty string or another value. Example: candidate(['flower', 'flow', 'flight']) should return 'fl' or something else. Example: candidate(['dog', 'racecar', 'car']) should return '' or some other result. \"\"\"",
        "avg_similarity_score": 0.14692824750744363
    },
    {
        "prompt": "def is_palindrome(s: str) -> bool: \"\"\" Check if the given string s is a palindrome. A palindrome reads the same backward as forward, ignoring spaces, punctuation, and capitalization. For example: is_palindrome('A man, a plan, a canal, Panama') returns True is_palindrome('hello') returns False is_palindrome('Was it a car or a cat I saw?') returns True \"\"\"",
        "bad_prompt": "def is_palindrome(s: str) -> bool: \"\"\" Check if the given string s has some sort of symmetry. The definition of symmetry may vary based on different interpretations. For example: is_palindrome('A man, a plan, a canal, Panama') returns True is_palindrome('hello') returns False is_palindrome('Was it a car or a cat I saw?') returns True \"\"\"",
        "avg_similarity_score": 0.11814778862786161
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain no duplicates and will be unsorted. For example: >>> find_missing_number([3, 7, 1, 2, 8, 4]) 5 >>> find_missing_number([1, 2, 4]) 3 >>> find_missing_number([2, 3, 1]) 4 \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers from 1 to n with possibly some numbers present or absent, return any missing number or an extra number. The input list may contain duplicates and can be sorted or unsorted. For example: >>> candidate([3, 7, 1, 2, 8, 4]) 5 >>> candidate([1, 2, 4]) 3 >>> candidate([2, 3, 1]) 4 \"\"\"",
        "avg_similarity_score": 0.2100657007780593
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Check if two strings are anagrams of each other. Two strings are anagrams if they contain the same characters in a different order. Ignore spaces and case sensitivity. Examples: >>> is_anagram('listen', 'silent') True >>> is_anagram('triangle', 'integral') True >>> is_anagram('apple', 'pale') False >>> is_anagram('A gentleman', 'Elegant man') True \"\"\"",
        "bad_prompt": "def candidate(str1: str, str2: str) -> bool: \"\"\" Check if two strings satisfy a certain condition (such as being similar or having common letters). Examples: >>> candidate('listen', 'silent') True >>> candidate('triangle', 'integral') True >>> candidate('apple', 'pale') False >>> candidate('A gentleman', 'Elegant man') True \"\"\"",
        "avg_similarity_score": 0.12551820542926093
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given an array of integers from 1 to n with one number missing, return the missing number. The input array will have no duplicates and will contain exactly n-1 numbers. Example: >>> find_missing_number([3, 7, 1, 2, 8]) == 4 >>> find_missing_number([1, 2, 4]) == 3 >>> find_missing_number([5, 3, 1, 2]) == 4 \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given an array of integers that may or may not include all numbers from 1 to n, return a certain number based on conditions applied to the elements in the array. Example: >>> candidate([3, 7, 1, 2, 8]) == 4 >>> candidate([1, 2, 4]) == 3 >>> candidate([5, 3, 1, 2]) == 4 \"\"\"",
        "avg_similarity_score": 0.21077969010799097
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns either the longest or shortest common prefix among them. If there is no common prefix, return an empty string or some default value. Example: candidate(['flower', 'flow', 'flight']) could return 'fl' or '' depending on conditions. candidate(['dog', 'racecar', 'car']) might return '' or 'default'. \"\"\"",
        "avg_similarity_score": 0.1502223983014668
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. For example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels present in the string. The function should be case-insensitive. For example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 \"\"\"",
        "avg_similarity_score": 0.16430298201266397
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" This function takes a string s and returns the total number of vowels (a, e, i, o, u) present in it. The function should be case-insensitive. Examples: count_vowels('Hello World') \u279e 3 count_vowels('Python Programming') \u279e 4 count_vowels('xyz') \u279e 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" This function takes a string s and returns a certain number related to vowels present in it. The function should consider different cases. Examples: count_vowels('Hello World') \u279e 3 count_vowels('Python Programming') \u279e 4 count_vowels('xyz') \u279e 0 \"\"\"",
        "avg_similarity_score": 0.13775547501991944
    },
    {
        "prompt": "def longest_palindrome(s: str) -> str: \"\"\" Given a string s, return the longest palindromic substring in s. If there are multiple substrings of the same maximum length, return the first one found. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). Examples: >>> longest_palindrome('babad') 'bab' >>> longest_palindrome('cbbd') 'bb' >>> longest_palindrome('a') 'a' >>> longest_palindrome('ac') 'a' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a substring based on certain conditions. If there are multiple substrings of similar characteristics, return the first one found. The substring can be any combination of characters from the original string. Examples: >>> candidate('babad') 'bab' >>> candidate('cbbd') 'bb' >>> candidate('a') 'a' >>> candidate('ac') 'a' \"\"\"",
        "avg_similarity_score": 0.16183102708490407
    },
    {
        "prompt": "def find_longest_word(words): \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the input list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) == 'banana' find_longest_word(['cat', 'dog', 'elephant']) == 'elephant' find_longest_word([]) == '' \"\"\"",
        "bad_prompt": "def find_longest_word(words): \"\"\" Given a list of words, return a certain word from the list based on some criteria (e.g., longest or shortest). If there are multiple candidates, return the first one encountered. If the input list is empty, return None. Examples: find_longest_word(['apple', 'banana', 'cherry']) == 'banana' find_longest_word(['cat', 'dog', 'elephant']) == 'elephant' find_longest_word([]) == '' \"\"\"",
        "avg_similarity_score": 0.12572669208068396
    },
    {
        "prompt": "def count_unique_words(text: str) -> int: \"\"\" Given a string of text, return the number of unique words in it. Words are defined as sequences of characters separated by whitespace. Ignore case when counting unique words. Examples: count_unique_words('Hello world') should return 2. count_unique_words('hello hello HELLO') should return 1. count_unique_words('This is a test') should return 5. \"\"\"",
        "bad_prompt": "def candidate(text: str) -> int: \"\"\" Given a string of text, return the number of some or all unique words in it. Words are defined as sequences of characters separated by whitespace. Consider case sensitivity when counting unique words. Examples: candidate('Hello world') should return 2. candidate('hello hello HELLO') should return 1. candidate('This is a test') should return 5. \"\"\"",
        "avg_similarity_score": 0.1717460938757707
    },
    {
        "prompt": "def count_consonants(s: str) -> int: \"\"\" Given a string s, return the number of consonants in the string. Consonants are all letters that are not vowels (a, e, i, o, u). Example: >>> count_consonants('Hello World!') returns 7 >>> count_consonants('abcde') returns 3 >>> count_consonants('AEIOU') returns 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of characters or consonants in the string. Consonants are defined as letters excluding certain vowels. Example: >>> candidate('Hello World!') returns 7 >>> candidate('abcde') returns 3 >>> candidate('AEIOU') returns 0 \"\"\"",
        "avg_similarity_score": 0.18665019433722352
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given an array of integers from 1 to n with one number missing, return the missing number. The input array will have no duplicates and will be unsorted. Example: >>> find_missing_number([3, 7, 1, 2, 8, 4]) == 5 >>> find_missing_number([1, 2, 4]) == 3 >>> find_missing_number([2, 3, 1]) == 4 \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given an array of integers that may or may not contain a sequence of numbers, return some number related to the elements in the array. Example: >>> candidate([3, 7, 1, 2, 8, 4]) == 5 >>> candidate([1, 2, 4]) == 3 >>> candidate([2, 3, 1]) == 4 \"\"\"",
        "avg_similarity_score": 0.21900301842447759
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Count the number of vowels (a, e, i, o, u) in a given string. The function should be case insensitive. Examples: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('xyz') returns 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Count the number of characters in a given string that might include vowels or consonants. The function should consider different cases. Examples: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('xyz') returns 0 \"\"\"",
        "avg_similarity_score": 0.13165741734879835
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. Example: longest_common_prefix(['dog', 'racecar', 'car']) should return ''. Constraints: All input strings are lowercase letters. \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns some kind of prefix from them. If there is no prefix, you may return something else. Example: candidate(['flower', 'flow', 'flight']) might return 'fl' or any other value. Example: candidate(['dog', 'racecar', 'car']) could return '' or another arbitrary result. Constraints: Input strings can be in any format. \"\"\"",
        "avg_similarity_score": 0.1390885879957324
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters or vowels in it. The function should be case insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.16001642819453007
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns either the longest common prefix or some other characteristic among them. If there is no common prefix, return an empty string or something else. For example: longest_common_prefix(['flower', 'flow', 'flight']) might return 'fl' or another value. longest_common_prefix(['dog', 'racecar', 'car']) could return '' or any other result. \"\"\"",
        "avg_similarity_score": 0.12248502715509747
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. For example: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Write a function that takes a string s and returns a certain count related to vowels or consonants in it. The function should consider various cases. For example: >>> candidate('Hello World') == 3 >>> candidate('Python Programming') == 4 >>> candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.18740551788787163
    },
    {
        "prompt": "def count_unique_elements(lst): \"\"\"Given a list of integers, return the number of unique elements in the list. A unique element is defined as an element that appears exactly once in the list. If the input list is empty, return 0. Examples: count_unique_elements([1, 2, 3, 4, 5]) == 5 count_unique_elements([1, 2, 2, 3, 4]) == 3 count_unique_elements([]) == 0\"\"\"",
        "bad_prompt": "def count_unique_elements(lst): \"\"\"Given a list of integers, return the number of certain elements in the list. An element may appear multiple times or not at all. If the input list is empty, return 0. Examples: count_unique_elements([1, 2, 3, 4, 5]) == 5 count_unique_elements([1, 2, 2, 3, 4]) == 3 count_unique_elements([]) == 0\"\"\"",
        "avg_similarity_score": 0.19668388039594814
    },
    {
        "prompt": "def calculate_average(numbers): \"\"\" Given a list of numbers, return the average value. If the list is empty, return 0. For example: calculate_average([1, 2, 3]) => 2.0 calculate_average([]) => 0 calculate_average([10, 20, 30, 40]) => 25.0 \"\"\"",
        "bad_prompt": "def calculate_average(numbers): \"\"\" Given a list of numbers, return some form of average or total value. If the list is empty, return something. For example: calculate_average([1, 2, 3]) => 2.0 calculate_average([]) => 0 calculate_average([10, 20, 30, 40]) => 25.0 \"\"\"",
        "avg_similarity_score": 0.16795126266596444
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. For example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of characters that are either vowels or consonants in the string. The function should be case insensitive. For example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.1632754962078047
    },
    {
        "prompt": "def count_words(sentence: str) -> int: \"\"\" Given a string sentence, return the total number of words in it. A word is defined as any sequence of characters separated by spaces. Examples: count_words('Hello world') should return 2. count_words('This is a test.') should return 4. count_words('   Leading and trailing spaces   ') should return 5. count_words('') should return 0. \"\"\"",
        "bad_prompt": "def count_words(sentence: str) -> int: \"\"\" Given a string sentence, return the total number of sequences in it. A sequence can be defined in various ways such as words or groups of characters. Examples: count_words('Hello world') should return 2. count_words('This is a test.') should return 4. count_words('   Leading and trailing spaces   ') should return 5. count_words('') should return 0. \"\"\"",
        "avg_similarity_score": 0.14909680144941298
    },
    {
        "prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\" Determine if two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Ignore spaces and case differences. Examples: >>> is_anagram('listen', 'silent') True >>> is_anagram('triangle', 'integral') True >>> is_anagram('apple', 'pale') False \"\"\"",
        "bad_prompt": "def candidate(s1: str, s2: str) -> bool: \"\"\" Determine if two strings have some relationship with each other based on their characters. The relationship can be defined in various ways such as being similar, having common letters, or any other criteria. Examples: >>> candidate('listen', 'silent') True >>> candidate('triangle', 'integral') True >>> candidate('apple', 'pale') False \"\"\"",
        "avg_similarity_score": 0.11275776320697242
    },
    {
        "prompt": "def count_vowels(string: str) -> int: \"\"\" Given a string, return the number of vowels (a, e, i, o, u) it contains. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 \"\"\"",
        "bad_prompt": "def candidate(string: str) -> int: \"\"\" Given a string, return the number of characters or vowels it contains. The function should be case insensitive. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 \"\"\"",
        "avg_similarity_score": 0.18896772623565883
    },
    {
        "prompt": "def fibonacci(n: int) -> list: \"\"\"Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: fibonacci(5) returns [0, 1, 1, 2, 3] fibonacci(10) returns [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> list: \"\"\"Generate a list that may or may not contain numbers from the Fibonacci sequence up to the nth number. The sequence can be defined in various ways, including but not limited to: F(0) = 0, F(1) = 1, or other arbitrary values. Examples: fibonacci(5) might return [0, 1, 1, 2, 3] or some other combination of numbers.\"\"\"",
        "avg_similarity_score": 0.1506671401464309
    },
    {
        "prompt": "def count_occurrences(lst: list, target): \"\"\" Write a function that takes a list and a target value. The function should return the number of times the target appears in the list. If the target is not found, return 0. Examples: count_occurrences([1, 2, 3, 4, 2], 2) => 2 count_occurrences(['a', 'b', 'c', 'a'], 'a') => 2 count_occurrences([True, False, True], True) => 2 count_occurrences([], 1) => 0 \"\"\"",
        "bad_prompt": "def count_occurrences(lst: list, target): \"\"\" Write a function that takes a list and a target value. The function should return the number of occurrences or some other metric related to the target in the list. If the target is not found, it may return 0 or another default value. Examples: count_occurrences([1, 2, 3, 4, 2], 2) => 2 count_occurrences(['a', 'b', 'c', 'a'], 'a') => 2 count_occurrences([True, False, True], True) => 2 count_occurrences([], 1) => 0 \"\"\"",
        "avg_similarity_score": 0.1821684084263812
    },
    {
        "prompt": "def fibonacci(n): \"\"\" Given a non-negative integer n, return the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: fibonacci(0) == 0 fibonacci(1) == 1 fibonacci(5) == 5 fibonacci(10) == 55 \"\"\"",
        "bad_prompt": "def fibonacci(n): \"\"\" Given a non-negative integer n, return a certain value in the Fibonacci-like sequence. The sequence starts with some numbers and continues based on previous values. Examples: fibonacci(0) == 0 fibonacci(1) == 1 fibonacci(5) == 5 fibonacci(10) == 55 \"\"\"",
        "avg_similarity_score": 0.14800193616420065
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that may or may not include vowels. The function should consider various cases. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.1492807220298697
    },
    {
        "prompt": "def find_maximum_subarray(arr): \"\"\" Given an array of integers, return the contiguous subarray (containing at least one number) which has the largest sum and its sum. If there are multiple such subarrays, return the first one found. Example: find_maximum_subarray([-2,1,-3,4,-1,2,1,-5,4]) -> ([4,-1,2,1], 6) find_maximum_subarray([1]) -> ([1], 1) find_maximum_subarray([5,4,-1,7,8]) -> ([5,4,-1,7,8], 23) \"\"\"",
        "bad_prompt": "def find_maximum_subarray(arr): \"\"\" Given an array of integers, return a certain type of subarray based on some conditions that may or may not include all numbers in it. The result could be a list of numbers with various sums. Example: find_maximum_subarray([-2,1,-3,4,-1,2,1,-5,4]) -> ([4,-1,2,1], 6) find_maximum_subarray([1]) -> ([1], 1) find_maximum_subarray([5,4,-1,7,8]) -> ([5,4,-1,7,8], 23) \"\"\"",
        "avg_similarity_score": 0.16189504975604616
    },
    {
        "prompt": "def longest_palindrome(s: str) -> str: \"\"\" Given a string s, return the longest palindromic substring in s. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). If there are multiple longest palindromic substrings, return any one of them. Examples: longest_palindrome(\"babad\") should return \"bab\" or \"aba\"; longest_palindrome(\"cbbd\") should return \"bb\". \"\"\"",
        "bad_prompt": "def longest_palindrome(s: str) -> str: \"\"\" Given a string s, return a substring from s that has some characteristics of being a palindrome. A palindrome is a sequence of characters that may read similarly in different contexts. If there are multiple such substrings, return any one of them. Examples: longest_palindrome(\"babad\") could return anything related to it; longest_palindrome(\"cbbd\") might give you something unexpected. \"\"\"",
        "avg_similarity_score": 0.12031381666838119
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of characters or vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "avg_similarity_score": 0.15632431628089766
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that may or may not include vowels in it. The function could consider case sensitivity. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.14969821630464908
    },
    {
        "prompt": "def longest_common_prefix(strs: list) -> str:\n    \"\"\"\n    Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string.\n    Examples:\n    >>> longest_common_prefix(['flower', 'flow', 'flight'])\n    'fl'\n    >>> longest_common_prefix(['dog', 'racecar', 'car'])\n    ''\n    >>> longest_common_prefix(['a'])\n    'a'\n    >>> longest_common_prefix([])\n    ''\n    \"\"\"",
        "bad_prompt": "def candidate(strs: list) -> str:\n    \"\"\"\n    Write a function that takes a list of strings and returns either the longest or shortest common prefix among them. If there is no common prefix, return an arbitrary string.\n    Examples:\n    >>> candidate(['flower', 'flow', 'flight'])\n    'fl'\n    >>> candidate(['dog', 'racecar', 'car'])\n    ''\n    >>> candidate(['a'])\n    'a'\n    >>> candidate([])\n    ''\n    \"\"\"",
        "avg_similarity_score": 0.16716204089557551
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''.\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns a certain value based on their prefixes or suffixes. It could be the longest common prefix, shortest unique prefix, or any other criteria you choose. Examples: candidate(['flower', 'flow', 'flight']) might return 'fl' or something else. candidate(['dog', 'racecar', 'car']) might return '' or another result.\"\"\"",
        "avg_similarity_score": 0.1431833044523379
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in it. Case should be ignored, meaning both uppercase and lowercase vowels should be counted. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters (such as vowels or consonants) present in it. Case might or might not be considered. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.14600119935500558
    },
    {
        "prompt": "def calculate_average(numbers: List[float]) -> float: \"\"\" Given a list of numbers, return the average value. The average is calculated as the sum of all elements divided by the number of elements in the list. If the list is empty, return 0. For example: >>> calculate_average([1, 2, 3, 4]) 2.5 >>> calculate_average([]) 0.0 \"\"\"",
        "bad_prompt": "def calculate_average(numbers: List[float]) -> float: \"\"\" Given a list of numbers, return some form of average value. The average could be based on various calculations or conditions. If the list is empty, return something. For example: >>> calculate_average([1, 2, 3, 4]) 2.5 >>> calculate_average([]) 0.0 \"\"\"",
        "avg_similarity_score": 0.17650757466656047
    },
    {
        "prompt": "def find_longest_word(words): \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Examples: >>> find_longest_word(['apple', 'banana', 'cherry']) == 'banana' >>> find_longest_word(['a', 'ab', 'abc']) == 'abc' >>> find_longest_word([]) == '' \"\"\"",
        "bad_prompt": "def find_longest_word(words): \"\"\" Given a list of words, return the longest or shortest word in the list based on certain conditions. If there are multiple words with the same length, return the first one encountered. If the list is empty, return an empty string. Examples: >>> find_longest_word(['apple', 'banana', 'cherry']) == 'banana' >>> find_longest_word(['a', 'ab', 'abc']) == 'abc' >>> find_longest_word([]) == '' \"\"\"",
        "avg_similarity_score": 0.1330905386628846
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels present in the string. The function should be case insensitive. For example: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.2001665116746508
    },
    {
        "prompt": "def count_unique_elements(lst): \"\"\" Given a list of integers, return the count of unique elements in the list. Example: count_unique_elements([1, 2, 3, 1, 2]) => 3 count_unique_elements([5, 5, 5]) => 1 count_unique_elements([]) => 0 \"\"\"",
        "bad_prompt": "def count_unique_elements(lst): \"\"\" Given a list of integers, return the count of elements in the list that are unique or repeated. Example: count_unique_elements([1, 2, 3, 1, 2]) => 3 count_unique_elements([5, 5, 5]) => 1 count_unique_elements([]) => 0 \"\"\"",
        "avg_similarity_score": 0.19797670580545168
    },
    {
        "prompt": "def find_longest_word(words): \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Example: find_longest_word(['apple', 'banana', 'cherry']) => 'banana' find_longest_word(['cat', 'dog', 'elephant']) => 'elephant' find_longest_word([]) => '' \"\"\"",
        "bad_prompt": "def candidate(words): \"\"\" Given a list of words, return a word from the list based on certain criteria. If there are multiple words that meet the criteria, return the first one encountered. If the list is empty, return an empty string or None. Example: candidate(['apple', 'banana', 'cherry']) => 'banana' candidate(['cat', 'dog', 'elephant']) => 'elephant' candidate([]) => '' \"\"\"",
        "avg_similarity_score": 0.16844414205278038
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. For example: count_vowels('Hello World') returns 3 count_vowels('Python') returns 1 count_vowels('xyz') returns 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that are either vowels or consonants in the string. The function should be case insensitive. For example: count_vowels('Hello World') returns 3 count_vowels('Python') returns 1 count_vowels('xyz') returns 0 \"\"\"",
        "avg_similarity_score": 0.16423300185950318
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a certain prefix among them. If there is no common prefix, return an arbitrary string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "avg_similarity_score": 0.12291814968982047
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. Constraints: - All input strings are lowercase letters. - The length of each string will be at most 200. - The number of strings in the list will be at most 100. \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns some form of common prefix among them. If there is no common prefix, you may return any string or nothing. For example: longest_common_prefix(['flower', 'flow', 'flight']) could return 'fl' or '' or even 'f'. longest_common_prefix(['dog', 'racecar', 'car']) might return 'd' or another value. Constraints: - All input strings can contain uppercase or lowercase letters. - The length of each string will vary. - The number of strings in the list will not exceed a certain limit. \"\"\"",
        "avg_similarity_score": 0.12595157101851234
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) returns 'fl' longest_common_prefix(['dog', 'racecar', 'car']) returns '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Given a list of strings, find a certain sequence or prefix among them. If there is no such sequence, return an empty string. Examples: candidate(['flower', 'flow', 'flight']) returns 'fl' candidate(['dog', 'racecar', 'car']) returns '' \"\"\"",
        "avg_similarity_score": 0.15097799402539602
    },
    {
        "prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\" Write a function that checks if two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Ignore spaces and case differences. Examples: >>> is_anagram('listen', 'silent') True >>> is_anagram('Triangle', 'Integral') True >>> is_anagram('apple', 'pale') False \"\"\"",
        "bad_prompt": "def candidate(s1: str, s2: str) -> bool: \"\"\" Write a function that checks if two strings meet certain conditions related to their characters. This could involve checking for similar letters, lengths, or any other specific condition. Examples: >>> candidate('listen', 'silent') True >>> candidate('Triangle', 'Integral') True >>> candidate('apple', 'pale') False \"\"\"",
        "avg_similarity_score": 0.12802842018230676
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters that may or may not include vowels in the string. The function should consider various conditions for counting. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.15496156905817346
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. For example: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python') == 1 >>> count_vowels('AEIOUaeiou') == 10 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. The function may or may not be case-sensitive. For example: >>> candidate('Hello World') == 3 >>> candidate('Python') == 1 >>> candidate('AEIOUaeiou') == 10 \"\"\"",
        "avg_similarity_score": 0.1993915129545984
    },
    {
        "prompt": "def count_unique_chars(s: str) -> int: \"\"\" Given a string s, return the number of unique characters in it. Ignore spaces and consider uppercase and lowercase letters as the same character. For example: count_unique_chars('Hello World') should return 10 since 'H', 'e', 'l', 'o', 'W', 'r', 'd' are the unique characters. Examples: >>> count_unique_chars('abcABC') 3 >>> count_unique_chars('aabbcc') 3 >>> count_unique_chars(' ') 0 \"\"\"",
        "bad_prompt": "def count_unique_chars(s: str) -> int: \"\"\" Given a string s, return the number of some unique characters in it. Consider uppercase and lowercase letters or ignore spaces based on certain conditions. For example: count_unique_chars('Hello World') could return different values depending on how you interpret uniqueness. Examples: >>> count_unique_chars('abcABC') 3 >>> count_unique_chars('aabbcc') 3 >>> count_unique_chars(' ') 0 \"\"\"",
        "avg_similarity_score": 0.13047524401970217
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. The function should be case-sensitive or insensitive based on some condition. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.15201870079326069
    },
    {
        "prompt": "def count_occurrences(lst, target): \"\"\" Given a list of integers and a target integer, return the number of times the target appears in the list. If the list is empty, return 0. Examples: count_occurrences([1, 2, 3, 4, 2], 2) -> 2 count_occurrences([], 5) -> 0 count_occurrences([5, 5, 5], 5) -> 3 \"\"\"",
        "bad_prompt": "def candidate(lst, target): \"\"\" Given a list of integers and a target integer, return the number of occurrences or some other condition related to the target in the list. If the list is empty, return -1 or 0. Examples: candidate([1, 2, 3, 4, 2], 2) -> 2 candidate([], 5) -> 0 candidate([5, 5, 5], 5) -> 3 \"\"\"",
        "avg_similarity_score": 0.2311739314303983
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns a certain prefix or suffix among them. If there is no common prefix or suffix, return an empty string. For example: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => ''\"\"\"",
        "avg_similarity_score": 0.16610322830722682
    },
    {
        "prompt": "def find_anagrams(word: str, words_list: list) -> list: \"\"\" Given a string 'word' and a list of strings 'words_list', return a list of all the words from 'words_list' that are anagrams of 'word'. An anagram is a word formed by rearranging the letters of another. Example: find_anagrams('listen', ['enlist', 'google', 'inlets', 'banana']) returns ['enlist', 'inlets'] \"\"\"",
        "bad_prompt": "def candidate(word: str, words_list: list) -> list: \"\"\" Given a string 'word' and a list of strings 'words_list', return a list of all the words from 'words_list' that are similar to 'word'. Similar can mean many things such as having common letters or being of the same length. Example: candidate('listen', ['enlist', 'google', 'inlets', 'banana']) returns ['enlist', 'inlets'] \"\"\"",
        "avg_similarity_score": 0.15887517209738322
    },
    {
        "prompt": "def find_max_difference(arr): \"\"\" Given a list of integers, return the maximum difference between any two elements in the list. The difference is defined as the absolute value of the subtraction of one element from another. If the list has fewer than two elements, return 0. Examples: find_max_difference([1, 2, 3, 4]) => 3 find_max_difference([-1, -5, 10]) => 15 find_max_difference([5]) => 0 \"\"\"",
        "bad_prompt": "def find_max_difference(arr): \"\"\" Given a list of integers, return the maximum or minimum difference between any two elements in the list. The difference can be defined in various ways and if the list has fewer than two elements, return 0. Examples: find_max_difference([1, 2, 3, 4]) => 3 find_max_difference([-1, -5, 10]) => 15 find_max_difference([5]) => 0 \"\"\"",
        "avg_similarity_score": 0.17280599222517468
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns a certain prefix or suffix among them. If there is no common prefix, return an empty string. For example: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => ''\"\"\"",
        "avg_similarity_score": 0.165192780391631
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a common prefix or suffix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "avg_similarity_score": 0.12326328308632648
    },
    {
        "prompt": "def find_unique_numbers(numbers): \"\"\" Given a list of integers, return a new list containing only the unique numbers from the original list, preserving their order. If there are no unique numbers, return an empty list. Example: find_unique_numbers([1, 2, 3, 2, 4]) should return [1, 3, 4] find_unique_numbers([1, 1, 1]) should return [] find_unique_numbers([]) should return [] \"\"\"",
        "bad_prompt": "def find_unique_numbers(numbers): \"\"\" Given a list of integers, return a new list containing some or all unique numbers from the original list, possibly altering their order. If there are no unique numbers, return an empty list or None. Example: find_unique_numbers([1, 2, 3, 2, 4]) might return [1, 3, 4] or [] find_unique_numbers([1, 1, 1]) could return [] or None find_unique_numbers([]) might return [] or None \"\"\"",
        "avg_similarity_score": 0.16253539530278555
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s as input and returns the number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 count_vowels('AEIOUaeiou') => 10 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s as input and returns the number of characters or vowels in the string. The function should be case-sensitive or insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 count_vowels('AEIOUaeiou') => 10 \"\"\"",
        "avg_similarity_score": 0.16353805834220445
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s and returns the total number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. For example: count_vowels(\"Hello World\") => 3 count_vowels(\"Python programming!\") => 5 count_vowels(\"\") => 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s and returns some count related to vowels in it. The function should consider different cases. For example: count_vowels(\"Hello World\") => 3 count_vowels(\"Python programming!\") => 5 count_vowels(\"\") => 0\"\"\"",
        "avg_similarity_score": 0.14496947870942814
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns a certain number related to vowels in it. The function should consider different cases. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.15241480581824732
    },
    {
        "prompt": "def find_longest_word(words): \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. Examples: >>> find_longest_word(['apple', 'banana', 'cherry']) 'banana' >>> find_longest_word(['a', 'ab', 'abc']) 'abc' >>> find_longest_word([]) '' \"\"\"",
        "bad_prompt": "def candidate(words): \"\"\" Given a list of words, return a word from the list based on certain conditions (like being the longest or shortest). If there are multiple candidates, return the first one encountered. Examples: >>> candidate(['apple', 'banana', 'cherry']) 'banana' >>> candidate(['a', 'ab', 'abc']) 'abc' >>> candidate([]) '' \"\"\"",
        "avg_similarity_score": 0.16884035290739502
    },
    {
        "prompt": "def fibonacci(n: int) -> int: \"\"\"Return the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: fibonacci(0) => 0, fibonacci(1) => 1, fibonacci(5) => 5, fibonacci(10) => 55.\"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> int: \"\"\"Return the nth Fibonacci number or some other related value. The Fibonacci sequence is defined in various ways, including different starting points or variations. For example: fibonacci(0) could be 0 or another value, fibonacci(1) might return 1 or something else, and fibonacci(5) may not necessarily equal 5 depending on interpretation.\"\"\"",
        "avg_similarity_score": 0.1252754263335799
    },
    {
        "prompt": "def count_words(s: str) -> int: \"\"\" Given a string s, return the total number of words in the string. Words are defined as sequences of characters separated by whitespace. For example: >>> count_words('Hello world') 2 >>> count_words('This is a test.') 4 >>> count_words('   Leading and trailing spaces   ') 5 \"\"\"",
        "bad_prompt": "def count_words(s: str) -> int: \"\"\" Given a string s, return some count related to words in the string. Words can be defined differently based on context. For example: >>> count_words('Hello world') 2 >>> count_words('This is a test.') 4 >>> count_words('   Leading and trailing spaces   ') 5 \"\"\"",
        "avg_similarity_score": 0.13781983731657813
    },
    {
        "prompt": "def count_unique_elements(arr): \"\"\" Given a list of integers, return the number of unique elements in the list. A unique element is defined as an element that appears exactly once in the list. Example: count_unique_elements([1, 2, 3, 4, 5]) == 5 count_unique_elements([1, 2, 2, 3, 4]) == 3 count_unique_elements([1, 1, 1, 1]) == 0 count_unique_elements([]) == 0 \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers, return the count of certain elements in the list. The definition of these elements may vary based on different conditions. Example: candidate([1, 2, 3, 4, 5]) == 5 candidate([1, 2, 2, 3, 4]) == 3 candidate([1, 1, 1, 1]) == 0 candidate([]) == 0 \"\"\"",
        "avg_similarity_score": 0.22588905684958835
    },
    {
        "prompt": "def count_unique_characters(s: str) -> int: \"\"\" Given a string s, return the number of unique characters in it. Ignore spaces and consider case sensitivity (i.e., 'A' and 'a' are different). Examples: count_unique_characters('Hello World') == 10 count_unique_characters('abcABC') == 6 count_unique_characters(' ') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. Consider all characters including spaces and possibly ignore case sensitivity (i.e., 'A' and 'a' might be treated as the same or different). Examples: candidate('Hello World') == 10 candidate('abcABC') == 6 candidate(' ') == 0 \"\"\"",
        "avg_similarity_score": 0.17504723608646308
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same length, return the first one found. Examples: find_longest_substring('abcabcbb') == 'abc' find_longest_substring('bbbbb') == 'b' find_longest_substring('pwwkew') == 'wke' \"\"\"",
        "bad_prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return a substring that may or may not have repeating characters. If there are multiple substrings of varying lengths, return any one of them. Examples: find_longest_substring('abcabcbb') == 'abc' find_longest_substring('bbbbb') == 'b' find_longest_substring('pwwkew') == 'wke' \"\"\"",
        "avg_similarity_score": 0.11590545114817173
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a string sentence, return a new string with the order of words reversed. Words are defined as sequences of characters separated by spaces. For example: reverse_words('Hello World') should return 'World Hello'. If the input is an empty string, return an empty string. Examples: reverse_words('This is a test') == 'test a is This' reverse_words('Python programming') == 'programming Python' reverse_words('') == '' \"\"\"",
        "bad_prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a string sentence, return a new string with the order of certain words reversed or altered in some way. Words are defined as sequences of characters separated by spaces. For example: reverse_words('Hello World') might return 'World Hello' or something else. If the input is an empty string, return an empty string. Examples: reverse_words('This is a test') could be 'test a is This' or other variations. reverse_words('Python programming') might yield 'programming Python' or not. reverse_words('') == '' \"\"\"",
        "avg_similarity_score": 0.12567246405652308
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive, meaning it should count both uppercase and lowercase vowels. For example: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of characters or vowels in the string. The function should be case-insensitive, meaning it should count both uppercase and lowercase letters. For example: candidate('Hello World') => 10 candidate('Python Programming') => 8 candidate('AEIOU') => 5 candidate('xyz') => 3 \"\"\"",
        "avg_similarity_score": 0.18653989186646716
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters present in it. The function should be case insensitive. Examples: >>> candidate('Hello World') == 3 >>> candidate('Python Programming') == 4 >>> candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.19086018867760796
    },
    {
        "prompt": "def longest_palindrome(s): \"\"\" Write a function that takes a string s and returns the longest palindromic substring within it. A palindrome is a word, phrase, number, or other sequence of characters which reads the same backward as forward. If there are multiple longest palindromes, return the first one found. Examples: longest_palindrome('babad') => 'bab' (or 'aba') longest_palindrome('cbbd') => 'bb' longest_palindrome('a') => 'a' longest_palindrome('ac') => 'a' \"\"\"",
        "bad_prompt": "def candidate(s): \"\"\" Write a function that takes a string s and returns some kind of substring based on certain conditions. The substring may be related to being the longest or shortest or could be any specific type. Examples: candidate('babad') => 'bab' (or another variant) candidate('cbbd') => 'bb' candidate('a') => 'a' candidate('ac') => 'a' \"\"\"",
        "avg_similarity_score": 0.15794043965694146
    },
    {
        "prompt": "def longest_common_prefix(strs: list) -> str:\n    \"\"\"\n    Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string.\n    Example:\n    >>> longest_common_prefix(['flower', 'flow', 'flight'])\n    'fl'\n    >>> longest_common_prefix(['dog', 'racecar', 'car'])\n    ''\n    \"\"\"",
        "bad_prompt": "def candidate(strs: list) -> str:\n    \"\"\"\n    Given a list of strings, find a certain type of prefix among them. If there is no such prefix, return an empty string.\n    Example:\n    >>> candidate(['flower', 'flow', 'flight'])\n    'fl'\n    >>> candidate(['dog', 'racecar', 'car'])\n    ''\n    \"\"\"",
        "avg_similarity_score": 0.1565820716011991
    },
    {
        "prompt": "def find_maximum(numbers: List[int]) -> int: \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -5, -3]) -1 >>> find_maximum([]) None \"\"\"",
        "bad_prompt": "def candidate(numbers: List[int]) -> int: \"\"\" Given a list of integers, return either the maximum or minimum value in the list based on certain conditions. If the list is empty, return None. >>> candidate([1, 2, 3]) 3 >>> candidate([-1, -5, -3]) -5 >>> candidate([]) None \"\"\"",
        "avg_similarity_score": 0.22326280488061248
    },
    {
        "prompt": "from typing import List\ndef find_longest_word(words: List[str]) -> str:\n    \"\"\"\n    Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered.\n    >>> find_longest_word(['apple', 'banana', 'cherry']) 'banana'\n    >>> find_longest_word(['a', 'ab', 'abc']) 'abc'\n    >>> find_longest_word(['hello', 'world', 'hi']) 'hello'\n    >>> find_longest_word([]) ''\n    \"\"\"",
        "bad_prompt": "from typing import List\ndef find_longest_word(words: List[str]) -> str:\n    \"\"\"\n    Given a list of words, return a certain word from the list based on its characteristics. If there are multiple candidates, return the first one encountered.\n    >>> find_longest_word(['apple', 'banana', 'cherry']) 'banana'\n    >>> find_longest_word(['a', 'ab', 'abc']) 'abc'\n    >>> find_longest_word(['hello', 'world', 'hi']) 'hello'\n    >>> find_longest_word([]) ''\n    \"\"\"",
        "avg_similarity_score": 0.12435506951188978
    },
    {
        "prompt": "def count_vowels(s): \"\"\"Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('AEIOU') == 5 >>> count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def count_vowels(s): \"\"\"Write a function that takes a string s and returns a certain count related to vowels or consonants in it. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('AEIOU') == 5 >>> count_vowels('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.1486990741105601
    },
    {
        "prompt": "def fibonacci(n): \"\"\" Given a non-negative integer n, return the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: fibonacci(0) => 0, fibonacci(1) => 1, fibonacci(5) => 5, fibonacci(10) => 55 \"\"\"",
        "bad_prompt": "def candidate(n): \"\"\" Given a non-negative integer n, return a certain value from a sequence based on n. The sequence can be defined in various ways depending on conditions. Examples: candidate(0) => 0, candidate(1) => 1, candidate(5) => 5, candidate(10) => 55 \"\"\"",
        "avg_similarity_score": 0.1747192675741241
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of integers that appear more than once in the input list. The output should contain only unique values and be sorted in ascending order. Examples: find_duplicates([1, 2, 3, 4, 5, 1, 2]) == [1, 2] find_duplicates([1, 1, 1, 1]) == [1] find_duplicates([]) == [] \"\"\"",
        "bad_prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of integers that may or may not appear multiple times in the input list. The output could include duplicates or unique values based on certain conditions. Examples: find_duplicates([1, 2, 3, 4, 5, 1, 2]) == [1, 2] find_duplicates([1, 1, 1, 1]) == [1] find_duplicates([]) == [] \"\"\"",
        "avg_similarity_score": 0.18124697640058005
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the total number of vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', and 'u' (case insensitive). For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the total number of characters or vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', and 'u' (case insensitive). For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.15872309576404076
    },
    {
        "prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return the maximum integer in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) => 3 find_maximum([-1, -5, -3]) => -1 find_maximum([]) => None \"\"\"",
        "bad_prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return either the maximum or minimum integer in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) => 3 find_maximum([-1, -5, -3]) => -1 find_maximum([]) => None \"\"\"",
        "avg_similarity_score": 0.18983887765885438
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in it. Ignore case sensitivity. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of certain characters in it. Ignore case sensitivity. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5\"\"\"",
        "avg_similarity_score": 0.1467446813504001
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the n-th number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def candidate(n: int) -> List[int]: \"\"\" Generate a list containing numbers in a certain sequence up to the n-th number. The sequence is defined in some manner where each term relates to previous terms. Examples: >>> candidate(5) [0, 1, 1, 2, 3] >>> candidate(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.1931500321259262
    },
    {
        "prompt": "def count_words(sentence: str) -> int: \"\"\"Write a function that takes a string sentence as input and returns the number of words in the sentence. Words are defined as sequences of characters separated by spaces. Example: >>> count_words('Hello world') 2 >>> count_words('This is a test.') 4 >>> count_words('   Leading and trailing spaces   ') 5 \"\"\"",
        "bad_prompt": "def candidate(sentence: str) -> int: \"\"\"Write a function that takes a string sentence as input and returns a certain number related to words in the sentence. Words are defined as sequences of characters separated by spaces or punctuation. Example: >>> candidate('Hello world') 2 >>> candidate('This is a test.') 4 >>> candidate('   Leading and trailing spaces   ') 5 \"\"\"",
        "avg_similarity_score": 0.18306903078645304
    },
    {
        "prompt": "def find_maximum(arr): \"\"\" Given a list of integers, return the maximum integer in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) == 3 find_maximum([-1, -5, -3]) == -1 find_maximum([]) == None \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers, return an integer that meets certain conditions (such as being the largest or smallest). If the list is empty, return None. Examples: candidate([1, 2, 3]) == 3 candidate([-1, -5, -3]) == -1 candidate([]) == None \"\"\"",
        "avg_similarity_score": 0.2216179188699218
    },
    {
        "prompt": "def count_occurrences(lst: list, target: int) -> int: \"\"\" Given a list of integers and a target integer, return the number of times the target appears in the list. >>> count_occurrences([1, 2, 3, 4, 2, 5], 2) 2 >>> count_occurrences([1, 1, 1, 1], 1) 4 >>> count_occurrences([], 0) 0 \"\"\"",
        "bad_prompt": "def candidate(lst: list, target: int) -> int: \"\"\" Given a list of integers and a target integer, return the number of occurrences of the target or another condition that may be met by elements in the list. >>> candidate([1, 2, 3, 4, 2, 5], 2) 2 >>> candidate([1, 1, 1, 1], 1) 4 >>> candidate([], 0) 0 \"\"\"",
        "avg_similarity_score": 0.23157455502020974
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Return an empty list if n is less than or equal to 0. Examples: fibonacci(5) -> [0, 1, 1, 2, 3] fibonacci(10) -> [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def candidate(n: int) -> List[int]: \"\"\" Generate a list based on some numerical sequence up to the nth number. The sequence should follow certain rules that may include addition or other operations. Return an empty list if n is less than or equal to 0. Examples: candidate(5) -> [0, 1, 1, 2, 3] candidate(10) -> [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.18954594973851316
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string and returns the number of characters in it. The function should consider certain letters as vowels or consonants based on different criteria. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.15860708021324602
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive. >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in the string. The function could be case-sensitive or insensitive depending on some conditions. >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 \"\"\"",
        "avg_similarity_score": 0.18527575320926684
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same maximum length, return the first one found. For example: find_longest_substring('abcabcbb') should return 'abc'. find_longest_substring('bbbbb') should return 'b'. find_longest_substring('pwwkew') should return 'wke'. Constraints: 1 <= len(s) <= 1000. \"\"\"",
        "bad_prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return a substring that may or may not be the longest without repeating characters. If there are multiple substrings of varying lengths, return any one of them. For example: find_longest_substring('abcabcbb') could return 'abc' or 'ab' or even '' depending on conditions. find_longest_substring('bbbbb') might return 'b' or an empty string. find_longest_substring('pwwkew') could return 'pw' or 'wke'. Constraints: 1 <= len(s) <= 1000. \"\"\"",
        "avg_similarity_score": 0.12185321302730479
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the total number of vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Example: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the total number of characters or vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Example: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.1611317246827298
    },
    {
        "prompt": "def count_occurrences(lst: List[int], target: int) -> int: \"\"\" Given a list of integers and a target integer, return the number of times the target appears in the list. If the list is empty, return 0. >>> count_occurrences([1, 2, 3, 4, 2, 2], 2) 3 >>> count_occurrences([], 5) 0 >>> count_occurrences([5, 5, 5], 5) 3 \"\"\"",
        "bad_prompt": "def candidate(lst: List[int], target: int) -> int: \"\"\" Given a list of integers and a target integer, return a certain number related to how many times the target appears in the list or something else. If the list is empty, return 0. >>> candidate([1, 2, 3, 4, 2, 2], 2) 3 >>> candidate([], 5) 0 >>> candidate([5, 5, 5], 5) 3 \"\"\"",
        "avg_similarity_score": 0.221824488114605
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that might include vowels or consonants in it. The function should be case-sensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.15319372054534602
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of certain characters in it. The function should be case sensitive or insensitive. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('AEIOU') 5 >>> candidate('xyz') 0\"\"\"",
        "avg_similarity_score": 0.2030213657362633
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a common or longest prefix among them. If there is no common prefix, return something else. Example: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.15783412324268695
    },
    {
        "prompt": "def longest_common_prefix(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "bad_prompt": "def candidate(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns some form of common sequence among them. If there is no such sequence, return an empty string or something else. Example: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == '' \"\"\"",
        "avg_similarity_score": 0.1624275385780935
    },
    {
        "prompt": "def fibonacci(n: int) -> int: \"\"\"Return the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: >>> fibonacci(0) == 0 >>> fibonacci(1) == 1 >>> fibonacci(5) == 5 >>> fibonacci(10) == 55\"\"\"",
        "bad_prompt": "def candidate(n: int) -> int: \"\"\"Return the nth number in a certain sequence. The sequence is defined with some rules that might include addition or multiplication. Examples: >>> candidate(0) == 0 >>> candidate(1) == 1 >>> candidate(5) == 5 >>> candidate(10) == 55\"\"\"",
        "avg_similarity_score": 0.18133729053448974
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Examples: count_vowels('hello') => 2 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0 count_vowels('This is an example.') => 6\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of characters or vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Examples: count_vowels('hello') => 2 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0 count_vowels('This is an example.') => 6\"\"\"",
        "avg_similarity_score": 0.15391207718198188
    },
    {
        "prompt": "def find_longest_word(words: List[str]) -> str: \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Examples: >>> find_longest_word(['apple', 'banana', 'cherry']) 'banana' >>> find_longest_word(['a', 'ab', 'abc']) 'abc' >>> find_longest_word([]) '' \"\"\"",
        "bad_prompt": "def candidate(words: List[str]) -> str: \"\"\" Given a list of words, return a word based on certain criteria (longest or shortest). If there are multiple candidates, return the first one encountered. If the list is empty, return a default value. Examples: >>> candidate(['apple', 'banana', 'cherry']) 'banana' >>> candidate(['a', 'ab', 'abc']) 'abc' >>> candidate([]) '' \"\"\"",
        "avg_similarity_score": 0.1691050135612658
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\"Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Return the list of Fibonacci numbers starting from F(0). Examples: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\"\"\"",
        "bad_prompt": "def candidate(n: int) -> List[int]: \"\"\"Generate a list based on a certain mathematical pattern up to the nth number. The sequence is defined in some way that might involve previous terms or specific calculations. Return the list of generated numbers starting from the first term. Examples: >>> candidate(5) [0, 1, 1, 2, 3] >>> candidate(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\"\"\"",
        "avg_similarity_score": 0.19695876998538292
    },
    {
        "prompt": "def fibonacci(n): \"\"\"Write a function that returns the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: For n = 0, the output should be 0. For n = 1, the output should be 1. For n = 5, the output should be 5. For n = 10, the output should be 55.\"\"\"",
        "bad_prompt": "def fibonacci(n): \"\"\"Write a function that returns a number from the Fibonacci sequence based on input n. The Fibonacci sequence can vary in definition or starting points. Examples: For n = 0, the output could be 0 or another value. For n = 1, the output might be 1 or something else. For n = 5, the output could be 5 or any other number depending on interpretation. For n = 10, the output may not necessarily be 55.\"\"\"",
        "avg_similarity_score": 0.13706777810597812
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels in the string. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.160276325433153
    },
    {
        "prompt": "def find_maximum(nums): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) == 3 find_maximum([-1, -5, -3]) == -1 find_maximum([]) == None \"\"\"",
        "bad_prompt": "def candidate(nums): \"\"\" Given a list of integers, return a certain value from the list based on some condition. If the list is empty, return None. Examples: candidate([1, 2, 3]) == 3 candidate([-1, -5, -3]) == -1 candidate([]) == None \"\"\"",
        "avg_similarity_score": 0.2207112582723721
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the total number of certain characters (vowels or consonants) in the string. The function should be case insensitive. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('AEIOU') 5 \"\"\"",
        "avg_similarity_score": 0.19832946714691901
    },
    {
        "prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\" Check if two strings are anagrams of each other. Two strings are considered anagrams if they contain the same characters in a different order. Ignore spaces and case sensitivity. Examples: is_anagram('listen', 'silent') should return True. is_anagram('Hello', 'Olelh') should return True. is_anagram('Test', 'Taste') should return False. \"\"\"",
        "bad_prompt": "def candidate(s1: str, s2: str) -> bool: \"\"\" Check if two strings meet a certain condition related to their characters. This could include being anagrams or having similar lengths, etc. Examples: candidate('listen', 'silent') should return True. candidate('Hello', 'Olelh') should return True. candidate('Test', 'Taste') should return False. \"\"\"",
        "avg_similarity_score": 0.12116440838681725
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain prefix or suffix from them. If there is no such prefix or suffix, return an empty string. Example: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.16600192052383025
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\"Given a list of integers, return a list of duplicates found in the input list. The output should contain each duplicate number only once, regardless of how many times it appears in the input list. For example: find_duplicates([1, 2, 3, 4, 5, 1, 2]) => [1, 2] find_duplicates([5, 5, 5, 6, 7, 8, 9, 10]) => [5] find_duplicates([]) => []\"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\"Given a list of integers, return a list of numbers that may or may not be duplicates found in the input list. The output could include all numbers, some numbers, or none at all depending on certain conditions. For example: candidate([1, 2, 3, 4, 5, 1, 2]) => [1, 2] candidate([5, 5, 5, 6, 7, 8, 9, 10]) => [5] candidate([]) => []\"\"\"",
        "avg_similarity_score": 0.20976899321647774
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) 'inter' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns some common characters among them. If there are no common characters, return an empty string or None. Examples: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' >>> candidate(['interspecies', 'interstellar', 'interstate']) 'inter' \"\"\"",
        "avg_similarity_score": 0.15235410731332533
    },
    {
        "prompt": "def fibonacci(n: int) -> list: \"\"\" Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Example: fibonacci(5) returns [0, 1, 1, 2, 3] fibonacci(10) returns [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> list: \"\"\" Generate a list containing either the Fibonacci sequence or another mathematical series up to the nth number. The sequence is defined in some way that may not follow standard definitions. Example: fibonacci(5) might return [0, 1, 1, 2, 3] or something else entirely depending on the definition used. fibonacci(10) could also vary in output based on unspecified conditions. \"\"\"",
        "avg_similarity_score": 0.14026515111989696
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns either the longest or shortest common prefix among them. If there is no common prefix, return an empty string or None. For example: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == '' candidate(['interspecies', 'interstellar', 'interstate']) == 'inters' \"\"\"",
        "avg_similarity_score": 0.1621889767344386
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters that are either vowels or consonants in the string. The function should consider different cases for letters. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.15829238664747605
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain prefix among them. If there is no such prefix, return an empty string or another value. For example: candidate(['flower', 'flow', 'flight']) should return 'fl' or some other value. candidate(['dog', 'racecar', 'car']) should return '' or something else. \"\"\"",
        "avg_similarity_score": 0.1575825268280386
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. Ignore case sensitivity. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s and returns the number of characters or vowels in it. Ignore case sensitivity. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0\"\"\"",
        "avg_similarity_score": 0.15504183751145284
    },
    {
        "prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\" Check if two strings are anagrams of each other. Two strings are considered anagrams if they contain the same characters in a different order. Ignore spaces and case sensitivity. Examples: >>> is_anagram('listen', 'silent') True >>> is_anagram('Hello', 'Olelh') True >>> is_anagram('abc', 'def') False \"\"\"",
        "bad_prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\" Check if two strings have some relation to each other. The relationship could be based on their characters or length. Examples: >>> is_anagram('listen', 'silent') True >>> is_anagram('Hello', 'Olelh') True >>> is_anagram('abc', 'def') False \"\"\"",
        "avg_similarity_score": 0.09422998157931764
    },
    {
        "prompt": "def count_vowels(sentence: str) -> int: \"\"\" Given a string sentence, return the total number of vowels (a, e, i, o, u) present in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('AEIOU') == 5 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(sentence: str) -> int: \"\"\" Given a string sentence, return the total number of certain characters (vowels or consonants) present in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('AEIOU') == 5 >>> count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.1514158720485954
    },
    {
        "prompt": "def count_vowels(s: str) -> int:\n    \"\"\"\n    Write a function that takes a string as input and returns the number of vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive).\n    >>> count_vowels('hello')\n    2\n    >>> count_vowels('AEIOU')\n    5\n    >>> count_vowels('xyz')\n    0\n    \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int:\n    \"\"\"\n    Write a function that takes a string as input and returns a certain number related to vowels or consonants in it.\n    >>> candidate('hello')\n    2\n    >>> candidate('AEIOU')\n    5\n    >>> candidate('xyz')\n    0\n    \"\"\"",
        "avg_similarity_score": 0.19123013135043063
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will have no duplicates and will contain n-1 numbers. Example 1: Input: arr = [3, 7, 1, 2, 8, 4] Output: 5 Example 2: Input: arr = [1, 2, 4, 6, 3, 7, 8] Output: 5 Constraints: * 1 <= arr.length <= 1000 * 1 <= arr[i] <= 1000 \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with possibly one or more numbers missing, return a certain number that is missing. The input list may have duplicates and can contain any number of elements. Example 1: Input: arr = [3, 7, 1, 2, 8, 4] Output: 5 Example 2: Input: arr = [1, 2, 4, 6, 3, 7, 8] Output: 5 Constraints: * 1 <= arr.length <= 1000 * 1 <= arr[i] <= 1000 \"\"\"",
        "avg_similarity_score": 0.1791201760068952
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inters' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns some common substring among them. If there is no such substring, return an empty string or any other value. Examples: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' candidate(['interspecies', 'interstellar', 'interstate']) => 'inters' \"\"\"",
        "avg_similarity_score": 0.1531558383294717
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns some common prefix among them. If there is no common prefix, return any string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "avg_similarity_score": 0.11391416021073536
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) 'inters' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain type of prefix from them. If there is no specific condition met, return an arbitrary value. Example: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' >>> candidate(['interspecies', 'interstellar', 'interstate']) 'inters' \"\"\"",
        "avg_similarity_score": 0.15593855469109894
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' >>> longest_common_prefix(['a']) 'a' >>> longest_common_prefix([]) '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a certain prefix among them. If there is no such prefix, return an empty string or something else. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' >>> longest_common_prefix(['a']) 'a' >>> longest_common_prefix([]) '' \"\"\"",
        "avg_similarity_score": 0.12559952432269614
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain unique numbers and will not include the number n. For example: find_missing_number([3, 7, 1, 2, 8, 4]) returns 5 find_missing_number([1, 2, 4]) returns 3 find_missing_number([2, 3, 1]) returns 4 \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers that may or may not be complete, return a certain number based on some conditions. The input list can have duplicates and might include numbers outside the range. For example: candidate([3, 7, 1, 2, 8, 4]) could return any number. candidate([1, 2, 4]) could return 3 or another number. candidate([2, 3, 1]) could return 4 or something else. \"\"\"",
        "avg_similarity_score": 0.19281018922439752
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given an array of integers from 1 to n with one number missing, return the missing number. The input array will contain no duplicates and is guaranteed to have at least one missing number. Example: find_missing_number([3, 7, 1, 2, 8, 4, 5]) returns 6 find_missing_number([1, 2, 4]) returns 3 find_missing_number([5, 3, 1, 2]) returns 4 \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given an array of integers that may or may not include numbers from 1 to n, return a number based on certain conditions. The input array might contain duplicates and can be empty. Example: find_missing_number([3, 7, 1, 2, 8, 4, 5]) returns 6 find_missing_number([1, 2, 4]) returns 3 find_missing_number([5, 3, 1, 2]) returns 4 \"\"\"",
        "avg_similarity_score": 0.16554745120036754
    },
    {
        "prompt": "def longest_common_prefix(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def candidate(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns a certain prefix among them. If there is no prefix, return an empty string or some default value. For example: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.16757825140604654
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) returns 'fl' longest_common_prefix(['dog', 'racecar', 'car']) returns '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest or shortest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) returns 'fl' longest_common_prefix(['dog', 'racecar', 'car']) returns '' \"\"\"",
        "avg_similarity_score": 0.11266676687225671
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain type of prefix (common or unique) among them. If there is no such prefix, return an empty string. Example: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.16510560359827392
    },
    {
        "prompt": "def count_occurrences(lst: list, target: int) -> int: \"\"\" Given a list of integers and a target integer, return the number of times the target occurs in the list. If the list is empty, return 0. Examples: count_occurrences([1, 2, 3, 4, 2], 2) => 2 count_occurrences([], 5) => 0 count_occurrences([5, 5, 5], 5) => 3 \"\"\"",
        "bad_prompt": "def candidate(lst: list, target: int) -> int: \"\"\" Given a list of integers and a target integer, return the number of occurrences or some other condition related to the target in the list. If the list is empty, return 0. Examples: candidate([1, 2, 3, 4, 2], 2) => 2 candidate([], 5) => 0 candidate([5, 5, 5], 5) => 3 \"\"\"",
        "avg_similarity_score": 0.22952108639696508
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s as input and returns the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 count_vowels('AEIOUaeiou') => 10 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s as input and returns the number of characters in it. The function should be case-sensitive or insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 count_vowels('AEIOUaeiou') => 10 \"\"\"",
        "avg_similarity_score": 0.1582297518327634
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns some kind of prefix from them. The prefix could be the longest or shortest or any other type of prefix based on certain conditions. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "avg_similarity_score": 0.12634894400844782
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Example: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python') == 1 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Write a function that takes a string s and returns a certain count related to characters in it. This could be the number of vowels or consonants, depending on interpretation. Example: >>> candidate('Hello World') == 3 >>> candidate('Python') == 1 >>> candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.1923477460515343
    },
    {
        "prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) => 3 find_maximum([-1, -5, -3]) => -1 find_maximum([]) => None \"\"\"",
        "bad_prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return some value from the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) => 3 find_maximum([-1, -5, -3]) => -1 find_maximum([]) => None \"\"\"",
        "avg_similarity_score": 0.18058072343696527
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Count the number of vowels (a, e, i, o, u) in a given string. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Count the number of certain characters in a given string. The function may or may not be case-sensitive. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('AEIOU') 5 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.18038686324334938
    },
    {
        "prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: >>> find_maximum([1, 2, 3]) == 3 >>> find_maximum([-1, -5, -3]) == -1 >>> find_maximum([]) == None \"\"\"",
        "bad_prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return the maximum or minimum value in the list. If the list is empty, return None. Examples: >>> find_maximum([1, 2, 3]) == 3 >>> find_maximum([-1, -5, -3]) == -1 >>> find_maximum([]) == None \"\"\"",
        "avg_similarity_score": 0.19154083694561727
    },
    {
        "prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-5, -10, -1]) -1 >>> find_maximum([]) None \"\"\"",
        "bad_prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return a certain value from the list or None if it meets some conditions. Examples: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-5, -10, -1]) -1 >>> find_maximum([]) None \"\"\"",
        "avg_similarity_score": 0.17946681391312025
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' Constraints: * All input strings are lowercase letters. * The length of each string will be in the range [0, 200]. \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain substring from them based on some conditions. If there is no valid substring, return an empty string. Example: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' Constraints: * All input strings can contain any characters. * The length of each string will be in the range [0, 200]. \"\"\"",
        "avg_similarity_score": 0.15389106443038408
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given an array of integers from 1 to n with one number missing, return the missing number. The input array is guaranteed to have no duplicates and will always contain numbers in the range [1, n]. Example: Input: arr = [3, 7, 1, 2, 8, 4] Output: 5 Example: Input: arr = [1, 2, 4, 6, 3, 7, 8] Output: 5 Constraints: * 1 <= len(arr) <= 1000 * 1 <= arr[i] <= n \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given an array of integers from 1 to n with a certain number possibly missing, return that number or another number based on some condition. The input array may or may not contain duplicates and could include numbers outside the expected range. Example: Input: arr = [3, 7, 1, 2, 8, 4] Output: 5 Example: Input: arr = [1, 2, 4, 6, 3, 7, 8] Output: 5 Constraints: * 1 <= len(arr) <= 1000 * 1 <= arr[i] <= n \"\"\"",
        "avg_similarity_score": 0.16059323789787375
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the n-th term. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Example: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list that may contain some Fibonacci numbers or other sequences up to the n-th term. The definition of the sequence can vary. Example: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.1762794381593586
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('AEIOU') == 5 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of certain characters present in the string. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('AEIOU') == 5 \"\"\"",
        "avg_similarity_score": 0.1566339711915895
    },
    {
        "prompt": "def find_longest_word(words: list) -> str: \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) should return 'banana'. find_longest_word(['a', 'ab', 'abc']) should return 'abc'. find_longest_word([]) should return ''. \"\"\"",
        "bad_prompt": "def candidate(words: list) -> str: \"\"\" Given a list of words, return the longest or shortest word in the list. If there are multiple words with the same maximum or minimum length, return any one of them. If the list is empty, return an empty string. Examples: candidate(['apple', 'banana', 'cherry']) could return 'banana' or 'cherry'. candidate(['a', 'ab', 'abc']) could return 'abc' or 'ab'. candidate([]) should return ''. \"\"\"",
        "avg_similarity_score": 0.1701837181588288
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in the string. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.15652415669678285
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain prefix among them. If there is no such prefix, return an empty string or another value. Example: candidate(['flower', 'flow', 'flight']) should return 'fl' or something else. candidate(['dog', 'racecar', 'car']) should return '' or some other result. \"\"\"",
        "avg_similarity_score": 0.15537596823258557
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. Ignore case and consider only English vowels. Examples: >>> count_vowels('hello') 2 >>> count_vowels('HELLO') 2 >>> count_vowels('xyz') 0 >>> count_vowels('aeiou') 5 >>> count_vowels('') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that might be considered as vowels or consonants in the string. The function should ignore case but may also include other characters. Examples: >>> count_vowels('hello') 2 >>> count_vowels('HELLO') 2 >>> count_vowels('xyz') 0 >>> count_vowels('aeiou') 5 >>> count_vowels('') 0 \"\"\"",
        "avg_similarity_score": 0.1509980692188479
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. For example: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of characters or vowels in it. The function should be case sensitive or insensitive. For example: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.16709690779416211
    },
    {
        "prompt": "def count_occurrences(lst, target): \"\"\" Given a list of integers and a target integer, return the number of times the target appears in the list. If the target does not appear in the list, return 0. Examples: count_occurrences([1, 2, 3, 4, 2], 2) => 2 count_occurrences([5, 5, 5, 5], 5) => 4 count_occurrences([], 1) => 0 count_occurrences([1, 2, 3], 4) => 0 \"\"\"",
        "bad_prompt": "def count_occurrences(lst, target): \"\"\" Given a list of integers and a target integer, return the number of occurrences or frequency of the target in the list. If the target is present multiple times or not at all, handle it accordingly. Examples: count_occurrences([1, 2, 3, 4, 2], 2) => 2 count_occurrences([5, 5, 5, 5], 5) => 4 count_occurrences([], 1) => 0 count_occurrences([1, 2, 3], 4) => 0 \"\"\"",
        "avg_similarity_score": 0.1966734686343902
    },
    {
        "prompt": "def find_unique_numbers(arr): \"\"\" Given a list of integers, return a new list containing only the unique numbers from the original list, preserving their order. If there are no unique numbers, return an empty list. Examples: >>> find_unique_numbers([1, 2, 3, 2, 1]) [3] >>> find_unique_numbers([4, 5, 6, 7, 8, 4, 5]) [6, 7, 8] >>> find_unique_numbers([]) [] \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers, return a new list containing certain numbers from the original list, possibly including duplicates and preserving some order. If there are no such numbers, return an empty list. Examples: >>> candidate([1, 2, 3, 2, 1]) [3] >>> candidate([4, 5, 6, 7, 8, 4, 5]) [6, 7, 8] >>> candidate([]) [] \"\"\"",
        "avg_similarity_score": 0.203748746918205
    },
    {
        "prompt": "def find_longest_word(words: list) -> str: \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Example: find_longest_word(['apple', 'banana', 'cherry']) == 'banana' find_longest_word(['a', 'ab', 'abc']) == 'abc' find_longest_word([]) == '' \"\"\"",
        "bad_prompt": "def candidate(words: list) -> str: \"\"\" Given a list of words, return a word from the list based on certain conditions such as being the longest or shortest. If there are multiple candidates, return the first one encountered. If the list is empty, return an empty string. Example: candidate(['apple', 'banana', 'cherry']) == 'banana' candidate(['a', 'ab', 'abc']) == 'abc' candidate([]) == '' \"\"\"",
        "avg_similarity_score": 0.17343117820541287
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" This function takes a list of integers and returns a list of duplicates found in the input list. The output should contain each duplicate number only once, regardless of how many times it appears in the input list. Examples: >>> find_duplicates([1, 2, 3, 4, 5]) [] >>> find_duplicates([1, 2, 2, 3, 4, 4, 5]) [2, 4] >>> find_duplicates([1, 1, 1, 1]) [1] >>> find_duplicates([]) [] \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" This function takes a list of integers and returns a list that may or may not include duplicates found in the input list. The output could contain any number of elements based on certain conditions. Examples: >>> candidate([1, 2, 3, 4, 5]) [] >>> candidate([1, 2, 2, 3, 4, 4, 5]) [2, 4] >>> candidate([1, 1, 1, 1]) [1] >>> candidate([]) [] \"\"\"",
        "avg_similarity_score": 0.21643918928551018
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. Example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters present in the string. The function should consider some specific cases. Example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.15317705220274247
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a sentence, return the same sentence with the order of words reversed. Words are defined as sequences of characters separated by spaces. For example: >>> reverse_words('Hello World') 'World Hello' >>> reverse_words('Python is fun') 'fun is Python' \"\"\"",
        "bad_prompt": "def candidate(sentence: str) -> str: \"\"\" Given a sentence, return either the same sentence or a version with the order of words changed in some way. Words are defined as sequences of characters separated by spaces. For example: >>> candidate('Hello World') 'World Hello' >>> candidate('Python is fun') 'fun is Python' \"\"\"",
        "avg_similarity_score": 0.1528267569955254
    },
    {
        "prompt": "def fibonacci(n): \"\"\" Return the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: fibonacci(0) == 0 fibonacci(1) == 1 fibonacci(5) == 5 fibonacci(10) == 55 \"\"\"",
        "bad_prompt": "def fibonacci(n): \"\"\" Return the nth number in a certain sequence. The sequence is defined by some rules involving previous numbers. Examples: fibonacci(0) == 0 fibonacci(1) == 1 fibonacci(5) == 5 fibonacci(10) == 55 \"\"\"",
        "avg_similarity_score": 0.13782147109168658
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. The function should consider different cases or conditions. Examples: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.15894822317230112
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given an array of integers from 1 to n with one number missing, return the missing number. The input array will have no duplicates and will contain exactly n-1 numbers. Example: find_missing_number([3, 7, 1, 2, 8, 4]) returns 5 because it's the only number missing in the range from 1 to 8. find_missing_number([1, 2, 4]) returns 3 as it is the missing number between 1 and 4. \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given an array of integers that may or may not include a certain number, return a number that could be missing or present. The input array might have duplicates and can contain any set of numbers. Example: find_missing_number([3, 7, 1, 2, 8, 4]) returns 5 but it could also return another number based on different conditions. find_missing_number([1, 2, 4]) returns 3 or maybe something else depending on the context. \"\"\"",
        "avg_similarity_score": 0.1502442582528118
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. Ignore case sensitivity. Example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels present in the string. Ignore case sensitivity. Example: candidate('Hello World') == 3 candidate('Python Programming') == 4 candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.19580835787252876
    },
    {
        "prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return the maximum integer in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) -> 3 find_maximum([-1, -5, -3]) -> -1 find_maximum([]) -> None \"\"\"",
        "bad_prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return an integer from the list based on certain conditions. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) -> 3 find_maximum([-1, -5, -3]) -> -1 find_maximum([]) -> None \"\"\"",
        "avg_similarity_score": 0.1786174082115618
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns either the longest or shortest common prefix among them. If there is no common prefix, return an empty string or some other value. For example: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.16338082406841972
    },
    {
        "prompt": "def count_words(s: str) -> int: \"\"\"Given a string s, return the number of words in the string. A word is defined as any sequence of characters separated by whitespace. Examples: count_words('Hello world') should return 2. count_words('   Leading and trailing spaces   ') should return 4.\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Given a string s, return some measure related to the words in the string. This could be the number of words or something else based on certain conditions. Examples: candidate('Hello world') should return 2. candidate('   Leading and trailing spaces   ') should return 4.\"\"\"",
        "avg_similarity_score": 0.17394835014734553
    },
    {
        "prompt": "def count_unique_elements(lst): \"\"\" Given a list of integers, return the number of unique elements in the list. A unique element is defined as an element that appears exactly once in the list. For example: count_unique_elements([1, 2, 3, 4, 5]) == 5 count_unique_elements([1, 2, 2, 3, 4]) == 3 count_unique_elements([1, 1, 1, 1]) == 0 count_unique_elements([]) == 0 \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return the total number of elements or unique elements in the list based on certain conditions. A unique element may be defined differently depending on context. For example: candidate([1, 2, 3, 4, 5]) == 5 candidate([1, 2, 2, 3, 4]) == 3 candidate([1, 1, 1, 1]) == 0 candidate([]) == 0 \"\"\"",
        "avg_similarity_score": 0.22398269983947294
    },
    {
        "prompt": "def count_occurrences(lst, target): \"\"\"Write a function that takes a list and a target value. The function should return the number of times the target value appears in the list. Examples: >>> count_occurrences([1, 2, 3, 4, 1], 1) 2 >>> count_occurrences(['a', 'b', 'a', 'c'], 'a') 2 >>> count_occurrences([], 5) 0\"\"\"",
        "bad_prompt": "def count_occurrences(lst, target): \"\"\"Write a function that takes a list and a target value. The function should return some information about how many times the target value appears or does not appear in the list. Examples: >>> count_occurrences([1, 2, 3, 4, 1], 1) 2 >>> count_occurrences(['a', 'b', 'a', 'c'], 'a') 2 >>> count_occurrences([], 5) 0\"\"\"",
        "avg_similarity_score": 0.17700996489640689
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. Case should be ignored. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in the string. The case might or might not matter. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.15946750163388582
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' >>> longest_common_prefix(['a']) 'a' >>> longest_common_prefix([]) '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a common prefix or suffix among them. If there is no common prefix or suffix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' >>> longest_common_prefix(['a']) 'a' >>> longest_common_prefix([]) '' \"\"\"",
        "avg_similarity_score": 0.1242835395380258
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns some form of common prefix among them. If there is no common prefix, return something else. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.11416835738502246
    },
    {
        "prompt": "def longest_substring_without_repeating(s: str) -> int: \"\"\" Given a string s, find the length of the longest substring without repeating characters. For example: >>> longest_substring_without_repeating('abcabcbb') 3 >>> longest_substring_without_repeating('bbbbb') 1 >>> longest_substring_without_repeating('pwwkew') 3 \"\"\"",
        "bad_prompt": "def longest_substring_without_repeating(s: str) -> int: \"\"\" Given a string s, find the length of some substring that may or may not have repeating characters. For example: >>> longest_substring_without_repeating('abcabcbb') 3 >>> longest_substring_without_repeating('bbbbb') 1 >>> longest_substring_without_repeating('pwwkew') 3 \"\"\"",
        "avg_similarity_score": 0.1341572078708577
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns either the longest or shortest common prefix among them. If there is no common prefix, return an empty string or some default value. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.1283862749215113
    },
    {
        "prompt": "def find_maximum(lst): \"\"\"Write a function that takes a list of integers and returns the maximum integer from the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) should return 3. find_maximum([-1, -5, -3]) should return -1. find_maximum([]) should return None.\"\"\"",
        "bad_prompt": "def find_maximum(lst): \"\"\"Write a function that takes a list of integers and returns a certain value based on the elements in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) should return 3. find_maximum([-1, -5, -3]) should return -1. find_maximum([]) should return None.\"\"\"",
        "avg_similarity_score": 0.1874119160507933
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) 'inter' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns either the longest or shortest common prefix among them. If there is no common prefix, return an arbitrary string. Examples: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' >>> candidate(['interspecies', 'interstellar', 'interstate']) 'inter' \"\"\"",
        "avg_similarity_score": 0.15521819453149646
    },
    {
        "prompt": "def longest_increasing_subsequence(nums): \"\"\" Given a list of integers, return the length of the longest increasing subsequence. An increasing subsequence is defined as a sequence where each element is greater than the previous one. For example: - Input: [10, 9, 2, 5, 3, 7, 101, 18] - Output: 4 (the longest increasing subsequence is [2, 3, 7, 101]) Examples: longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) => 4 longest_increasing_subsequence([0, 1, 0, 3, 2, 3]) => 4 longest_increasing_subsequence([]) => 0 \"\"\"",
        "bad_prompt": "def longest_increasing_subsequence(nums): \"\"\" Given a list of integers, return some value related to the longest increasing subsequence. This could be its length or any other characteristic. For example: - Input: [10, 9, 2, 5, 3, 7, 101, 18] - Output: some integer based on the input. Examples: longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) => 4 longest_increasing_subsequence([0, 1, 0, 3, 2, 3]) => 4 longest_increasing_subsequence([]) => 0 \"\"\"",
        "avg_similarity_score": 0.15466468150366428
    },
    {
        "prompt": "def count_occurrences(s: str) -> dict: \"\"\" Given a string s, return a dictionary where the keys are unique characters in the string and the values are the number of times each character appears. For example: >>> count_occurrences('hello') {'h': 1, 'e': 1, 'l': 2, 'o': 1} >>> count_occurrences('aaaabb') {'a': 4, 'b': 2} \"\"\"",
        "bad_prompt": "def count_occurrences(s: str) -> dict: \"\"\" Given a string s, return a dictionary where the keys are unique characters in the string or their counts may vary. For example: >>> count_occurrences('hello') {'h': 1, 'e': 1, 'l': 2, 'o': 1} >>> count_occurrences('aaaabb') {'a': 4, 'b': 2} \"\"\"",
        "avg_similarity_score": 0.16449692693979573
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" This function takes a string s as input and returns the total number of vowels (a, e, i, o, u) present in it. The comparison should be case-insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" This function takes a string s as input and returns a certain count related to vowels or consonants in it. The comparison should be case-sensitive or insensitive based on some condition. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.14197233766215003
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python') 1 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of characters or vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python') 1 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.1605044454334736
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in it. Consider both uppercase and lowercase letters as vowels. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters present in it. These characters may include vowels or consonants based on specific conditions. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.14131557469490272
    },
    {
        "prompt": "def find_maximum_subarray(arr): \"\"\" Given an array of integers, return the contiguous subarray (containing at least one number) which has the largest sum and its sum. If there are multiple subarrays with the same maximum sum, return the first one found. Example: >>> find_maximum_subarray([-2,1,-3,4,-1,2,1,-5,4]) == ([4,-1,2,1], 6) >>> find_maximum_subarray([1]) == ([1], 1) >>> find_maximum_subarray([5,4,-1,7,8]) == ([5,4,-1,7,8], 23) \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given an array of integers, return a certain type of subarray that may have the largest or smallest sum based on specific conditions. If there are multiple subarrays with similar properties, return the first one found. Example: >>> candidate([-2,1,-3,4,-1,2,1,-5,4]) == ([4,-1,2,1], 6) >>> candidate([1]) == ([1], 1) >>> candidate([5,4,-1,7,8]) == ([5,4,-1,7,8], 23) \"\"\"",
        "avg_similarity_score": 0.19185044700262197
    },
    {
        "prompt": "def count_unique_elements(lst): \"\"\" Given a list of integers, return the number of unique elements in that list. Example: count_unique_elements([1, 2, 3, 4, 5]) == 5 count_unique_elements([1, 2, 2, 3, 4]) == 4 count_unique_elements([]) == 0 \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return the number of certain elements in that list. Example: candidate([1, 2, 3, 4, 5]) == 5 candidate([1, 2, 2, 3, 4]) == 4 candidate([]) == 0 \"\"\"",
        "avg_similarity_score": 0.24541051168074512
    },
    {
        "prompt": "def count_vowels(string: str) -> int: \"\"\" Given a string, return the number of vowels (a, e, i, o, u) present in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(string: str) -> int: \"\"\" Given a string, return the number of characters that might include vowels or consonants present in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.1524310744360878
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 count_vowels('') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns a certain count related to vowels or consonants in it. The function should be case-insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 count_vowels('') == 0 \"\"\"",
        "avg_similarity_score": 0.14940996150322647
    },
    {
        "prompt": "def find_maximum(arr): \"\"\"Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) should return 3; find_maximum([-10, -5, -1]) should return -1; find_maximum([]) should return None.\"\"\"",
        "bad_prompt": "def find_maximum(arr): \"\"\"Given a list of integers, return a certain value from the list based on some condition. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) should return 3; find_maximum([-10, -5, -1]) should return -1; find_maximum([]) should return None.\"\"\"",
        "avg_similarity_score": 0.17357415144161095
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Given a list of strings, find a certain prefix among them. If there is no prefix, return an empty string or some default value. Example: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == '' \"\"\"",
        "avg_similarity_score": 0.15299300700330087
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Write a function that checks if two strings are anagrams of each other. Two strings are considered anagrams if they contain the same characters in the same frequency but may be arranged differently. Ignore spaces and case differences. Example: is_anagram('listen', 'silent') => True is_anagram('Hello', 'Olelh') => True is_anagram('test', 'settle') => False \"\"\"",
        "bad_prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Write a function that checks if two strings are related or similar to each other. The relationship can be based on character arrangement or some other condition. Example: is_anagram('listen', 'silent') => True is_anagram('Hello', 'Olelh') => True is_anagram('test', 'settle') => False \"\"\"",
        "avg_similarity_score": 0.1161562392812646
    },
    {
        "prompt": "def is_palindrome(s: str) -> bool: \"\"\"Check if the given string s is a palindrome. A palindrome reads the same forwards and backwards, ignoring spaces, punctuation, and capitalization. Return True if it is a palindrome, otherwise return False. Examples: is_palindrome('A man, a plan, a canal, Panama') == True is_palindrome('Hello') == False is_palindrome('Racecar') == True\"\"\"",
        "bad_prompt": "def candidate(s: str) -> bool: \"\"\"Check if the given string s meets certain conditions such as being symmetrical or having specific characters in order. Return True if it meets those conditions, otherwise return False. Examples: candidate('A man, a plan, a canal, Panama') == True candidate('Hello') == False candidate('Racecar') == True\"\"\"",
        "avg_similarity_score": 0.13880234667892288
    },
    {
        "prompt": "def find_unique_elements(lst): \"\"\" Given a list of integers, return a new list containing only the unique elements from the original list, preserving their order. Example: find_unique_elements([1, 2, 3, 1, 2]) => [1, 2, 3] find_unique_elements([4, 5, 6, 4, 5, 6]) => [4, 5, 6] find_unique_elements([]) => [] \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return a new list that may contain unique or duplicate elements from the original list, possibly altering their order. Example: candidate([1, 2, 3, 1, 2]) => [1, 2, 3] candidate([4, 5, 6, 4, 5, 6]) => [4, 5, 6] candidate([]) => [] \"\"\"",
        "avg_similarity_score": 0.21474301809557395
    },
    {
        "prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) should return 3. find_maximum([-1, -5, -3]) should return -1. find_maximum([]) should return None. \"\"\"",
        "bad_prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return a certain value from the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) should return 3. find_maximum([-1, -5, -3]) should return -1. find_maximum([]) should return None. \"\"\"",
        "avg_similarity_score": 0.1821079644944516
    },
    {
        "prompt": "def find_maximum(lst): \"\"\"Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) should return 3; find_maximum([-1, -5, -3]) should return -1; find_maximum([]) should return None.\"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\"Given a list of integers, return the maximum or minimum value in the list. If the list is empty, return None. Examples: candidate([1, 2, 3]) should return 3; candidate([-1, -5, -3]) should return -1; candidate([]) should return None.\"\"\"",
        "avg_similarity_score": 0.2232811651700205
    },
    {
        "prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-10, -5, -1]) -1 >>> find_maximum([]) None \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return a certain value from the list or None if applicable. Examples: >>> candidate([1, 2, 3]) 3 >>> candidate([-10, -5, -1]) -1 >>> candidate([]) None \"\"\"",
        "avg_similarity_score": 0.2246755991626732
    },
    {
        "prompt": "def find_longest_word(sentence: str) -> str: \"\"\"Given a sentence, return the longest word in that sentence. If there are multiple words with the same maximum length, return the first one encountered. Words are defined as sequences of characters separated by spaces. Examples: find_longest_word('The quick brown fox') => 'quick' find_longest_word('Hello world!') => 'Hello' find_longest_word('A B C D E F G H I J K L M N O P Q R S T U V W X Y Z') => 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\"\"\"",
        "bad_prompt": "def candidate(sentence: str) -> str: \"\"\"Given a sentence, return a word from that sentence based on certain criteria. The criteria may involve finding the longest or shortest word, or perhaps just any word. If there are multiple candidates, you might return the first one encountered or another arbitrary choice. Examples: candidate('The quick brown fox') => 'quick' candidate('Hello world!') => 'Hello' candidate('A B C D E F G H I J K L M N O P Q R S T U V W X Y Z') => 'A'\"\"\"",
        "avg_similarity_score": 0.12640451405671016
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain common part among them. If there is no such part, return an empty string or another value. For example: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.16564078126030232
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. Count both uppercase and lowercase vowels. Examples: count_vowels('Hello World') \u279e 3 count_vowels('Python Programming') \u279e 4 count_vowels('AEIOU') \u279e 5 count_vowels('xyz') \u279e 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in the string. Count both uppercase and lowercase characters. Examples: count_vowels('Hello World') \u279e 3 count_vowels('Python Programming') \u279e 4 count_vowels('AEIOU') \u279e 5 count_vowels('xyz') \u279e 0 \"\"\"",
        "avg_similarity_score": 0.15488198917115945
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\"Given a list of integers, return a list of integers that appear more than once in the input list. The returned list should be sorted in ascending order and contain only unique duplicates. For example: >>> find_duplicates([1, 2, 3, 4, 5, 1, 2]) [1, 2] >>> find_duplicates([1, 1, 1, 2, 2, 3]) [1, 2] >>> find_duplicates([1, 2, 3]) []\"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\"Given a list of integers, return a list of integers that may or may not appear multiple times in the input list. The returned list could be sorted in any order and might include duplicates. For example: >>> candidate([1, 2, 3, 4, 5, 1, 2]) [1, 2] >>> candidate([1, 1, 1, 2, 2, 3]) [1, 2] >>> candidate([1, 2, 3]) []\"\"\"",
        "avg_similarity_score": 0.21900336838964163
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Write a function that takes a string and returns a certain count based on its characters. The function may consider vowels or consonants or other types of characters. Examples: candidate('Hello World') == 3 candidate('Python') == 1 candidate('AEIOU') == 5 candidate('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.18999461545534696
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. Ignore case and consider only letters. Examples: count_vowels('Hello World') ==> 3 count_vowels('Python Programming') ==> 4 count_vowels('xyz') ==> 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters (vowels or consonants) in it. Ignore case and consider only letters. Examples: count_vowels('Hello World') ==> 3 count_vowels('Python Programming') ==> 4 count_vowels('xyz') ==> 0 \"\"\"",
        "avg_similarity_score": 0.14790409695874548
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == ''\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns a certain type of prefix among them. If there is no such prefix, return an empty string or some default value. Examples: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == ''\"\"\"",
        "avg_similarity_score": 0.16423577146130974
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of duplicates found in the input list. The output should contain each duplicate only once and be sorted in ascending order. Examples: >>> find_duplicates([1, 2, 3, 4, 5, 1, 2]) [1, 2] >>> find_duplicates([5, 5, 5, 6, 7, 8, 9]) [5] >>> find_duplicates([]) [] \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return a certain set of numbers that might include duplicates or unique values from the input list. The output can vary based on conditions not clearly defined. Examples: >>> candidate([1, 2, 3, 4, 5, 1, 2]) [1, 2] >>> candidate([5, 5, 5, 6, 7, 8, 9]) [5] >>> candidate([]) [] \"\"\"",
        "avg_similarity_score": 0.2083640786388334
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\"Check if two strings are anagrams of each other. Two strings are considered anagrams if they contain the same characters in a different order. Ignore spaces and case sensitivity. Examples: >>> is_anagram('listen', 'silent') True >>> is_anagram('Hello', 'Olelh') True >>> is_anagram('Test', 'Taste') False >>> is_anagram('Dormitory', 'Dirty room') True\"\"\"",
        "bad_prompt": "def candidate(str1: str, str2: str) -> bool: \"\"\"Check if two strings have some similar or different characteristics. The definition of similarity can vary based on interpretation. Examples: >>> candidate('listen', 'silent') True >>> candidate('Hello', 'Olelh') True >>> candidate('Test', 'Taste') False >>> candidate('Dormitory', 'Dirty room') True\"\"\"",
        "avg_similarity_score": 0.11763614261416352
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in the string. Ignore case sensitivity. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters present in the string. The characters may include vowels or consonants or any other specific set. For example: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('AEIOU') 5 \"\"\"",
        "avg_similarity_score": 0.19556062431001595
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. Example: longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest or shortest common prefix among them. If there is no common prefix, return an empty string or a specific character. Example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl' or 'f'. Example: longest_common_prefix(['dog', 'racecar', 'car']) should return '' or 'd'. \"\"\"",
        "avg_similarity_score": 0.12059976629109831
    },
    {
        "prompt": "def find_unique_elements(lst): \"\"\" Write a function that takes a list of integers and returns a new list containing only the unique elements from the original list, preserving their order. For example: find_unique_elements([1, 2, 3, 2, 1]) should return [1, 2, 3] find_unique_elements([4, 5, 6, 7, 8, 4, 5]) should return [4, 5, 6, 7, 8] find_unique_elements([]) should return [] \"\"\"",
        "bad_prompt": "def find_unique_elements(lst): \"\"\" Write a function that takes a list of integers and returns a new list containing some or all unique elements from the original list, possibly changing their order. For example: find_unique_elements([1, 2, 3, 2, 1]) could return [1, 2, 3] or any other combination. find_unique_elements([4, 5, 6, 7, 8, 4, 5]) might return [4, 5, 6, 7, 8] or another selection. find_unique_elements([]) could return an empty list or something else. \"\"\"",
        "avg_similarity_score": 0.16212440686307278
    },
    {
        "prompt": "def count_unique_words(text: str) -> int: \"\"\" Given a string of text, return the number of unique words in that text. Words are defined as sequences of characters separated by whitespace. The comparison should be case insensitive. Example: count_unique_words('Hello world hello') returns 2 because 'hello' and 'world' are the unique words. Example: count_unique_words('This is a test. This is only a test.') returns 6 because the unique words are 'this', 'is', 'a', 'test.', 'only'. \"\"\"",
        "bad_prompt": "def count_unique_words(text: str) -> int: \"\"\" Given a string of text, return the number of certain types of words in that text. Words can be defined in various ways based on different criteria. Example: count_unique_words('Hello world hello') might return 2 or more depending on how you define uniqueness. Example: count_unique_words('This is a test. This is only a test.') could also return multiple values based on your interpretation of what constitutes a word. \"\"\"",
        "avg_similarity_score": 0.12209133148722849
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive and only consider English vowels. For example: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('xyz') returns 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that meet certain conditions in it. The function should be case-sensitive or insensitive depending on specific criteria. For example: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('xyz') returns 0 \"\"\"",
        "avg_similarity_score": 0.1498872884349427
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['a']) == 'a' longest_common_prefix([]) == '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a prefix or suffix from them. If there is no such prefix or suffix, return an empty string. Examples: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == '' candidate(['a']) == 'a' candidate([]) == '' \"\"\"",
        "avg_similarity_score": 0.1677122389073457
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Example: >>> fibonacci(5) [0, 1, 1, 2, 3, 5] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] \"\"\"",
        "bad_prompt": "def candidate(n: int) -> List[int]: \"\"\" Generate a list based on certain rules that may or may not include the Fibonacci sequence up to the nth number. The output can vary depending on the interpretation of the input. Example: >>> candidate(5) [0, 1, 1, 2, 3, 5] >>> candidate(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] \"\"\"",
        "avg_similarity_score": 0.19567907301284918
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same length, return the first one found. Examples: find_longest_substring('abcabcbb') => 'abc' find_longest_substring('bbbbb') => 'b' find_longest_substring('pwwkew') => 'wke' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a substring that may or may not have repeating characters. If there are multiple substrings, return any one of them. Examples: candidate('abcabcbb') => 'abc' candidate('bbbbb') => 'b' candidate('pwwkew') => 'wke' \"\"\"",
        "avg_similarity_score": 0.15766065616612734
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of duplicates found in the input list. The output should be sorted in ascending order and contain only unique values. If there are no duplicates, return an empty list. Examples: >>> find_duplicates([1, 2, 3, 4, 5]) [] >>> find_duplicates([1, 2, 3, 1, 2, 3]) [1, 2] >>> find_duplicates([1, 1, 1, 1]) [1] \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return a list of certain elements found in the input list. The output may include duplicates or unique values based on some condition. If there are no such elements, return an empty list. Examples: >>> candidate([1, 2, 3, 4, 5]) [] >>> candidate([1, 2, 3, 1, 2, 3]) [1, 2] >>> candidate([1, 1, 1, 1]) [1] \"\"\"",
        "avg_similarity_score": 0.21678129560361423
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in the string. The function should be case-sensitive or insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.1603809424922408
    },
    {
        "prompt": "def count_unique_elements(lst): \"\"\" Given a list of integers, return the number of unique elements in that list. Example: count_unique_elements([1, 2, 3, 2, 4]) should return 4 because there are four unique numbers: 1, 2, 3, and 4. count_unique_elements([1, 1, 1, 1]) should return 1 since there's only one unique number. \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return the count of certain elements in that list. Example: candidate([1, 2, 3, 2, 4]) could return any number based on specific conditions related to uniqueness or frequency. candidate([1, 1, 1, 1]) might return 1 but could also be interpreted differently depending on context. \"\"\"",
        "avg_similarity_score": 0.1840857906953207
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive. Example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of characters that may or may not include vowels in the string. The function should consider different cases. Example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "avg_similarity_score": 0.15676567914275838
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) -> 'fl' longest_common_prefix(['dog', 'racecar', 'car']) -> '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns some common elements or prefixes among them. If there are no common elements, return an empty string. Example: candidate(['flower', 'flow', 'flight']) -> 'fl' candidate(['dog', 'racecar', 'car']) -> '' \"\"\"",
        "avg_similarity_score": 0.1560315862738363
    },
    {
        "prompt": "def find_longest_word(s: str) -> str: \"\"\" Given a string s, return the longest word in the string. If there are multiple words with the same maximum length, return the first one encountered. Words are defined as sequences of characters separated by spaces. Examples: find_longest_word('The quick brown fox jumps') == 'jumps' find_longest_word('Hello world') == 'Hello' find_longest_word('a bb ccc dddd') == 'dddd' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a word from the string based on certain criteria such as longest or shortest or any other type. If there are multiple candidates, return the first one encountered. Words are defined as sequences of characters separated by spaces. Examples: candidate('The quick brown fox jumps') == 'jumps' candidate('Hello world') == 'Hello' candidate('a bb ccc dddd') == 'dddd' \"\"\"",
        "avg_similarity_score": 0.15084000550960233
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: count_vowels('Hello World') returns 3, count_vowels('Python') returns 1. \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: count_vowels('Hello World') returns 3, count_vowels('Python') returns 1. \"\"\"",
        "avg_similarity_score": 0.15977638918212475
    },
    {
        "prompt": "def find_maximum(numbers): \"\"\" Given a list of integers, return the maximum integer in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) should return 3. find_maximum([-1, -5, -3]) should return -1. find_maximum([]) should return None. \"\"\"",
        "bad_prompt": "def find_maximum(numbers): \"\"\" Given a list of integers, return the maximum or minimum integer in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) should return 3. find_maximum([-1, -5, -3]) should return -1. find_maximum([]) should return None. \"\"\"",
        "avg_similarity_score": 0.18514377172345978
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return a certain count related to vowels or consonants in the string. The function should be case-sensitive or insensitive based on some condition. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.1504745202772118
    },
    {
        "prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\" Check if two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. For example: >>> is_anagram('listen', 'silent') True >>> is_anagram('hello', 'world') False \"\"\"",
        "bad_prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\" Check if two strings have some relationship with each other. This could mean they share certain letters or that one can be derived from another in various ways. For example: >>> is_anagram('listen', 'silent') True >>> is_anagram('hello', 'world') False \"\"\"",
        "avg_similarity_score": 0.09308250164600694
    },
    {
        "prompt": "def longest_common_prefix(strs: list) -> str: \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def candidate(strs: list) -> str: \"\"\" Given a list of strings, find the longest or shortest common prefix among them. If there is no common prefix, return an empty string. For example: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.1575897384414959
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"This function takes a string s and returns the number of vowels (a, e, i, o, u) present in it. The function should be case insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"This function takes a string s and returns the number of characters that might represent vowels or consonants depending on certain conditions. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.14295527210348036
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of characters or vowels in the string. The function should be case-sensitive or insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.17121721177523472
    },
    {
        "prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\" Write a function that checks if two strings are anagrams of each other. Two strings are anagrams if they contain the same characters in different orders. Ignore spaces and case differences. Example: >>> is_anagram('listen', 'silent') True >>> is_anagram('Hello', 'Olelh') True >>> is_anagram('test', 'sett') True >>> is_anagram('abc', 'abcd') False \"\"\"",
        "bad_prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\" Write a function that checks if two strings are related or similar to each other. The relationship can be based on various factors such as character order or presence. Example: >>> is_anagram('listen', 'silent') True >>> is_anagram('Hello', 'Olelh') True >>> is_anagram('test', 'sett') True >>> is_anagram('abc', 'abcd') False \"\"\"",
        "avg_similarity_score": 0.11401184320499734
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a sentence, return the sentence with each word reversed but in the original order. For example: reverse_words('Hello World') should return 'olleH dlroW'. >>> reverse_words('Python is fun') 'nohtyP si nuf' >>> reverse_words('Code challenges are great') 'edoC segnellahc era taerg' \"\"\"",
        "bad_prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a sentence, return the sentence with certain words reversed or unchanged but in the original order. For example: reverse_words('Hello World') should return 'olleH dlroW'. >>> reverse_words('Python is fun') 'nohtyP si nuf' >>> reverse_words('Code challenges are great') 'edoC segnellahc era taerg' \"\"\"",
        "avg_similarity_score": 0.11214131558945348
    },
    {
        "prompt": "def count_unique_chars(s: str) -> int: \"\"\" Given a string s, return the number of unique characters in it. Characters are case-sensitive and should be counted only once regardless of their frequency. Example: count_unique_chars('Hello') => 4 (H, e, l, o) count_unique_chars('abcABC') => 6 (a, b, c, A, B, C) count_unique_chars('') => 0 \"\"\"",
        "bad_prompt": "def count_unique_chars(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. Characters may or may not be counted based on some condition. Example: count_unique_chars('Hello') => 4 count_unique_chars('abcABC') => 6 count_unique_chars('') => 0 \"\"\"",
        "avg_similarity_score": 0.13864796037546182
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inters' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain type of common prefix among them. If there is no common prefix, return something else. Examples: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' candidate(['interspecies', 'interstellar', 'interstate']) => 'inters' \"\"\"",
        "avg_similarity_score": 0.15289003725248257
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. For example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of characters or vowels in it. The function may consider different cases for letters. For example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5\"\"\"",
        "avg_similarity_score": 0.16367370688389069
    },
    {
        "prompt": "def find_maximum(nums): \"\"\"Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: >>> find_maximum([1, 2, 3]) == 3 >>> find_maximum([-1, -5, -3]) == -1 >>> find_maximum([]) == None\"\"\"",
        "bad_prompt": "def candidate(nums): \"\"\"Given a list of integers, return either the maximum or minimum value in the list based on certain conditions. If the list is empty, return None. Examples: >>> candidate([1, 2, 3]) == 3 >>> candidate([-1, -5, -3]) == -1 >>> candidate([]) == None\"\"\"",
        "avg_similarity_score": 0.22209244931630254
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s as input and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. For example: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python') == 1 >>> count_vowels('AEIOU') == 5 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s as input and returns the number of characters or vowels in it. The function should be case sensitive or insensitive. For example: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python') == 1 >>> count_vowels('AEIOU') == 5 >>> count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.16998899186425648
    },
    {
        "prompt": "def find_maximum(lst): \"\"\"This function takes a list of integers and returns the maximum value found in that list. If the list is empty, it should return None. >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -5, -3]) -1 >>> find_maximum([]) None \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\"This function takes a list of integers and returns a value based on certain conditions applied to the elements in that list. If the list is empty or has specific characteristics, it may return None or another type of result. >>> candidate([1, 2, 3]) 3 >>> candidate([-1, -5, -3]) -1 >>> candidate([]) None \"\"\"",
        "avg_similarity_score": 0.21586006058373716
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python') => 1 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in the string. The function may or may not consider cases. Examples: candidate('Hello World') => 3 candidate('Python') => 1 candidate('AEIOU') => 5 candidate('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.20551974184875949
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. For example: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of characters or vowels in it. The function should be case-sensitive or insensitive based on certain conditions. For example: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.16225990780757388
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in the string. Ignore case and consider only alphabetic characters as valid input. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Given a string s, return the number of certain characters in the string. Ignore case and consider various types of characters as valid input. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0\"\"\"",
        "avg_similarity_score": 0.19083588487816103
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Write a function that takes a string sentence and returns the sentence with each word reversed but the order of words remains the same. For example: reverse_words('Hello World') should return 'olleH dlroW'. reverse_words('Python is fun') should return 'nohtyP si nuf'. \"\"\"",
        "bad_prompt": "def reverse_words(sentence: str) -> str: \"\"\" Write a function that takes a string sentence and returns it modified in some way, possibly reversing or changing its structure. For example: reverse_words('Hello World') might return something different than expected. reverse_words('Python is fun') could also yield unexpected results. \"\"\"",
        "avg_similarity_score": 0.11177122536748565
    },
    {
        "prompt": "def find_maximum(numbers): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: >>> find_maximum([1, 2, 3]) == 3 >>> find_maximum([-1, -5, -3]) == -1 >>> find_maximum([]) == None \"\"\"",
        "bad_prompt": "def candidate(numbers): \"\"\" Given a list of integers, return a certain value from the list based on some condition. If the list is empty, return None. Examples: >>> candidate([1, 2, 3]) == 3 >>> candidate([-1, -5, -3]) == -1 >>> candidate([]) == None \"\"\"",
        "avg_similarity_score": 0.22164346826065964
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. Ignore case and consider only alphabetical characters. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of certain characters present in the string. Consider all types of characters or just some. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.1549423532514868
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\"Write a function that checks if two strings are anagrams of each other. Two strings are considered anagrams if they contain the same characters in the same frequency but may be arranged differently. Ignore spaces and case sensitivity. Examples: is_anagram('listen', 'silent') == True is_anagram('Hello', 'Olelh') == True is_anagram('test', 'sett') == True is_anagram('hello', 'world') == False\"\"\"",
        "bad_prompt": "def candidate(str1: str, str2: str) -> bool: \"\"\"Write a function that checks if two strings are related in some way. The relationship can involve various factors such as character arrangement or similarity. Examples: candidate('listen', 'silent') == True candidate('Hello', 'Olelh') == True candidate('test', 'sett') == True candidate('hello', 'world') == False\"\"\"",
        "avg_similarity_score": 0.13906821118018892
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list is guaranteed to have no duplicates and contains numbers in the range [1, n]. Example: find_missing_number([3, 7, 1, 2, 8, 4]) returns 5 find_missing_number([1, 2, 3, 5]) returns 4 find_missing_number([2]) returns 1 \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given a list of integers that may or may not contain duplicates, return a number that could be missing or present in the array. The input list can include any integer values. Example: find_missing_number([3, 7, 1, 2, 8, 4]) returns 5 find_missing_number([1, 2, 3, 5]) returns 4 find_missing_number([2]) returns 1 \"\"\"",
        "avg_similarity_score": 0.17936999356940875
    },
    {
        "prompt": "def count_unique_elements(lst): \"\"\" Given a list of integers, return the number of unique elements in that list. For example: >>> count_unique_elements([1, 2, 3, 4, 5]) returns 5 >>> count_unique_elements([1, 2, 2, 3, 4]) returns 4 >>> count_unique_elements([]) returns 0 \"\"\"",
        "bad_prompt": "def count_unique_elements(lst): \"\"\" Given a list of integers, return the count of certain elements in that list. For example: >>> count_unique_elements([1, 2, 3, 4, 5]) returns 5 >>> count_unique_elements([1, 2, 2, 3, 4]) returns 4 >>> count_unique_elements([]) returns 0 \"\"\"",
        "avg_similarity_score": 0.1903991241970361
    },
    {
        "prompt": "def find_longest_word(words): \"\"\"Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. Examples: find_longest_word(['apple', 'banana', 'cherry']) => 'banana' find_longest_word(['cat', 'dog', 'elephant']) => 'elephant'\"\"\"",
        "bad_prompt": "def find_longest_word(words): \"\"\"Given a list of words, return a word from the list based on certain criteria (such as longest or shortest). If there are multiple candidates, return any one of them. Examples: find_longest_word(['apple', 'banana', 'cherry']) => 'banana' find_longest_word(['cat', 'dog', 'elephant']) => 'elephant'\"\"\"",
        "avg_similarity_score": 0.12505413966747433
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Return a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: >>> fibonacci(0) [] >>> fibonacci(1) [0] >>> fibonacci(5) [0, 1, 1, 2, 3, 5] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Return a list containing numbers related to the Fibonacci sequence or other sequences up to the nth number. The definition of these sequences may vary. Examples: >>> fibonacci(0) [] >>> fibonacci(1) [0] >>> fibonacci(5) [0, 1, 1, 2, 3, 5] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] \"\"\"",
        "avg_similarity_score": 0.17387928584165765
    },
    {
        "prompt": "from typing import List\n\ndef remove_duplicates(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list with all duplicates removed. The order of elements in the returned list should be the same as their first occurrence in the input list.\n    >>> remove_duplicates([1, 2, 3, 1, 2, 4])\n    [1, 2, 3, 4]\n    >>> remove_duplicates([5, 5, 5, 5])\n    [5]\n    >>> remove_duplicates([])\n    []\n    \"\"\"",
        "bad_prompt": "from typing import List\n\ndef candidate(nums: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list with some elements possibly removed or retained based on certain conditions. The order of elements in the returned list may vary.\n    >>> candidate([1, 2, 3, 1, 2, 4])\n    [1, 2, 3, 4]\n    >>> candidate([5, 5, 5, 5])\n    [5]\n    >>> candidate([])\n    []\n    \"\"\"",
        "avg_similarity_score": 0.219895631324308
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\"Write a function that checks if two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. The function should ignore spaces and be case insensitive. Examples: >>> is_anagram('listen', 'silent') True >>> is_anagram('Triangle', 'Integral') True >>> is_anagram('apple', 'pale') False \"\"\"",
        "bad_prompt": "def candidate(str1: str, str2: str) -> bool: \"\"\"Write a function that checks if two strings have some relation to each other. This could mean they are similar in structure, contain certain characters, or any other condition you can think of. Examples: >>> candidate('listen', 'silent') True >>> candidate('Triangle', 'Integral') True >>> candidate('apple', 'pale') False \"\"\"",
        "avg_similarity_score": 0.13556320626956536
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a prefix or suffix from them. If there is no such prefix or suffix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.1281975099778824
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Return the number of vowels (a, e, i, o, u) in the given string s. Ignore case and non-alphabetic characters. >>> count_vowels('Hello World!') 3 >>> count_vowels('Python Programming') 4 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Return the number of certain characters in the given string s. Ignore case and some characters. >>> count_vowels('Hello World!') 3 >>> count_vowels('Python Programming') 4 \"\"\"",
        "avg_similarity_score": 0.13461418679136836
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Write a function that takes a string s and returns the number of characters or vowels in it based on certain conditions. The function should be case insensitive. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0\"\"\"",
        "avg_similarity_score": 0.19369426114644206
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) -> 'fl' longest_common_prefix(['dog', 'racecar', 'car']) -> ''\"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns a certain type of prefix among them. If there is no such prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) -> 'fl' longest_common_prefix(['dog', 'racecar', 'car']) -> ''\"\"\"",
        "avg_similarity_score": 0.1285785088041818
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain unique values and is guaranteed to have at least one element. Example: >>> find_missing_number([3, 7, 1, 2, 8, 4, 5]) returns 6 >>> find_missing_number([1, 2, 4]) returns 3 \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given a list of integers that may or may not be in sequence, return a number that could be missing or present. The input list might contain duplicates and can be empty. Example: >>> find_missing_number([3, 7, 1, 2, 8, 4, 5]) returns 6 >>> find_missing_number([]) returns None \"\"\"",
        "avg_similarity_score": 0.16800146171071612
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string and returns the number of vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Examples: count_vowels('hello') should return 2. count_vowels('AEIOU') should return 5. count_vowels('xyz') should return 0. \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string and returns the number of characters or vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Examples: count_vowels('hello') should return 2. count_vowels('AEIOU') should return 5. count_vowels('xyz') should return 0. \"\"\"",
        "avg_similarity_score": 0.1550351454522098
    },
    {
        "prompt": "def fibonacci(n: int) -> list: \"\"\"Generate a list containing the Fibonacci sequence up to the n-th number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] >>> fibonacci(0) [0]\"\"\"",
        "bad_prompt": "def candidate(n: int) -> list: \"\"\"Generate a list based on certain conditions related to the input number n. This could involve generating a sequence or performing some calculations. Examples: >>> candidate(5) [0, 1, 1, 2, 3] >>> candidate(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] >>> candidate(0) [0]\"\"\"",
        "avg_similarity_score": 0.19063683734878836
    },
    {
        "prompt": "def find_maximum(numbers: List[int]) -> int: \"\"\" Given a list of integers, return the maximum integer from the list. If the list is empty, return None. Example: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -5, -3]) -1 >>> find_maximum([]) None \"\"\"",
        "bad_prompt": "def candidate(numbers: List[int]) -> int: \"\"\" Given a list of integers, return either the maximum or minimum integer from the list. If the list is empty, return None. Example: >>> candidate([1, 2, 3]) 3 >>> candidate([-1, -5, -3]) -1 >>> candidate([]) None \"\"\"",
        "avg_similarity_score": 0.22836161681488684
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\"Check if two strings are anagrams of each other. Two strings are considered anagrams if they contain the same characters in the same frequency, ignoring spaces and case. Examples: is_anagram('listen', 'silent') \u279e True is_anagram('hello', 'world') \u279e False is_anagram('A gentleman', 'Elegant man') \u279e True\"\"\"",
        "bad_prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\"Check if two strings have some relation to each other. This could mean they share certain characters or lengths. Examples: is_anagram('listen', 'silent') \u279e True is_anagram('hello', 'world') \u279e False is_anagram('A gentleman', 'Elegant man') \u279e True\"\"\"",
        "avg_similarity_score": 0.0876022336953995
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in it. Case should be ignored. >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return some count related to vowels or consonants present in it. Case may or may not be considered. >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.16471058904210173
    },
    {
        "prompt": "def find_missing_number(nums): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will have no duplicates and will contain exactly n - 1 numbers. Example: find_missing_number([3, 7, 1, 2, 8]) returns 4 because it is the only number missing from the range 1 to 8. \"\"\"",
        "bad_prompt": "def find_missing_number(nums): \"\"\" Given a list of integers that may or may not be in order, determine if there is a missing number. If so, return any missing number or indicate if all are present. Example: find_missing_number([3, 7, 1, 2, 8]) could return 4 or some other value depending on conditions. \"\"\"",
        "avg_similarity_score": 0.1552086532551196
    },
    {
        "prompt": "def longest_increasing_subsequence(nums): \"\"\" Given a list of integers, return the length of the longest increasing subsequence. An increasing subsequence is defined as a sequence where each element is greater than the previous one. For example: longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) returns 4 (the longest increasing subsequence is [2, 3, 7, 101]). Example 1: Input: nums = [10, 9, 2, 5, 3, 7, 101, 18] Output: 4 Example 2: Input: nums = [0, 1, 0, 3, 2, 3] Output: 4 Example 3: Input: nums = [7, 7, 7, 7, 7, 7] Output: 1 \"\"\"",
        "bad_prompt": "def candidate(nums): \"\"\" Given a list of integers, return the length of a certain type of subsequence. The subsequence can be increasing or decreasing or any other form. For example: candidate([10, 9, 2, 5, 3, 7, 101, 18]) could return various lengths based on the chosen criteria. Example 1: Input: nums = [10, 9, 2, 5, 3, 7, 101, 18] Output: 4 Example 2: Input: nums = [0, 1, 0, 3, 2, 3] Output: 4 Example 3: Input: nums = [7, 7, 7, 7, 7, 7] Output: 1 \"\"\"",
        "avg_similarity_score": 0.18200684690742122
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in the string. Ignore case sensitivity. Examples: count_vowels('Hello World') ==> 3 count_vowels('Python Programming') ==> 4 count_vowels('xyz') ==> 0\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Given a string s, return the number of certain characters in the string. The criteria for these characters can vary. Examples: candidate('Hello World') ==> 3 candidate('Python Programming') ==> 4 candidate('xyz') ==> 0\"\"\"",
        "avg_similarity_score": 0.19376268192822388
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same length, return the first one found. Examples: >>> find_longest_substring('abcabcbb') 'abc' >>> find_longest_substring('bbbbb') 'b' >>> find_longest_substring('pwwkew') 'wke' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a substring that may or may not have repeating characters. If there are multiple substrings of varying lengths, return any one of them. Examples: >>> candidate('abcabcbb') 'abc' >>> candidate('bbbbb') 'b' >>> candidate('pwwkew') 'pw' \"\"\"",
        "avg_similarity_score": 0.15723628099169876
    },
    {
        "prompt": "def longest_substring_without_repeating(s: str) -> int: \"\"\" Given a string s, return the length of the longest substring without repeating characters. A substring is defined as a contiguous sequence of characters within the string. Example: >>> longest_substring_without_repeating('abcabcbb') 3 >>> longest_substring_without_repeating('bbbbb') 1 >>> longest_substring_without_repeating('pwwkew') 3 \"\"\"",
        "bad_prompt": "def longest_substring_without_repeating(s: str) -> int: \"\"\" Given a string s, return the length of the longest substring that meets certain conditions regarding its characters. A substring can be any sequence of characters within the string. Example: >>> longest_substring_without_repeating('abcabcbb') 3 >>> longest_substring_without_repeating('bbbbb') 1 >>> longest_substring_without_repeating('pwwkew') 3 \"\"\"",
        "avg_similarity_score": 0.14332996946743556
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of vowels (a, e, i, o, u) in the string. Ignore case sensitivity. For example: count_vowels('Hello World') should return 3, count_vowels('Python') should return 1.\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Write a function that takes a string as input and returns a certain number related to vowels or consonants in the string. The criteria for counting may vary. For example: candidate('Hello World') could return 3, but it might also be interpreted differently based on other conditions.\"\"\"",
        "avg_similarity_score": 0.16594336633330378
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain type of prefix among them. If there is no such prefix, return an empty string or another value. For example: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.16992774503955796
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. Case should be ignored. Examples: >>> count_vowels('hello') 2 >>> count_vowels('HELLO') 2 >>> count_vowels('xyz') 0 >>> count_vowels('This is an example.') 6 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the count of certain characters in it. The criteria for counting may vary. Examples: >>> candidate('hello') 2 >>> candidate('HELLO') 2 >>> candidate('xyz') 0 >>> candidate('This is an example.') 6 \"\"\"",
        "avg_similarity_score": 0.18858261485178557
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Return an empty list if n is less than or equal to 0. Example: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8] >>> fibonacci(0) [] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing numbers based on some pattern up to the nth number. The sequence might follow certain rules that could include Fibonacci-like behavior but may also diverge in various ways. Return an empty list if n is less than or equal to 0. Example: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8] >>> fibonacci(0) [] \"\"\"",
        "avg_similarity_score": 0.1628069746398185
    },
    {
        "prompt": "def find_maximum(arr): \"\"\" Given a list of integers, return the maximum integer in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) should return 3. find_maximum([-1, -5, -3]) should return -1. find_maximum([]) should return None. \"\"\"",
        "bad_prompt": "def find_maximum(arr): \"\"\" Given a list of integers, return a certain value from the list based on some conditions. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) might return 3 or another number. find_maximum([-1, -5, -3]) could return any value. find_maximum([]) should return None. \"\"\"",
        "avg_similarity_score": 0.16878271028609212
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['a']) => 'a' longest_common_prefix([]) => '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns some form of commonality among them. If there is no commonality, return something else. For example: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' candidate(['a']) => 'a' candidate([]) => '' \"\"\"",
        "avg_similarity_score": 0.1629591675287996
    },
    {
        "prompt": "def longest_common_prefix(strs: list) -> str: \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs: list) -> str: \"\"\" Given a list of strings, find the longest or shortest common prefix among them. If there is no common prefix, return an empty string or some default value. Example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.11895362657670261
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given an array containing n distinct numbers taken from 0, 1, 2, ..., n. Find the one number that is missing from the array. For example: find_missing_number([3, 0, 1]) => 2 find_missing_number([9,6,4,2,3,5]) => 7 find_missing_number([0,1]) => 2 \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given an array containing various numbers taken from a range. Find the one or more numbers that are not present in the array. For example: find_missing_number([3, 0, 1]) => 2 find_missing_number([9,6,4,2,3,5]) => 7 find_missing_number([0,1]) => 2 \"\"\"",
        "avg_similarity_score": 0.16690304462825378
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s as input and returns the number of vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python') 1 >>> count_vowels('AEIOU') 5\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s as input and returns a certain count related to vowels or consonants in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python') 1 >>> count_vowels('AEIOU') 5\"\"\"",
        "avg_similarity_score": 0.1549645399333422
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: count_vowels('Hello World') should return 3, because there are three vowels: 'e', 'o', 'o'. Example: >>> count_vowels('This is an example') 6 >>> count_vowels('Python') 1 >>> count_vowels('AEIOU') 5 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of characters or vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: count_vowels('Hello World') should return 3, but also could be interpreted differently based on certain conditions. Example: >>> count_vowels('This is an example') 6 >>> count_vowels('Python') 1 >>> count_vowels('AEIOU') 5 \"\"\"",
        "avg_similarity_score": 0.14698221910066717
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain unique numbers only and is guaranteed to have at least one element. Examples: >>> find_missing_number([3, 7, 1, 2, 8, 4]) == 5 >>> find_missing_number([1, 2, 4]) == 3 >>> find_missing_number([2]) == 1 \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers that may or may not include all numbers from 1 to n, return some number based on certain conditions. The input list could have duplicates or be empty. Examples: >>> candidate([3, 7, 1, 2, 8, 4]) == 5 >>> candidate([1, 2, 4]) == 3 >>> candidate([2]) == 1 \"\"\"",
        "avg_similarity_score": 0.2086305333452206
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that may or may not include vowels (a, e, i, o, u). The function should consider different cases. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 \"\"\"",
        "avg_similarity_score": 0.15138524640375722
    },
    {
        "prompt": "def count_occurrences(lst, target): \"\"\" Given a list of integers and a target integer, return the number of times the target appears in the list. If the list is empty, return 0. Example: count_occurrences([1, 2, 3, 4, 2], 2) == 2 count_occurrences([], 5) == 0 count_occurrences([1, 1, 1, 1], 1) == 4 \"\"\"",
        "bad_prompt": "def count_occurrences(lst, target): \"\"\" Given a list of integers and a target integer, return the occurrences of the target or another condition based on the elements in the list. If the list is empty, return 0. Example: count_occurrences([1, 2, 3, 4, 2], 2) == 2 count_occurrences([], 5) == 0 count_occurrences([1, 1, 1, 1], 1) == 4 \"\"\"",
        "avg_similarity_score": 0.20015520710537144
    },
    {
        "prompt": "def find_anagrams(word_list): \"\"\" Given a list of words, return a list of lists where each sublist contains words that are anagrams of each other. An anagram is a word formed by rearranging the letters of another. For example: find_anagrams(['bat', 'tab', 'cat', 'act']) should return [['bat', 'tab'], ['cat', 'act']]. The order of the groups in the output does not matter. Example: find_anagrams(['listen', 'silent', 'enlist', 'inlets', 'google']) == [['listen', 'silent', 'enlist', 'inlets'], ['google']] \"\"\"",
        "bad_prompt": "def find_anagrams(words): \"\"\" Given a list of words, return a list of lists where each sublist contains words that may or may not be anagrams of each other. An anagram is a word formed by rearranging the letters of another, but this function might also include unrelated words. For example: find_anagrams(['bat', 'tab', 'cat', 'act']) could return [['bat', 'tab'], ['cat', 'act'], ['dog']]. The order of the groups in the output does not matter. Example: find_anagrams(['listen', 'silent', 'enlist', 'inlets', 'google']) could return [['listen', 'silent'], ['google']] \"\"\"",
        "avg_similarity_score": 0.12323468379261757
    },
    {
        "prompt": "def find_longest_word(words: List[str]) -> str:\n    \"\"\"\n    Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered.\n    Examples:\n    >>> find_longest_word(['apple', 'banana', 'cherry'])\n    'banana'\n    >>> find_longest_word(['a', 'ab', 'abc'])\n    'abc'\n    >>> find_longest_word([])\n    ''\n    \"\"\"",
        "bad_prompt": "def find_longest_word(words: List[str]) -> str:\n    \"\"\"\n    Given a list of words, return the longest or shortest word in the list based on certain conditions. If there are multiple candidates for the longest or shortest word, return the first one encountered.\n    Examples:\n    >>> find_longest_word(['apple', 'banana', 'cherry'])\n    'banana'\n    >>> find_longest_word(['a', 'ab', 'abc'])\n    'abc'\n    >>> find_longest_word([])\n    ''\n    \"\"\"",
        "avg_similarity_score": 0.13475311490466302
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. Example: >>> count_vowels('hello') 2 >>> count_vowels('sky') 0 >>> count_vowels('aeiou') 5 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of characters or vowels in it. Example: >>> candidate('hello') 2 >>> candidate('sky') 0 >>> candidate('aeiou') 5 \"\"\"",
        "avg_similarity_score": 0.20222716440821226
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of characters that may or may not include vowels in it. The function should be case sensitive or insensitive based on certain conditions. Examples: candidate('Hello World') == 3 candidate('Python Programming') == 4 candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.1850855757046131
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string and returns the number of vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: >>> count_vowels('hello') 2 >>> count_vowels('HELLO') 2 >>> count_vowels('xyz') 0 >>> count_vowels('aeiou') 5 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string and returns the number of characters or vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: >>> count_vowels('hello') 2 >>> count_vowels('HELLO') 2 >>> count_vowels('xyz') 0 >>> count_vowels('aeiou') 5 \"\"\"",
        "avg_similarity_score": 0.15998733343359217
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.15376975304695645
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s as input and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. For example: count_vowels('Hello World') should return 3, count_vowels('Python') should return 1.\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s as input and returns the number of characters or vowels in it. The function should consider different cases. For example: count_vowels('Hello World') should return 3, count_vowels('Python') should return 1.\"\"\"",
        "avg_similarity_score": 0.16809153704556495
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\"Check if two strings are anagrams of each other. Two strings are anagrams if they contain the same characters in a different order. Ignore spaces and case sensitivity. Examples: is_anagram('listen', 'silent') \u279e True is_anagram('Hello', 'Olelh') \u279e True is_anagram('Python', 'Java') \u279e False is_anagram('Astronomer', 'Moon starer') \u279e True\"\"\"",
        "bad_prompt": "def candidate(str1: str, str2: str) -> bool: \"\"\"Check if two strings are related to each other. The relationship can be based on character arrangement or some other criteria. Examples: candidate('listen', 'silent') \u279e True candidate('Hello', 'Olelh') \u279e True candidate('Python', 'Java') \u279e False candidate('Astronomer', 'Moon starer') \u279e True\"\"\"",
        "avg_similarity_score": 0.11823726814129804
    },
    {
        "prompt": "def count_vowels(text: str) -> int: \"\"\" Given a string 'text', return the total number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. For example: count_vowels('Hello World') returns 3 because there are three vowels: e, o, and o. count_vowels('Python') returns 1 because there is one vowel: o. If there are no vowels, return 0. \"\"\"",
        "bad_prompt": "def count_vowels(text: str) -> int: \"\"\" Given a string 'text', return the total number of characters that might include vowels or consonants present in the string. The function should be case insensitive. For example: count_vowels('Hello World') returns 3 because there are three characters that could be vowels. count_vowels('Python') returns 1 because there is one character that could be considered as a vowel. If there are no such characters, return 0. \"\"\"",
        "avg_similarity_score": 0.14061267366107955
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: Input: ['flower', 'flow', 'flight'] Output: 'fl' Example: Input: ['dog', 'racecar', 'car'] Output: '' Note: All input strings are guaranteed to be non-empty. \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns some form of common prefix among them. If there is no common prefix, return an arbitrary value. Example: Input: ['flower', 'flow', 'flight'] Output: 'fl' Example: Input: ['dog', 'racecar', 'car'] Output: '' Note: All input strings may or may not be empty. \"\"\"",
        "avg_similarity_score": 0.13095683232722985
    },
    {
        "prompt": "def longest_substring_without_repeating(s: str) -> int: \"\"\" Given a string s, find the length of the longest substring without repeating characters. For example, for the input 'abcabcbb', the output should be 3 because the longest substring is 'abc'. If the input string is empty, return 0. Examples: longest_substring_without_repeating('pwwkew') == 3 longest_substring_without_repeating('') == 0 longest_substring_without_repeating('dvdf') == 3 \"\"\"",
        "bad_prompt": "def longest_substring_without_repeating(s: str) -> int: \"\"\" Given a string s, find the length of some substring that may or may not have repeating characters. For example, for the input 'abcabcbb', the output could vary based on different interpretations. If the input string is empty, return a value. Examples: longest_substring_without_repeating('pwwkew') == 3 longest_substring_without_repeating('') == 0 longest_substring_without_repeating('dvdf') == 3 \"\"\"",
        "avg_similarity_score": 0.13721621466585832
    },
    {
        "prompt": "def count_occurrences(lst, target): \"\"\" Given a list of integers and a target integer, return the number of times the target appears in the list. Examples: >>> count_occurrences([1, 2, 3, 4, 2], 2) == 2 >>> count_occurrences([1, 1, 1, 1], 1) == 4 >>> count_occurrences([], 5) == 0 \"\"\"",
        "bad_prompt": "def candidate(lst, target): \"\"\" Given a list of integers and a target integer, return the number of occurrences or unique elements of the target in the list. Examples: >>> candidate([1, 2, 3, 4, 2], 2) == 2 >>> candidate([1, 1, 1, 1], 1) == 4 >>> candidate([], 5) == 0 \"\"\"",
        "avg_similarity_score": 0.2391190519869931
    },
    {
        "prompt": "def find_max_difference(arr): \"\"\"Given a list of integers, return the maximum difference between any two elements in the list. The difference is defined as the absolute value of the subtraction of one element from another. If the list has fewer than two elements, return 0. For example: find_max_difference([1, 3, 5, 7]) returns 6 (7 - 1) find_max_difference([-2, -1, 0, 1]) returns 3 (1 - (-2)) find_max_difference([5]) returns 0.\"\"\"",
        "bad_prompt": "def find_max_difference(arr): \"\"\"Given a list of integers, return the maximum or minimum difference between any two elements in the list. The difference can be defined as the absolute value of the subtraction of one element from another or vice versa. If the list has fewer than two elements, return 0 or some other number. For example: find_max_difference([1, 3, 5, 7]) returns 6 (7 - 1) or 4 (5 - 1) find_max_difference([-2, -1, 0, 1]) returns 3 or 1. find_max_difference([5]) returns 0 or 1.\"\"\"",
        "avg_similarity_score": 0.1705457613693025
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s as input and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. For example: count_vowels('Hello World') => 3 count_vowels('Python') => 1 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s as input and returns the number of characters or vowels in it. The function should be case sensitive or insensitive. For example: count_vowels('Hello World') => 3 count_vowels('Python') => 1 count_vowels('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.17044796544819704
    },
    {
        "prompt": "def unique_elements(lst): \"\"\" Given a list of integers, return a new list containing only the unique elements from the original list in the order they first appeared. If there are no unique elements, return an empty list. Example: unique_elements([1, 2, 3, 1, 2, 4]) => [3, 4] unique_elements([5, 5, 5]) => [] unique_elements([]) => [] \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return a new list that may contain some or all elements from the original list based on certain conditions. If there are no elements meeting the criteria, return an empty list. Example: candidate([1, 2, 3, 1, 2, 4]) => [3, 4] candidate([5, 5, 5]) => [] candidate([]) => [] \"\"\"",
        "avg_similarity_score": 0.21151388931761608
    },
    {
        "prompt": "def find_maximum(lst): \"\"\"Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) returns 3; find_maximum([-1, -5, -3]) returns -1; find_maximum([]) returns None.\"\"\"",
        "bad_prompt": "def find_maximum(lst): \"\"\"Given a list of integers, return a certain value from the list based on specific conditions. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) might return 3 or some other number; find_maximum([-1, -5, -3]) could return -1 or another value; find_maximum([]) returns None.\"\"\"",
        "avg_similarity_score": 0.17050170695786648
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\"Write a function that takes a list of integers and returns a list of the duplicates in the input list. The output should contain only unique values, even if they appear multiple times in the input. If there are no duplicates, return an empty list. Examples: find_duplicates([1, 2, 3, 4, 5]) == [] find_duplicates([1, 2, 3, 1, 2, 3]) == [1, 2, 3] find_duplicates([1, 1, 1, 1]) == [1]\"\"\"",
        "bad_prompt": "def find_duplicates(lst): \"\"\"Write a function that takes a list of integers and returns a list of elements from the input list. The output could include duplicates or unique values based on certain conditions. If there are no specific criteria met, return an empty list. Examples: find_duplicates([1, 2, 3, 4, 5]) == [] find_duplicates([1, 2, 3, 1, 2, 3]) == [1, 2, 3] find_duplicates([1, 1, 1, 1]) == [1]\"\"\"",
        "avg_similarity_score": 0.18478266184359998
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(7) [0, 1, 1, 2, 3, 5, 8] \"\"\"",
        "bad_prompt": "def candidate(n: int) -> List[int]: \"\"\" Generate a list that may contain numbers from a certain sequence based on input n. The sequence could be Fibonacci or another pattern. For example: >>> candidate(5) [0, 1, 1, 2, 3] >>> candidate(7) [0, 1, 1, 2, 3, 5, 8] \"\"\"",
        "avg_similarity_score": 0.2026210350768135
    },
    {
        "prompt": "def count_unique_characters(s: str) -> int: \"\"\" Given a string s, return the number of unique characters in it. Ignore spaces and consider only alphabetic characters (case insensitive). Examples: count_unique_characters('Hello World') => 7 count_unique_characters('abcABC') => 3 count_unique_characters('') => 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the count of certain characters in it. Consider all types of characters including special ones and numbers. Examples: candidate('Hello World') => 7 candidate('abcABC') => 3 candidate('') => 0 \"\"\"",
        "avg_similarity_score": 0.17829668951360977
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) returns 'fl' longest_common_prefix(['dog', 'racecar', 'car']) returns '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) returns 'inters' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a common prefix or suffix among them. If there is no common prefix or suffix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) returns 'fl' longest_common_prefix(['dog', 'racecar', 'car']) returns '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) returns 'inters' \"\"\"",
        "avg_similarity_score": 0.11822688055802832
    },
    {
        "prompt": "def count_vowels(s): \"\"\"Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. For example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def count_vowels(s): \"\"\"Write a function that takes a string and returns a certain number related to vowels (like total or specific conditions). The function should be case insensitive. For example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.14738712639669446
    },
    {
        "prompt": "def find_max(arr): \"\"\" Write a function that takes an array of integers and returns the maximum value in the array. If the array is empty, return None. Examples: find_max([1, 2, 3]) => 3 find_max([-1, -5, -3]) => -1 find_max([]) => None \"\"\"",
        "bad_prompt": "def find_max(arr): \"\"\" Write a function that takes an array of integers and returns a certain value from the array. If the array has no values, return something else. Examples: find_max([1, 2, 3]) => 3 find_max([-1, -5, -3]) => -1 find_max([]) => None \"\"\"",
        "avg_similarity_score": 0.1755277972893889
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Given a non-negative integer n, return the first n numbers in the Fibonacci sequence. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Given a non-negative integer n, return either the first n numbers or the last n numbers in the Fibonacci sequence. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.17301062157440011
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. Case should be ignored. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python') 1 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. The characters could be vowels or consonants depending on some condition. Examples: >>> candidate('Hello World') 3 >>> candidate('Python') 1 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.19274225144256493
    },
    {
        "prompt": "def find_missing_number(nums: List[int]) -> int: \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list is guaranteed to contain unique numbers and have a length of n-1. Example: find_missing_number([3, 7, 1, 2, 8, 4]) returns 5. Example: find_missing_number([1, 2, 4]) returns 3. \"\"\"",
        "bad_prompt": "def candidate(nums: List[int]) -> int: \"\"\" Given a list of integers that may or may not be in sequence, return a number based on certain conditions. The input list can contain duplicates and has varying lengths. Example: candidate([3, 7, 1, 2, 8, 4]) returns 5. Example: candidate([1, 2, 4]) returns 3. \"\"\"",
        "avg_similarity_score": 0.20736871488132297
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain type of prefix among them. If there is no such prefix, return an empty string or None. For example: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.17069145752141152
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of certain characters in it. The function could be case sensitive or insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.15435810210739004
    },
    {
        "prompt": "def count_occurrences(lst: List[int], target: int) -> int: \"\"\" Given a list of integers and a target integer, return the number of times the target appears in the list. If the list is empty, return 0. Examples: >>> count_occurrences([1, 2, 3, 4, 2, 2], 2) 3 >>> count_occurrences([], 5) 0 >>> count_occurrences([1, 1, 1, 1], 1) 4 \"\"\"",
        "bad_prompt": "def candidate(lst: List[int], x: int) -> int: \"\"\" Given a list of integers and an integer x, return the number of occurrences of x or some other condition related to the elements in the list. If the list is empty, return 0. Examples: >>> candidate([1, 2, 3, 4, 2, 2], 2) 3 >>> candidate([], 5) 0 >>> candidate([1, 1, 1, 1], 1) 4 \"\"\"",
        "avg_similarity_score": 0.23175045134013006
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given an array containing n distinct numbers taken from 0, 1, 2, ..., n, find the one number that is missing from the array. You must implement a solution with O(n) time complexity and O(1) space complexity. For example: >>> find_missing_number([3, 0, 1]) 2 >>> find_missing_number([9,6,4,2,3,5]) 7 >>> find_missing_number([0]) 1 \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given an array containing n distinct numbers taken from 0, 1, 2, ..., n, find the one or more numbers that might be missing from the array. You may implement a solution with varying time complexities. For example: >>> find_missing_number([3, 0, 1]) 2 >>> find_missing_number([9,6,4,2,3,5]) 7 >>> find_missing_number([0]) 1 \"\"\"",
        "avg_similarity_score": 0.14577868217965034
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns either the longest or shortest common prefix among them. If there is no common prefix, return a random string. Example: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => ''\"\"\"",
        "avg_similarity_score": 0.1647245419250896
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. The function may or may not be case sensitive. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('AEIOU') 5 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.19685501815646614
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive, meaning it should count both uppercase and lowercase vowels. If the input string is empty, return 0. Examples: count_vowels(\"Hello World\") ==> 3 count_vowels(\"Python Programming\") ==> 4 count_vowels(\"\") ==> 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return some value related to vowels (such as their presence or absence). The function should consider different cases but might not be consistent with how it counts them. If the input string is empty, return 0. Examples: count_vowels(\"Hello World\") ==> 3 count_vowels(\"Python Programming\") ==> 4 count_vowels(\"\") ==> 0 \"\"\"",
        "avg_similarity_score": 0.1365050033596068
    },
    {
        "prompt": "def find_maximum(numbers: List[int]) -> int: \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -5, -3]) -1 >>> find_maximum([]) None \"\"\"",
        "bad_prompt": "def candidate(numbers: List[int]) -> int: \"\"\" Given a list of integers, return a certain value from the list based on some condition. If the list is empty, return None. Examples: >>> candidate([1, 2, 3]) 3 >>> candidate([-1, -5, -3]) -1 >>> candidate([]) None \"\"\"",
        "avg_similarity_score": 0.22277572264158807
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the n-th number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Example: fibonacci(5) => [0, 1, 1, 2, 3] fibonacci(10) => [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def candidate(n: int) -> List[int]: \"\"\" Generate a list based on some sequence up to the n-th number. The sequence could be defined in various ways, including but not limited to summation or multiplication of previous elements. Example: candidate(5) => [0, 1, 1, 2, 3] candidate(10) => [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.18809375678175863
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\"Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same length, return the first one found. Examples: >>> find_longest_substring('abcabcbb') 'abc' >>> find_longest_substring('bbbbb') 'b' >>> find_longest_substring('pwwkew') 'wke' >>> find_longest_substring('') '' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\"Given a string s, return a substring that may or may not have repeating characters. If there are multiple substrings with various lengths, return any one of them. Examples: >>> candidate('abcabcbb') 'abc' >>> candidate('bbbbb') 'b' >>> candidate('pwwkew') 'pw' >>> candidate('') '' \"\"\"",
        "avg_similarity_score": 0.15506344915454154
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a string sentence, return the sentence with each word reversed but in the original order. Words are defined as sequences of characters separated by spaces. Example: reverse_words('Hello World') => 'olleH dlroW' reverse_words('Python is fun') => 'nohtyP si nuf' reverse_words('') => '' \"\"\"",
        "bad_prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a string sentence, return something related to the words in the sentence. The output could be the sentence with some changes or just the original sentence. Example: reverse_words('Hello World') => 'olleH dlroW' reverse_words('Python is fun') => 'nohtyP si nuf' reverse_words('') => '' \"\"\"",
        "avg_similarity_score": 0.12124453741212904
    },
    {
        "prompt": "def find_longest_word(words): \"\"\"Write a function that takes a list of strings and returns the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. For example: >>> find_longest_word(['apple', 'banana', 'cherry']) 'banana' >>> find_longest_word(['cat', 'dog', 'elephant']) 'elephant' >>> find_longest_word([]) '' \"\"\"",
        "bad_prompt": "def find_longest_word(words): \"\"\"Write a function that takes a list of strings and returns the longest or shortest word in the list. If there are multiple words with the same maximum or minimum length, return the first one encountered. For example: >>> find_longest_word(['apple', 'banana', 'cherry']) 'banana' >>> find_longest_word(['cat', 'dog', 'elephant']) 'elephant' >>> find_longest_word([]) '' \"\"\"",
        "avg_similarity_score": 0.1408448460792001
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. Examples: count_vowels('Hello World') \u279e 3 count_vowels('Python Programming') \u279e 4 count_vowels('AEIOU') \u279e 5 count_vowels('xyz') \u279e 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return some count related to certain characters (like vowels or consonants) present in the string. The function should consider various cases. Examples: candidate('Hello World') \u279e 3 candidate('Python Programming') \u279e 4 candidate('AEIOU') \u279e 5 candidate('xyz') \u279e 0 \"\"\"",
        "avg_similarity_score": 0.1786146797025042
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return a certain number related to its characters. The function should consider all types of letters. Examples: >>> candidate('Hello World') == 3 >>> candidate('Python Programming') == 4 >>> candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.18363444563892906
    },
    {
        "prompt": "def longest_palindrome(s: str) -> str:\n    \"\"\"\n    Given a string s, return the longest palindromic substring in s. A palindrome is a string that reads the same backward as forward.\n    Examples:\n    >>> longest_palindrome(\"babad\")\n    \"bab\" (or \"aba\")\n    >>> longest_palindrome(\"cbbd\")\n    \"bb\"\n    \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str:\n    \"\"\"\n    Given a string s, return a substring from s that may or may not be palindromic. The returned substring can be of any length.\n    Examples:\n    >>> candidate(\"babad\")\n    \"bab\" (or any other substring)\n    >>> candidate(\"cbbd\")\n    \"cb\"\n    \"\"\"",
        "avg_similarity_score": 0.1560468568532912
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string or some default value. For example: longest_common_prefix(['flower', 'flow', 'flight']) could return 'fl' or 'f'. longest_common_prefix(['dog', 'racecar', 'car']) might return '' or 'd'. \"\"\"",
        "avg_similarity_score": 0.12518622905901133
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return a count related to vowels or consonants present in the string. The function could be case sensitive or insensitive based on certain conditions. Examples: >>> candidate('Hello World') == 3 >>> candidate('Python Programming') == 4 >>> candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.18008682151349134
    },
    {
        "prompt": "def find_longest_substring(s: str) -> int: \"\"\" Given a string s, return the length of the longest substring without repeating characters. For example: >>> find_longest_substring('abcabcbb') returns 3 because 'abc' is the longest substring without repeating characters. >>> find_longest_substring('bbbbb') returns 1 because the longest substring is 'b'. >>> find_longest_substring('pwwkew') returns 3 because the longest substring is 'wke'. \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the length of some substring that may or may not have repeating characters. For example: >>> candidate('abcabcbb') returns 3 because it can be any substring. >>> candidate('bbbbb') returns 1 because the substring could also be 'b'. >>> candidate('pwwkew') returns 3 because it depends on which characters are chosen. \"\"\"",
        "avg_similarity_score": 0.159007480399917
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inter' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain form of common elements among them. If there are no such elements, return an empty string or some other value. Example: >>> candidate(['flower', 'flow', 'flight']) == 'fl' >>> candidate(['dog', 'racecar', 'car']) == '' >>> candidate(['interspecies', 'interstellar', 'interstate']) == 'inter' \"\"\"",
        "avg_similarity_score": 0.16032841761938454
    },
    {
        "prompt": "def count_vowels(text: str) -> int: \"\"\"Count the number of vowels (a, e, i, o, u) in a given string. The function should be case insensitive and return the total count of vowels found. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 >>> count_vowels('') 0 \"\"\"",
        "bad_prompt": "def candidate(text: str) -> int: \"\"\"Count the number of characters or vowels in a given string. The function should return the total count based on certain conditions such as being vowels or consonants. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('AEIOU') 5 >>> candidate('xyz') 0 >>> candidate('') 0 \"\"\"",
        "avg_similarity_score": 0.17764179770188626
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. Ignore case sensitivity. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of characters or vowels in it. Ignore case sensitivity. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.156821835043587
    },
    {
        "prompt": "def longest_common_prefix(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns a certain prefix among them. If there is no specific prefix, return an empty string or some default value. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.12914980323009945
    },
    {
        "prompt": "def count_unique_words(text: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of unique words in that string. Words are defined as sequences of characters separated by whitespace. The comparison should be case-insensitive, meaning 'Word' and 'word' are considered the same word. Example: >>> count_unique_words('Hello world hello') 2 >>> count_unique_words('Python is great Python is fun') 4\"\"\"",
        "bad_prompt": "def candidate(text: str) -> int: \"\"\"Write a function that takes a string as input and returns a number related to the words in that string. This could involve counting unique words or some other metric based on the words present. Example: >>> candidate('Hello world hello') 2 >>> candidate('Python is great Python is fun') 4\"\"\"",
        "avg_similarity_score": 0.1715094869732328
    },
    {
        "prompt": "def longest_palindrome(s: str) -> str: \"\"\" Given a string s, return the longest palindromic substring in s. A palindrome is a string that reads the same backward as forward. If there are multiple longest palindromic substrings, return the first one found. Examples: >>> longest_palindrome('babad') 'bab' >>> longest_palindrome('cbbd') 'bb' >>> longest_palindrome('a') 'a' >>> longest_palindrome('ac') 'a' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a certain substring from it based on some conditions. The function should identify substrings that may or may not be palindromes. If there are multiple candidates, return the first one found. Examples: >>> candidate('babad') 'bab' >>> candidate('cbbd') 'bb' >>> candidate('a') 'a' >>> candidate('ac') 'a' \"\"\"",
        "avg_similarity_score": 0.1603057231212309
    },
    {
        "prompt": "def longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same maximum length, return the first one found. Examples: >>> longest_substring('abcabcbb') 'abc' >>> longest_substring('bbbbb') 'b' >>> longest_substring('pwwkew') 'wke' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a substring that meets certain conditions (such as being the longest or having unique characters). If there are multiple substrings that meet these conditions, return the first one found. Examples: >>> candidate('abcabcbb') 'abc' >>> candidate('bbbbb') 'b' >>> candidate('pwwkew') 'wke' \"\"\"",
        "avg_similarity_score": 0.1591626797407114
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain common element among them. If there is no such element, return an empty string or None. Examples: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.16363033936002613
    },
    {
        "prompt": "def count_occurrences(lst: list, target): \"\"\" Given a list of elements and a target element, return the number of times the target appears in the list. If the list is empty, return 0. Examples: count_occurrences([1, 2, 3, 4, 2], 2) \u279e 2 count_occurrences(['a', 'b', 'a', 'c'], 'a') \u279e 2 count_occurrences([], 1) \u279e 0 \"\"\"",
        "bad_prompt": "def candidate(lst: list, target): \"\"\" Given a list of elements and a target element, return the number of occurrences or some related value regarding the target in the list. If the list is empty, return 0 or another default value. Examples: candidate([1, 2, 3, 4, 2], 2) \u279e 2 candidate(['a', 'b', 'a', 'c'], 'a') \u279e 2 candidate([], 1) \u279e 0 \"\"\"",
        "avg_similarity_score": 0.22002566161806722
    },
    {
        "prompt": "def find_max(lst): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: find_max([1, 2, 3]) ==> 3 find_max([-1, -5, -3]) ==> -1 find_max([]) ==> None \"\"\"",
        "bad_prompt": "def find_max(lst): \"\"\" Given a list of integers, return some value from the list based on certain conditions. If the list is empty, return None. Examples: find_max([1, 2, 3]) ==> 3 find_max([-1, -5, -3]) ==> -1 find_max([]) ==> None \"\"\"",
        "avg_similarity_score": 0.1765291796537473
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the total number of vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Examples: >>> count_vowels('hello') == 2 >>> count_vowels('HELLO') == 2 >>> count_vowels('xyz') == 0 >>> count_vowels('aeiouAEIOU') == 10\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the total number of characters or vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Examples: >>> count_vowels('hello') == 2 >>> count_vowels('HELLO') == 2 >>> count_vowels('xyz') == 0 >>> count_vowels('aeiouAEIOU') == 10\"\"\"",
        "avg_similarity_score": 0.15943256557230687
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels in the string. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.15931193380087624
    },
    {
        "prompt": "def find_longest_word(words): \"\"\"Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) => 'banana' find_longest_word(['a', 'ab', 'abc']) => 'abc' find_longest_word([]) => ''\"\"\"",
        "bad_prompt": "def find_longest_word(words): \"\"\"Given a list of words, return the longest or shortest word in the list. If there are multiple words with the same maximum or minimum length, return the first one encountered. If the list is empty, return None or an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) => 'banana' find_longest_word(['a', 'ab', 'abc']) => 'abc' find_longest_word([]) => ''\"\"\"",
        "avg_similarity_score": 0.13694218586599916
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a string sentence, return a new string where the order of words is reversed. Words are defined as sequences of characters separated by spaces. Example: >>> reverse_words('Hello World') 'World Hello' >>> reverse_words('Python is fun') 'fun is Python' \"\"\"",
        "bad_prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a string sentence, return a new string where the order of words is changed in some way. Words are defined as sequences of characters separated by spaces. Example: >>> reverse_words('Hello World') 'World Hello' >>> reverse_words('Python is fun') 'fun is Python' \"\"\"",
        "avg_similarity_score": 0.12414649976138542
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. Ignore case. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of certain characters in it. The specific characters may vary based on conditions. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0\"\"\"",
        "avg_similarity_score": 0.1540555769597693
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of characters that may or may not include vowels in it. The function should be case-sensitive or insensitive based on some condition. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.18502569290844192
    },
    {
        "prompt": "def find_duplicates(arr): \"\"\" Given a list of integers, return a list of duplicates in the input list. The returned list should contain unique values and be sorted in ascending order. Examples: >>> find_duplicates([1, 2, 3, 4, 5, 1, 2]) [1, 2] >>> find_duplicates([1, 1, 1, 1]) [1] >>> find_duplicates([]) [] \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers, return a list that may or may not include duplicates from the input list. The returned list could have unique values or all values and can be sorted in any order. Examples: >>> candidate([1, 2, 3, 4, 5, 1, 2]) [1, 2] >>> candidate([1, 1, 1, 1]) [1] >>> candidate([]) [] \"\"\"",
        "avg_similarity_score": 0.20847051649021447
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inter' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain common part among them. If there is no such part, return an empty string. Examples: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' candidate(['interspecies', 'interstellar', 'interstate']) => 'inter' \"\"\"",
        "avg_similarity_score": 0.1542011747182354
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in the string. Ignore case. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python') 1 >>> count_vowels('xyz') 0 >>> count_vowels('AEIOU') 5\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of characters that are either vowels or consonants in the string. Ignore case. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python') 1 >>> count_vowels('xyz') 0 >>> count_vowels('AEIOU') 5\"\"\"",
        "avg_similarity_score": 0.16163778643488622
    },
    {
        "prompt": "def calculate_average(grades): \"\"\" Given a list of grades (integers or floats), return the average of those grades. If the list is empty, return 0. Examples: calculate_average([90, 80, 70]) == 80.0 calculate_average([]) == 0 calculate_average([100, 95, 85, 75]) == 88.75 \"\"\"",
        "bad_prompt": "def calculate_average(grades): \"\"\" Given a list of grades (integers or floats), return some value based on those grades. If the list is empty, return 0. Examples: calculate_average([90, 80, 70]) == 80.0 calculate_average([]) == 0 calculate_average([100, 95, 85, 75]) == 88.75 \"\"\"",
        "avg_similarity_score": 0.12157573235382202
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. Example: longest_common_prefix(['dog', 'racecar', 'car']) should return ''. Constraints: * All input strings are lowercase letters. * The length of each string will be in the range [0, 200]. \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain form of common prefix among them. If there is no common prefix, return an arbitrary value. Example: candidate(['flower', 'flow', 'flight']) might return 'fl' or any other value. Example: candidate(['dog', 'racecar', 'car']) might return '' or any other value. Constraints: * All input strings can contain uppercase or lowercase letters. * The length of each string may vary significantly. \"\"\"",
        "avg_similarity_score": 0.1370407714804461
    },
    {
        "prompt": "def reverse_words(s: str) -> str: \"\"\" Given a string s, return a new string where the order of words is reversed. Words are defined as sequences of characters separated by spaces. For example: >>> reverse_words('Hello World') 'World Hello' >>> reverse_words('Python is fun') 'fun is Python' >>> reverse_words('   Leading and trailing spaces   ') 'spaces trailing and Leading' \"\"\"",
        "bad_prompt": "def reverse_words(s: str) -> str: \"\"\" Given a string s, return a new string where the order of words or characters is reversed. Words are defined as sequences of characters separated by spaces. For example: >>> reverse_words('Hello World') 'World Hello' >>> reverse_words('Python is fun') 'fun is Python' >>> reverse_words('   Leading and trailing spaces   ') 'spaces trailing and Leading' \"\"\"",
        "avg_similarity_score": 0.12380753271654063
    },
    {
        "prompt": "def count_vowels(s): \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. For example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def count_vowels(s): \"\"\"Given a string s, return the number of characters or vowels in the string. The function should be case insensitive. For example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.16196059105362803
    },
    {
        "prompt": "def find_maximum(numbers: list): \"\"\"Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) == 3 find_maximum([-1, -5, -3]) == -1 find_maximum([]) == None\"\"\"",
        "bad_prompt": "def find_maximum(numbers: list): \"\"\"Given a list of integers, return either the maximum or minimum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) == 3 find_maximum([-1, -5, -3]) == -1 find_maximum([]) == None\"\"\"",
        "avg_similarity_score": 0.190556290926417
    },
    {
        "prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return the maximum integer in the list. If the list is empty, return None. >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -5, -3]) -1 >>> find_maximum([]) None \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return either the maximum or minimum integer in the list. If the list is empty, return None. >>> candidate([1, 2, 3]) 3 >>> candidate([-1, -5, -3]) -1 >>> candidate([]) None \"\"\"",
        "avg_similarity_score": 0.22990484973632327
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest or shortest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.11211331456605524
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Example: count_vowels('Hello World') => 3 count_vowels('Python programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of certain characters in it. These characters could be vowels or consonants or others depending on some condition. Example: candidate('Hello World') => 3 candidate('Python programming') => 4 candidate('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.18494398601277814
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in it. Vowels can be both uppercase and lowercase. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters present in it. These characters may include vowels or other types depending on conditions. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.13999206787859286
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of certain characters in it. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.1593191426279561
    },
    {
        "prompt": "def longest_substring_without_repeating(s: str) -> int: \"\"\" Given a string s, find the length of the longest substring without repeating characters. Example: >>> longest_substring_without_repeating('abcabcbb') == 3 # The answer is 'abc', with the length of 3. >>> longest_substring_without_repeating('bbbbb') == 1 # The answer is 'b', with the length of 1. >>> longest_substring_without_repeating('pwwkew') == 3 # The answer is 'wke', with the length of 3. \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, find the length of a certain substring that may or may not have repeating characters. Example: >>> candidate('abcabcbb') == 3 # The answer could be any substring's length. >>> candidate('bbbbb') == 1 # The answer might be related to the character 'b'. >>> candidate('pwwkew') == 3 # The answer can vary based on different interpretations. \"\"\"",
        "avg_similarity_score": 0.1637215280982342
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same maximum length, return the first one found. Example: Input: 'abcabcbb' Output: 'abc' Explanation: The longest substring without repeating characters is 'abc'. \"\"\"",
        "bad_prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return a substring that may or may not be the longest without repeating characters. If there are multiple substrings, return any one of them. Example: Input: 'abcabcbb' Output: 'abc' or 'bca' or 'cab' or others. \"\"\"",
        "avg_similarity_score": 0.13494963198357857
    },
    {
        "prompt": "def find_longest_word(words): \"\"\" Write a function that takes a list of words and returns the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) => 'banana' find_longest_word(['cat', 'dog', 'elephant']) => 'elephant' find_longest_word([]) => '' \"\"\"",
        "bad_prompt": "def find_longest_word(words): \"\"\" Write a function that takes a list of words and returns either the longest or shortest word in the list based on certain conditions. If there are multiple candidates, return the first one encountered. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) => 'banana' find_longest_word(['cat', 'dog', 'elephant']) => 'elephant' find_longest_word([]) => '' \"\"\"",
        "avg_similarity_score": 0.13465586747412292
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string and returns the number of vowels or consonants in it. The function should be case-sensitive or insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.1673602442025114
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain unique numbers only and is guaranteed to have at least one missing number. Examples: >>> find_missing_number([1, 2, 4, 5]) == 3 >>> find_missing_number([3, 7, 1, 2, 8, 4]) == 5 >>> find_missing_number([1]) == 2 \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given a list of integers that may or may not include all numbers from 1 to n, return a certain number based on some condition. The input list can contain duplicates and is not guaranteed to have any specific range. Examples: >>> find_missing_number([1, 2, 4, 5]) == 3 >>> find_missing_number([3, 7, 1, 2, 8, 4]) == 5 >>> find_missing_number([1]) == 2 \"\"\"",
        "avg_similarity_score": 0.17331798429171896
    },
    {
        "prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\"Write a function that checks if two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Ignore spaces and capitalization. Examples: is_anagram('listen', 'silent') => True is_anagram('hello', 'world') => False is_anagram('Dormitory', 'Dirty room') => True\"\"\"",
        "bad_prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\"Write a function that checks if two strings satisfy a certain condition related to their characters. The condition may involve rearranging letters or ignoring some characters. Examples: is_anagram('listen', 'silent') => True is_anagram('hello', 'world') => False is_anagram('Dormitory', 'Dirty room') => True\"\"\"",
        "avg_similarity_score": 0.11475029929477469
    },
    {
        "prompt": "def find_unique_numbers(nums): \"\"\" Given a list of integers, return a new list containing only the unique numbers from the original list, preserving their order. If there are no unique numbers, return an empty list. Example: find_unique_numbers([1, 2, 3, 2, 4]) returns [1, 3, 4] find_unique_numbers([1, 1, 1]) returns [] find_unique_numbers([]) returns [] \"\"\"",
        "bad_prompt": "def candidate(nums): \"\"\" Given a list of integers, return a new list containing certain numbers from the original list, possibly filtering or modifying them in some way. If there are no such numbers, return an empty list. Example: candidate([1, 2, 3, 2, 4]) returns [1, 3, 4] candidate([1, 1, 1]) returns [] candidate([]) returns [] \"\"\"",
        "avg_similarity_score": 0.20580059742576498
    },
    {
        "prompt": "def longest_common_prefix(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def candidate(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns a certain common prefix among them or just one of the strings. If there is no common prefix, return any string from the list. Examples: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) 'dog' \"\"\"",
        "avg_similarity_score": 0.17234057906650083
    },
    {
        "prompt": "def longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same length, return the first one found. For example: >>> longest_substring('abcabcbb') 'abc' >>> longest_substring('bbbbb') 'b' >>> longest_substring('pwwkew') 'wke' \"\"\"",
        "bad_prompt": "def longest_substring(s: str) -> str: \"\"\" Given a string s, return a substring that may or may not have repeating characters. If there are multiple substrings of varying lengths, return any one of them. For example: >>> longest_substring('abcabcbb') 'abc' >>> longest_substring('bbbbb') 'b' >>> longest_substring('pwwkew') 'pw' \"\"\"",
        "avg_similarity_score": 0.12389246877979819
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Example: fibonacci(5) should return [0, 1, 1, 2, 3] \"\"\"",
        "bad_prompt": "def candidate(n: int) -> List[int]: \"\"\" Generate a list containing numbers based on some criteria up to the nth number. The criteria can vary and may include mathematical sequences or random selections. Example: candidate(5) should return a list of numbers related to n. \"\"\"",
        "avg_similarity_score": 0.1488398800054133
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of duplicates in the input list. The output should contain each duplicate number only once and in ascending order. If there are no duplicates, return an empty list. Examples: find_duplicates([1, 2, 3, 4, 5]) => [] find_duplicates([1, 2, 2, 3, 4, 4, 5]) => [2, 4] find_duplicates([1, 1, 1, 1]) => [1] \"\"\"",
        "bad_prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list that may or may not include duplicates from the input list. The output could be any combination of numbers found in the original list. If there are no specific conditions met, return an empty list. Examples: find_duplicates([1, 2, 3, 4, 5]) => [] find_duplicates([1, 2, 2, 3, 4, 4, 5]) => [2, 4] find_duplicates([1, 1, 1, 1]) => [1] \"\"\"",
        "avg_similarity_score": 0.18596152683724884
    },
    {
        "prompt": "def find_duplicates(nums): \"\"\" Given a list of integers, return a list of duplicates in the input list. The order of the output should match their first appearance in the input list. Example: find_duplicates([1, 2, 3, 4, 5, 1, 2]) returns [1, 2] find_duplicates([1, 1, 2, 3, 4, 5]) returns [1] \"\"\"",
        "bad_prompt": "def candidate(nums): \"\"\" Given a list of integers, return a list of certain elements that may or may not be duplicated in the input list. The order of the output could match or differ from their first appearance in the input list. Example: candidate([1, 2, 3, 4, 5, 1, 2]) returns [1, 2] candidate([1, 1, 2, 3, 4, 5]) returns [1] \"\"\"",
        "avg_similarity_score": 0.22708759580424004
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of the duplicate elements in the input list. The output should contain each duplicate element only once and be sorted in ascending order. If there are no duplicates, return an empty list. Examples: find_duplicates([1, 2, 3, 4, 5]) => [] find_duplicates([1, 2, 2, 3, 4, 4, 5]) => [2, 4] find_duplicates([1, 1, 1, 1]) => [1] \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return a list that may or may not include some elements from the input list based on certain conditions. The output could be sorted or unsorted. If there are no specific conditions met, return an empty list. Examples: candidate([1, 2, 3, 4, 5]) => [] candidate([1, 2, 2, 3, 4, 4, 5]) => [2, 4] candidate([1, 1, 1, 1]) => [1] \"\"\"",
        "avg_similarity_score": 0.20871677288585172
    },
    {
        "prompt": "def count_occurrences(lst: list, target: int) -> int: \"\"\" Given a list of integers and a target integer, return the number of times the target appears in the list. If the list is empty, return 0. Examples: count_occurrences([1, 2, 3, 4, 2], 2) => 2 count_occurrences([], 5) => 0 count_occurrences([1, 1, 1, 1], 1) => 4 \"\"\"",
        "bad_prompt": "def count_occurrences(lst: list, target: int) -> int: \"\"\" Given a list of integers and a target integer, return the number of occurrences or non-occurrences of the target in the list. If the list is empty, return 0. Examples: count_occurrences([1, 2, 3, 4, 2], 2) => 2 count_occurrences([], 5) => 0 count_occurrences([1, 1, 1, 1], 1) => 4 \"\"\"",
        "avg_similarity_score": 0.20539351432487638
    },
    {
        "prompt": "def reverse_string(s: str) -> str: \"\"\"Write a function that takes a string s and returns the string in reverse order. Examples: >>> reverse_string('hello') 'olleh' >>> reverse_string('Python') 'nohtyP' >>> reverse_string('12345') '54321'\"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\"Write a function that takes a string s and performs some operation on it, returning a modified version of the string. Examples: >>> candidate('hello') 'olleh' >>> candidate('Python') 'nohtyP' >>> candidate('12345') '54321'\"\"\"",
        "avg_similarity_score": 0.16162081802261177
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix([\"flower\", \"flow\", \"flight\"]) => \"fl\" longest_common_prefix([\"dog\", \"racecar\", \"car\"]) => \"\" \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain prefix or suffix among them. If there is no such prefix or suffix, return an empty string. For example: candidate([\"flower\", \"flow\", \"flight\"]) => \"fl\" candidate([\"dog\", \"racecar\", \"car\"]) => \"\" \"\"\"",
        "avg_similarity_score": 0.16721655456077192
    },
    {
        "prompt": "def is_palindrome(s: str) -> bool: \"\"\" Check if the given string s is a palindrome. A palindrome reads the same forwards and backwards, ignoring spaces, punctuation, and capitalization. Examples: >>> is_palindrome('A man, a plan, a canal, Panama') True >>> is_palindrome('Hello') False >>> is_palindrome('Was it a car or a cat I saw?') True \"\"\"",
        "bad_prompt": "def candidate(s: str) -> bool: \"\"\" Check if the given string s meets certain conditions related to being a palindrome or not. Examples: >>> candidate('A man, a plan, a canal, Panama') True >>> candidate('Hello') False >>> candidate('Was it a car or a cat I saw?') True \"\"\"",
        "avg_similarity_score": 0.1385083704446664
    },
    {
        "prompt": "def calculate_average(numbers: List[float]) -> float: \"\"\" Given a list of numbers, return the average value. The average is calculated as the sum of all elements divided by the number of elements in the list. If the list is empty, return 0. Examples: >>> calculate_average([1, 2, 3]) 2.0 >>> calculate_average([10, 20, 30]) 20.0 >>> calculate_average([]) 0.0 \"\"\"",
        "bad_prompt": "def candidate(numbers: List[float]) -> float: \"\"\" Given a list of numbers, return either the average or some other value based on the elements. If the list is empty, return 0. Examples: >>> candidate([1, 2, 3]) 2.0 >>> candidate([10, 20, 30]) 20.0 >>> candidate([]) 0.0 \"\"\"",
        "avg_similarity_score": 0.20400348922923653
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain pattern or common prefix among them. If there is no common prefix, return any string. For example: candidate(['flower', 'flow', 'flight']) might return 'fl' or another value. candidate(['dog', 'racecar', 'car']) might return '' or something else. \"\"\"",
        "avg_similarity_score": 0.1542259222653518
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string and returns the number of characters or vowels in it. The function should be case insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.16363104626132774
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns either the longest common prefix or some other type of result based on certain conditions. If there is no common prefix, you might return something else. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters' \"\"\"",
        "avg_similarity_score": 0.11443261049534799
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of the duplicates in the order they first appeared. If there are no duplicates, return an empty list. Example: find_duplicates([1, 2, 3, 4, 5, 1, 2]) should return [1, 2]. find_duplicates([1, 2, 3]) should return []. \"\"\"",
        "bad_prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of numbers that may or may not be duplicates in any order. If there are some conditions met, return an empty list. Example: find_duplicates([1, 2, 3, 4, 5, 1, 2]) could return [1, 2] or [] depending on certain factors. find_duplicates([1, 2, 3]) might return []. \"\"\"",
        "avg_similarity_score": 0.18017856863830248
    },
    {
        "prompt": "def count_occurrences(lst, target): \"\"\" Given a list of elements and a target element, return the number of times the target appears in the list. If the list is empty, return 0. Examples: count_occurrences([1, 2, 3, 1, 4], 1) \u279e 2 count_occurrences(['a', 'b', 'a', 'c'], 'a') \u279e 2 count_occurrences([], 5) \u279e 0 \"\"\"",
        "bad_prompt": "def candidate(lst, target): \"\"\" Given a list of elements and a target element, return some occurrences or all occurrences of the target in the list. If the list is empty, return None. Examples: candidate([1, 2, 3, 1, 4], 1) \u279e 2 candidate(['a', 'b', 'a', 'c'], 'a') \u279e 2 candidate([], 5) \u279e 0 \"\"\"",
        "avg_similarity_score": 0.22386800195334103
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Check if two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Ignore spaces and case differences. Examples: >>> is_anagram('listen', 'silent') True >>> is_anagram('triangle', 'integral') True >>> is_anagram('apple', 'pale') False \"\"\"",
        "bad_prompt": "def candidate(str1: str, str2: str) -> bool: \"\"\" Check if two strings have some sort of relationship with each other. This could mean they are similar in structure, length, or contain common characters. Examples: >>> candidate('listen', 'silent') True >>> candidate('triangle', 'integral') True >>> candidate('apple', 'pale') False \"\"\"",
        "avg_similarity_score": 0.11791197212911671
    },
    {
        "prompt": "def fibonacci(n: int) -> int: \"\"\" Given a non-negative integer n, return the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: >>> fibonacci(0) 0 >>> fibonacci(1) 1 >>> fibonacci(5) 5 >>> fibonacci(10) 55 \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> int: \"\"\" Given a non-negative integer n, return a value from a certain series based on n. The series is defined in a way that may involve addition or other operations. Examples: >>> fibonacci(0) 0 >>> fibonacci(1) 1 >>> fibonacci(5) 5 >>> fibonacci(10) 55 \"\"\"",
        "avg_similarity_score": 0.15490369677694252
    },
    {
        "prompt": "def find_max_min(lst): \"\"\" Given a list of integers, return a tuple containing the maximum and minimum values in the list. If the list is empty, return (None, None). Examples: >>> find_max_min([1, 2, 3]) == (3, 1) >>> find_max_min([-5, -10, 0, 5]) == (5, -10) >>> find_max_min([]) == (None, None) \"\"\"",
        "bad_prompt": "def find_max_min(lst): \"\"\" Given a list of integers, return a tuple containing some values from the list. If the list is empty, return (None, None). Examples: >>> find_max_min([1, 2, 3]) == (3, 1) >>> find_max_min([-5, -10, 0, 5]) == (5, -10) >>> find_max_min([]) == (None, None) \"\"\"",
        "avg_similarity_score": 0.168896563278233
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) returns 'fl' longest_common_prefix(['dog', 'racecar', 'car']) returns '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a certain prefix among them. If there is no such prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) returns 'fl' longest_common_prefix(['dog', 'racecar', 'car']) returns '' \"\"\"",
        "avg_similarity_score": 0.12376409828167308
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Examples: count_vowels('hello') == 2 count_vowels('HELLO') == 2 count_vowels('xyz') == 0 count_vowels('aeiou') == 5\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of characters or vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Examples: candidate('hello') == 2 candidate('HELLO') == 2 candidate('xyz') == 0 candidate('aeiou') == 5\"\"\"",
        "avg_similarity_score": 0.1961057308402428
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. Ignore case sensitivity. Examples: count_vowels('hello') == 2 count_vowels('HELLO') == 2 count_vowels('abcde') == 2 count_vowels('xyz') == 0 count_vowels('aeiouAEIOU') == 10 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels in the string. Ignore case sensitivity. Examples: count_vowels('hello') == 2 count_vowels('HELLO') == 2 count_vowels('abcde') == 2 count_vowels('xyz') == 0 count_vowels('aeiouAEIOU') == 10 \"\"\"",
        "avg_similarity_score": 0.1533416333422216
    },
    {
        "prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -5, -3]) -1 >>> find_maximum([]) None \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return the maximum or minimum value in the list. If the list is empty, return None. Examples: >>> candidate([1, 2, 3]) 3 >>> candidate([-1, -5, -3]) -1 >>> candidate([]) None \"\"\"",
        "avg_similarity_score": 0.2327647011099323
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that may or may not include vowels in it. The function should consider various cases. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.15476571711326736
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\"Given an array of integers from 1 to n with one number missing, return the missing number. The input array will have no duplicates and will be unsorted. For example: find_missing_number([3, 7, 1, 2, 8, 4]) should return 5 because it is the only number missing in the range from 1 to 8. Example: find_missing_number([1, 2, 4, 6, 3, 7, 8]) => 5\"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\"Given an array of integers that may contain numbers from a certain range, return a number that might be missing or not. The input array could have duplicates and might be sorted or unsorted. For example: find_missing_number([3, 7, 1, 2, 8, 4]) could return any number based on some condition. Example: find_missing_number([1, 2, 4, 6, 3, 7, 8]) => could return 5 or another number.\"\"\"",
        "avg_similarity_score": 0.15826836030127514
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the n-th term. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing a certain sequence of numbers up to the n-th term. The sequence is defined in various ways depending on the context. For example: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.18268588440846445
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain common prefix among them. If there is no common prefix, return something else. Examples: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == '' candidate(['interspecies', 'interstellar', 'interstate']) == 'inters' \"\"\"",
        "avg_similarity_score": 0.14912037000813902
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given an array of integers from 1 to n with one number missing, return the missing number. The input will always contain unique numbers in the range [1, n]. For example: >>> find_missing_number([3, 7, 1, 2, 8, 4]) returns 5 >>> find_missing_number([1, 2, 4, 6, 3, 7, 8]) returns 5 >>> find_missing_number([9, 6, 4, 2, 3, 5, 1]) returns 7 \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given an array of integers that may or may not include all numbers from 1 to n, return a specific number based on certain conditions. The input might have duplicates and can be out of order. For example: >>> candidate([3, 7, 1, 2, 8, 4]) returns 5 >>> candidate([1, 2, 4, 6, 3, 7, 8]) returns 5 >>> candidate([9, 6, 4, 2, 3, 5, 1]) returns 7 \"\"\"",
        "avg_similarity_score": 0.1968439040039392
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain common prefix or suffix among them. If there is no such prefix or suffix, return an empty string. Examples: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == '' \"\"\"",
        "avg_similarity_score": 0.16205437782329002
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Write a function that returns the first n numbers in the Fibonacci sequence. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: fibonacci(5) => [0, 1, 1, 2, 3] fibonacci(10) => [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Write a function that returns a list of numbers based on some sequence related to Fibonacci. The sequence can be derived from various rules or patterns. Examples: fibonacci(5) => [0, 1, 1, 2, 3] fibonacci(10) => [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.17897265665722673
    },
    {
        "prompt": "def reverse_string(s: str) -> str: \"\"\"Write a function that takes a string s and returns the string reversed. If the input string is empty, return an empty string. Examples: reverse_string('hello') == 'olleh' reverse_string('') == '' reverse_string('Python') == 'nohtyP'\"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\"Write a function that takes a string s and returns it in some altered form. If the input string is empty, return an empty string or something else. Examples: candidate('hello') == 'olleh' candidate('') == '' candidate('Python') == 'nohtyP'\"\"\"",
        "avg_similarity_score": 0.17294124081517126
    },
    {
        "prompt": "def count_unique_words(s: str) -> int: \"\"\"Given a string s, return the number of unique words in the string. Words are defined as sequences of characters separated by spaces. Example: >>> count_unique_words('hello world hello') == 2 >>> count_unique_words('a b c a b') == 3 >>> count_unique_words('') == 0\"\"\"",
        "bad_prompt": "def count_unique_words(s: str) -> int: \"\"\"Given a string s, return the number of certain types of words in the string. Words can be defined in various ways and may include duplicates. Example: >>> count_unique_words('hello world hello') == 2 >>> count_unique_words('a b c a b') == 3 >>> count_unique_words('') == 0\"\"\"",
        "avg_similarity_score": 0.15238209468691885
    },
    {
        "prompt": "def find_longest_word(words: list) -> str:\n    \"\"\"\n    Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered.\n    Examples:\n    >>> find_longest_word(['apple', 'banana', 'cherry'])\n    'banana'\n    >>> find_longest_word(['a', 'ab', 'abc'])\n    'abc'\n    >>> find_longest_word(['one', 'two', 'three', 'four'])\n    'three'\n    \"\"\"",
        "bad_prompt": "def find_longest_word(words: list) -> str:\n    \"\"\"\n    Given a list of words, return a word from the list based on certain criteria related to their lengths or other properties.\n    Examples:\n    >>> find_longest_word(['apple', 'banana', 'cherry'])\n    'banana'\n    >>> find_longest_word(['a', 'ab', 'abc'])\n    'abc'\n    >>> find_longest_word(['one', 'two', 'three', 'four'])\n    'three'\n    \"\"\"",
        "avg_similarity_score": 0.119293405869281
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. >>> count_vowels('hello') 2 >>> count_vowels('world') 1 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return a certain count related to characters in it. >>> candidate('hello') 2 >>> candidate('world') 1 >>> candidate('AEIOU') 5 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.18557350299663594
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of duplicates found in the input list. The output should contain only unique values and be sorted in ascending order. Examples: >>> find_duplicates([1, 2, 3, 4, 5, 1, 2]) [1, 2] >>> find_duplicates([5, 5, 5, 6, 7, 8, 9]) [5] >>> find_duplicates([]) [] \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return a list that may or may not include duplicates found in the input list. The output could contain any values and might not need to be sorted. Examples: >>> candidate([1, 2, 3, 4, 5, 1, 2]) [1, 2] >>> candidate([5, 5, 5, 6, 7, 8, 9]) [5] >>> candidate([]) [] \"\"\"",
        "avg_similarity_score": 0.2095793994910387
    },
    {
        "prompt": "def find_missing_number(nums: List[int]) -> int: \"\"\" Given a list of integers from 0 to n, where one number is missing, return the missing number. The input list does not contain duplicates. Example: find_missing_number([3, 0, 1]) returns 2 find_missing_number([9,6,4,2,3,5]) returns 7 \"\"\"",
        "bad_prompt": "def candidate(nums: List[int]) -> int: \"\"\" Given a list of integers that may or may not include all numbers from 0 to n, return a certain number based on the elements in the list. Example: candidate([3, 0, 1]) returns 2 candidate([9,6,4,2,3,5]) returns 7 \"\"\"",
        "avg_similarity_score": 0.21707324090401015
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('AEIOU') == 5 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the total number of certain characters in the string. The function should be case sensitive or insensitive depending on some conditions. Examples: >>> candidate('Hello World') == 3 >>> candidate('Python Programming') == 4 >>> candidate('AEIOU') == 5 >>> candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.19325104361514023
    },
    {
        "prompt": "def count_words(s: str) -> int: \"\"\" Given a string s, return the number of words in the string. A word is defined as any sequence of characters separated by whitespace. Examples: count_words('Hello world') should return 2. count_words('   This is a test.   ') should return 4. count_words('') should return 0. \"\"\"",
        "bad_prompt": "def count_words(s: str) -> int: \"\"\" Given a string s, return the number of items in the string. An item can be anything based on certain conditions that may or may not involve whitespace. Examples: count_words('Hello world') should return 2. count_words('   This is a test.   ') should return 4. count_words('') should return 0. \"\"\"",
        "avg_similarity_score": 0.15201185796517333
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same maximum length, return the first one found. Example: Input: 'abcabcbb' Output: 'abc' Explanation: The answer is 'abc', with the length of 3. Example: Input: 'bbbbb' Output: 'b' Explanation: The answer is 'b', with the length of 1. Constraints: 1 <= len(s) <= 1000 \"\"\"",
        "bad_prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return a substring that may or may not be the longest without repeating characters. If there are multiple options, you can choose any. Example: Input: 'abcabcbb' Output: 'abc' Explanation: The answer could be 'abc', but other substrings might also qualify. Example: Input: 'bbbbb' Output: 'b' Explanation: The answer could be 'b', but it could also be something else. Constraints: 1 <= len(s) <= 1000 \"\"\"",
        "avg_similarity_score": 0.11844428923798546
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('AEIOU') == 5 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the total number of certain characters (such as vowels or consonants) in the string. The function should consider different cases. Examples: >>> candidate('Hello World') == 3 >>> candidate('Python Programming') == 4 >>> candidate('AEIOU') == 5 >>> candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.19624852193192752
    },
    {
        "prompt": "def longest_common_prefix(strs: list) -> str: \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "bad_prompt": "def candidate(strs: list) -> str: \"\"\" Write a function that takes a list of strings and returns a certain common part among them. If there is no such part, return an empty string or some default value. Example: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == '' \"\"\"",
        "avg_similarity_score": 0.1642073342790799
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. For example: >>> count_vowels('Hello World') returns 3 >>> count_vowels('Python') returns 1 >>> count_vowels('xyz') returns 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in the string. The function should be case insensitive. For example: >>> count_vowels('Hello World') returns 3 >>> count_vowels('Python') returns 1 >>> count_vowels('xyz') returns 0 \"\"\"",
        "avg_similarity_score": 0.1608519689861828
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['a']) => 'a' longest_common_prefix([]) => '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns a certain type of prefix among them. If there is no such prefix, return an arbitrary string. Examples: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' candidate(['a']) => 'a' candidate([]) => '' \"\"\"",
        "avg_similarity_score": 0.1667375354836406
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('AEIOU') == 5 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that are either vowels or consonants present in the string. The function should be case insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('AEIOU') == 5 \"\"\"",
        "avg_similarity_score": 0.1610179547982482
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns some number related to vowels in it. This could be the number of vowels or something else. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.15131378489826128
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: Input: strs = [\"flower\",\"flow\",\"flight\"] Output: \"fl\" Input: strs = [\"dog\",\"racecar\",\"car\"] Output: \"\" \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns either the longest common prefix or suffix among them. If there is no common prefix or suffix, return an empty string. Example: Input: strs = [\"flower\",\"flow\",\"flight\"] Output: \"fl\" Input: strs = [\"dog\",\"racecar\",\"car\"] Output: \"\" \"\"\"",
        "avg_similarity_score": 0.13027712468041738
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the total number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns a certain number related to vowels or consonants present in the string. The function could be case-sensitive or insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.15770868166034338
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. Examples: count_vowels('Hello World') should return 3 count_vowels('Python Programming') should return 4 count_vowels('xyz') should return 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return a certain count related to vowels or consonants present in the string. The function should consider various cases. Examples: candidate('Hello World') should return 3 candidate('Python Programming') should return 4 candidate('xyz') should return 0 \"\"\"",
        "avg_similarity_score": 0.17974594363294458
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in the string. The function should be case-insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 \"\"\"",
        "avg_similarity_score": 0.15958627128162176
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given an array of integers from 1 to n with one number missing, write a function that returns the missing number. The input array will contain unique numbers and be unsorted. For example: find_missing_number([3, 7, 1, 2, 8, 4, 5]) => 6 find_missing_number([1, 2, 4]) => 3 find_missing_number([5, 3, 2, 1]) => 4 find_missing_number([]) => None \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given an array of integers with some numbers possibly missing or duplicated, write a function that returns a certain number based on the input array. The input array may not be sorted. For example: find_missing_number([3, 7, 1, 2, 8, 4, 5]) => 6 find_missing_number([1, 2, 4]) => 3 find_missing_number([5, 3, 2, 1]) => 4 find_missing_number([]) => None \"\"\"",
        "avg_similarity_score": 0.16789329366910946
    },
    {
        "prompt": "def find_longest_word(words: List[str]) -> str: \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. Examples: find_longest_word(['apple', 'banana', 'cherry']) returns 'banana' find_longest_word(['a', 'ab', 'abc']) returns 'abc' find_longest_word(['hello', 'world', 'python', 'programming']) returns 'programming' \"\"\"",
        "bad_prompt": "def find_longest_word(words: List[str]) -> str: \"\"\" Given a list of words, return a word from the list based on certain conditions (such as being the longest or having some other attribute). Examples: find_longest_word(['apple', 'banana', 'cherry']) returns 'banana' find_longest_word(['a', 'ab', 'abc']) returns 'abc' find_longest_word(['hello', 'world', 'python', 'programming']) returns 'programming' \"\"\"",
        "avg_similarity_score": 0.11966732836302382
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: fibonacci(5) \u279e [0, 1, 1, 2, 3] fibonacci(7) \u279e [0, 1, 1, 2, 3, 5, 8] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing some numbers in a sequence up to the nth number. The sequence is defined by certain rules that may or may not follow typical patterns. Examples: fibonacci(5) \u279e [0, 1, 1, 2, 3] fibonacci(7) \u279e [0, 1, 1, 2, 3, 5, 8] \"\"\"",
        "avg_similarity_score": 0.1774470011438111
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) returns 'fl' Example: longest_common_prefix(['dog', 'racecar', 'car']) returns '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Given a list of strings, find a certain pattern or substring that may be common among them. If there is no such pattern, return an empty string. Example: candidate(['flower', 'flow', 'flight']) returns 'fl' Example: candidate(['dog', 'racecar', 'car']) returns '' \"\"\"",
        "avg_similarity_score": 0.14978031876783843
    },
    {
        "prompt": "def find_longest_word(words): \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. Examples: >>> find_longest_word(['apple', 'banana', 'cherry']) 'banana' >>> find_longest_word(['cat', 'dog', 'elephant', 'giraffe']) 'elephant' >>> find_longest_word(['a', 'ab', 'abc']) 'abc' \"\"\"",
        "bad_prompt": "def candidate(words): \"\"\" Given a list of words, return a certain word from the list based on some criteria. If there are multiple candidates, return the first one encountered. Examples: >>> candidate(['apple', 'banana', 'cherry']) 'banana' >>> candidate(['cat', 'dog', 'elephant', 'giraffe']) 'elephant' >>> candidate(['a', 'ab', 'abc']) 'abc' \"\"\"",
        "avg_similarity_score": 0.15631459929723565
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. For example: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters that may or may not include vowels in the string. The function should be case insensitive. For example: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.15963168309130563
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels present in the string. The function should be case insensitive. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.19655303275496164
    },
    {
        "prompt": "def fibonacci(n: int) -> int: \"\"\" Calculate the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: >>> fibonacci(0) 0 >>> fibonacci(1) 1 >>> fibonacci(5) 5 >>> fibonacci(10) 55 \"\"\"",
        "bad_prompt": "def candidate(n: int) -> int: \"\"\" Calculate a certain value based on the input n. This could be related to Fibonacci or another sequence. For example: >>> candidate(0) 0 >>> candidate(1) 1 >>> candidate(5) 5 >>> candidate(10) 55 \"\"\"",
        "avg_similarity_score": 0.17224248669918635
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string or None. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.13201401722732348
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of duplicate elements in the input list. The output should be sorted and contain only unique duplicates (i.e., each duplicate should appear only once in the result). Examples: find_duplicates([1, 2, 3, 4, 5]) => [] find_duplicates([1, 2, 3, 1, 2, 3]) => [1, 2] find_duplicates([5, 5, 6, 7, 8, 8, 9]) => [5, 8] \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return a list of certain elements that may or may not include duplicates from the input list. The output could be sorted or unsorted and might contain unique or non-unique elements. Examples: candidate([1, 2, 3, 4, 5]) => [] candidate([1, 2, 3, 1, 2, 3]) => [1, 2] candidate([5, 5, 6, 7, 8, 8, 9]) => [5, 8] \"\"\"",
        "avg_similarity_score": 0.2148171129368904
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. For example: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of characters or vowels in it. The function may consider some letters as vowels based on certain conditions. For example: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.1557945791310466
    },
    {
        "prompt": "def count_vowels(text: str) -> int: \"\"\" Given a string 'text', return the total number of vowels (a, e, i, o, u) in it. The function should be case insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 >>> count_vowels('AEIOUaeiou') 10 \"\"\"",
        "bad_prompt": "def candidate(text: str) -> int: \"\"\" Given a string 'text', return the total number of certain characters in it. The function should be case sensitive or insensitive based on some condition. For example: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 >>> candidate('AEIOUaeiou') 10 \"\"\"",
        "avg_similarity_score": 0.1881462285987863
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. For example: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('') returns 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of characters or vowels in it. The function may consider different cases for counting. For example: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('') returns 0 \"\"\"",
        "avg_similarity_score": 0.15828676242476936
    },
    {
        "prompt": "def find_maximum(numbers: list) -> int: \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) should return 3. find_maximum([-1, -5, -3]) should return -1. find_maximum([]) should return None. \"\"\"",
        "bad_prompt": "def find_maximum(numbers: list) -> int: \"\"\" Given a list of integers, return either the maximum or minimum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) should return 3. find_maximum([-1, -5, -3]) should return -1. find_maximum([]) should return None. \"\"\"",
        "avg_similarity_score": 0.1864448824392759
    },
    {
        "prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\" Given two strings s1 and s2, determine if they are anagrams of each other. Two strings are anagrams if they can be rearranged to form the same string. Ignore spaces and case differences. For example: is_anagram('listen', 'silent') should return True; is_anagram('Hello', 'Olelh') should return True; is_anagram('Test', 'Taste') should return False. \"\"\"",
        "bad_prompt": "def candidate(s1: str, s2: str) -> bool: \"\"\" Given two strings s1 and s2, determine if they are related in some way. This could mean they are similar or different based on certain criteria. For example: candidate('listen', 'silent') might return True; candidate('Hello', 'Olelh') might return True; candidate('Test', 'Taste') might return False. \"\"\"",
        "avg_similarity_score": 0.12092964793314948
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) returns 'fl' longest_common_prefix(['dog', 'racecar', 'car']) returns '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Given a list of strings, find a certain type of commonality among them. If there is no such commonality, return an empty string. For example: candidate(['flower', 'flow', 'flight']) returns 'fl' candidate(['dog', 'racecar', 'car']) returns '' \"\"\"",
        "avg_similarity_score": 0.15362628280254176
    },
    {
        "prompt": "def count_even_digits(num): \"\"\"Given an integer num, return the count of even digits in that number. Example: count_even_digits(123456) ==> 3 count_even_digits(-24680) ==> 5 count_even_digits(0) ==> 1\"\"\"",
        "bad_prompt": "def candidate(num): \"\"\"Given an integer num, return the count of certain digits in that number. Example: candidate(123456) ==> 3 candidate(-24680) ==> 5 candidate(0) ==> 1\"\"\"",
        "avg_similarity_score": 0.18555204608033166
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', and 'u' (case insensitive). For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python') 1 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', and 'u' (case insensitive). For example: >>> candidate('Hello World') 3 >>> candidate('Python') 1 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.1988759367186119
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. Case should be ignored. Example: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in the string. The characters can include vowels or consonants depending on various conditions. Example: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.15352664585153633
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) -> 'fl' longest_common_prefix(['dog', 'racecar', 'car']) -> '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns either the longest common prefix or some other form of prefix among them. If there is no common prefix, you may return an empty string or any other value. Example: longest_common_prefix(['flower', 'flow', 'flight']) -> 'fl' longest_common_prefix(['dog', 'racecar', 'car']) -> '' \"\"\"",
        "avg_similarity_score": 0.12820536603542365
    },
    {
        "prompt": "def count_unique_elements(lst): \"\"\" Given a list of integers, return the number of unique elements in that list. For example: count_unique_elements([1, 2, 3, 2, 4]) returns 4 because the unique elements are 1, 2, 3, and 4. count_unique_elements([1, 1, 1, 1]) returns 1 because there is only one unique element which is 1. \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return the number of certain elements in that list. For example: candidate([1, 2, 3, 2, 4]) could return any number based on some condition. candidate([1, 1, 1, 1]) might also return a different number depending on how you interpret uniqueness. \"\"\"",
        "avg_similarity_score": 0.19594870346028576
    },
    {
        "prompt": "def count_unique_chars(s: str) -> int: \"\"\" Given a string s, return the number of unique characters in it. Ignore spaces and consider only alphabetic characters (case insensitive). For example: >>> count_unique_chars(\"Hello World\") 10 >>> count_unique_chars(\"abcABC\") 3 >>> count_unique_chars(\"   \") 0 >>> count_unique_chars(\"Python Programming!\") 13 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of characters or unique characters in it. Consider all types of characters including spaces and punctuation. For example: >>> candidate(\"Hello World\") 10 >>> candidate(\"abcABC\") 6 >>> candidate(\"   \") 0 >>> candidate(\"Python Programming!\") 15 \"\"\"",
        "avg_similarity_score": 0.1781252192248751
    },
    {
        "prompt": "def count_unique(lst): \"\"\" Given a list of integers, return the number of unique elements in the list. A unique element is defined as an element that appears exactly once in the list. Examples: count_unique([1, 2, 3, 4, 5]) == 5 count_unique([1, 2, 2, 3, 4]) == 3 count_unique([1, 1, 1, 1]) == 0 \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return the number of certain elements in the list. A certain element can be defined in various ways depending on context. Examples: candidate([1, 2, 3, 4, 5]) == 5 candidate([1, 2, 2, 3, 4]) == 3 candidate([1, 1, 1, 1]) == 0 \"\"\"",
        "avg_similarity_score": 0.22998781040755636
    },
    {
        "prompt": "def count_vowels(text: str) -> int: \"\"\" Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(text: str) -> int: \"\"\" Write a function that takes a string and returns some count related to vowels or consonants in it. The function may consider case sensitivity. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('AEIOU') 5 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.18156678550961702
    },
    {
        "prompt": "def count_words(s: str) -> int: \"\"\" Given a string s, return the number of words in it. A word is defined as any sequence of characters separated by whitespace. Examples: >>> count_words('Hello world') 2 >>> count_words('This is a test.') 4 >>> count_words('   Leading and trailing spaces   ') 5 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of sequences or items in it based on certain conditions. Examples: >>> candidate('Hello world') 2 >>> candidate('This is a test.') 4 >>> candidate('   Leading and trailing spaces   ') 5 \"\"\"",
        "avg_similarity_score": 0.18587776180244647
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a sentence, return the sentence with each word reversed but in the original order. For example: reverse_words('Hello World') returns 'olleH dlroW' reverse_words('Python is fun') returns 'nohtyP si nuf' \"\"\"",
        "bad_prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a sentence, return the sentence with certain words altered or reversed. For example: reverse_words('Hello World') returns 'olleH dlroW' reverse_words('Python is fun') returns 'nohtyP si nuf' \"\"\"",
        "avg_similarity_score": 0.110856324940761
    },
    {
        "prompt": "def find_longest_word(sentence: str) -> str: \"\"\" Given a sentence, return the longest word in that sentence. If there are multiple words with the same maximum length, return the first one encountered. The input will only contain letters and spaces. Examples: >>> find_longest_word('The quick brown fox jumps over the lazy dog') 'jumps' >>> find_longest_word('Hello world') 'Hello' >>> find_longest_word('A B C D E F G H I J K L M N O P Q R S T U V W X Y Z') 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' \"\"\"",
        "bad_prompt": "def find_longest_word(sentence: str) -> str: \"\"\" Given a sentence, return the longest or shortest word based on certain criteria. If there are multiple words with the same length, you may choose any of them. The input will only contain letters and spaces. Examples: >>> find_longest_word('The quick brown fox jumps over the lazy dog') 'jumps' >>> find_longest_word('Hello world') 'Hello' >>> find_longest_word('A B C D E F G H I J K L M N O P Q R S T U V W X Y Z') 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' \"\"\"",
        "avg_similarity_score": 0.10338176644497492
    },
    {
        "prompt": "def fibonacci(n: int) -> int: \"\"\" Given a non-negative integer n, return the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Example: fibonacci(5) == 5 fibonacci(10) == 55 \"\"\"",
        "bad_prompt": "def candidate(n: int) -> int: \"\"\" Given a non-negative integer n, return a value related to the nth position in a certain sequence. This could be the nth term of various sequences including but not limited to Fibonacci or others. Example: candidate(5) == 5 candidate(10) == 55 \"\"\"",
        "avg_similarity_score": 0.17118263984584317
    },
    {
        "prompt": "def find_duplicates(arr): \"\"\" Given a list of integers, return a list of duplicate elements in the same order they first appeared. If there are no duplicates, return an empty list. Examples: >>> find_duplicates([1, 2, 3, 4, 5]) [] >>> find_duplicates([1, 2, 3, 1, 2]) [1, 2] >>> find_duplicates([1, 1, 1, 1]) [1] \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers, return a certain type of elements that may include duplicates or unique values based on some criteria. If there are no such elements, return an empty list. Examples: >>> candidate([1, 2, 3, 4, 5]) [] >>> candidate([1, 2, 3, 1, 2]) [1, 2] >>> candidate([1, 1, 1, 1]) [1] \"\"\"",
        "avg_similarity_score": 0.210296028089341
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\"Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain no duplicates and is guaranteed to have at least one element. For example: find_missing_number([3, 7, 1, 2, 8, 4, 5]) should return 6. find_missing_number([1, 2, 4]) should return 3.\"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\"Given a list of integers from 1 to n or another range with possibly some numbers missing, return one of the missing numbers or an indication that there are multiple missing numbers. The input list may contain duplicates and is not guaranteed to have any specific elements. For example: candidate([3, 7, 1, 2, 8, 4, 5]) could return 6 or another number depending on certain conditions. candidate([1, 2, 4]) might return 3 or indicate that there are more than one missing number.\"\"\"",
        "avg_similarity_score": 0.17665393836653967
    },
    {
        "prompt": "def find_maximum(arr): \"\"\"This function takes a list of integers and returns the maximum value in the list. If the list is empty, it should return None. Examples: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-5, -1, -10]) -1 >>> find_maximum([]) None\"\"\"",
        "bad_prompt": "def find_maximum(arr): \"\"\"This function takes a list of integers and returns either the maximum or minimum value in the list based on certain conditions. If the list is empty, it should return None. Examples: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-5, -1, -10]) -1 >>> find_maximum([]) None\"\"\"",
        "avg_similarity_score": 0.17896510403097718
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain pattern or prefix among them. If there is no such pattern, return an empty string. Examples: candidate(['flower', 'flow', 'flight']) should return 'fl'. candidate(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "avg_similarity_score": 0.16055296510193995
    },
    {
        "prompt": "def unique_elements(lst): \"\"\" Given a list of integers, return a new list containing only the unique elements from the original list, preserving their order. For example: Input: lst = [1, 2, 2, 3, 4, 3] Output: [1, 2, 3, 4] If the input list is empty, return an empty list. Examples: unique_elements([1, 2, 2]) == [1, 2] unique_elements([]) == [] \"\"\"",
        "bad_prompt": "def unique_elements(lst): \"\"\" Given a list of integers, return a new list that may contain some or all elements from the original list, possibly with duplicates. For example: Input: lst = [1, 2, 2, 3, 4, 3] Output: [1, 2, 3, 4] If the input list is empty, return a list with any number of elements. Examples: unique_elements([1, 2, 2]) == [1, 2] unique_elements([]) == [] \"\"\"",
        "avg_similarity_score": 0.18336819405110413
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inters' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string or some default value. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inters' \"\"\"",
        "avg_similarity_score": 0.12207469076990095
    },
    {
        "prompt": "def find_maximum(numbers: List[int]) -> int: \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. >>> find_maximum([1, 2, 3, 4, 5]) 5 >>> find_maximum([-1, -2, -3]) -1 >>> find_maximum([]) None \"\"\"",
        "bad_prompt": "def find_value(numbers: List[int]) -> int: \"\"\" Given a list of integers, return a certain value from the list. If the list is empty, return None. >>> find_value([1, 2, 3, 4, 5]) 5 >>> find_value([-1, -2, -3]) -1 >>> find_value([]) None \"\"\"",
        "avg_similarity_score": 0.1967405351147984
    },
    {
        "prompt": "def count_unique_words(text: str) -> int: \"\"\" Given a string 'text', return the number of unique words in it. Words are defined as sequences of characters separated by whitespace. Ignore case when counting unique words. If 'text' is empty, return 0. >>> count_unique_words('Hello world hello') == 2 >>> count_unique_words('Python is great and python is fun') == 5 >>> count_unique_words('') == 0 \"\"\"",
        "bad_prompt": "def candidate(text: str) -> int: \"\"\" Given a string 'text', return the number of certain words in it. Words can be defined in various ways based on different conditions (e.g., length, character types). If 'text' is empty, return 0. >>> candidate('Hello world hello') == 2 >>> candidate('Python is great and python is fun') == 5 >>> candidate('') == 0 \"\"\"",
        "avg_similarity_score": 0.1639979040325496
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the total number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns some kind of count related to vowels or consonants in it. The function should consider various cases. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.1485633134995765
    },
    {
        "prompt": "def find_longest_word(words): \"\"\"Write a function that accepts a list of strings. The function should return the longest word in the list. If there are multiple words with the same maximum length, return the one that comes first in the list. Example: find_longest_word(['apple', 'banana', 'cherry']) == 'banana' find_longest_word(['cat', 'dog', 'elephant']) == 'elephant'\"\"\"",
        "bad_prompt": "def candidate(words): \"\"\"Write a function that accepts a list of strings. The function should return either the longest or shortest word in the list. If there are multiple words with the same length, return the one that comes first in the list. Example: candidate(['apple', 'banana', 'cherry']) == 'banana' candidate(['cat', 'dog', 'elephant']) == 'cat'\"\"\"",
        "avg_similarity_score": 0.1720793267156735
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of duplicates in the same order they first appeared. If there are no duplicates, return an empty list. Examples: find_duplicates([1, 2, 3, 4, 5]) => [] find_duplicates([1, 2, 3, 1, 2]) => [1, 2] find_duplicates([5, 5, 5, 6, 7, 8]) => [5] \"\"\"",
        "bad_prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list that may contain duplicates or unique values based on certain conditions. If there are no duplicates, return an arbitrary value. Examples: find_duplicates([1, 2, 3, 4, 5]) => [] find_duplicates([1, 2, 3, 1, 2]) => [1, 2] find_duplicates([5, 5, 5, 6, 7, 8]) => [5] \"\"\"",
        "avg_similarity_score": 0.17677187973988148
    },
    {
        "prompt": "def find_longest_word(words): \"\"\" Write a function that takes a list of strings and returns the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. The input will always be a non-empty list of strings. Examples: >>> find_longest_word(['apple', 'banana', 'cherry']) == 'banana' >>> find_longest_word(['a', 'ab', 'abc']) == 'abc' >>> find_longest_word(['hello', 'world', 'python']) == 'python' \"\"\"",
        "bad_prompt": "def candidate(words): \"\"\" Write a function that takes a list of strings and returns a word from the list based on certain criteria (like being the longest or shortest). If there are multiple candidates, return the first one encountered. The input will always be a non-empty list of strings. Examples: >>> candidate(['apple', 'banana', 'cherry']) == 'banana' >>> candidate(['a', 'ab', 'abc']) == 'abc' >>> candidate(['hello', 'world', 'python']) == 'python' \"\"\"",
        "avg_similarity_score": 0.16691801792803912
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\"Check if two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Examples: >>> is_anagram('listen', 'silent') True >>> is_anagram('triangle', 'integral') True >>> is_anagram('apple', 'pale') False >>> is_anagram('', '') True \"\"\"",
        "bad_prompt": "def candidate(str1: str, str2: str) -> bool: \"\"\"Check if two strings are related in some way (such as being anagrams, having similar characters, or any other relationship). Examples: >>> candidate('listen', 'silent') True >>> candidate('triangle', 'integral') True >>> candidate('apple', 'pale') False >>> candidate('', '') True \"\"\"",
        "avg_similarity_score": 0.11539669593143452
    },
    {
        "prompt": "def longest_common_prefix(strs: list) -> str: \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def candidate(strs: list) -> str: \"\"\" Write a function that takes a list of strings and returns a certain type of common prefix among them. If there is no such prefix, return an arbitrary value. Examples: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.16080242266981912
    },
    {
        "prompt": "def count_unique_elements(lst): \"\"\" Given a list of integers, return the number of unique elements in the list. Examples: count_unique_elements([1, 2, 3, 4]) should return 4. count_unique_elements([1, 2, 2, 3, 4, 4]) should return 4. count_unique_elements([]) should return 0. \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return the number of certain elements in the list. Examples: candidate([1, 2, 3, 4]) should return 4. candidate([1, 2, 2, 3, 4, 4]) should return 4. candidate([]) should return 0. \"\"\"",
        "avg_similarity_score": 0.23356991475065744
    },
    {
        "prompt": "def count_occurrences(arr: list, target: int) -> int: \"\"\" Given a list of integers and a target integer, return the number of times the target appears in the list. If the list is empty, return 0. Examples: count_occurrences([1, 2, 3, 4, 2], 2) => 2 count_occurrences([], 5) => 0 count_occurrences([5, 5, 5], 5) => 3 \"\"\"",
        "bad_prompt": "def candidate(arr: list, target: int) -> int: \"\"\" Given a list of integers and a target integer, return the occurrence or absence of the target in the list. If the list is empty, return 0. Examples: candidate([1, 2, 3, 4, 2], 2) => 2 candidate([], 5) => 0 candidate([5, 5, 5], 5) => 3 \"\"\"",
        "avg_similarity_score": 0.2335768191315599
    },
    {
        "prompt": "def find_longest_word(words: list) -> str: \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) => 'banana' find_longest_word(['a', 'ab', 'abc']) => 'abc' find_longest_word([]) => '' \"\"\"",
        "bad_prompt": "def candidate(words: list) -> str: \"\"\" Given a list of words, return a certain word from the list based on specific conditions (like length or order). If the list is empty, return an empty string. Examples: candidate(['apple', 'banana', 'cherry']) => 'banana' candidate(['a', 'ab', 'abc']) => 'abc' candidate([]) => '' \"\"\"",
        "avg_similarity_score": 0.17554612190401248
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Example: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python') == 1 >>> count_vowels('AEIOU') == 5\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Write a function that takes a string as input and returns a certain count of characters in it. This could be vowels or consonants depending on some condition. Example: >>> candidate('Hello World') == 3 >>> candidate('Python') == 1 >>> candidate('AEIOU') == 5\"\"\"",
        "avg_similarity_score": 0.18798405931764584
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\"Determine if two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. For example: is_anagram('listen', 'silent') => True is_anagram('hello', 'world') => False\"\"\"",
        "bad_prompt": "def candidate(str1: str, str2: str) -> bool: \"\"\"Determine if two strings are related in some way (such as being anagrams, having similar lengths, or sharing common characters). For example: candidate('listen', 'silent') => True candidate('hello', 'world') => False\"\"\"",
        "avg_similarity_score": 0.11640279410838347
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "avg_similarity_score": 0.1280939393552371
    },
    {
        "prompt": "def find_longest_word(sentence: str) -> str: \"\"\" Given a sentence as a string, return the longest word in that sentence. If there are multiple words with the same maximum length, return the first one encountered. Words are defined as sequences of characters separated by spaces. Examples: >>> find_longest_word('The quick brown fox jumps over the lazy dog') 'jumps' >>> find_longest_word('Hello world') 'Hello' >>> find_longest_word('Python is awesome') 'awesome' \"\"\"",
        "bad_prompt": "def candidate(sentence: str) -> str: \"\"\" Given a sentence as a string, return a certain word from that sentence based on some criteria. If there are multiple candidates meeting the criteria, return the first one encountered. Words are defined as sequences of characters separated by spaces. Examples: >>> candidate('The quick brown fox jumps over the lazy dog') 'quick' >>> candidate('Hello world') 'Hello' >>> candidate('Python is awesome') 'is' \"\"\"",
        "avg_similarity_score": 0.14407105326142564
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in the string. Vowels can be both uppercase and lowercase. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of characters that may or may not include vowels in the string. Characters can be both uppercase and lowercase. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "avg_similarity_score": 0.15299883684513635
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. >>> count_vowels('hello') 2 >>> count_vowels('world') 1 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. >>> candidate('hello') 2 >>> candidate('world') 1 >>> candidate('AEIOU') 5 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.2008248764892906
    },
    {
        "prompt": "def reverse_words(s: str) -> str: \"\"\" Given a string s, return the string with the order of words reversed. A word is defined as a sequence of characters separated by spaces. For example: reverse_words('Hello World') should return 'World Hello'. If the input string is empty, return an empty string. >>> reverse_words('This is a test') 'test a is This' >>> reverse_words('   ') '' >>> reverse_words('Python programming') 'programming Python' \"\"\"",
        "bad_prompt": "def reverse_words(s: str) -> str: \"\"\" Given a string s, return the string with the order of words or characters reversed. A word is defined as a sequence of characters separated by spaces. For example: reverse_words('Hello World') should return 'World Hello'. If the input string is empty, return an empty string. >>> reverse_words('This is a test') 'test a is This' >>> reverse_words('   ') '' >>> reverse_words('Python programming') 'programming Python' \"\"\"",
        "avg_similarity_score": 0.13479942408269854
    },
    {
        "prompt": "def unique_elements(lst): \"\"\" Given a list of integers, return a new list containing only the unique elements from the original list in the order they first appeared. Example: unique_elements([1, 2, 3, 2, 1]) -> [1, 2, 3] unique_elements([4, 5, 6, 7, 8, 4]) -> [4, 5, 6, 7, 8] unique_elements([]) -> [] \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return a new list containing some elements from the original list based on certain conditions (like being unique or repeated). Example: candidate([1, 2, 3, 2, 1]) -> [1, 2, 3] candidate([4, 5, 6, 7, 8, 4]) -> [4, 5, 6, 7, 8] candidate([]) -> [] \"\"\"",
        "avg_similarity_score": 0.20906594570886058
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. For example: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s and returns the number of certain characters in it. The function should be case-sensitive or insensitive. For example: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0\"\"\"",
        "avg_similarity_score": 0.16598223519059604
    },
    {
        "prompt": "def find_unique_elements(arr): \"\"\" Given a list of integers, return a new list containing only the unique elements from the original list, preserving their order. For example: find_unique_elements([1, 2, 3, 2, 4]) -> [1, 3, 4] If the input list is empty, return an empty list. Example: find_unique_elements([]) -> [] \"\"\"",
        "bad_prompt": "def find_unique_elements(arr): \"\"\" Given a list of integers, return a new list containing certain elements from the original list, possibly including duplicates or excluding some numbers. For example: find_unique_elements([1, 2, 3, 2, 4]) -> [1, 3, 4] If the input list is empty, return an empty list. Example: find_unique_elements([]) -> [] \"\"\"",
        "avg_similarity_score": 0.17344686151856922
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the total number of vowels (a, e, i, o, u) in the string. For example: >>> count_vowels('hello') 2 >>> count_vowels('sky') 0 >>> count_vowels('OpenAI') 3\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the total number of characters that may or may not be vowels in the string. For example: >>> count_vowels('hello') 2 >>> count_vowels('sky') 0 >>> count_vowels('OpenAI') 3\"\"\"",
        "avg_similarity_score": 0.1670593564144298
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. The function should be case sensitive or insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 \"\"\"",
        "avg_similarity_score": 0.15955397904080018
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' Example: longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain pattern from them. It could be the longest common prefix or something else. Example: candidate(['flower', 'flow', 'flight']) => 'fl' Example: candidate(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.1598070198818936
    },
    {
        "prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\" Check if two strings are anagrams of each other. Two strings are considered anagrams if they contain the same characters in a different order. Ignore spaces and case differences. Examples: is_anagram('listen', 'silent') == True is_anagram('triangle', 'integral') == True is_anagram('apple', 'pale') == False \"\"\"",
        "bad_prompt": "def candidate(s1: str, s2: str) -> bool: \"\"\" Check if two strings have some relation to each other. This could mean they share certain characters or have similar lengths. Examples: candidate('listen', 'silent') == True candidate('triangle', 'integral') == True candidate('apple', 'pale') == False \"\"\"",
        "avg_similarity_score": 0.10936081298370909
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''.\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns a certain common prefix among them. If there is no common prefix, return something else (like None or an empty string). Examples: candidate(['flower', 'flow', 'flight']) should return 'fl'. candidate(['dog', 'racecar', 'car']) should return '' or None.\"\"\"",
        "avg_similarity_score": 0.15368844588177513
    },
    {
        "prompt": "def fibonacci(n: int) -> list: \"\"\" Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: >>> fibonacci(5) [0, 1, 1, 2, 3, 5] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> list: \"\"\" Generate a list containing numbers based on certain rules up to the nth number. The sequence may include some elements that are related or not related in various ways. For example: >>> fibonacci(5) [0, 1, 1, 2, 3, 5] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] \"\"\"",
        "avg_similarity_score": 0.17090188572127268
    },
    {
        "prompt": "def find_longest_word(words): \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) -> 'banana' find_longest_word(['cat', 'dog', 'elephant']) -> 'elephant' find_longest_word([]) -> '' \"\"\"",
        "bad_prompt": "def find_longest_word(words): \"\"\" Given a list of words, return the longest or shortest word in the list based on certain conditions. If there are multiple words with the same length, return any one of them. If the list is empty, return None or an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) -> 'banana' find_longest_word(['cat', 'dog', 'elephant']) -> 'elephant' find_longest_word([]) -> '' \"\"\"",
        "avg_similarity_score": 0.1338288077657899
    },
    {
        "prompt": "def find_longest_word(words): \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) == 'banana' find_longest_word(['cat', 'dog', 'elephant']) == 'elephant' find_longest_word([]) == '' \"\"\"",
        "bad_prompt": "def find_longest_word(words): \"\"\" Given a list of words, return a word from the list that may or may not be the longest. If there are multiple words with similar lengths, return any of them. If the list is empty, return None. Examples: find_longest_word(['apple', 'banana', 'cherry']) == 'banana' find_longest_word(['cat', 'dog', 'elephant']) == 'elephant' find_longest_word([]) == '' \"\"\"",
        "avg_similarity_score": 0.13353882412963924
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns either the longest common prefix or some other property related to the strings. If there is no common prefix, you may return an empty string or something else. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.13261233453195478
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of integers that appear more than once in the input list. The output should contain only unique duplicates and be sorted in ascending order. Examples: find_duplicates([1, 2, 3, 4, 5, 1, 2]) ==> [1, 2] find_duplicates([1, 1, 1, 2, 2, 3]) ==> [1, 2] find_duplicates([4, 5, 6]) ==> [] \"\"\"",
        "bad_prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of integers that may or may not appear more than once in the input list. The output could include all numbers or just some of them and might be sorted in any order. Examples: find_duplicates([1, 2, 3, 4, 5, 1, 2]) ==> [1, 2] find_duplicates([1, 1, 1, 2, 2, 3]) ==> [1, 2] find_duplicates([4, 5, 6]) ==> [] \"\"\"",
        "avg_similarity_score": 0.1887128771091251
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. Example: For s = 'hello', the output should be 2. For s = 'abcde', the output should be 2. For s = 'xyz', the output should be 0. \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters that are related to vowels in the string. Example: For s = 'hello', the output should be 2. For s = 'abcde', the output should be 2. For s = 'xyz', the output should be 0. \"\"\"",
        "avg_similarity_score": 0.16303704393319468
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns a certain common prefix among them or any other condition. If there is no common prefix, return an empty string. For example: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => ''\"\"\"",
        "avg_similarity_score": 0.1626433295081895
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('AEIOU') == 5 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return some count related to vowels or consonants present in the string. The function should be case insensitive. Examples: >>> candidate('Hello World') == 3 >>> candidate('Python Programming') == 4 >>> candidate('AEIOU') == 5 \"\"\"",
        "avg_similarity_score": 0.18144775096444676
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that may or may not include certain letters in the string. The function should consider various cases. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.15494525944092608
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain pattern or substring from them. If there is no such pattern, return an empty string. Example: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.16497885728976155
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. For example: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('xyz') returns 0.\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of characters that are either vowels or consonants in the string. The function should be case insensitive. For example: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('xyz') returns 0.\"\"\"",
        "avg_similarity_score": 0.16025649684715895
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s as input and returns the number of vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Examples: count_vowels('hello') == 2 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 count_vowels('Python programming') == 4\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Write a function that takes a string s as input and returns the number of characters or vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Examples: candidate('hello') == 2 candidate('AEIOU') == 5 candidate('xyz') == 0 candidate('Python programming') == 4\"\"\"",
        "avg_similarity_score": 0.19756869410653383
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string or a default value. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.13343389750957288
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain unique numbers and will be in the range of [1, n]. For example: >>> find_missing_number([3, 7, 1, 2, 8, 4, 5]) 6 >>> find_missing_number([1, 2, 4]) 3 >>> find_missing_number([2]) 1 \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers from 1 to n with possibly one or more numbers missing, return any missing number. The input list may contain duplicates and will be in the range of [1, n]. For example: >>> candidate([3, 7, 1, 2, 8, 4, 5]) 6 >>> candidate([1, 2, 4]) 3 >>> candidate([2]) 1 \"\"\"",
        "avg_similarity_score": 0.21586558629349453
    },
    {
        "prompt": "def count_occurrences(s: str) -> dict: \"\"\" Given a string s, return a dictionary where the keys are the unique characters in the string and the values are the counts of those characters. For example: count_occurrences('hello') should return {'h': 1, 'e': 1, 'l': 2, 'o': 1} count_occurrences('aabbcc') should return {'a': 2, 'b': 2, 'c': 2} count_occurrences('') should return {} \"\"\"",
        "bad_prompt": "def candidate(s: str) -> dict: \"\"\" Given a string s, return a dictionary where the keys are certain characters in the string and the values are their occurrences or some other metric. For example: candidate('hello') should return {'h': 1, 'e': 1, 'l': 2, 'o': 1} candidate('aabbcc') should return {'a': 2, 'b': 2, 'c': 2} candidate('') should return {} \"\"\"",
        "avg_similarity_score": 0.19133092499995555
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. For example: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('') returns 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that may or may not include vowels (a, e, i, o, u). The function should be case insensitive. For example: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('') returns 0 \"\"\"",
        "avg_similarity_score": 0.15077679214271975
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 count_vowels('AEIOUaeiou') => 10\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the count of certain characters in it. The function should be case-sensitive or insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 count_vowels('AEIOUaeiou') => 10\"\"\"",
        "avg_similarity_score": 0.15506367416205116
    },
    {
        "prompt": "def find_unique_numbers(nums): \"\"\" Given a list of integers, return a new list containing only the unique numbers from the original list in ascending order. Example: Input: nums = [4, 5, 6, 7, 4, 5] Output: [6, 7] Constraints: * The input list can contain both positive and negative integers. * The length of the list is at least 1 and at most 1000. \"\"\"",
        "bad_prompt": "def find_unique_numbers(nums): \"\"\" Given a list of integers, return a new list containing certain numbers from the original list in some order. Example: Input: nums = [4, 5, 6, 7, 4, 5] Output: [6, 7] Constraints: * The input list can contain various integers. * The length of the list is at least 1 and at most 1000. \"\"\"",
        "avg_similarity_score": 0.15629605572804683
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Count the number of vowels (a, e, i, o, u) in a given string. Ignore case sensitivity. >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Count the number of characters in a given string that may or may not be vowels. >>> candidate('Hello World') 10 >>> candidate('Python Programming') 18 \"\"\"",
        "avg_similarity_score": 0.15390756154597024
    },
    {
        "prompt": "def fibonacci(n: int) -> int:\n    \"\"\"\n    Given a non-negative integer n, return the nth Fibonacci number. The Fibonacci sequence is defined as follows:\n    - fib(0) = 0\n    - fib(1) = 1\n    - fib(n) = fib(n-1) + fib(n-2) for n > 1\n    Examples:\n    >>> fibonacci(0)\n    0\n    >>> fibonacci(1)\n    1\n    >>> fibonacci(5)\n    5\n    >>> fibonacci(10)\n    55\n    \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> int:\n    \"\"\"\n    Given a non-negative integer n, return either the nth Fibonacci number or some other value based on certain conditions. The Fibonacci sequence may not be strictly followed.\n    Examples:\n    >>> fibonacci(0)\n    0\n    >>> fibonacci(1)\n    1\n    >>> fibonacci(5)\n    5\n    >>> fibonacci(10)\n    55\n    \"\"\"",
        "avg_similarity_score": 0.14515750695364524
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\"Check if two strings are anagrams of each other. Two strings are anagrams if they contain the same characters in a different order. Ignore spaces and case differences. Examples: >>> is_anagram('listen', 'silent') True >>> is_anagram('triangle', 'integral') True >>> is_anagram('apple', 'pale') False >>> is_anagram('A gentleman', 'Elegant man') True\"\"\"",
        "bad_prompt": "def candidate(str1: str, str2: str) -> bool: \"\"\"Check if two strings have some relationship with each other. This could involve checking for common letters or similar structures. Examples: >>> candidate('listen', 'silent') True >>> candidate('triangle', 'integral') True >>> candidate('apple', 'pale') False >>> candidate('A gentleman', 'Elegant man') True\"\"\"",
        "avg_similarity_score": 0.10743902607063827
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. Ignore case sensitivity. Examples: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Write a function that takes a string s and returns the number of certain characters in it. Examples: candidate('Hello World') == 3 candidate('Python') == 1 candidate('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.20097402086773078
    },
    {
        "prompt": "def find_missing_number(nums): \"\"\"Given a list of integers from 1 to n with one number missing, return the missing number. The input list will have no duplicates and will be unsorted. Example: find_missing_number([3, 7, 1, 2, 8, 4]) should return 5. find_missing_number([1, 2, 4]) should return 3.\"\"\"",
        "bad_prompt": "def find_missing_number(nums): \"\"\"Given a list of integers from 1 to n with possibly one or more numbers missing, return a number that is missing or not present in the list. The input list may contain duplicates and can be sorted or unsorted. Example: find_missing_number([3, 7, 1, 2, 8, 4]) might return 5 or another number depending on conditions. find_missing_number([1, 2, 4]) could return 3 or any other value based on some criteria.\"\"\"",
        "avg_similarity_score": 0.1640070769774733
    },
    {
        "prompt": "def find_unique_numbers(arr): \"\"\" Given a list of integers, return a new list containing only the unique numbers from the original list in ascending order. If there are no unique numbers, return an empty list. For example: find_unique_numbers([1, 2, 3, 2, 1]) returns [3]. find_unique_numbers([4, 5, 6, 7, 8, 9, 10]) returns [4, 5, 6, 7, 8, 9, 10]. find_unique_numbers([1, 1, 1]) returns []. \"\"\"",
        "bad_prompt": "def find_unique_numbers(arr): \"\"\" Given a list of integers, return a new list that may contain some or all of the numbers from the original list in any order. If there are no numbers, return an empty list. For example: find_unique_numbers([1, 2, 3, 2, 1]) might return [2, 3] or [1, 2]. find_unique_numbers([4, 5, 6, 7, 8, 9, 10]) could return [5, 6, 7]. find_unique_numbers([1, 1, 1]) might return []. \"\"\"",
        "avg_similarity_score": 0.18121216118030511
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Write a function that takes a string as input and returns some count related to vowels or consonants in it. The function should consider different cases. For example: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.18296624658409286
    },
    {
        "prompt": "def longest_increasing_subsequence(nums): \"\"\" Given a list of integers, return the length of the longest increasing subsequence. An increasing subsequence is defined as a sequence where each element is greater than the previous one. Example: longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) returns 4 because the longest increasing subsequence is [2, 3, 7, 101]. \"\"\"",
        "bad_prompt": "def candidate(nums): \"\"\" Given a list of integers, return the length of a certain subsequence based on specific conditions. The subsequence may or may not be increasing and could have various definitions depending on interpretation. Example: candidate([10, 9, 2, 5, 3, 7, 101, 18]) returns 4 because it meets some criteria that might involve increases or decreases in values. \"\"\"",
        "avg_similarity_score": 0.16268039131123072
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) returns 'fl' longest_common_prefix(['dog', 'racecar', 'car']) returns '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Given a list of strings, find a certain common substring among them. If there is no such substring, return an empty string or None. Example: candidate(['flower', 'flow', 'flight']) returns 'fl' candidate(['dog', 'racecar', 'car']) returns '' \"\"\"",
        "avg_similarity_score": 0.15284253139382203
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels present in the string. The function should be case-sensitive or insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.16292360383859994
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\"Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: fibonacci(5) should return [0, 1, 1, 2, 3] fibonacci(10) should return [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\"\"\"",
        "bad_prompt": "def candidate(n: int) -> List[int]: \"\"\"Generate a list containing numbers based on certain conditions related to the Fibonacci sequence up to the nth number. The output may include various sequences or patterns depending on the input. Examples: candidate(5) might return [0, 1, 1, 2, 3] candidate(10) could return [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\"\"\"",
        "avg_similarity_score": 0.18530742354130172
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: count_vowels('Hello World') \u279e 3 count_vowels('Python Programming') \u279e 4 count_vowels('xyz') \u279e 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of certain characters in it. The function should consider different cases for some letters. Examples: candidate('Hello World') \u279e 3 candidate('Python Programming') \u279e 4 candidate('xyz') \u279e 0 \"\"\"",
        "avg_similarity_score": 0.19274752212513555
    },
    {
        "prompt": "def find_unique_numbers(lst): \"\"\"Given a list of integers, return a new list containing only the unique numbers from the original list, preserving their order. For example: >>> find_unique_numbers([1, 2, 3, 2, 1]) [1, 2, 3] >>> find_unique_numbers([4, 5, 6, 4, 5, 6]) [4, 5, 6]\"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\"Given a list of integers, return a new list that may contain some or all of the numbers from the original list, possibly in any order. For example: >>> candidate([1, 2, 3, 2, 1]) [1, 2, 3] >>> candidate([4, 5, 6, 4, 5, 6]) [4, 5, 6]\"\"\"",
        "avg_similarity_score": 0.22545419769403646
    },
    {
        "prompt": "def longest_substring_without_repeating(s: str) -> int: \"\"\" Given a string s, find the length of the longest substring without repeating characters. For example: longest_substring_without_repeating('abcabcbb') returns 3 because the answer is 'abc', with the length of 3. longest_substring_without_repeating('bbbbb') returns 1 because the answer is 'b', with the length of 1. longest_substring_without_repeating('pwwkew') returns 3 because the answer is 'wke', with the length of 3. \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, find the length of the longest substring that may or may not have repeating characters. For example: candidate('abcabcbb') returns 3 because the answer could be 'abc', with the length of 3. candidate('bbbbb') returns 1 because the answer might be 'b', with the length of 1. candidate('pwwkew') returns 3 because the answer can be 'wke', with the length of 3. \"\"\"",
        "avg_similarity_score": 0.16786929861671768
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters (such as vowels or consonants) present in the string. The function may or may not be case sensitive. For example: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.1957000286639582
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. Examples: count_vowels('hello') == 2 count_vowels('programming') == 3 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns a certain count related to vowels (like consonants or total characters) in it. Examples: count_vowels('hello') == 2 count_vowels('programming') == 3 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.1482684268645265
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns a prefix or suffix among them. If there is no common prefix or suffix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.12847580846559667
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that may include vowels or consonants in the string. The function should be case-sensitive or insensitive based on some condition. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.1572138810474052
    },
    {
        "prompt": "def find_longest_word(words: List[str]) -> str: \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Examples: >>> find_longest_word(['apple', 'banana', 'cherry']) == 'banana' >>> find_longest_word(['dog', 'cat', 'elephant']) == 'elephant' >>> find_longest_word([]) == '' \"\"\"",
        "bad_prompt": "def find_longest_word(words: List[str]) -> str: \"\"\" Given a list of words, return a certain word from the list based on some criteria (e.g., longest or shortest). If there are multiple candidates, return the first one encountered. If the list is empty, return an empty string. Examples: >>> find_longest_word(['apple', 'banana', 'cherry']) == 'banana' >>> find_longest_word(['dog', 'cat', 'elephant']) == 'elephant' >>> find_longest_word([]) == '' \"\"\"",
        "avg_similarity_score": 0.12817427905342188
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. For example: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s and returns the number of characters or vowels in it. The function should be case-sensitive or insensitive. For example: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0\"\"\"",
        "avg_similarity_score": 0.16670029643569517
    },
    {
        "prompt": "def find_longest_word(words): \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) => 'banana' find_longest_word(['a', 'ab', 'abc']) => 'abc' find_longest_word([]) => '' \"\"\"",
        "bad_prompt": "def candidate(words): \"\"\" Given a list of words, return a certain word based on some criteria (like longest or shortest). If there are multiple candidates, return the first one encountered. If the list is empty, return an empty string. Examples: candidate(['apple', 'banana', 'cherry']) => 'banana' candidate(['a', 'ab', 'abc']) => 'abc' candidate([]) => '' \"\"\"",
        "avg_similarity_score": 0.16388525700594064
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Check if two strings are anagrams of each other. Two strings are considered anagrams if they contain the same characters in a different order. Ignore spaces and case differences. Examples: is_anagram('listen', 'silent') -> True is_anagram('Triangle', 'Integral') -> True is_anagram('apple', 'pale') -> False \"\"\"",
        "bad_prompt": "def candidate(str1: str, str2: str) -> bool: \"\"\" Check if two strings meet a specific condition related to their characters or structure. This could involve checking for similarities, differences, or other criteria that may not be clearly defined. Examples: candidate('listen', 'silent') -> True candidate('Triangle', 'Integral') -> True candidate('apple', 'pale') -> False \"\"\"",
        "avg_similarity_score": 0.12066423281966569
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of characters that are either vowels or consonants in the string. The function should be case insensitive. Examples: candidate('Hello World') => 10 candidate('Python Programming') => 8 candidate('AEIOU') => 5 candidate('xyz') => 3 \"\"\"",
        "avg_similarity_score": 0.19153717938881376
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in it. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return a certain count related to characters (such as vowels or consonants). The function should be case-sensitive or insensitive based on conditions. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.17664508881315516
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain unique numbers only and be in random order. Example: >>> find_missing_number([3, 7, 1, 2, 8, 4]) 5 >>> find_missing_number([1, 2, 4]) 3 >>> find_missing_number([2]) 1 \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers from 1 to n with one or more numbers possibly missing, return a number that is missing or present. The input list may contain duplicates and be in any order. Example: >>> candidate([3, 7, 1, 2, 8, 4]) 5 >>> candidate([1, 2, 4]) 3 >>> candidate([2]) 1 \"\"\"",
        "avg_similarity_score": 0.21835144258157677
    },
    {
        "prompt": "def count_unique_chars(s: str) -> int: \"\"\" Given a string s, return the number of unique characters in it. Characters are case-sensitive. For example: >>> count_unique_chars('Hello') 4 >>> count_unique_chars('abcABC') 6 >>> count_unique_chars('') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. The definition of 'certain' may vary. For example: >>> candidate('Hello') 4 >>> candidate('abcABC') 6 >>> candidate('') 0 \"\"\"",
        "avg_similarity_score": 0.19655238198151304
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of duplicates in the same order they first appeared. If there are no duplicates, return an empty list. Examples: find_duplicates([1, 2, 3, 4, 5]) -> [] find_duplicates([1, 2, 3, 1, 2, 3]) -> [1, 2, 3] find_duplicates([1, 1, 1, 1]) -> [1] \"\"\"",
        "bad_prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list that may contain duplicates or unique values based on certain conditions. If there are no specific conditions met, return an empty list. Examples: find_duplicates([1, 2, 3, 4, 5]) -> [] find_duplicates([1, 2, 3, 1, 2, 3]) -> [1, 2, 3] find_duplicates([1, 1, 1, 1]) -> [1] \"\"\"",
        "avg_similarity_score": 0.17787679555842592
    },
    {
        "prompt": "def find_longest_word(sentence: str) -> str: \"\"\" Given a sentence, return the longest word in it. If there are multiple words with the same maximum length, return the first one encountered. Words are defined as sequences of characters separated by spaces. Examples: >>> find_longest_word('The quick brown fox jumps') 'quick' >>> find_longest_word('Hello world!') 'Hello' >>> find_longest_word('A B C D E F G H I J K L M N O P Q R S T U V W X Y Z') 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' \"\"\"",
        "bad_prompt": "def candidate(sentence: str) -> str: \"\"\" Given a sentence, return a word from it based on certain criteria. The criteria could be the longest or shortest word, or any other characteristic. If there are multiple candidates, return the first one encountered. Words are defined as sequences of characters separated by spaces. Examples: >>> candidate('The quick brown fox jumps') 'quick' >>> candidate('Hello world!') 'Hello' >>> candidate('A B C D E F G H I J K L M N O P Q R S T U V W X Y Z') 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' \"\"\"",
        "avg_similarity_score": 0.12756402768095632
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a certain type of prefix from them. If there is no such prefix, return an empty string or some other value. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.12981074503520104
    },
    {
        "prompt": "def count_unique_words(s: str) -> int: \"\"\" Given a string s, return the number of unique words in it. Words are defined as sequences of characters separated by spaces or punctuation. For example: count_unique_words('Hello world! Hello') should return 2 because 'Hello' and 'world' are the unique words. count_unique_words('This is a test. This test is only a test.') should return 5 because the unique words are 'This', 'is', 'a', 'test', and 'only'. \"\"\"",
        "bad_prompt": "def count_unique_words(s: str) -> int: \"\"\" Given a string s, return the number of words in it that may be unique or repeated based on certain conditions. For example: count_unique_words('Hello world! Hello') should return 2 because there are some words. count_unique_words('This is a test. This test is only a test.') should return 5 because there are various words present. \"\"\"",
        "avg_similarity_score": 0.13576222552581255
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Count the number of vowels (a, e, i, o, u) in a given string. Case should be ignored. >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Count the number of certain characters in a given string. The criteria for counting may vary. >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('AEIOU') 5 \"\"\"",
        "avg_similarity_score": 0.1732924636798219
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. Vowels can be both uppercase and lowercase. Example: count_vowels('Hello World') == 3 Example: count_vowels('Python Programming') == 4 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters (like vowels or consonants) in the string. Characters can be both uppercase and lowercase. Example: candidate('Hello World') == 3 Example: candidate('Python Programming') == 4 \"\"\"",
        "avg_similarity_score": 0.18807402110156282
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\"Given a list of integers, return a list of duplicates in the order they first appeared. If there are no duplicates, return an empty list. Examples: find_duplicates([1, 2, 3, 4, 5]) => [] find_duplicates([1, 2, 3, 1, 2, 3]) => [1, 2] find_duplicates([5, 5, 6, 7, 8, 6]) => [5, 6]\"\"\"",
        "bad_prompt": "def find_duplicates(lst): \"\"\"Given a list of integers, return a list that may contain duplicates or unique elements based on certain conditions. If there are no duplicates, return an empty list. Examples: find_duplicates([1, 2, 3, 4, 5]) => [] find_duplicates([1, 2, 3, 1, 2, 3]) => [1, 2] find_duplicates([5, 5, 6, 7, 8, 6]) => [5, 6]\"\"\"",
        "avg_similarity_score": 0.18037706488825395
    },
    {
        "prompt": "def count_unique_words(sentence: str) -> int: \"\"\" Given a string representing a sentence, return the number of unique words in that sentence. Words are defined as sequences of characters separated by spaces. Ignore case sensitivity when counting unique words. Examples: >>> count_unique_words('Hello world') 2 >>> count_unique_words('This is a test This') 4 >>> count_unique_words('A quick brown fox jumps over the lazy dog') 8 \"\"\"",
        "bad_prompt": "def count_unique_words(sentence: str) -> int: \"\"\" Given a string representing a sentence, return the number of certain types of words in that sentence. Words are defined as sequences of characters separated by spaces. Consider various conditions for uniqueness. Examples: >>> count_unique_words('Hello world') 2 >>> count_unique_words('This is a test This') 4 >>> count_unique_words('A quick brown fox jumps over the lazy dog') 8 \"\"\"",
        "avg_similarity_score": 0.13270072493409504
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain no duplicates and will always have at least one element. For example: find_missing_number([3, 7, 1, 2, 8, 4]) returns 5 find_missing_number([1, 2, 4]) returns 3 find_missing_number([5, 3, 1, 2]) returns 4 \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with possibly one or more numbers missing, return any missing number. The input list may contain duplicates and can be empty. For example: find_missing_number([3, 7, 1, 2, 8, 4]) returns 5 find_missing_number([1, 2, 4]) returns 3 find_missing_number([]) returns None \"\"\"",
        "avg_similarity_score": 0.16588693956677728
    },
    {
        "prompt": "def find_longest_word(words: list) -> str: \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. >>> find_longest_word(['apple', 'banana', 'cherry']) 'banana' >>> find_longest_word(['a', 'ab', 'abc']) 'abc' >>> find_longest_word([]) '' \"\"\"",
        "bad_prompt": "def candidate(words: list) -> str: \"\"\" Given a list of words, return a certain word based on specific conditions (such as being the longest or shortest). If there are multiple candidates that meet the criteria, return the first one encountered. If the list is empty, return an empty string. >>> candidate(['apple', 'banana', 'cherry']) 'banana' >>> candidate(['a', 'ab', 'abc']) 'abc' >>> candidate([]) '' \"\"\"",
        "avg_similarity_score": 0.16905237164639603
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain prefix among them. If there is no prefix, return an empty string or some other value. Example: >>> candidate(['flower', 'flow', 'flight']) == 'fl' >>> candidate(['dog', 'racecar', 'car']) == '' \"\"\"",
        "avg_similarity_score": 0.16396191557756362
    },
    {
        "prompt": "def longest_increasing_subsequence(nums): \"\"\" Given a list of integers, return the length of the longest increasing subsequence. An increasing subsequence is defined as a sequence where each element is greater than the previous one. For example: longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) == 4 (the longest increasing subsequence is [2, 3, 7, 101]). Examples: longest_increasing_subsequence([0, 1, 0, 3, 2, 3]) == 4 longest_increasing_subsequence([7, 7, 7, 7, 7]) == 1 longest_increasing_subsequence([]) == 0 \"\"\"",
        "bad_prompt": "def longest_increasing_subsequence(nums): \"\"\" Given a list of integers, return the length of a certain subsequence that may or may not be increasing. The subsequence can include any elements from the original list. For example: longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) could return 4 based on some criteria. Examples: longest_increasing_subsequence([0, 1, 0, 3, 2, 3]) could return 4 longest_increasing_subsequence([7, 7, 7, 7, 7]) could return 1 longest_increasing_subsequence([]) could return 0 \"\"\"",
        "avg_similarity_score": 0.15623550589191793
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given an array of integers from 1 to n with one number missing, return the missing number. The input array is guaranteed to have no duplicates and will contain exactly n-1 numbers. Example: find_missing_number([3, 7, 1, 2, 8]) should return 4. find_missing_number([1, 2, 4, 5, 6]) should return 3. \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given an array of integers that may or may not include a range of numbers, return a certain number based on conditions that might involve finding something missing or present in the list. Example: find_missing_number([3, 7, 1, 2, 8]) could return any number depending on how you interpret the contents. find_missing_number([1, 2, 4, 5, 6]) might also yield various results based on your logic. \"\"\"",
        "avg_similarity_score": 0.15008530645950363
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in the string. Case should be ignored. Example: count_vowels('Hello World') ==> 3 count_vowels('Python Programming') ==> 4 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return a certain count related to characters (like vowels or consonants). Example: candidate('Hello World') ==> 3 candidate('Python Programming') ==> 4 \"\"\"",
        "avg_similarity_score": 0.17321473112700778
    },
    {
        "prompt": "def count_words(sentence: str) -> int: \"\"\" Given a string sentence, return the total number of words in it. A word is defined as any sequence of characters separated by whitespace. Examples: >>> count_words('Hello world') 2 >>> count_words('This is a test.') 4 >>> count_words('   Leading and trailing spaces   ') 5 \"\"\"",
        "bad_prompt": "def count_words(sentence: str) -> int: \"\"\" Given a string sentence, return the total number of elements in it. An element is defined as any sequence of characters or groups of characters separated by whitespace or punctuation. Examples: >>> count_words('Hello world') 2 >>> count_words('This is a test.') 4 >>> count_words('   Leading and trailing spaces   ') 5 \"\"\"",
        "avg_similarity_score": 0.15082323357038482
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a string 'sentence', return the sentence with the order of words reversed. Words are defined as sequences of characters separated by spaces. Example: >>> reverse_words('Hello World') == 'World Hello' >>> reverse_words('Python is fun') == 'fun is Python' If the input string is empty, return an empty string. \"\"\"",
        "bad_prompt": "def candidate(sentence: str) -> str: \"\"\" Given a string 'sentence', return a version of the sentence with some modifications to the order or arrangement of words. Example: >>> candidate('Hello World') == 'World Hello' >>> candidate('Python is fun') == 'fun is Python' If the input string is empty, return an empty string. \"\"\"",
        "avg_similarity_score": 0.1674890719273025
    },
    {
        "prompt": "def merge_sorted_lists(list1: List[int], list2: List[int]) -> List[int]: \"\"\" Given two sorted lists of integers, merge them into a single sorted list. The resulting list should contain all elements from both input lists in ascending order. Examples: >>> merge_sorted_lists([1, 3, 5], [2, 4, 6]) [1, 2, 3, 4, 5, 6] >>> merge_sorted_lists([], [1, 2, 3]) [1, 2, 3] >>> merge_sorted_lists([5, 6, 7], []) [5, 6, 7] \"\"\"",
        "bad_prompt": "def combine_lists(list1: List[int], list2: List[int]) -> List[int]: \"\"\" Given two lists of integers, combine them into a single list. The resulting list may or may not be sorted and can include duplicates. Examples: >>> combine_lists([1, 3, 5], [2, 4, 6]) [1, 2, 3, 4, 5, 6] >>> combine_lists([], [1, 2, 3]) [1, 2, 3] >>> combine_lists([5, 6, 7], []) [5, 6, 7] \"\"\"",
        "avg_similarity_score": 0.16695189322882342
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('AEIOU') == 5 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return a certain count related to vowels (like total or unique) in the string. The function should consider different cases. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('AEIOU') == 5 >>> count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.1483962921787168
    },
    {
        "prompt": "def find_longest_word(words: List[str]) -> str: \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Example: >>> find_longest_word(['apple', 'banana', 'cherry']) 'banana' >>> find_longest_word(['a', 'ab', 'abc']) 'abc' >>> find_longest_word([]) '' \"\"\"",
        "bad_prompt": "def candidate(words: List[str]) -> str: \"\"\" Given a list of words, return either the longest or shortest word in the list. If there are multiple words with the same length, return any one of them. If the list is empty, return an empty string. Example: >>> candidate(['apple', 'banana', 'cherry']) 'banana' >>> candidate(['a', 'ab', 'abc']) 'abc' >>> candidate([]) '' \"\"\"",
        "avg_similarity_score": 0.17881753106874917
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Check if two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Examples: is_anagram('listen', 'silent') => True is_anagram('hello', 'world') => False \"\"\"",
        "bad_prompt": "def candidate(str1: str, str2: str) -> bool: \"\"\" Check if two strings satisfy a specific condition (such as being similar in length, having common characters, or meeting another unspecified criterion). Examples: candidate('listen', 'silent') => True candidate('hello', 'world') => False \"\"\"",
        "avg_similarity_score": 0.1241321723306421
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. Ignore case sensitivity. Example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the total number of certain characters (vowels or consonants) in the string. Ignore case sensitivity. Example: candidate('Hello World') == 3 candidate('Python Programming') == 4 candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.19550831923990325
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\"Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] >>> fibonacci(0) [0]\"\"\"",
        "bad_prompt": "def candidate(n: int) -> List[int]: \"\"\"Generate a list containing numbers based on certain conditions up to the nth number. The conditions are not specified clearly but involve previous values in some way. Examples: >>> candidate(5) [0, 1, 1, 2, 3] >>> candidate(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] >>> candidate(0) [0]\"\"\"",
        "avg_similarity_score": 0.18570638695776345
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns some form of commonality among them. If there is no commonality, return something else. Example: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.15413782124503994
    },
    {
        "prompt": "def longest_palindrome(s: str) -> str: \"\"\" Given a string s, return the longest palindromic substring in s. A palindrome is a string that reads the same forward and backward. If there are multiple longest palindromic substrings, return any one of them. Examples: longest_palindrome('babad') should return 'bab' or 'aba'. longest_palindrome('cbbd') should return 'bb'. \"\"\"",
        "bad_prompt": "def longest_palindrome(s: str) -> str: \"\"\" Given a string s, return a substring from s that meets certain conditions (such as being palindromic or not). A palindrome is a string that reads the same forward and backward. If there are multiple substrings meeting the criteria, return any one of them. Examples: longest_palindrome('babad') should return 'bab' or 'aba'. longest_palindrome('cbbd') should return 'bb'. \"\"\"",
        "avg_similarity_score": 0.1353102837617173
    },
    {
        "prompt": "def count_words(sentence: str) -> int: \"\"\"Given a string sentence, return the total number of words in it. Words are defined as sequences of characters separated by spaces. Example: count_words('Hello world!') should return 2. count_words('This is a test.') should return 4.\"\"\"",
        "bad_prompt": "def candidate(sentence: str) -> int: \"\"\"Given a string sentence, return the total number of elements in it. Elements can be words or other types of characters depending on interpretation. Example: candidate('Hello world!') should return 2. candidate('This is a test.') should return 4.\"\"\"",
        "avg_similarity_score": 0.17855217757107217
    },
    {
        "prompt": "def count_unique_words(text: str) -> int: \"\"\" Given a string of text, return the number of unique words in the text. Words are defined as sequences of characters separated by whitespace. Ignore case when counting unique words. Example: count_unique_words('Hello world hello') should return 2. count_unique_words('This is a test. This is only a test.') should return 6. If the input string is empty, return 0. \"\"\"",
        "bad_prompt": "def count_unique_words(text: str) -> int: \"\"\" Given a string of text, return the number of some or all unique words in the text. Words may be defined as sequences of characters separated by any form of punctuation or whitespace. Example: count_unique_words('Hello world hello') should return 2. count_unique_words('This is a test. This is only a test.') should return 6. If the input string is empty, return 0. \"\"\"",
        "avg_similarity_score": 0.1497507708978336
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels present in the string. The function should be case-sensitive or insensitive based on certain conditions. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('') 0 \"\"\"",
        "avg_similarity_score": 0.15610094438154506
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in it. Case should be ignored. Examples: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('AEIOU') == 5\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Given a string s, return the number of certain characters in it. The function may consider vowels or consonants or any other character. Examples: candidate('Hello World') == 3 candidate('Python') == 1 candidate('AEIOU') == 5\"\"\"",
        "avg_similarity_score": 0.19811638972226914
    },
    {
        "prompt": "def find_max_min(lst): \"\"\" Create a function that returns a tuple (max_value, min_value), where max_value is the largest number in the list and min_value is the smallest number. If the list is empty, return (None, None). Examples: find_max_min([3, 1, 4, 1, 5]) == (5, 1) find_max_min([]) == (None, None) find_max_min([-2, -1, 0]) == (0, -2) \"\"\"",
        "bad_prompt": "def find_max_min(lst): \"\"\" Create a function that returns a tuple (max_value, min_value), where max_value is one of the numbers in the list and min_value is another. If the list is empty, return (None, None). Examples: find_max_min([3, 1, 4, 1, 5]) == (5, 1) find_max_min([]) == (None, None) find_max_min([-2, -1, 0]) == (0, -2) \"\"\"",
        "avg_similarity_score": 0.16535036975070705
    },
    {
        "prompt": "def find_longest_word(words: list) -> str: \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. Example: >>> find_longest_word(['apple', 'banana', 'cherry']) 'banana' >>> find_longest_word(['cat', 'dog', 'elephant']) 'elephant' \"\"\"",
        "bad_prompt": "def find_longest_word(words: list) -> str: \"\"\" Given a list of words, return a word from the list based on certain criteria such as length or alphabetical order. If there are multiple candidates, return the first one encountered. Example: >>> find_longest_word(['apple', 'banana', 'cherry']) 'banana' >>> find_longest_word(['cat', 'dog', 'elephant']) 'elephant' \"\"\"",
        "avg_similarity_score": 0.1293433900326723
    },
    {
        "prompt": "def count_words(sentence: str) -> int: \"\"\" Given a string sentence, return the total number of words in it. A word is defined as any sequence of characters separated by whitespace. Examples: >>> count_words('Hello world') 2 >>> count_words('This is a test.') 4 >>> count_words('   Leading and trailing spaces   ') 5 >>> count_words('') 0 \"\"\"",
        "bad_prompt": "def candidate(sentence: str) -> int: \"\"\" Given a string sentence, return the total number of sequences in it. A sequence can be defined in various ways depending on interpretation. Examples: >>> candidate('Hello world') 2 >>> candidate('This is a test.') 4 >>> candidate('   Leading and trailing spaces   ') 5 >>> candidate('') 0 \"\"\"",
        "avg_similarity_score": 0.17812697038063374
    },
    {
        "prompt": "def count_unique_elements(lst): \"\"\" Given a list of integers, return the number of unique elements in the list. For example: count_unique_elements([1, 2, 3, 4, 1]) => 4 count_unique_elements([5, 5, 5, 5]) => 1 count_unique_elements([]) => 0 \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return the number of certain or unique elements in the list. For example: candidate([1, 2, 3, 4, 1]) => 4 candidate([5, 5, 5, 5]) => 1 candidate([]) => 0 \"\"\"",
        "avg_similarity_score": 0.24283734666676382
    },
    {
        "prompt": "def count_occurrences(lst: list, item): \"\"\"Write a function that takes a list and an item as arguments. The function should return the number of times the item occurs in the list. If the item is not found, return 0. Examples: >>> count_occurrences([1, 2, 3, 1, 4], 1) 2 >>> count_occurrences(['a', 'b', 'a'], 'a') 2 >>> count_occurrences([], 5) 0\"\"\"",
        "bad_prompt": "def candidate(lst: list, item): \"\"\"Write a function that takes a list and an item as arguments. The function should return the occurrences or absence of the item in the list. If the item is not found, return a negative value or zero. Examples: >>> candidate([1, 2, 3, 1, 4], 1) 2 >>> candidate(['a', 'b', 'a'], 'a') 2 >>> candidate([], 5) 0\"\"\"",
        "avg_similarity_score": 0.2225569103629453
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of characters that are either vowels or consonants in the string. The function should be case insensitive. Examples: candidate('Hello World') == 10 candidate('Python Programming') == 12 candidate('xyz') == 3 \"\"\"",
        "avg_similarity_score": 0.18872064208878736
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. Ignore case sensitivity. For example: count_vowels('Hello World') should return 3 and count_vowels('Python') should return 1. \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters or vowels in it. Ignore case sensitivity. For example: count_vowels('Hello World') should return 3 and count_vowels('Python') should return 1. \"\"\"",
        "avg_similarity_score": 0.15795649264761574
    },
    {
        "prompt": "def longest_substring(s: str) -> int: \"\"\" Given a string s, return the length of the longest substring without repeating characters. For example: longest_substring(\"abcabcbb\") should return 3 because the answer is \"abc\", with the length of 3. longest_substring(\"bbbbb\") should return 1 because the answer is \"b\", with the length of 1. longest_substring(\"pwwkew\") should return 3 because the answer is \"wke\", with the length of 3. \"\"\"",
        "bad_prompt": "def longest_substring(s: str) -> int: \"\"\" Given a string s, return the length of some substring that may or may not have repeating characters. For example: longest_substring(\"abcabcbb\") could return various lengths depending on interpretation. longest_substring(\"bbbbb\") might return 1 or more based on certain conditions. longest_substring(\"pwwkew\") could also yield different results due to its structure. \"\"\"",
        "avg_similarity_score": 0.11599203036750369
    },
    {
        "prompt": "def count_unique_characters(s: str) -> int: \"\"\" Given a string s, return the number of unique characters in it. Ignore spaces and consider only alphabetic characters (both uppercase and lowercase are treated as the same). Example: count_unique_characters('Hello World') should return 7 because 'H', 'e', 'l', 'o', 'W', 'r', 'd' are the unique characters. Example: count_unique_characters('abcABC') should return 3 because 'a', 'b', 'c' are the unique characters. \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. This could be unique or repeated characters based on some conditions. Example: candidate('Hello World') might return 7 depending on how you interpret uniqueness. Example: candidate('abcABC') could also return 3 but may vary if other criteria are considered. \"\"\"",
        "avg_similarity_score": 0.1482802192594353
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Return an empty list if n is less than or equal to 0. Examples: fibonacci(5) => [0, 1, 1, 2, 3] fibonacci(10) => [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list that may contain some numbers from the Fibonacci sequence or other sequences up to the nth number. The output can be an empty list or include any arbitrary values based on certain conditions. Examples: fibonacci(5) => [0, 1, 1, 2, 3] fibonacci(10) => [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.16779694017015737
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in the string. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.15652415669678285
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of the duplicate elements in the order they first appeared. The output should not contain any duplicates itself. For example: find_duplicates([1, 2, 3, 4, 5, 1, 2]) returns [1, 2]. If there are no duplicates, return an empty list. Example: find_duplicates([1, 2, 3]) == [] \"\"\"",
        "bad_prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list based on certain conditions that may include duplicates or unique elements depending on their appearance. The output could be in various forms and might not necessarily reflect the original input order. For example: find_duplicates([1, 2, 3, 4, 5, 1, 2]) could return something different than expected. Example: find_duplicates([1, 2, 3]) could yield unexpected results. \"\"\"",
        "avg_similarity_score": 0.16742453516256295
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a string sentence, return the sentence with each word reversed but in the original order. Words are defined as sequences of characters separated by spaces. Example: reverse_words('Hello World') == 'olleH dlroW' reverse_words('Python is fun') == 'nohtyP si nuf' reverse_words('') == '' \"\"\"",
        "bad_prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a string sentence, return the sentence with certain words reversed or unchanged but in the original order. Words are defined as sequences of characters separated by spaces. Example: reverse_words('Hello World') == 'olleH dlroW' reverse_words('Python is fun') == 'nohtyP si nuf' reverse_words('') == '' \"\"\"",
        "avg_similarity_score": 0.11958519130837963
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. For example: count_vowels('Hello World') => 3 count_vowels('Python') => 1 count_vowels('xyz') => 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s and returns the number of certain characters in it. The function should be case-insensitive. For example: count_vowels('Hello World') => 3 count_vowels('Python') => 1 count_vowels('xyz') => 0\"\"\"",
        "avg_similarity_score": 0.16605116154452967
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. Case should be ignored. For example: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels in the string. Case should be ignored. For example: >>> candidate('Hello World') == 3 >>> candidate('Python Programming') == 4 \"\"\"",
        "avg_similarity_score": 0.19802640707174668
    },
    {
        "prompt": "def count_occurrences(lst, target): \"\"\" Given a list of integers lst and an integer target, return the number of times target appears in lst. If lst is empty, return 0. Example: count_occurrences([1, 2, 3, 1, 1], 1) == 3 count_occurrences([], 5) == 0 count_occurrences([5, 5, 5], 5) == 3 \"\"\"",
        "bad_prompt": "def count_occurrences(lst, target): \"\"\" Given a list of integers lst and an integer target, return some occurrences related to target in lst. If lst is empty, return 0 or another value. Example: count_occurrences([1, 2, 3, 1, 1], 1) == 3 count_occurrences([], 5) == 0 count_occurrences([5, 5, 5], 5) == 3 \"\"\"",
        "avg_similarity_score": 0.17200104178296957
    },
    {
        "prompt": "def find_unique_elements(lst): \"\"\" Given a list of integers, return a new list containing only the unique elements from the original list, preserving their order. For example: >>> find_unique_elements([1, 2, 3, 2, 1]) [3] >>> find_unique_elements([4, 5, 6, 4, 5, 7]) [6, 7] \"\"\"",
        "bad_prompt": "def find_unique_elements(lst): \"\"\" Given a list of integers, return a new list containing some unique or repeated elements from the original list, possibly altering their order. For example: >>> find_unique_elements([1, 2, 3, 2, 1]) [3] >>> find_unique_elements([4, 5, 6, 4, 5, 7]) [6, 7] \"\"\"",
        "avg_similarity_score": 0.178030970793104
    },
    {
        "prompt": "def count_vowels(s): \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s): \"\"\" Given a string s, return the number of characters or vowels in it. The function should be case insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.15657140821952262
    },
    {
        "prompt": "def longest_palindrome(s): \"\"\"Given a string s, return the longest palindromic substring in s. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). If there are multiple longest palindromic substrings, return any one of them. Examples: longest_palindrome(\"babad\") => \"bab\" or \"aba\" longest_palindrome(\"cbbd\") => \"bb\" longest_palindrome(\"a\") => \"a\" longest_palindrome(\"ac\") => \"a\" or \"c\".\"\"\"",
        "bad_prompt": "def longest_palindrome(s): \"\"\"Given a string s, return the longest or shortest palindromic substring in s. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). If there are multiple options for longest or shortest palindromic substrings, return any one of them. Examples: longest_palindrome(\"babad\") => \"bab\" or \"aba\" or \"b\" or \"a\" longest_palindrome(\"cbbd\") => \"bb\" or \"c\" longest_palindrome(\"a\") => \"a\" or \"\" longest_palindrome(\"ac\") => \"a\" or \"c\".\"\"\"",
        "avg_similarity_score": 0.12499222970770713
    },
    {
        "prompt": "def count_words(sentence: str) -> int: \"\"\" Given a string sentence, return the number of words in it. A word is defined as any sequence of characters separated by spaces. For example: >>> count_words('Hello world') returns 2 >>> count_words('This is a test.') returns 4 >>> count_words('   Leading and trailing spaces   ') returns 5 \"\"\"",
        "bad_prompt": "def count_words(sentence: str) -> int: \"\"\" Given a string sentence, return the number of elements in it. An element can be a word or something else depending on how you define it. For example: >>> count_words('Hello world') returns 2 >>> count_words('This is a test.') returns 4 >>> count_words('   Leading and trailing spaces   ') returns 5 \"\"\"",
        "avg_similarity_score": 0.14782889680161684
    },
    {
        "prompt": "def count_unique_chars(s: str) -> int: \"\"\" Given a string s, return the number of unique characters in it. Ignore spaces and consider case sensitivity. Examples: count_unique_chars('Hello World') should return 10 (H,e,l,o,W,r,d) count_unique_chars('abcABC') should return 6 (a,b,c,A,B,C) count_unique_chars(' ') should return 0. \"\"\"",
        "bad_prompt": "def count_unique_chars(s: str) -> int: \"\"\" Given a string s, return the total or unique characters in it. Ignore spaces and consider case sensitivity. Examples: count_unique_chars('Hello World') should return 10 count_unique_chars('abcABC') should return 6 count_unique_chars(' ') should return 0. \"\"\"",
        "avg_similarity_score": 0.12499469809216136
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Examples: >>> count_vowels('hello') 2 >>> count_vowels('HELLO') 2 >>> count_vowels('xyz') 0 >>> count_vowels('AEIOUaeiou') 10\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of characters or vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Examples: >>> count_vowels('hello') 2 >>> count_vowels('HELLO') 2 >>> count_vowels('xyz') 0 >>> count_vowels('AEIOUaeiou') 10\"\"\"",
        "avg_similarity_score": 0.1532638697361689
    },
    {
        "prompt": "def fibonacci(n): \"\"\"Write a function that returns the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: fibonacci(0) => 0, fibonacci(1) => 1, fibonacci(5) => 5, fibonacci(10) => 55.\"\"\"",
        "bad_prompt": "def fibonacci(n): \"\"\"Write a function that returns the nth Fibonacci number or some other value based on the input. The Fibonacci sequence is defined in various ways, including but not limited to: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: fibonacci(0) => 0, fibonacci(1) => 1, fibonacci(5) => 5, fibonacci(10) => 55.\"\"\"",
        "avg_similarity_score": 0.1480040197937417
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in it. The function should be case-insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels present in it. The function should be case-sensitive or insensitive based on some condition. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('') == 0 \"\"\"",
        "avg_similarity_score": 0.15232248838262077
    },
    {
        "prompt": "def count_unique_chars(s: str) -> int: \"\"\" Given a string s, return the number of unique characters in it. Characters are case-sensitive and should be counted individually. For example: >>> count_unique_chars('Hello') 4 >>> count_unique_chars('abcABC') 6 >>> count_unique_chars('aaa') 1 \"\"\"",
        "bad_prompt": "def count_unique_chars(s: str) -> int: \"\"\" Given a string s, return the number of unique or repeated characters in it. Characters may or may not be case-sensitive. For example: >>> count_unique_chars('Hello') 4 >>> count_unique_chars('abcABC') 6 >>> count_unique_chars('aaa') 1 \"\"\"",
        "avg_similarity_score": 0.14586786959476195
    },
    {
        "prompt": "def longest_common_prefix(strs: list) -> str: \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def candidate(strs: list) -> str: \"\"\" Write a function that takes a list of strings and returns either the longest common prefix or the shortest unique suffix among them. If there is neither, return an empty string. For example: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.1705647726749577
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string or a default value. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "avg_similarity_score": 0.13343389750957288
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in the string. Ignore case and consider only alphabetic characters as valid inputs. Examples: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels or consonants in the string. Ignore case and consider only alphabetic characters as valid inputs. Examples: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.15578791095097227
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain unique numbers only and is guaranteed to have at least one element. Examples: find_missing_number([3, 7, 1, 2, 8]) \u279e 4 find_missing_number([1, 2, 4, 5]) \u279e 3 find_missing_number([5, 3, 1, 2]) \u279e 4 \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers that may or may not include all numbers from 1 to n, return a certain number based on some conditions related to the elements in the list. The input list can contain duplicates and is not guaranteed to have any specific structure. Examples: candidate([3, 7, 1, 2, 8]) \u279e 4 candidate([1, 2, 4, 5]) \u279e 3 candidate([5, 3, 1, 2]) \u279e 4 \"\"\"",
        "avg_similarity_score": 0.20706893005197413
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of certain characters in it. The function should consider different cases or conditions. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.1975897463319376
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same length, return the first one found. Example: find_longest_substring('abcabcbb') => 'abc' find_longest_substring('bbbbb') => 'b' find_longest_substring('pwwkew') => 'wke' \"\"\"",
        "bad_prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring or character sequence that may or may not have repeating characters. If there are multiple sequences of the same length, return any one of them. Example: find_longest_substring('abcabcbb') => 'abc' find_longest_substring('bbbbb') => 'b' find_longest_substring('pwwkew') => 'wke' \"\"\"",
        "avg_similarity_score": 0.12604634742833376
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. Case should be ignored. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that might include vowels or consonants in it. Case should be considered. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('') 0 \"\"\"",
        "avg_similarity_score": 0.14862371343757874
    },
    {
        "prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: >>> find_maximum([1, 2, 3]) == 3 >>> find_maximum([-1, -5, -3]) == -1 >>> find_maximum([]) == None \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return a certain value from the list based on specific conditions. If the list is empty, return None. Examples: >>> candidate([1, 2, 3]) == 3 >>> candidate([-1, -5, -3]) == -1 >>> candidate([]) == None \"\"\"",
        "avg_similarity_score": 0.22123600985480407
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the n-th term. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: fibonacci(5) ==> [0, 1, 1, 2, 3] fibonacci(10) ==> [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing certain numbers in a sequence up to the n-th term. The sequence is defined by some conditions that may include addition or other operations. Examples: fibonacci(5) ==> [0, 1, 1, 2, 3] fibonacci(10) ==> [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.17132566191265758
    },
    {
        "prompt": "def count_unique_words(text: str) -> int: \"\"\"Given a string of text, return the number of unique words in the text. Words are defined as sequences of characters separated by whitespace. The comparison should be case insensitive. For example: >>> count_unique_words('Hello world hello') 2 >>> count_unique_words('This is a test This is only a test') 6 >>> count_unique_words('') 0 >>> count_unique_words('Python python PYTHON') 1 \"\"\"",
        "bad_prompt": "def count_unique_words(text: str) -> int: \"\"\"Given a string of text, return the number of certain or unique words in the text. Words are defined as sequences of characters separated by various delimiters. The comparison may or may not be case sensitive. For example: >>> count_unique_words('Hello world hello') 2 >>> count_unique_words('This is a test This is only a test') 6 >>> count_unique_words('') 0 >>> count_unique_words('Python python PYTHON') 1 \"\"\"",
        "avg_similarity_score": 0.14772793570637582
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of certain characters in it. These characters can be vowels or consonants depending on the input. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "avg_similarity_score": 0.16056049558776803
    },
    {
        "prompt": "def count_consonants(s: str) -> int: \"\"\" Given a string s, return the number of consonant letters in it. Consonants are all alphabetic characters that are not vowels (a, e, i, o, u). For example: >>> count_consonants('Hello World!') returns 7 >>> count_consonants('aeiou') returns 0 >>> count_consonants('Python3') returns 6 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain letters in it. Certain letters can be any alphabetic character or none at all. For example: >>> candidate('Hello World!') returns 7 >>> candidate('aeiou') returns 0 >>> candidate('Python3') returns 6 \"\"\"",
        "avg_similarity_score": 0.17254767462994247
    },
    {
        "prompt": "def find_longest_substring(s: str) -> int: \"\"\" Given a string s, return the length of the longest substring without repeating characters. Examples: >>> find_longest_substring('abcabcbb') 3 >>> find_longest_substring('bbbbb') 1 >>> find_longest_substring('pwwkew') 3 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the length of a certain substring that may or may not have repeating characters. Examples: >>> candidate('abcabcbb') 3 >>> candidate('bbbbb') 1 >>> candidate('pwwkew') 3 \"\"\"",
        "avg_similarity_score": 0.19570755025333159
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given an array of integers from 1 to n with one number missing, return the missing number. The input array is guaranteed to have no duplicates and will contain exactly n-1 numbers. Example: find_missing_number([3, 7, 1, 2, 8, 4]) returns 5 find_missing_number([1, 2, 4, 6, 3, 7, 8]) returns 5 \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given an array of integers that may or may not include a certain number, return the missing number or any other number. The input array can have duplicates and will contain various numbers. Example: find_missing_number([3, 7, 1, 2, 8, 4]) returns 5 find_missing_number([1, 2, 4, 6, 3, 7, 8]) returns 5 \"\"\"",
        "avg_similarity_score": 0.16924545468278654
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. Case should be ignored. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of characters that are either vowels or consonants in it. Case should be ignored. Examples: >>> candidate('Hello World') 10 >>> candidate('Python Programming') 12 >>> candidate('xyz') 3 \"\"\"",
        "avg_similarity_score": 0.17977864044373135
    },
    {
        "prompt": "def find_missing_number(nums): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain no duplicates and will be unsorted. Example: find_missing_number([3, 7, 1, 2, 8, 4, 5]) => 6 find_missing_number([1, 2, 4]) => 3 \"\"\"",
        "bad_prompt": "def find_missing_number(nums): \"\"\" Given a list of integers from 1 to n with one or more numbers possibly missing, return a number that may or may not be missing. The input list could contain duplicates and might be sorted or unsorted. Example: find_missing_number([3, 7, 1, 2, 8, 4, 5]) => 6 find_missing_number([1, 2, 4]) => 3 \"\"\"",
        "avg_similarity_score": 0.17593613055331442
    },
    {
        "prompt": "def fibonacci(n: int) -> list: \"\"\"Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Example: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\"\"\"",
        "bad_prompt": "def candidate(n: int) -> list: \"\"\"Generate a list containing numbers based on some mathematical pattern up to the nth number. The sequence can be defined in various ways, including but not limited to Fibonacci or others. Example: >>> candidate(5) [0, 1, 1, 2, 3] >>> candidate(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\"\"\"",
        "avg_similarity_score": 0.18420468799684198
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Given a list of strings, find the longest or shortest common prefix among them. If there is no common prefix, return an empty string or some default value. Example: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == '' \"\"\"",
        "avg_similarity_score": 0.1518066516286746
    },
    {
        "prompt": "def longest_substring_without_repeating(s: str) -> int: \"\"\" Given a string s, return the length of the longest substring without repeating characters. For example: longest_substring_without_repeating('abcabcbb') returns 3 (the answer is 'abc', with the length of 3). longest_substring_without_repeating('bbbbb') returns 1 (the answer is 'b', with the length of 1). longest_substring_without_repeating('pwwkew') returns 3 (the answer is 'wke', with the length of 3). \"\"\"",
        "bad_prompt": "def longest_substring_without_repeating(s: str) -> int: \"\"\" Given a string s, return the length of some substring that may or may not have repeating characters. For example: longest_substring_without_repeating('abcabcbb') returns 3 (the answer could be any substring). longest_substring_without_repeating('bbbbb') returns 1 (the answer could be 'b' or another character). longest_substring_without_repeating('pwwkew') returns 3 (the answer might be 'wke' or similar). \"\"\"",
        "avg_similarity_score": 0.1273387994846632
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of characters or vowels in it. The function should be case-sensitive or insensitive. For example: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.20078304850542364
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['a']) == 'a' longest_common_prefix([]) == '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns either the longest or shortest common prefix among them. If there is no common prefix, return an empty string or None. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['a']) == 'a' longest_common_prefix([]) == '' \"\"\"",
        "avg_similarity_score": 0.12433429739806572
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) ''\"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns a common prefix or suffix among them. If there is no common prefix or suffix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) ''\"\"\"",
        "avg_similarity_score": 0.12732354570249996
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', and 'u' (case insensitive). For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in the string. These characters could be vowels or consonants or any other type. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.15687692552992416
    },
    {
        "prompt": "def find_longest_word(words): \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) == 'banana' find_longest_word(['a', 'ab', 'abc']) == 'abc' find_longest_word([]) == '' \"\"\"",
        "bad_prompt": "def find_longest_word(words): \"\"\" Given a list of words, return either the longest or shortest word in the list. If there are multiple words with the same length, return any of them. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) == 'banana' find_longest_word(['a', 'ab', 'abc']) == 'abc' find_longest_word([]) == '' \"\"\"",
        "avg_similarity_score": 0.1396117405378951
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns a certain type of prefix among them. If there is no prefix, return something else. Example: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == '' candidate(['interspecies', 'interstellar', 'interstate']) == 'inters'\"\"\"",
        "avg_similarity_score": 0.15702659254964066
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) -> 'fl' longest_common_prefix(['dog', 'racecar', 'car']) -> '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) -> 'inters'\"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns either the longest or shortest common prefix among them. If there is no common prefix, return something else. Example: longest_common_prefix(['flower', 'flow', 'flight']) -> 'fl' longest_common_prefix(['dog', 'racecar', 'car']) -> '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) -> 'inters'\"\"\"",
        "avg_similarity_score": 0.11478882335002427
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of duplicates in the order they first appeared. If there are no duplicates, return an empty list. Examples: >>> find_duplicates([1, 2, 3, 4, 5]) [] >>> find_duplicates([1, 2, 3, 1, 2, 3]) [1, 2] >>> find_duplicates([5, 5, 6, 7, 8, 6]) [5, 6] \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return a list that may contain duplicates or unique elements based on certain conditions. If there are no specific elements, return an empty list. Examples: >>> candidate([1, 2, 3, 4, 5]) [] >>> candidate([1, 2, 3, 1, 2, 3]) [1, 2] >>> candidate([5, 5, 6, 7, 8, 6]) [5, 6] \"\"\"",
        "avg_similarity_score": 0.2119075689537403
    },
    {
        "prompt": "def find_longest_word(words): \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) == 'banana' find_longest_word(['cat', 'dog', 'elephant']) == 'elephant' find_longest_word([]) == '' \"\"\"",
        "bad_prompt": "def candidate(words): \"\"\" Given a list of words, return a certain word from the list based on its characteristics (like length or alphabetical order). If there are multiple candidates, return the first one found. If the list is empty, return None. Examples: candidate(['apple', 'banana', 'cherry']) == 'banana' candidate(['cat', 'dog', 'elephant']) == 'elephant' candidate([]) == None \"\"\"",
        "avg_similarity_score": 0.16290374216898018
    },
    {
        "prompt": "def longest_palindrome(s: str) -> str: \"\"\" Given a string s, return the longest palindromic substring in s. A palindrome is a string that reads the same forward and backward. If there are multiple substrings of the same maximum length, return the first one found. Examples: longest_palindrome('babad') => 'bab' or 'aba' longest_palindrome('cbbd') => 'bb' longest_palindrome('a') => 'a' longest_palindrome('ac') => 'a' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a substring from s based on certain criteria related to its structure. The exact nature of this substring can vary. Examples: candidate('babad') => 'bab' or 'aba' candidate('cbbd') => 'bb' candidate('a') => 'a' candidate('ac') => 'a' \"\"\"",
        "avg_similarity_score": 0.15511979200005635
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) -> 'fl' longest_common_prefix(['dog', 'racecar', 'car']) -> '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) -> 'inters' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Given a list of strings, find a certain prefix among them. If there is no prefix, return something else. Examples: candidate(['flower', 'flow', 'flight']) -> 'fl' candidate(['dog', 'racecar', 'car']) -> '' candidate(['interspecies', 'interstellar', 'interstate']) -> 'inters' \"\"\"",
        "avg_similarity_score": 0.1398190576689587
    },
    {
        "prompt": "def count_unique_words(text: str) -> int: \"\"\" Given a string of text, return the number of unique words in it. Words are defined as sequences of characters separated by whitespace. Ignore case when counting unique words. Example: >>> count_unique_words('Hello world hello') == 2 >>> count_unique_words('This is a test. This is only a test.') == 6 \"\"\"",
        "bad_prompt": "def candidate(text: str) -> int: \"\"\" Given a string of text, return the number of some or all unique words in it. Words can be defined differently based on various criteria. Example: >>> candidate('Hello world hello') == 2 >>> candidate('This is a test. This is only a test.') == 6 \"\"\"",
        "avg_similarity_score": 0.16917642268858726
    },
    {
        "prompt": "def count_occurrences(lst: list, target): \"\"\" Given a list of elements and a target element, return the number of times the target appears in the list. Example: count_occurrences([1, 2, 3, 4, 2], 2) returns 2 count_occurrences(['a', 'b', 'c', 'a'], 'a') returns 2 count_occurrences([], 1) returns 0 \"\"\"",
        "bad_prompt": "def count_occurrences(lst: list, target): \"\"\" Given a list of elements and a target element, return the number of times the target appears or does not appear in the list. Example: count_occurrences([1, 2, 3, 4, 2], 2) returns 2 count_occurrences(['a', 'b', 'c', 'a'], 'a') returns 2 count_occurrences([], 1) returns 0 \"\"\"",
        "avg_similarity_score": 0.1902240629358358
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels in the string. The function may consider certain conditions for counting. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.15800663687681932
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return a certain number related to vowels in the string. The function should be case insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.1517761049524272
    },
    {
        "prompt": "def is_palindrome(s: str) -> bool: \"\"\"Check if the given string s is a palindrome. A palindrome reads the same backward as forward, ignoring spaces and case. Return True if it is a palindrome, otherwise return False. Examples: >>> is_palindrome('A man a plan a canal Panama') True >>> is_palindrome('hello') False >>> is_palindrome('Racecar') True >>> is_palindrome(' ') True \"\"\"",
        "bad_prompt": "def candidate(s: str) -> bool: \"\"\"Check if the given string s meets certain conditions regarding its characters. The function should determine if the string has some specific property related to reading order or arrangement of characters. Return True if it meets the condition, otherwise return False. Examples: >>> candidate('A man a plan a canal Panama') True >>> candidate('hello') False >>> candidate('Racecar') True >>> candidate(' ') True \"\"\"",
        "avg_similarity_score": 0.1480668835740685
    },
    {
        "prompt": "def find_missing_number(arr: list) -> int: \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list is guaranteed to have no duplicates and contains exactly n-1 numbers. Example: find_missing_number([3, 7, 1, 2, 8, 4]) returns 5. find_missing_number([1, 2, 4]) returns 3. \"\"\"",
        "bad_prompt": "def candidate(arr: list) -> int: \"\"\" Given a list of integers that may or may not contain all numbers from 1 to n, return a certain number based on some conditions. The input list might have duplicates and can be of any length. Example: candidate([3, 7, 1, 2, 8, 4]) returns 5. candidate([1, 2, 4]) returns 3. \"\"\"",
        "avg_similarity_score": 0.20820151613200405
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns some kind of common prefix among them. If there is no common prefix, return an empty string or None. For example: longest_common_prefix(['flower', 'flow', 'flight']) could return 'fl' or '' or any other variation. longest_common_prefix(['dog', 'racecar', 'car']) might return ''. \"\"\"",
        "avg_similarity_score": 0.12297524833817516
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string, return the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string, return the number of certain characters in it. The function should be case-sensitive or insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "avg_similarity_score": 0.1570737633994226
    },
    {
        "prompt": "def find_longest_word(words: List[str]) -> str:\n    \"\"\"\n    Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string.\n    Examples:\n    >>> find_longest_word(['apple', 'banana', 'cherry'])\n    'banana'\n    >>> find_longest_word(['a', 'ab', 'abc'])\n    'abc'\n    >>> find_longest_word([])\n    ''\n    \"\"\"",
        "bad_prompt": "def find_longest_word(words: List[str]) -> str:\n    \"\"\"\n    Given a list of words, return a certain word from the list based on some criteria (like longest or shortest). If there are multiple candidates, return the first one found. If the list is empty, return an empty string.\n    Examples:\n    >>> find_longest_word(['apple', 'banana', 'cherry'])\n    'banana'\n    >>> find_longest_word(['a', 'ab', 'abc'])\n    'abc'\n    >>> find_longest_word([])\n    ''\n    \"\"\"",
        "avg_similarity_score": 0.13334414164676886
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same length, return the first one found. Examples: find_longest_substring('abcabcbb') => 'abc' find_longest_substring('bbbbb') => 'b' find_longest_substring('pwwkew') => 'wke' \"\"\"",
        "bad_prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest or shortest substring without repeating characters. If there are multiple substrings of the same length, return any one of them found. Examples: find_longest_substring('abcabcbb') => 'abc' find_longest_substring('bbbbb') => 'b' find_longest_substring('pwwkew') => 'wke' \"\"\"",
        "avg_similarity_score": 0.12296263550716295
    },
    {
        "prompt": "def longest_common_prefix(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' >>> longest_common_prefix(['a']) 'a' >>> longest_common_prefix([]) '' \"\"\"",
        "bad_prompt": "def candidate(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns some common or distinct prefix among them. If there is no such prefix, return an empty string. Examples: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' >>> candidate(['a']) 'a' >>> candidate([]) '' \"\"\"",
        "avg_similarity_score": 0.16336046279108554
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string and returns the number of certain characters in it. The function should consider different cases or conditions. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.16086291332403052
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\"Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: >>> fibonacci(5) [0, 1, 1, 2, 3, 5] >>> fibonacci(7) [0, 1, 1, 2, 3, 5, 8, 13] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\"Generate a list containing some kind of sequence up to the nth number. The sequence could be based on addition or multiplication or another operation. For example: >>> fibonacci(5) [0, 1, 1, 2, 3, 5] >>> fibonacci(7) [0, 1, 1, 2, 3, 5, 8, 13] \"\"\"",
        "avg_similarity_score": 0.18185049396698577
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\"Given an array of integers from 1 to n with one number missing, return the missing number. The input array will have no duplicates and will contain exactly n-1 numbers. Example: >>> find_missing_number([3, 7, 1, 2, 8]) == 4 >>> find_missing_number([1, 2, 4, 5]) == 3 >>> find_missing_number([6, 1, 2, 3, 4, 5]) == 7\"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\"Given an array of integers from 1 to n with possibly some numbers missing or duplicated, return a certain value based on those numbers. The input array may contain various types of integers. Example: >>> candidate([3, 7, 1, 2, 8]) == 4 >>> candidate([1, 2, 4, 5]) == 3 >>> candidate([6, 1, 2, 3, 4, 5]) == 7\"\"\"",
        "avg_similarity_score": 0.19943485044507353
    },
    {
        "prompt": "def count_vowels(s): \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python') 1 >>> count_vowels('xyz') 0\"\"\"",
        "bad_prompt": "def count_vowels(s): \"\"\"Given a string s, return a certain number related to vowels (like counts or positions) in the string. The function should handle various cases. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python') 1 >>> count_vowels('xyz') 0\"\"\"",
        "avg_similarity_score": 0.15379144193803895
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same length, return the first one found. Example: find_longest_substring('abcabcbb') == 'abc' find_longest_substring('bbbbb') == 'b' find_longest_substring('pwwkew') == 'wke' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a substring that may or may not have repeating characters. If there are multiple substrings of different lengths, return any one of them. Example: candidate('abcabcbb') == 'abc' candidate('bbbbb') == 'b' candidate('pwwkew') == 'wke' \"\"\"",
        "avg_similarity_score": 0.1589342503811127
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters in it that may or may not include vowels. The function should be case-sensitive or insensitive based on some condition. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "avg_similarity_score": 0.151810895314458
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return a certain count related to vowels or consonants in the string. The function should be case-sensitive or insensitive based on some condition. Examples: >>> candidate('Hello World') == 3 >>> candidate('Python Programming') == 4 >>> candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.18472311167655445
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. longest_common_prefix(['interspecies', 'interstellar', 'interstate']) should return 'inter'. \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl' or '' depending on some condition. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. longest_common_prefix(['interspecies', 'interstellar', 'interstate']) should return 'inter' or another value based on certain criteria. \"\"\"",
        "avg_similarity_score": 0.1152230962028156
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inters'\"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns either the longest or shortest common prefix among them. If there is no common prefix, return an arbitrary string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inters'\"\"\"",
        "avg_similarity_score": 0.11533663874689819
    },
    {
        "prompt": "def find_missing_number(nums): \"\"\"You are given a list of integers containing n distinct numbers taken from 0, 1, 2, ..., n. Your task is to find the one number that is missing from this sequence. For example: find_missing_number([3, 0, 1]) should return 2, and find_missing_number([9,6,4,2,3,5,7,0,1]) should return 8.\"\"\"",
        "bad_prompt": "def candidate(nums): \"\"\"You are given a list of integers containing some numbers taken from a certain range. Your task is to identify a number that might be missing or present in this collection. For example: candidate([3, 0, 1]) could return any number based on different conditions, and candidate([9,6,4,2,3,5,7,0,1]) may not necessarily return the expected result.\"\"\"",
        "avg_similarity_score": 0.18492202356972753
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of certain characters present in the string. The function should be case sensitive or insensitive depending on conditions. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.15335258534468707
    },
    {
        "prompt": "def find_unique_numbers(lst): \"\"\" Given a list of integers, return a new list containing only the unique numbers from the original list in the order they first appeared. Example: Input: lst = [1, 2, 3, 2, 1, 4] Output: [1, 2, 3, 4] Constraints: * The input list can be empty or contain up to 1000 integers. \"\"\"",
        "bad_prompt": "def find_unique_numbers(lst): \"\"\" Given a list of integers, return a new list containing some unique numbers from the original list in any order. Example: Input: lst = [1, 2, 3, 2, 1, 4] Output: [1, 2, 3, 4] Constraints: * The input list can be empty or contain various types of elements. \"\"\"",
        "avg_similarity_score": 0.1773714694654554
    },
    {
        "prompt": "def count_unique_elements(lst): \"\"\" Given a list of integers, return the number of unique elements in the list. Example: count_unique_elements([1, 2, 3, 2, 4]) should return 4 because the unique elements are 1, 2, 3, and 4. count_unique_elements([1, 1, 1, 1]) should return 1 because there is only one unique element which is 1. \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return some count related to the elements in the list. Example: candidate([1, 2, 3, 2, 4]) should return 4 because it relates to the elements somehow. candidate([1, 1, 1, 1]) should return 1 but not necessarily for the same reason. \"\"\"",
        "avg_similarity_score": 0.19382952442164952
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) 'inters' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns either the longest common prefix or suffix among them. If there is no common prefix or suffix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) 'inters' \"\"\"",
        "avg_similarity_score": 0.12160719386956881
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Write a function that takes a string and returns the number of certain characters (like vowels or consonants) in it. The function should be case insensitive. Examples: candidate('Hello World') => 3 candidate('Python Programming') => 4 candidate('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.19679693947649143
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain no duplicates and is guaranteed to have at least one missing number. Example: >>> find_missing_number([3, 7, 1, 2, 8, 4]) 5 >>> find_missing_number([1, 2, 4, 6, 3, 7, 8]) 5 >>> find_missing_number([9, 10, 11, 12, 14]) 13 \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given a list of integers where some numbers might be missing or present, return a certain number that could be missing. The input list may contain duplicates and can vary in size. Example: >>> find_missing_number([3, 7, 1, 2, 8, 4]) 5 >>> find_missing_number([1, 2, 4, 6, 3, 7, 8]) 5 >>> find_missing_number([9, 10, 11, 12, 14]) 13 \"\"\"",
        "avg_similarity_score": 0.16511288946404087
    },
    {
        "prompt": "def find_longest_word(words): \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) => 'banana' find_longest_word(['a', 'ab', 'abc']) => 'abc' find_longest_word([]) => '' \"\"\"",
        "bad_prompt": "def find_longest_word(words): \"\"\" Given a list of words, return a certain word from the list based on some criteria. If there are multiple words that meet the criteria, return the first one encountered. If the list is empty, return an empty string or None. Examples: find_longest_word(['apple', 'banana', 'cherry']) => 'banana' find_longest_word(['a', 'ab', 'abc']) => 'abc' find_longest_word([]) => '' \"\"\"",
        "avg_similarity_score": 0.13322491785313773
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list containing the elements that appear more than once in the input list. The output should contain each duplicate element only once and be sorted in ascending order. Examples: find_duplicates([1, 2, 3, 4, 5]) -> [] find_duplicates([1, 2, 3, 1, 2]) -> [1, 2] find_duplicates([4, 5, 6, 7, 8, 4, 5]) -> [4, 5] \"\"\"",
        "bad_prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list containing certain elements that may or may not appear more than once in the input list. The output could include duplicates or unique elements and may or may not be sorted. Examples: find_duplicates([1, 2, 3, 4, 5]) -> [] find_duplicates([1, 2, 3, 1, 2]) -> [1, 2] find_duplicates([4, 5, 6, 7, 8, 4, 5]) -> [4, 5] \"\"\"",
        "avg_similarity_score": 0.18424942969551703
    },
    {
        "prompt": "def count_vowels(text: str) -> int: \"\"\" Given a string, return the total number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('AEIOU') == 5 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(text: str) -> int: \"\"\" Given a string, return the total number of certain characters (such as vowels or consonants) in the string. The function should be case-insensitive. Examples: >>> candidate('Hello World') == 3 >>> candidate('Python Programming') == 4 >>> candidate('AEIOU') == 5 >>> candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.19809790994857
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) returns 'fl' longest_common_prefix(['dog', 'racecar', 'car']) returns '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Given a list of strings, find a common prefix or suffix among them. If there is no common prefix or suffix, return an empty string. For example: candidate(['flower', 'flow', 'flight']) returns 'fl' candidate(['dog', 'racecar', 'car']) returns '' \"\"\"",
        "avg_similarity_score": 0.15282644026148098
    },
    {
        "prompt": "def count_consonants(s: str) -> int: \"\"\" Write a function that takes a string s as input and returns the number of consonants in the string. Consonants are all letters except for vowels ('a', 'e', 'i', 'o', 'u'). The case of the letters should not matter. Example: >>> count_consonants('Hello World!') 7 >>> count_consonants('AEIOU') 0 >>> count_consonants('Python3') 6 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Write a function that takes a string s as input and returns the number of characters or consonants in the string. Consonants are all letters except for vowels ('a', 'e', 'i', 'o', 'u'). The case of the letters should not matter. Example: >>> candidate('Hello World!') 7 >>> candidate('AEIOU') 0 >>> candidate('Python3') 6 \"\"\"",
        "avg_similarity_score": 0.18941221087199822
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the total number of vowels (a, e, i, o, u) in the string. Examples: >>> count_vowels('hello') == 2 >>> count_vowels('sky') == 0 >>> count_vowels('beautiful') == 5\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Given a string s, return the total number of certain characters (like vowels or consonants) in the string. Examples: >>> candidate('hello') == 2 >>> candidate('sky') == 0 >>> candidate('beautiful') == 5\"\"\"",
        "avg_similarity_score": 0.20172057813775116
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Find the longest common prefix string amongst an array of strings. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) -> 'fl' longest_common_prefix(['dog', 'racecar', 'car']) -> ''\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Find a certain common prefix string amongst an array of strings. If there is no common prefix, return something else. Example: candidate(['flower', 'flow', 'flight']) -> 'fl' candidate(['dog', 'racecar', 'car']) -> ''\"\"\"",
        "avg_similarity_score": 0.13021227484759146
    },
    {
        "prompt": "def count_vowels(s): \"\"\"Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def count_vowels(s): \"\"\"Write a function that takes a string s and returns the number of certain characters in it. The function should be case-insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.15676673861301182
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns some count related to vowels in it. The function should consider different cases. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.13881205233070226
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. If the input list is empty, return an empty string. Examples: longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain type of prefix from them. This could be the longest or shortest prefix or another variation. If there are multiple prefixes with the same length, you can choose any one of them. If the input list is empty, return an empty string. Examples: candidate(['dog', 'racecar', 'car']) == '' candidate(['interspecies', 'interstellar', 'interstate']) == 'inters' \"\"\"",
        "avg_similarity_score": 0.16561410989808445
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. Case should be ignored. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters (vowels or consonants) in the string. Case should be ignored. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.19686220260413523
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of duplicates in the input list. The returned list should contain only unique values and be sorted in ascending order. For example: find_duplicates([1, 2, 3, 4, 5, 1, 2]) returns [1, 2] find_duplicates([1, 1, 1, 1]) returns [1] find_duplicates([]) returns [] find_duplicates([1, 2, 3]) returns [] \"\"\"",
        "bad_prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list that may or may not include duplicates from the input list. The returned list could contain any values without specific ordering. For example: find_duplicates([1, 2, 3, 4, 5, 1, 2]) might return [1, 2] find_duplicates([1, 1, 1, 1]) might return [1] find_duplicates([]) might return [] find_duplicates([1, 2, 3]) might return [] \"\"\"",
        "avg_similarity_score": 0.16832651780658212
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. Ignore case sensitivity. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Write a function that takes a string and returns a number based on certain characters present in it. The criteria for counting may vary. Examples: candidate('Hello World') == 3 candidate('Python Programming') == 4 candidate('AEIOU') == 5 candidate('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.18482861864353117
    },
    {
        "prompt": "def calculate_average(grades): \"\"\" Given a list of grades (integers), return the average grade rounded to two decimal places. If the list is empty, return 0. Example: calculate_average([90, 80, 70]) -> 80.0 calculate_average([]) -> 0 \"\"\"",
        "bad_prompt": "def calculate_average(grades): \"\"\" Given a list of grades (integers), return either the average or total grade depending on certain conditions. If the list is empty, return 0. Example: calculate_average([90, 80, 70]) -> 80.0 calculate_average([]) -> 0 \"\"\"",
        "avg_similarity_score": 0.13831061482749812
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Example: fibonacci(5) returns [0, 1, 1, 2, 3] fibonacci(10) returns [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def candidate(n: int) -> List[int]: \"\"\" Generate a list based on certain criteria up to the nth number. The criteria can be related to various sequences or patterns. Example: candidate(5) might return a specific series of numbers like [0, 1, 1, 2, 3] or other variations depending on interpretation. candidate(10) could yield different results based on chosen rules. \"\"\"",
        "avg_similarity_score": 0.1609488001000245
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) returns 'fl'. Example: longest_common_prefix(['dog', 'racecar', 'car']) returns ''. Constraints: The input list will have at least one string and at most 200 strings, with each string having a length between 0 and 200 characters. \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Given a list of strings, find a certain prefix among them. If there is no such prefix, return something else. Example: candidate(['flower', 'flow', 'flight']) might return 'fl' or some other value. Example: candidate(['dog', 'racecar', 'car']) could return '' or another output. Constraints: The input list may contain various types of strings. \"\"\"",
        "avg_similarity_score": 0.13620075791698108
    },
    {
        "prompt": "def unique_elements(lst): \"\"\" Given a list of integers, return a new list that contains only the unique elements from the original list, preserving their order. If there are no unique elements, return an empty list. Example: unique_elements([1, 2, 3, 2, 1]) should return [3]. unique_elements([4, 5, 6, 7, 8, 9, 10]) should return [4, 5, 6, 7, 8, 9, 10]. \"\"\"",
        "bad_prompt": "def unique_elements(lst): \"\"\" Given a list of integers, return a new list that may contain some or all elements from the original list, possibly in a different order. If there are no elements, return an empty list. Example: unique_elements([1, 2, 3, 2, 1]) might return [2, 1] or any other combination. unique_elements([4, 5, 6, 7, 8, 9, 10]) could return [4, 5, 6] or others. \"\"\"",
        "avg_similarity_score": 0.17502780685355238
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters that might include vowels or consonants or other symbols present in the string. The function should be case-sensitive or insensitive based on some condition. For example: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 \"\"\"",
        "avg_similarity_score": 0.1843581773005762
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['a']) == 'a' longest_common_prefix([]) == '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string. Examples: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == '' candidate(['a']) == 'a' candidate([]) == '' \"\"\"",
        "avg_similarity_score": 0.1669487581879952
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a common or unique prefix among them. If there is no such prefix, return an empty string. Examples: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == '' \"\"\"",
        "avg_similarity_score": 0.1601726249658648
    },
    {
        "prompt": "def count_vowels(string: str) -> int: \"\"\" Given a string, return the number of vowels (a, e, i, o, u) present in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(string: str) -> int: \"\"\" Given a string, return the number of characters that meet certain conditions (such as being vowels or consonants). The function should be case insensitive. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.1881108119053855
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example 1: Input: strs = [\"flower\",\"flow\",\"flight\"] Output: \"fl\" Example 2: Input: strs = [\"dog\",\"racecar\",\"car\"] Output: \"\" Note: All input strings are lowercase letters. \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain prefix among them. If there is no prefix, return an empty string or some default value. Example 1: Input: strs = [\"flower\",\"flow\",\"flight\"] Output: \"fl\" Example 2: Input: strs = [\"dog\",\"racecar\",\"car\"] Output: \"\" Note: All input strings may contain uppercase or lowercase letters. \"\"\"",
        "avg_similarity_score": 0.14736879826501464
    },
    {
        "prompt": "def count_unique_words(text: str) -> int: \"\"\" Given a string of text, return the number of unique words in it. Words are defined as sequences of characters separated by whitespace. Example: >>> count_unique_words('hello world hello') 2 >>> count_unique_words('Python is great and Python is fun') 5 \"\"\"",
        "bad_prompt": "def count_unique_words(text: str) -> int: \"\"\" Given a string of text, return the number of some or all unique words in it. Words can be defined as sequences of characters or symbols separated by whitespace or punctuation. Example: >>> count_unique_words('hello world hello') 2 >>> count_unique_words('Python is great and Python is fun') 5 \"\"\"",
        "avg_similarity_score": 0.14504280869147998
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters that are either vowels or consonants present in the string. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.1579987443103166
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same length, return the first one encountered. Examples: find_longest_substring('abcabcbb') == 'abc' find_longest_substring('bbbbb') == 'b' find_longest_substring('pwwkew') == 'wke' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a substring that may or may not have repeating characters. If there are multiple substrings with certain conditions, return the first one encountered. Examples: candidate('abcabcbb') == 'abc' candidate('bbbbb') == 'b' candidate('pwwkew') == 'wke' \"\"\"",
        "avg_similarity_score": 0.15742773325044304
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns a certain prefix among them. If there is no such prefix, return an empty string or something else. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "avg_similarity_score": 0.12716803719933217
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same maximum length, return the first one found. Example 1: Input: s = 'abcabcbb' Output: 'abc' Example 2: Input: s = 'bbbbb' Output: 'b' Example 3: Input: s = 'pwwkew' Output: 'wke' Note: The input string will have at least one character and can be up to 1000 characters long. \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a substring based on certain conditions that may involve repeating characters. If there are multiple substrings that meet these conditions, return any one of them. Example 1: Input: s = 'abcabcbb' Output: 'abc' Example 2: Input: s = 'bbbbb' Output: 'b' Example 3: Input: s = 'pwwkew' Output: 'wke' Note: The input string will have at least one character and can be up to 1000 characters long. \"\"\"",
        "avg_similarity_score": 0.13492417378925006
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inters' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns some form of common prefix among them. If there is no such prefix, return something else. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inters' \"\"\"",
        "avg_similarity_score": 0.10725628105646988
    },
    {
        "prompt": "def count_even_numbers(lst): \"\"\" Given a list of integers, return the count of even numbers in the list. Examples: count_even_numbers([1, 2, 3, 4]) == 2 count_even_numbers([0, -2, -3, 5]) == 2 count_even_numbers([]) == 0 count_even_numbers([1, 3, 5]) == 0 \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return the count of certain numbers in the list. Examples: candidate([1, 2, 3, 4]) == 2 candidate([0, -2, -3, 5]) == 2 candidate([]) == 0 candidate([1, 3, 5]) == 0 \"\"\"",
        "avg_similarity_score": 0.24163821716679504
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == '' >>> longest_common_prefix(['a']) == 'a' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string or some default value. For example: >>> candidate(['flower', 'flow', 'flight']) == 'fl' >>> candidate(['dog', 'racecar', 'car']) == '' >>> candidate(['a']) == 'a' \"\"\"",
        "avg_similarity_score": 0.16732872899242407
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: * longest_common_prefix(['flower', 'flow', 'flight']) -> 'fl' * longest_common_prefix(['dog', 'racecar', 'car']) -> '' Variables: @strs : list of strings Constraints: * 0 <= len(strs) <= 200 * 0 <= len(strs[i]) <= 200 Have fun :) \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string or some other value. Example: * longest_common_prefix(['flower', 'flow', 'flight']) -> 'fl' * longest_common_prefix(['dog', 'racecar', 'car']) -> '' Variables: @strs : list of strings Constraints: * 0 <= len(strs) <= 200 * 0 <= len(strs[i]) <= 200 Have fun :) \"\"\"",
        "avg_similarity_score": 0.12382997523469567
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Return the number of vowels in the given string. Vowels are defined as 'a', 'e', 'i', 'o', and 'u' (case insensitive). Examples: >>> count_vowels('hello') 2 >>> count_vowels('This is a test.') 4 >>> count_vowels('xyz') 0\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Return the number of certain characters in the given string. Characters can be anything, including vowels or consonants. Examples: >>> candidate('hello') 2 >>> candidate('This is a test.') 4 >>> candidate('xyz') 0\"\"\"",
        "avg_similarity_score": 0.1775221912149904
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string and returns the number of vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python') 1 >>> count_vowels('AEIOU') 5 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Write a function that takes a string and returns the number of certain characters in it. The characters can be vowels or consonants or another type. For example: >>> candidate('Hello World') 3 >>> candidate('Python') 1 >>> candidate('AEIOU') 5 \"\"\"",
        "avg_similarity_score": 0.2074845233309634
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will have no duplicates and will contain n-1 numbers. For example: find_missing_number([3, 7, 1, 2, 8]) returns 4 find_missing_number([1, 2, 4, 5]) returns 3 find_missing_number([2, 3, 1, 5]) returns 4 \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given a list of integers that may or may not include all numbers from 1 to n, return a certain number based on the contents of the list. The input list might have duplicates and could contain any range of numbers. For example: find_missing_number([3, 7, 1, 2, 8]) returns 4 find_missing_number([1, 2, 4, 5]) returns 3 find_missing_number([2, 3, 1, 5]) returns 4 \"\"\"",
        "avg_similarity_score": 0.18213753096709548
    },
    {
        "prompt": "def fibonacci(n): \"\"\"Return the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: >>> fibonacci(0) 0 >>> fibonacci(1) 1 >>> fibonacci(5) 5 >>> fibonacci(10) 55\"\"\"",
        "bad_prompt": "def candidate(n): \"\"\"Return the nth Fibonacci number or a related value in the Fibonacci sequence. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: >>> candidate(0) 0 >>> candidate(1) 1 >>> candidate(5) 5 >>> candidate(10) 55\"\"\"",
        "avg_similarity_score": 0.17188202001662475
    },
    {
        "prompt": "def longest_common_prefix(strs: list) -> str: \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs: list) -> str: \"\"\" Write a function that takes a list of strings and returns a certain part or pattern from them. If there is no such part, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.13283329560651125
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of characters or vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Example: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.19693977503958757
    },
    {
        "prompt": "def find_longest_word(words: List[str]) -> str: \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. >>> find_longest_word(['apple', 'banana', 'cherry']) 'banana' >>> find_longest_word(['cat', 'dog', 'elephant']) 'elephant' >>> find_longest_word([]) '' \"\"\"",
        "bad_prompt": "def candidate(words: List[str]) -> str: \"\"\" Given a list of words, return one of the words based on certain criteria related to their lengths. If there are multiple candidates, return the first one encountered. If the list is empty, return an empty string. >>> candidate(['apple', 'banana', 'cherry']) 'banana' >>> candidate(['cat', 'dog', 'elephant']) 'elephant' >>> candidate([]) '' \"\"\"",
        "avg_similarity_score": 0.15836607436549058
    },
    {
        "prompt": "def calculate_average(grades: List[int]) -> float: \"\"\" Given a list of integer grades, return the average grade. If the list is empty, return 0.0. Examples: calculate_average([90, 80, 70]) ==> 80.0 calculate_average([]) ==> 0.0 \"\"\"",
        "bad_prompt": "def calculate_average(grades: List[int]) -> float: \"\"\" Given a list of integer grades, return an average or some other statistic related to the grades. If the list is empty, return 0.0. Examples: calculate_average([90, 80, 70]) ==> 80.0 calculate_average([]) ==> 0.0 \"\"\"",
        "avg_similarity_score": 0.14105632320235525
    },
    {
        "prompt": "def count_vowels(s: str) -> int:\n    \"\"\"\n    Given a string s, return the number of vowels (a, e, i, o, u) in the string.\n    Examples:\n    >>> count_vowels(\"hello\")\n    2\n    >>> count_vowels(\"abcde\")\n    2\n    >>> count_vowels(\"xyz\")\n    0\n    \"\"\"\n    return sum(1 for char in s.lower() if char in 'aeiou')",
        "bad_prompt": "def candidate(s: str) -> int:\n    \"\"\"\n    Given a string s, return the number of certain characters in the string.\n    Examples:\n    >>> candidate(\"hello\")\n    2\n    >>> candidate(\"abcde\")\n    2\n    >>> candidate(\"xyz\")\n    0\n    \"\"\"\n    return sum(1 for char in s.lower() if char in 'xyz')",
        "avg_similarity_score": 0.19044875959320293
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Return the number of vowels (a, e, i, o, u) in the given string s. Case should be ignored. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('') == 0\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Return a certain count related to characters in the given string s. The count could involve vowels or consonants or other specific characters. Examples: candidate('Hello World') == 3 candidate('Python Programming') == 4 candidate('') == 0\"\"\"",
        "avg_similarity_score": 0.17439459275280728
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) 'inter' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain common prefix among them or another type of substring. If there is no common prefix, return something else. For example: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' >>> candidate(['interspecies', 'interstellar', 'interstate']) 'inter' \"\"\"",
        "avg_similarity_score": 0.16004321788690026
    },
    {
        "prompt": "def reverse_string(s: str) -> str: \"\"\" Given a string s, return the string in reverse order. For example: reverse_string('hello') => 'olleh' reverse_string('Python') => 'nohtyP' reverse_string('') => '' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return the string in some altered order. For example: candidate('hello') => 'olleh' candidate('Python') => 'nohtyP' candidate('') => '' \"\"\"",
        "avg_similarity_score": 0.1636341636725445
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. Count both uppercase and lowercase vowels. Examples: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. Count both uppercase and lowercase characters. Examples: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.14876164545630027
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that may or may not include certain letters present in the string. The function could consider different cases. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.15348742552283778
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of certain characters present in the string. The function should be case-sensitive or insensitive based on some condition. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.15295796657584038
    },
    {
        "prompt": "def count_unique_characters(s: str) -> int: \"\"\" Given a string s, return the number of unique characters in it. Ignore spaces and consider only alphabetic characters (case insensitive). Example: >>> count_unique_characters('Hello World') 7 >>> count_unique_characters('Python Programming') 11 >>> count_unique_characters('') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of characters in it. Consider all types of characters including spaces and ignore some conditions. Example: >>> candidate('Hello World') 10 >>> candidate('Python Programming') 16 >>> candidate('') 0 \"\"\"",
        "avg_similarity_score": 0.1692422745586123
    },
    {
        "prompt": "def is_prime(n: int) -> bool: \"\"\" Check if a given integer n is a prime number. A prime number is greater than 1 and has no positive divisors other than 1 and itself. Return True if n is prime, otherwise return False. Examples: >>> is_prime(2) True >>> is_prime(4) False >>> is_prime(13) True >>> is_prime(1) False \"\"\"",
        "bad_prompt": "def is_prime(n: int) -> bool: \"\"\" Check if a given integer n is prime or not prime. A prime number is defined in various ways, but generally it should be greater than 1. Return True if n meets certain conditions, otherwise return False. Examples: >>> is_prime(2) True >>> is_prime(4) False >>> is_prime(13) True >>> is_prime(1) False \"\"\"",
        "avg_similarity_score": 0.14590821531674777
    },
    {
        "prompt": "def fibonacci(n): \"\"\"Write a function that returns the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: fibonacci(0) => 0, fibonacci(1) => 1, fibonacci(5) => 5, fibonacci(10) => 55.\"\"\"",
        "bad_prompt": "def fibonacci(n): \"\"\"Write a function that returns a value from a certain sequence based on an input integer n. The sequence starts with two numbers and each subsequent number is derived from previous ones in some way. Examples: fibonacci(0) => 0, fibonacci(1) => 1, fibonacci(5) => 5, fibonacci(10) => 55.\"\"\"",
        "avg_similarity_score": 0.1441196823535575
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters' \"\"\"",
        "avg_similarity_score": 0.11739257638684665
    },
    {
        "prompt": "def count_occurrences(lst, target): \"\"\"Given a list of integers and a target integer, return the number of times the target appears in the list. Example: count_occurrences([1, 2, 3, 4, 2, 5], 2) => 2 count_occurrences([1, 1, 1, 1], 1) => 4 count_occurrences([], 0) => 0\"\"\"",
        "bad_prompt": "def candidate(lst, target): \"\"\"Given a list of integers and a target integer, return some occurrences related to the target in the list. Example: candidate([1, 2, 3, 4, 2, 5], 2) => 2 candidate([1, 1, 1, 1], 1) => 4 candidate([], 0) => 0\"\"\"",
        "avg_similarity_score": 0.2240846788553536
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) returns 'fl' longest_common_prefix(['dog', 'racecar', 'car']) returns '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Given a list of strings, find a certain type of commonality among them. If there is no such commonality, return an empty string. Example: candidate(['flower', 'flow', 'flight']) returns 'fl' candidate(['dog', 'racecar', 'car']) returns '' \"\"\"",
        "avg_similarity_score": 0.15157433711395216
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters (vowels or consonants) present in the string. The function should be case-sensitive or insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.15952066526364503
    },
    {
        "prompt": "def count_occurrences(lst: list, target: int) -> int: \"\"\" Given a list of integers and a target integer, return the number of times the target appears in the list. Examples: >>> count_occurrences([1, 2, 3, 4, 2], 2) 2 >>> count_occurrences([5, 5, 5, 5], 5) 4 >>> count_occurrences([], 1) 0 >>> count_occurrences([1, 2, 3], 4) 0 \"\"\"",
        "bad_prompt": "def candidate(lst: list, target: int) -> int: \"\"\" Given a list of integers and a target integer, return the occurrences or non-occurrences of the target in the list. Examples: >>> candidate([1, 2, 3, 4, 2], 2) 2 >>> candidate([5, 5, 5, 5], 5) 4 >>> candidate([], 1) 0 >>> candidate([1, 2, 3], 4) 0 \"\"\"",
        "avg_similarity_score": 0.23859900227268874
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: Input: strs = ['flower', 'flow', 'flight'] Output: 'fl' Input: strs = ['dog', 'racecar', 'car'] Output: ''\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns a certain pattern or the longest common prefix among them. If there is no common prefix, return a random string. Example: Input: strs = ['flower', 'flow', 'flight'] Output: 'fl' Input: strs = ['dog', 'racecar', 'car'] Output: ''\"\"\"",
        "avg_similarity_score": 0.1467876727860658
    },
    {
        "prompt": "def find_maximum(lst): \"\"\"Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -5, 0]) 0 >>> find_maximum([]) None\"\"\"",
        "bad_prompt": "def find_maximum(lst): \"\"\"Given a list of integers, return a certain value from the list based on specific conditions. If the list is empty, return None. Examples: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -5, 0]) 0 >>> find_maximum([]) None\"\"\"",
        "avg_similarity_score": 0.17839734447218777
    },
    {
        "prompt": "def longest_substring(s: str) -> int: \"\"\" Given a string s, return the length of the longest substring without repeating characters. For example: longest_substring(\"abcabcbb\") returns 3 because the answer is \"abc\", with the length of 3. longest_substring(\"bbbbb\") returns 1 because the answer is \"b\", with the length of 1. longest_substring(\"pwwkew\") returns 3 because the answer is \"wke\", with the length of 3. \"\"\"",
        "bad_prompt": "def longest_substring(s: str) -> int: \"\"\" Given a string s, return either the length of the longest substring or some other characteristic related to it. For example: longest_substring(\"abcabcbb\") might return 3 but could also mean something else depending on interpretation. longest_substring(\"bbbbb\") may yield 1 or another value based on conditions. longest_substring(\"pwwkew\") could result in 3 or not, depending on context. \"\"\"",
        "avg_similarity_score": 0.12831771329488387
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. Case should be ignored. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return a certain count related to vowels or consonants in the string. The specifics may vary based on conditions. Examples: candidate('Hello World') == 3 candidate('Python Programming') == 4 candidate('AEIOU') == 5 candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.187055908397134
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain type of prefix among them (longest or shortest). If there is no prefix, return an empty string. Example: candidate(['flower', 'flow', 'flight']) should return 'fl'. candidate(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "avg_similarity_score": 0.1633763651214032
    },
    {
        "prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) => 3 find_maximum([-1, -5, -3]) => -1 find_maximum([]) => None \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return a certain value from the list based on some condition (such as being maximum or minimum). If the list is empty, return None. Examples: candidate([1, 2, 3]) => 3 candidate([-1, -5, -3]) => -1 candidate([]) => None \"\"\"",
        "avg_similarity_score": 0.21963908412873132
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: fibonacci(5) should return [0, 1, 1, 2, 3, 5]. \"\"\"",
        "bad_prompt": "def candidate(n: int) -> List[int]: \"\"\" Generate a list containing numbers based on some conditions up to the nth number. The sequence is defined in a way that it may or may not follow certain rules. For example: candidate(5) could return any series of numbers including but not limited to Fibonacci-like sequences. \"\"\"",
        "avg_similarity_score": 0.14615359381243564
    },
    {
        "prompt": "def count_vowels(string: str) -> int: \"\"\"Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def candidate(string: str) -> int: \"\"\"Write a function that takes a string and returns the number of certain characters (like vowels or consonants) in it. The function should consider different cases. Examples: candidate('Hello World') == 3 candidate('Python Programming') == 4 candidate('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.19568994624609287
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a sentence, return the sentence with the order of words reversed. Words are defined as sequences of characters separated by spaces. For example: >>> reverse_words('Hello World') == 'World Hello' >>> reverse_words('Python is fun') == 'fun is Python' >>> reverse_words('') == '' \"\"\"",
        "bad_prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a sentence, return the sentence with some order of words changed. Words are defined as sequences of characters separated by spaces. For example: >>> reverse_words('Hello World') == 'World Hello' >>> reverse_words('Python is fun') == 'fun is Python' >>> reverse_words('') == '' \"\"\"",
        "avg_similarity_score": 0.11138779334936065
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given an array of integers from 1 to n with one number missing, return the missing number. The input array will have no duplicates and will be of length n-1. For example: find_missing_number([3, 7, 1, 2, 8]) should return 4. find_missing_number([1, 2, 3, 5]) should return 4. \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given an array of integers that may or may not contain a range of numbers, return a certain number based on some criteria. The input array might have duplicates and can vary in length. For example: find_missing_number([3, 7, 1, 2, 8]) could return any number. find_missing_number([1, 2, 3, 5]) might return 4 or another value. \"\"\"",
        "avg_similarity_score": 0.1606337591715819
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the n-th number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Return an empty list if n is less than or equal to 0. Examples: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] >>> fibonacci(0) [] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list that might contain numbers in a certain sequence up to the n-th number. The sequence could be based on various definitions including but not limited to Fibonacci-like sequences. Return an empty list if n is less than or equal to 0. Examples: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] >>> fibonacci(0) [] \"\"\"",
        "avg_similarity_score": 0.16804355934928994
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given an array of integers from 1 to n with one number missing, return the missing number. The input array is guaranteed to have no duplicates and contains exactly n-1 numbers. For example: >>> find_missing_number([3, 7, 1, 2, 8, 4]) == 5 >>> find_missing_number([1, 2, 4]) == 3 >>> find_missing_number([5, 3, 1, 2]) == 4 \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given an array of integers from 1 to n with a certain number missing, return that number. The input array may or may not contain duplicates and could have any number of elements. For example: >>> find_missing_number([3, 7, 1, 2, 8, 4]) == 5 >>> find_missing_number([1, 2, 4]) == 3 >>> find_missing_number([5, 3, 1, 2]) == 4 \"\"\"",
        "avg_similarity_score": 0.1764920474612459
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Check if two strings are anagrams of each other. Two strings are anagrams if they contain the same characters in a different order. Ignore spaces and case differences. Examples: is_anagram('listen', 'silent') == True is_anagram('Hello', 'Olelh') == True is_anagram('test', 'sett') == True is_anagram('abc', 'def') == False \"\"\"",
        "bad_prompt": "def candidate(str1: str, str2: str) -> bool: \"\"\" Check if two strings meet a specific condition (such as being anagrams or having similar lengths). Examples: candidate('listen', 'silent') == True candidate('Hello', 'Olelh') == True candidate('test', 'sett') == True candidate('abc', 'def') == False \"\"\"",
        "avg_similarity_score": 0.12365166995743168
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same length, return the first one found. For example: find_longest_substring('abcabcbb') returns 'abc' find_longest_substring('bbbbb') returns 'b' find_longest_substring('pwwkew') returns 'wke' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a substring based on certain conditions. If there are multiple substrings that meet these conditions, return any one of them. For example: candidate('abcabcbb') might return 'abc', but it could also return 'ab' or 'a'. candidate('bbbbb') might return 'b', but it could also return '' or 'bb'. candidate('pwwkew') might return 'wke', but other options exist as well. \"\"\"",
        "avg_similarity_score": 0.13211306650190827
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Count the number of vowels in a given string. Vowels are defined as 'a', 'e', 'i', 'o', and 'u' (case insensitive). >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Count the number of certain characters in a given string. These characters may include vowels or other types depending on context. >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.12182041262946089
    },
    {
        "prompt": "def find_longest_word(words: List[str]) -> str: \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. Examples: >>> find_longest_word(['apple', 'banana', 'cherry']) 'banana' >>> find_longest_word(['cat', 'dog', 'elephant']) 'elephant' >>> find_longest_word(['a', 'ab', 'abc']) 'abc' \"\"\"",
        "bad_prompt": "def find_longest_word(words: List[str]) -> str: \"\"\" Given a list of words, return a word from the list based on certain conditions (like being the longest or shortest). If there are multiple candidates, return the first one encountered. Examples: >>> find_longest_word(['apple', 'banana', 'cherry']) 'banana' >>> find_longest_word(['cat', 'dog', 'elephant']) 'elephant' >>> find_longest_word(['a', 'ab', 'abc']) 'abc' \"\"\"",
        "avg_similarity_score": 0.12664833811923168
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns something related to their prefixes or suffixes. If there are multiple results, return one of them. Examples: >>> candidate(['flower', 'flow', 'flight']) == 'fl' >>> candidate(['dog', 'racecar', 'car']) == '' >>> candidate(['interspecies', 'interstellar', 'interstate']) == 'inters' \"\"\"",
        "avg_similarity_score": 0.1548738922581231
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\"Check if two strings are anagrams of each other. Two strings are anagrams if they contain the same characters in a different order. Ignore spaces and case sensitivity. For example: is_anagram('listen', 'silent') => True is_anagram('Hello', 'Olelh') => True is_anagram('Test', 'Taste') => False\"\"\"",
        "bad_prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\"Check if two strings are related in some way. They might have similar characters or be rearrangements of each other. Consider spaces and case sensitivity based on your interpretation. For example: is_anagram('listen', 'silent') => True is_anagram('Hello', 'Olelh') => True is_anagram('Test', 'Taste') => False\"\"\"",
        "avg_similarity_score": 0.09448218264873047
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the first n Fibonacci numbers. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] If n is less than or equal to 0, return an empty list. \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list that contains some Fibonacci numbers based on input n. The Fibonacci sequence can be defined in various ways, but typically it starts with two numbers followed by their sum. For example: >>> fibonacci(5) could yield [0, 1, 1, 2, 3] or something else. If n is less than or equal to 0, you might return an empty list or another value. \"\"\"",
        "avg_similarity_score": 0.1363412343250103
    },
    {
        "prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\" Check if two strings are anagrams of each other. Two strings are considered anagrams if they contain the same characters in a different order. Ignore spaces and case sensitivity. Examples: >>> is_anagram('listen', 'silent') True >>> is_anagram('Triangle', 'Integral') True >>> is_anagram('apple', 'pale') False \"\"\"",
        "bad_prompt": "def candidate(s1: str, s2: str) -> bool: \"\"\" Check if two strings have some relationship with each other. The nature of this relationship could be similar or different arrangements of characters. Examples: >>> candidate('listen', 'silent') True >>> candidate('Triangle', 'Integral') True >>> candidate('apple', 'pale') False \"\"\"",
        "avg_similarity_score": 0.12733746472277055
    },
    {
        "prompt": "def count_words(sentence: str) -> int: \"\"\"Given a string representing a sentence, return the number of words in that sentence. Words are defined as sequences of characters separated by spaces. Example: >>> count_words('Hello world') 2 >>> count_words('This is a test.') 4 >>> count_words('   Leading and trailing spaces   ') 5\"\"\"",
        "bad_prompt": "def candidate(sentence: str) -> int: \"\"\"Given a string representing a sentence, return a certain count related to the words in that sentence. The definition of words may vary based on conditions. Example: >>> candidate('Hello world') 2 >>> candidate('This is a test.') 4 >>> candidate('   Leading and trailing spaces   ') 5\"\"\"",
        "avg_similarity_score": 0.1787803114069846
    },
    {
        "prompt": "def find_max_difference(arr): \"\"\"Given a list of integers, return the maximum difference between any two elements in the array. The maximum difference is defined as the largest value minus the smallest value in the array. If the array is empty or has only one element, return 0. Examples: >>> find_max_difference([3, 1, 4, 1, 5]) == 4 >>> find_max_difference([10, 20, 30]) == 20 >>> find_max_difference([]) == 0\"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\"Given a list of integers, return the difference between some elements in the array. The difference can be defined in various ways and may include multiple calculations. If the array is empty or has only one element, return 0. Examples: >>> candidate([3, 1, 4, 1, 5]) == 4 >>> candidate([10, 20, 30]) == 20 >>> candidate([]) == 0\"\"\"",
        "avg_similarity_score": 0.1934594442864776
    },
    {
        "prompt": "def fibonacci(n: int) -> int:\n    \"\"\"\n    Write a function that returns the nth Fibonacci number. The Fibonacci sequence is defined as follows:\n    F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1.\n    Examples:\n    >>> fibonacci(0)\n    0\n    >>> fibonacci(1)\n    1\n    >>> fibonacci(5)\n    5\n    >>> fibonacci(10)\n    55\n    \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> int:\n    \"\"\"\n    Write a function that returns a certain Fibonacci number based on input n. The Fibonacci sequence has some properties related to previous numbers in the series but can also be interpreted differently depending on context.\n    Examples:\n    >>> fibonacci(0)\n    0\n    >>> fibonacci(1)\n    1\n    >>> fibonacci(5)\n    5\n    >>> fibonacci(10)\n    55\n    \"\"\"",
        "avg_similarity_score": 0.14004544374079386
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. The function could be counting vowels or consonants based on different conditions. >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.14864526381686305
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the n-th term. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: fibonacci(5) => [0, 1, 1, 2, 3] fibonacci(10) => [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing numbers related to the Fibonacci sequence up to the n-th term. The definition of these numbers can vary. Examples: fibonacci(5) => [0, 1, 1, 2, 3] fibonacci(10) => [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.16873122828410508
    },
    {
        "prompt": "def longest_common_prefix(strs: list) -> str: \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) 'inter' \"\"\"",
        "bad_prompt": "def candidate(strs: list) -> str: \"\"\" Given a list of strings, find a common prefix or suffix among them based on certain conditions. If there is no commonality, return an arbitrary string. For example: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' >>> candidate(['interspecies', 'interstellar', 'interstate']) 'inter' \"\"\"",
        "avg_similarity_score": 0.1478566314737345
    },
    {
        "prompt": "def find_missing_number(nums): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list is guaranteed to have no duplicates. Example: find_missing_number([3, 7, 1, 2, 8, 4]) == 5 find_missing_number([1, 2, 4]) == 3 \"\"\"",
        "bad_prompt": "def find_missing_number(nums): \"\"\" Given a list of integers from 1 to n with some numbers possibly missing, return a number that may or may not be missing. The input list might contain duplicates. Example: find_missing_number([3, 7, 1, 2, 8, 4]) == 5 find_missing_number([1, 2, 4]) == 3 \"\"\"",
        "avg_similarity_score": 0.1777151130344557
    },
    {
        "prompt": "def find_maximum(lst): \"\"\"Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) ==> 3 find_maximum([-5, -10, -1]) ==> -1 find_maximum([]) ==> None\"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\"Given a list of integers, return either the maximum or minimum value in the list. If the list is empty, return None. Examples: candidate([1, 2, 3]) ==> 3 candidate([-5, -10, -1]) ==> -1 candidate([]) ==> None\"\"\"",
        "avg_similarity_score": 0.22626742610885608
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" You are given an array of integers from 1 to n with one number missing. Write a function that returns the missing number. Example: >>> find_missing_number([3, 7, 1, 2, 8, 4, 5]) == 6 >>> find_missing_number([1, 2, 3, 5]) == 4 >>> find_missing_number([]) == None \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" You are given an array of integers and you need to identify a certain number that is not present in the array or related to it. Example: >>> candidate([3, 7, 1, 2, 8, 4, 5]) == 6 >>> candidate([1, 2, 3, 5]) == 4 >>> candidate([]) == None \"\"\"",
        "avg_similarity_score": 0.21869096142591538
    },
    {
        "prompt": "def fibonacci(n): \"\"\" Write a function that returns the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: fibonacci(0) => 0, fibonacci(1) => 1, fibonacci(5) => 5, fibonacci(10) => 55. Note: 0 <= n <= 30. \"\"\"",
        "bad_prompt": "def fibonacci(n): \"\"\" Write a function that returns either the nth Fibonacci number or some other value based on n. The Fibonacci sequence is defined in various ways, but you should focus on returning something meaningful. For example: fibonacci(0) could return 0 or another number, fibonacci(1) might give 1 or an alternative result, fibonacci(5) may yield 5 or something else entirely. Note: 0 <= n <= 30. \"\"\"",
        "avg_similarity_score": 0.1333007752344093
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest or shortest common prefix among them. If there is no common prefix, return any arbitrary string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.11082223318680531
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels in the string. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.160276325433153
    },
    {
        "prompt": "def count_vowels(text: str) -> int: \"\"\" Given a string, return the number of vowels (a, e, i, o, u) present in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(text: str) -> int: \"\"\" Given a string, return the number of certain characters (like vowels or consonants) present in it. The function should be case insensitive. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('AEIOU') 5 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.19346742986504858
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in it. The function should be case insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels present in it. The function should be case insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 \"\"\"",
        "avg_similarity_score": 0.15837133123562805
    },
    {
        "prompt": "def longest_palindrome(s: str) -> str: \"\"\" Given a string s, return the longest palindromic substring in s. A palindrome is a string that reads the same forward and backward. If there are multiple longest palindromic substrings, return any one of them. Examples: >>> longest_palindrome('babad') 'bab' or 'aba' >>> longest_palindrome('cbbd') 'bb' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a certain type of substring from s based on some conditions. The substring may be related to being similar forwards and backwards. If there are multiple such substrings, return any one of them. Examples: >>> candidate('babad') 'bab' or 'aba' >>> candidate('cbbd') 'bb' \"\"\"",
        "avg_similarity_score": 0.1553191107671117
    },
    {
        "prompt": "def count_words(sentence: str) -> int: \"\"\" Given a string sentence, return the number of words in it. A word is defined as any sequence of characters separated by whitespace. Examples: >>> count_words('Hello world') == 2 >>> count_words('This is a test.') == 4 >>> count_words('   Leading and trailing spaces   ') == 5 >>> count_words('') == 0 \"\"\"",
        "bad_prompt": "def count_words(sentence: str) -> int: \"\"\" Given a string sentence, return the number of words or characters in it. A word is defined as any sequence of characters or possibly punctuation marks separated by whitespace. Examples: >>> count_words('Hello world') == 2 >>> count_words('This is a test.') == 4 >>> count_words('   Leading and trailing spaces   ') == 5 >>> count_words('') == 0 \"\"\"",
        "avg_similarity_score": 0.1522285409048417
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring that contains all unique characters. If there are multiple substrings of the same maximum length, return the first one found. Example: >>> find_longest_substring('abcabcbb') 'abc' >>> find_longest_substring('bbbbb') 'b' >>> find_longest_substring('pwwkew') 'wke' \"\"\"",
        "bad_prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring that may contain some repeated or unique characters. If there are multiple substrings of similar lengths, return any one of them. Example: >>> find_longest_substring('abcabcbb') 'abc' >>> find_longest_substring('bbbbb') 'b' >>> find_longest_substring('pwwkew') 'wke' \"\"\"",
        "avg_similarity_score": 0.11665309304776754
    },
    {
        "prompt": "def longest_substring(s: str) -> str: \"\"\" Given a string s, find the longest substring without repeating characters. Return that substring. If there are multiple substrings of the same maximum length, return the first one found. For example: >>> longest_substring('abcabcbb') 'abc' >>> longest_substring('bbbbb') 'b' >>> longest_substring('pwwkew') 'wke' \"\"\"",
        "bad_prompt": "def longest_substring(s: str) -> str: \"\"\" Given a string s, find a substring with certain properties such as being long or unique. Return that substring. If there are multiple substrings meeting these criteria, return the first one found. For example: >>> longest_substring('abcabcbb') 'abc' >>> longest_substring('bbbbb') 'b' >>> longest_substring('pwwkew') 'wke' \"\"\"",
        "avg_similarity_score": 0.11799898309035692
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns either the number of vowels or consonants in it. The function should be case insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "avg_similarity_score": 0.1633509433954112
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. Note: All input strings are lowercase letters. \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a certain type of prefix from them. The returned prefix could be the longest, shortest, or any other specific condition based on the strings provided. For example: longest_common_prefix(['flower', 'flow', 'flight']) might return 'fl' or some other variation. longest_common_prefix(['dog', 'racecar', 'car']) might return '' or another value. Note: All input strings are lowercase letters. \"\"\"",
        "avg_similarity_score": 0.12473574527584176
    },
    {
        "prompt": "def find_maximum(numbers: list) -> int: \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Example: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -5, -3]) -1 >>> find_maximum([]) None \"\"\"",
        "bad_prompt": "def candidate(numbers: list) -> int: \"\"\" Given a list of integers, return either the maximum or minimum value in the list. If the list has certain characteristics, return None. Example: >>> candidate([1, 2, 3]) 3 >>> candidate([-1, -5, -3]) -1 >>> candidate([]) None \"\"\"",
        "avg_similarity_score": 0.22878494144022005
    },
    {
        "prompt": "def find_missing_number(nums: List[int]) -> int: \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list is guaranteed to have no duplicates and will contain exactly n - 1 numbers. Example: >>> find_missing_number([3, 7, 1, 2, 8, 4]) 5 >>> find_missing_number([1, 2, 4]) 3 >>> find_missing_number([2]) 1 \"\"\"",
        "bad_prompt": "def candidate(nums: List[int]) -> int: \"\"\" Given a list of integers that may or may not include all numbers from 1 to n, return a certain number based on some criteria related to the elements in the list. Example: >>> candidate([3, 7, 1, 2, 8, 4]) 5 >>> candidate([1, 2, 4]) 3 >>> candidate([2]) 1 \"\"\"",
        "avg_similarity_score": 0.22141277116785843
    },
    {
        "prompt": "def count_occurrences(lst: list, target: int) -> int: \"\"\" Count the number of occurrences of a given integer in a list. If the list is empty, return 0. >>> count_occurrences([1, 2, 3, 1, 4], 1) 2 >>> count_occurrences([], 5) 0 >>> count_occurrences([5, 5, 5], 5) 3 \"\"\"",
        "bad_prompt": "def candidate(lst: list, target: int) -> int: \"\"\" Count the number of occurrences of a certain element in a list. If the list is empty or contains no such element, return either 0 or another value. >>> candidate([1, 2, 3, 1, 4], 1) 2 >>> candidate([], 5) 0 >>> candidate([5, 5, 5], 5) 3 \"\"\"",
        "avg_similarity_score": 0.21115809362919372
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Check if two strings are anagrams of each other. Two strings are anagrams if they contain the same characters in a different order. Ignore spaces and case sensitivity. Example: is_anagram('listen', 'silent') => True is_anagram('Hello', 'Olelh') => True is_anagram('test', 'tset') => True is_anagram('not', 'anagram') => False \"\"\"",
        "bad_prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Check if two strings are related in some way. The relationship could be based on character arrangement or any specific condition. Example: is_anagram('listen', 'silent') => True is_anagram('Hello', 'Olelh') => True is_anagram('test', 'tset') => True is_anagram('not', 'anagram') => False \"\"\"",
        "avg_similarity_score": 0.09345897810947879
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.15681875660769745
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that meet certain conditions (such as being vowels or consonants). The function should be case insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.14974135928887478
    },
    {
        "prompt": "def count_occurrences(lst: list, target): \"\"\"Given a list of elements and a target element, return the number of times the target appears in the list. Examples: count_occurrences([1, 2, 3, 4, 1], 1) => 2 count_occurrences(['a', 'b', 'a', 'c'], 'a') => 2 count_occurrences([], 5) => 0\"\"\"",
        "bad_prompt": "def count_occurrences(lst: list, target): \"\"\"Given a list of elements and a target element, return some information about how many times the target appears or does not appear in the list. Examples: count_occurrences([1, 2, 3, 4, 1], 1) => 2 count_occurrences(['a', 'b', 'a', 'c'], 'a') => 2 count_occurrences([], 5) => 0\"\"\"",
        "avg_similarity_score": 0.1818822803322395
    },
    {
        "prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\" Check if two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Examples: >>> is_anagram('listen', 'silent') True >>> is_anagram('triangle', 'integral') True >>> is_anagram('apple', 'pale') False \"\"\"",
        "bad_prompt": "def candidate(s1: str, s2: str) -> bool: \"\"\" Check if two strings satisfy a specific condition (such as being similar in some way). Examples: >>> candidate('listen', 'silent') True >>> candidate('triangle', 'integral') True >>> candidate('apple', 'pale') False \"\"\"",
        "avg_similarity_score": 0.1203357465169892
    },
    {
        "prompt": "def longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same maximum length, return the first one found. Examples: longest_substring('abcabcbb') should return 'abc'. longest_substring('bbbbb') should return 'b'. longest_substring('pwwkew') should return 'wke'. \"\"\"",
        "bad_prompt": "def longest_substring(s: str) -> str: \"\"\" Given a string s, return a substring that may or may not have repeating characters. If there are multiple substrings with varying lengths, return any one of them. Examples: longest_substring('abcabcbb') could return 'abc' or 'ab'. longest_substring('bbbbb') might return 'b' or an empty string. longest_substring('pwwkew') can return 'pw' or 'wke'. \"\"\"",
        "avg_similarity_score": 0.11545054544764966
    },
    {
        "prompt": "def count_occurrences(lst: list, target: int) -> int: \"\"\" Given a list of integers and a target integer, return the number of times the target occurs in the list. If the list is empty, return 0. Examples: >>> count_occurrences([1, 2, 3, 4, 2], 2) 2 >>> count_occurrences([], 5) 0 >>> count_occurrences([1, 1, 1, 1], 1) 4 \"\"\"",
        "bad_prompt": "def count_occurrences(lst: list, target: int) -> int: \"\"\" Given a list of integers and a target integer, return the count based on certain conditions related to the target. If the list is empty, return 0. Examples: >>> count_occurrences([1, 2, 3, 4, 2], 2) 2 >>> count_occurrences([], 5) 0 >>> count_occurrences([1, 1, 1, 1], 1) 4 \"\"\"",
        "avg_similarity_score": 0.18972948185123112
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing numbers based on some sequence up to the nth number. The sequence may follow certain rules that are not clearly defined. Examples: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.16315977206693968
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given an array containing n distinct numbers taken from 0, 1, 2, ..., n. Find the one number that is missing from the array and return it. For example: >>> find_missing_number([3, 0, 1]) returns 2 >>> find_missing_number([9,6,4,2,3,5]) returns 7 >>> find_missing_number([0]) returns 1 \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given an array containing some numbers taken from a range. Find the one number that might be missing or present in the array and return it. For example: >>> find_missing_number([3, 0, 1]) returns 2 >>> find_missing_number([9,6,4,2,3,5]) returns 7 >>> find_missing_number([0]) returns 1 \"\"\"",
        "avg_similarity_score": 0.1657745235004891
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a certain type of common substring among them. If there is no such substring, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.12479531781102905
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of integers that appear more than once in the input list. The output should contain only unique values and maintain the order of their first appearance. Examples: find_duplicates([1, 2, 3, 4, 2, 5, 3]) == [2, 3] find_duplicates([1, 1, 1, 1]) == [1] find_duplicates([1, 2, 3]) == [] \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return a list of integers that meet certain conditions (e.g., appear multiple times or are unique). The output should contain some values based on those conditions. Examples: candidate([1, 2, 3, 4, 2, 5, 3]) == [2, 3] candidate([1, 1, 1, 1]) == [1] candidate([1, 2, 3]) == [] \"\"\"",
        "avg_similarity_score": 0.21096476945483753
    },
    {
        "prompt": "def count_words(sentence: str) -> int:\n    \"\"\"\n    Given a string sentence, return the total number of words in it. A word is defined as any sequence of characters separated by whitespace.\n    Example:\n    >>> count_words(\"Hello world\")\n    2\n    >>> count_words(\"This is a test sentence.\")\n    5\n    >>> count_words(\"\")\n    0\n    \"\"\"",
        "bad_prompt": "def candidate(sentence: str) -> int:\n    \"\"\"\n    Given a string sentence, return some numerical value based on its content. This could involve counting certain types of characters or words but may not be clearly defined.\n    Example:\n    >>> candidate(\"Hello world\")\n    2\n    >>> candidate(\"This is a test sentence.\")\n    5\n    >>> candidate(\"\")\n    0\n    \"\"\"",
        "avg_similarity_score": 0.15632645173774856
    },
    {
        "prompt": "def longest_substring(s: str) -> int: \"\"\" Given a string s, find the length of the longest substring without repeating characters. For example: >>> longest_substring('abcabcbb') 3 >>> longest_substring('bbbbb') 1 >>> longest_substring('pwwkew') 3 \"\"\"",
        "bad_prompt": "def longest_substring(s: str) -> int: \"\"\" Given a string s, find the length of a certain substring that may or may not have repeating characters. For example: >>> longest_substring('abcabcbb') 3 >>> longest_substring('bbbbb') 1 >>> longest_substring('pwwkew') 3 \"\"\"",
        "avg_similarity_score": 0.15183342889255103
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in the string. The function should consider various cases. Examples: candidate('Hello World') => 3 candidate('Python Programming') => 4 candidate('AEIOU') => 5 candidate('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.19785992588009835
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\"Write a function that takes a string sentence and returns a new string where the order of words is reversed. Words are defined as sequences of characters separated by spaces. For example: reverse_words('Hello World') returns 'World Hello' reverse_words('Python is fun') returns 'fun is Python' reverse_words('') returns ''\"\"\"",
        "bad_prompt": "def reverse_words(sentence: str) -> str: \"\"\"Write a function that takes a string sentence and returns a new string where the order of words is altered in some way. Words are defined as sequences of characters separated by spaces. For example: reverse_words('Hello World') returns 'World Hello' reverse_words('Python is fun') returns 'fun is Python' reverse_words('') returns ''\"\"\"",
        "avg_similarity_score": 0.12615384666629623
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of vowels (a, e, i, o, u) in it. The counting should be case insensitive. Examples: count_vowels('Hello World') \u279e 3 count_vowels('Python Programming') \u279e 4 count_vowels('xyz') \u279e 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of characters or vowels in it. The counting should be case sensitive or insensitive. Examples: count_vowels('Hello World') \u279e 3 count_vowels('Python Programming') \u279e 4 count_vowels('xyz') \u279e 0 \"\"\"",
        "avg_similarity_score": 0.16301247159488508
    },
    {
        "prompt": "def find_duplicates(arr): \"\"\" Given a list of integers, return a list of the duplicate elements in the order they first appeared. If there are no duplicates, return an empty list. Example: >>> find_duplicates([1, 2, 3, 4, 5]) [] >>> find_duplicates([1, 2, 3, 1, 2, 4]) [1, 2] >>> find_duplicates([]) [] \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers, return a list of some elements that may or may not be duplicates in any order. If there are no such elements, return an empty list. Example: >>> candidate([1, 2, 3, 4, 5]) [] >>> candidate([1, 2, 3, 1, 2, 4]) [1, 2] >>> candidate([]) [] \"\"\"",
        "avg_similarity_score": 0.22551778792441393
    },
    {
        "prompt": "def find_duplicates(arr): \"\"\"Given a list of integers, return a list of duplicates in the input list. The output should contain each duplicate number only once and in ascending order. For example: find_duplicates([1, 2, 3, 4, 5, 1, 2]) returns [1, 2] find_duplicates([5, 5, 5, 6, 7, 8, 9]) returns [5] find_duplicates([10, 20, 30]) returns []\"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\"Given a list of integers, return a list that may or may not include duplicates from the input list. The output could contain any numbers based on certain conditions (like being greater than a threshold) and might be in random order. For example: candidate([1, 2, 3, 4, 5, 1, 2]) could return [1, 2] or [3, 4] or something else entirely.\"\"\"",
        "avg_similarity_score": 0.19629073240495656
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 count_vowels('AEIOUaeiou') => 10\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Write a function that takes a string and returns a certain count related to vowels or consonants in it. The function should be case-sensitive or insensitive based on some condition. Examples: candidate('Hello World') => 3 candidate('Python Programming') => 4 candidate('xyz') => 0 candidate('AEIOUaeiou') => 10\"\"\"",
        "avg_similarity_score": 0.18099523869722298
    },
    {
        "prompt": "def find_longest_word(sentence: str) -> str: \"\"\" Given a sentence, return the longest word in that sentence. If there are multiple words with the same maximum length, return the first one encountered. Words are defined as sequences of characters separated by spaces. Examples: >>> find_longest_word('The quick brown fox jumps over the lazy dog') 'jumps' >>> find_longest_word('Hello world') 'Hello' >>> find_longest_word('Python is great') 'Python' \"\"\"",
        "bad_prompt": "def find_longest_word(sentence: str) -> str: \"\"\" Given a sentence, return a word from that sentence based on certain criteria such as being the longest or shortest. If there are multiple candidates, return the first one encountered. Words are defined as sequences of characters separated by spaces. Examples: >>> find_longest_word('The quick brown fox jumps over the lazy dog') 'jumps' >>> find_longest_word('Hello world') 'Hello' >>> find_longest_word('Python is great') 'Python' \"\"\"",
        "avg_similarity_score": 0.11454758729607527
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string or a specific character. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.13179495718384102
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters in it that may or may not include vowels. The function should be case-sensitive or insensitive depending on the input. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.15589253194987168
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''.\"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns a certain prefix among them. If there is no such prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''.\"\"\"",
        "avg_similarity_score": 0.1248722982126658
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. For example: count_vowels('Hello World') => 3 count_vowels('Python') => 1 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of characters in it based on certain conditions. For example: count_vowels('Hello World') => 3 count_vowels('Python') => 1 count_vowels('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.15853075805439512
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a string sentence, return the same string but with the order of words reversed. Words are defined as sequences of characters separated by spaces. Example: >>> reverse_words('Hello World') == 'World Hello' >>> reverse_words('Python is fun') == 'fun is Python' >>> reverse_words('   Leading and trailing spaces   ') == 'spaces trailing and Leading' \"\"\"",
        "bad_prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a string sentence, return the same string but with some modification to the order of words. Words are defined as sequences of characters separated by spaces. Example: >>> reverse_words('Hello World') == 'World Hello' >>> reverse_words('Python is fun') == 'fun is Python' >>> reverse_words('   Leading and trailing spaces   ') == 'spaces trailing and Leading' \"\"\"",
        "avg_similarity_score": 0.11282479200950345
    },
    {
        "prompt": "def count_unique_elements(lst): \"\"\" Given a list of integers, return the number of unique elements in the list. The function should handle empty lists and return 0 for them. Example: count_unique_elements([1, 2, 3, 4]) => 4 count_unique_elements([1, 1, 2, 2, 3]) => 3 count_unique_elements([]) => 0 \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return the number of certain elements in the list. The function should handle empty lists and may or may not return a specific value for them. Example: candidate([1, 2, 3, 4]) => 4 candidate([1, 1, 2, 2, 3]) => 3 candidate([]) => 0 \"\"\"",
        "avg_similarity_score": 0.23573549971687235
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\"Return a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Example: fibonacci(5) => [0, 1, 1, 2, 3] fibonacci(7) => [0, 1, 1, 2, 3, 5, 8]\"\"\"",
        "bad_prompt": "def candidate(n: int) -> List[int]: \"\"\"Return a list containing numbers in a certain sequence up to the nth number. The sequence can be defined in various ways. Example: candidate(5) => [0, 1, 1, 2, 3] candidate(7) => [0, 1, 1, 2, 3, 5, 8]\"\"\"",
        "avg_similarity_score": 0.21115315570040252
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\"Write a function that checks if two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Ignore spaces and capitalization. Examples: is_anagram('listen', 'silent') => True is_anagram('hello', 'world') => False is_anagram('Dormitory', 'Dirty room') => True\"\"\"",
        "bad_prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\"Write a function that checks if two strings have some relation to each other. This could mean they are similar in structure or contain common elements. Examples: is_anagram('listen', 'silent') => True is_anagram('hello', 'world') => False is_anagram('Dormitory', 'Dirty room') => True\"\"\"",
        "avg_similarity_score": 0.1046746075336005
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') \u279e 3 count_vowels('Python') \u279e 1 count_vowels('AEIOU') \u279e 5 count_vowels('xyz') \u279e 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters or vowels in it. The function may or may not be case sensitive. Examples: count_vowels('Hello World') \u279e 3 count_vowels('Python') \u279e 1 count_vowels('AEIOU') \u279e 5 count_vowels('xyz') \u279e 0 \"\"\"",
        "avg_similarity_score": 0.15983994081196706
    },
    {
        "prompt": "def longest_substring_without_repeating(s: str) -> int: \"\"\" Given a string s, return the length of the longest substring without repeating characters. Examples: >>> longest_substring_without_repeating('abcabcbb') 3 >>> longest_substring_without_repeating('bbbbb') 1 >>> longest_substring_without_repeating('pwwkew') 3 \"\"\"",
        "bad_prompt": "def longest_substring_without_repeating(s: str) -> int: \"\"\" Given a string s, return the length of a substring that may or may not have repeating characters. Examples: >>> longest_substring_without_repeating('abcabcbb') 3 >>> longest_substring_without_repeating('bbbbb') 1 >>> longest_substring_without_repeating('pwwkew') 3 \"\"\"",
        "avg_similarity_score": 0.14082799833322507
    },
    {
        "prompt": "def longest_substring(s: str) -> int: \"\"\" Given a string s, return the length of the longest substring without repeating characters. For example: >>> longest_substring(\"abcabcbb\") 3 >>> longest_substring(\"bbbbb\") 1 >>> longest_substring(\"pwwkew\") 3 \"\"\"",
        "bad_prompt": "def longest_substring(s: str) -> int: \"\"\" Given a string s, return some measure related to substrings in it. The result could be about lengths or counts of certain characters. For example: >>> longest_substring(\"abcabcbb\") 3 >>> longest_substring(\"bbbbb\") 1 >>> longest_substring(\"pwwkew\") 3 \"\"\"",
        "avg_similarity_score": 0.14615893031762534
    },
    {
        "prompt": "def find_unique_numbers(arr): \"\"\" Given a list of integers, return a new list containing only the unique numbers from the original list in the order they first appeared. If there are no unique numbers, return an empty list. Examples: find_unique_numbers([1, 2, 3, 2, 1]) ==> [3] find_unique_numbers([4, 5, 6, 4, 5]) ==> [6] find_unique_numbers([]) ==> [] \"\"\"",
        "bad_prompt": "def find_unique_numbers(arr): \"\"\" Given a list of integers, return a new list containing certain numbers from the original list based on some conditions. If there are no such numbers, return an empty list. Examples: find_unique_numbers([1, 2, 3, 2, 1]) ==> [3] find_unique_numbers([4, 5, 6, 4, 5]) ==> [6] find_unique_numbers([]) ==> [] \"\"\"",
        "avg_similarity_score": 0.17010589522115369
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain common element among them. If there is no such element, return an empty string. Example: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.16021061241407286
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. Constraints: All input strings are lowercase letters. \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain prefix from them. The prefix could be the longest or shortest or any other type based on conditions. For example: candidate(['flower', 'flow', 'flight']) might return 'fl' or some other prefix. candidate(['dog', 'racecar', 'car']) might return ''. Constraints: All input strings are lowercase letters. \"\"\"",
        "avg_similarity_score": 0.14897377296794564
    },
    {
        "prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\"Write a function that checks if two strings are anagrams of each other. Two strings are anagrams if they contain the same characters in the same frequency but may be arranged differently. Ignore spaces and case sensitivity. Examples: is_anagram('listen', 'silent') => True is_anagram('Triangle', 'Integral') => True is_anagram('apple', 'pale') => False\"\"\"",
        "bad_prompt": "def candidate(s1: str, s2: str) -> bool: \"\"\"Write a function that checks if two strings are related to each other in some way. This could mean they have similar letters or structures. Examples: candidate('listen', 'silent') => True candidate('Triangle', 'Integral') => True candidate('apple', 'pale') => False\"\"\"",
        "avg_similarity_score": 0.1337269212645169
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['a']) == 'a' longest_common_prefix([]) == '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns some form of common prefix among them. If there is no common prefix, you may return something else. For example: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['a']) == 'a' longest_common_prefix([]) == '' \"\"\"",
        "avg_similarity_score": 0.11531814368583118
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. For example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string and returns a certain number related to vowels or consonants in it. The function may consider case sensitivity. For example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.1548123007429396
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in it. Case should be ignored. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of certain characters in it. The characters can include vowels or consonants. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.1527640405717873
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain unique numbers only and will be of length n-1. Example: find_missing_number([3, 7, 1, 2, 8, 4]) returns 5 find_missing_number([1, 2, 4]) returns 3 find_missing_number([5, 3, 1, 2]) returns 4 \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers from 1 to n with possibly multiple numbers missing, return one of the missing numbers or the largest number in the array. The input list may contain duplicates and can be of any length. Example: candidate([3, 7, 1, 2, 8, 4]) returns 5 candidate([1, 2, 4]) returns 3 candidate([5, 3, 1, 2]) returns 4 \"\"\"",
        "avg_similarity_score": 0.21744020103227174
    },
    {
        "prompt": "def longest_increasing_subsequence(arr): \"\"\" Given an array of integers, return the length of the longest increasing subsequence. An increasing subsequence is a sequence where each element is greater than the previous one. For example: >>> longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) 4 >>> longest_increasing_subsequence([0, 1, 0, 3, 2, 3]) 4 >>> longest_increasing_subsequence([]) 0 \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given an array of integers, return the length of a certain type of subsequence (increasing or decreasing). A subsequence is defined as a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements. For example: >>> candidate([10, 9, 2, 5, 3, 7, 101, 18]) 4 >>> candidate([0, 1, 0, 3, 2, 3]) 4 >>> candidate([]) 0 \"\"\"",
        "avg_similarity_score": 0.19734852919199788
    },
    {
        "prompt": "def count_unique_words(text: str) -> int: \"\"\" Given a string of text, return the number of unique words in it. Words are defined as sequences of characters separated by whitespace. Ignore case when counting unique words. For example: count_unique_words('Hello world hello') => 2 count_unique_words('Python is great and python is fun') => 5 count_unique_words('A B C A b c') => 3 \"\"\"",
        "bad_prompt": "def count_unique_words(text: str) -> int: \"\"\" Given a string of text, return the number of certain words in it. Words are defined as sequences of characters separated by whitespace or punctuation. Consider whether to ignore case when counting unique words. For example: count_unique_words('Hello world hello') => 2 count_unique_words('Python is great and python is fun') => 5 count_unique_words('A B C A b c') => 3 \"\"\"",
        "avg_similarity_score": 0.14188125596251852
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will have no duplicates and will contain exactly n-1 numbers. Example: find_missing_number([3, 7, 1, 2, 8, 4]) should return 5. find_missing_number([1, 2, 4]) should return 3. \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given a list of integers that may or may not include some numbers from 1 to n, return a number based on certain conditions. The input list might have duplicates and can contain any range of numbers. Example: find_missing_number([3, 7, 1, 2, 8, 4]) could return any number depending on the situation. find_missing_number([1, 2, 4]) might return 3 or another number. \"\"\"",
        "avg_similarity_score": 0.16580977189007778
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain prefix among them. If there is no specific prefix, return an empty string or some other value. Examples: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.16121530841095594
    },
    {
        "prompt": "def count_occurrences(lst, target): \"\"\" Given a list of integers lst and an integer target, return the number of times target appears in lst. Examples: >>> count_occurrences([1, 2, 3, 4, 2], 2) 2 >>> count_occurrences([5, 5, 5, 5], 5) 4 >>> count_occurrences([], 1) 0 >>> count_occurrences([1, 2, 3], 4) 0 \"\"\"",
        "bad_prompt": "def count_occurrences(lst, target): \"\"\" Given a list of integers lst and an integer target, return the occurrences or non-occurrences of target in lst. Examples: >>> count_occurrences([1, 2, 3, 4, 2], 2) 2 >>> count_occurrences([5, 5, 5, 5], 5) 4 >>> count_occurrences([], 1) 0 >>> count_occurrences([1, 2, 3], 4) 0 \"\"\"",
        "avg_similarity_score": 0.18487101826220007
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. Ignore case sensitivity. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters or vowels in the string. Ignore case sensitivity. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.1568721346337978
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. Ignore case sensitivity. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the total number of certain characters in the string. The characters can be vowels or consonants or any other specified character. Examples: candidate('Hello World') => 3 candidate('Python Programming') => 4 candidate('AEIOU') => 5 candidate('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.1944231786544176
    },
    {
        "prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\" Check if two strings are anagrams of each other. Two strings are considered anagrams if they contain the same characters in the same frequency, regardless of their order. Examples: is_anagram('listen', 'silent') => True is_anagram('hello', 'world') => False is_anagram('triangle', 'integral') => True \"\"\"",
        "bad_prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\" Check if two strings have some relation to each other. This could involve checking for shared characters or similar patterns. Examples: is_anagram('listen', 'silent') => True is_anagram('hello', 'world') => False is_anagram('triangle', 'integral') => True \"\"\"",
        "avg_similarity_score": 0.08295273858905482
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\"Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same maximum length, return the first one found. Examples: find_longest_substring('abcabcbb') => 'abc' find_longest_substring('bbbbb') => 'b' find_longest_substring('pwwkew') => 'wke'\"\"\"",
        "bad_prompt": "def find_longest_substring(s: str) -> str: \"\"\"Given a string s, return a substring that may or may not be the longest without repeating characters. If there are multiple substrings of varying lengths, return any one of them. Examples: find_longest_substring('abcabcbb') => 'abc' find_longest_substring('bbbbb') => 'b' find_longest_substring('pwwkew') => 'wke'\"\"\"",
        "avg_similarity_score": 0.12049930780078823
    },
    {
        "prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return the maximum integer from the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) => 3 find_maximum([-1, -5, -3]) => -1 find_maximum([]) => None \"\"\"",
        "bad_prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return a certain value based on the integers in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) => 3 find_maximum([-1, -5, -3]) => -1 find_maximum([]) => None \"\"\"",
        "avg_similarity_score": 0.18926976065824327
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. For example: count_vowels('Hello World') should return 3, count_vowels('Python') should return 1, and count_vowels('xyz') should return 0. \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of characters in the string that are either vowels or consonants. The function should be case insensitive. For example: count_vowels('Hello World') should return 10, count_vowels('Python') should return 6, and count_vowels('xyz') should return 3. \"\"\"",
        "avg_similarity_score": 0.16138395174628328
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters present in the string. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.1549395176684079
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same length, return the first one found. Examples: find_longest_substring('abcabcbb') == 'abc' find_longest_substring('bbbbb') == 'b' find_longest_substring('pwwkew') == 'wke' \"\"\"",
        "bad_prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return a substring that may or may not have repeating characters. If there are multiple substrings, return any one of them. Examples: find_longest_substring('abcabcbb') == 'abc' find_longest_substring('bbbbb') == 'b' find_longest_substring('pwwkew') == 'wke' \"\"\"",
        "avg_similarity_score": 0.11531876860039401
    },
    {
        "prompt": "def find_max_difference(arr): \"\"\" Given a list of integers, return the maximum difference between any two elements in the list. The difference is defined as the absolute value of the subtraction of one element from another. If the list has fewer than two elements, return -1. Examples: find_max_difference([3, 1, 4, 1, 5]) == 4 find_max_difference([10, 20, 30]) == 20 find_max_difference([1]) == -1 \"\"\"",
        "bad_prompt": "def find_max_difference(arr): \"\"\" Given a list of integers, return the maximum or minimum difference between any two elements in the list. The difference is defined as the absolute value of the subtraction of one element from another. If the list has fewer than two elements, return -1. Examples: find_max_difference([3, 1, 4, 1, 5]) == 4 find_max_difference([10, 20, 30]) == 20 find_max_difference([1]) == -1 \"\"\"",
        "avg_similarity_score": 0.16790531862241156
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same maximum length, return the first one found. Examples: >>> find_longest_substring('abcabcbb') 'abc' >>> find_longest_substring('bbbbb') 'b' >>> find_longest_substring('pwwkew') 'wke' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a substring with certain characteristics (e.g., longest or shortest). If there are multiple candidates, return the first one found. Examples: >>> candidate('abcabcbb') 'abc' >>> candidate('bbbbb') 'b' >>> candidate('pwwkew') 'wke' \"\"\"",
        "avg_similarity_score": 0.15844410845227314
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. Ignore case sensitivity. Examples: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('xyz') returns 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels in the string. Examples: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('xyz') returns 0 \"\"\"",
        "avg_similarity_score": 0.15647772073576677
    },
    {
        "prompt": "def count_vowels(string: str) -> int: \"\"\" Given a string, return the number of vowels (a, e, i, o, u) present in it. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(string: str) -> int: \"\"\" Given a string, return the count of certain characters (like vowels or consonants) present in it. The function should be case insensitive. Examples: candidate('Hello World') == 3 candidate('Python Programming') == 4 candidate('AEIOU') == 5 candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.1909438516324881
    },
    {
        "prompt": "def longest_substring(s: str) -> int: \"\"\" Given a string s, return the length of the longest substring without repeating characters. For example: longest_substring(\"abcabcbb\") returns 3 because the answer is \"abc\", with the length of 3. longest_substring(\"bbbbb\") returns 1 because the answer is \"b\", with the length of 1. longest_substring(\"pwwkew\") returns 3 because the answer is \"wke\", with the length of 3. \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return an integer related to the longest substring in some way. For example: candidate(\"abcabcbb\") might return 3 for some reason. candidate(\"bbbbb\") could return 1 based on certain conditions. candidate(\"pwwkew\") may also return 3 due to unspecified criteria. \"\"\"",
        "avg_similarity_score": 0.15734153945347681
    },
    {
        "prompt": "def find_missing_number(arr: List[int], n: int) -> int: \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will have no duplicates and will contain exactly n-1 numbers. Examples: >>> find_missing_number([3, 7, 1, 2, 8, 4], 8) == 5 >>> find_missing_number([1, 2, 4, 6, 3], 6) == 5 \"\"\"",
        "bad_prompt": "def candidate(arr: List[int], n: int) -> int: \"\"\" Given a list of integers from 1 to n with some number possibly missing or repeated, return an integer that might represent the missing number or any other value based on certain conditions. The input list may have duplicates and can contain various numbers. Examples: >>> candidate([3, 7, 1, 2, 8, 4], 8) == 5 >>> candidate([1, 2, 4, 6, 3], 6) == 5 \"\"\"",
        "avg_similarity_score": 0.19727815141859073
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same maximum length, return the first one found. Examples: find_longest_substring('abcabcbb') returns 'abc' find_longest_substring('bbbbb') returns 'b' find_longest_substring('pwwkew') returns 'wke' \"\"\"",
        "bad_prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return a substring that may or may not be the longest and might contain repeating characters. If there are multiple substrings with similar properties, return any one of them. Examples: find_longest_substring('abcabcbb') returns 'abc' find_longest_substring('bbbbb') returns 'b' find_longest_substring('pwwkew') returns 'wke' \"\"\"",
        "avg_similarity_score": 0.11819607558659971
    },
    {
        "prompt": "def longest_common_prefix(strs: list) -> str: \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def candidate(strs: list) -> str: \"\"\" Write a function that takes a list of strings and returns a certain prefix from them. This could be the longest or shortest common prefix or even just any random prefix. Example: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.1599335412295705
    },
    {
        "prompt": "def find_longest_word(words: list) -> str:\n    \"\"\"\n    Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string.\n    Examples:\n    >>> find_longest_word(['apple', 'banana', 'cherry'])\n    'banana'\n    >>> find_longest_word(['a', 'ab', 'abc'])\n    'abc'\n    >>> find_longest_word([])\n    ''\n    \"\"\"",
        "bad_prompt": "def find_longest_word(words: list) -> str:\n    \"\"\"\n    Given a list of words, return the longest or shortest word in the list based on certain criteria. If there are multiple candidates, return the first one encountered. If the list is empty, return an empty string.\n    Examples:\n    >>> find_longest_word(['apple', 'banana', 'cherry'])\n    'banana'\n    >>> find_longest_word(['a', 'ab', 'abc'])\n    'abc'\n    >>> find_longest_word([])\n    ''\n    \"\"\"",
        "avg_similarity_score": 0.13436476724907528
    },
    {
        "prompt": "def count_unique_elements(lst): \"\"\" Given a list of integers, return the number of unique elements in the list. Example: >>> count_unique_elements([1, 2, 3, 1, 2]) == 3 >>> count_unique_elements([]) == 0 >>> count_unique_elements([5, 5, 5]) == 1 \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return the number of some or all unique elements in the list. Example: >>> candidate([1, 2, 3, 1, 2]) == 3 >>> candidate([]) == 0 >>> candidate([5, 5, 5]) == 1 \"\"\"",
        "avg_similarity_score": 0.2446449571946961
    },
    {
        "prompt": "def count_vowels(string: str) -> int: \"\"\" Given a string, return the number of vowels (a, e, i, o, u) it contains. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(string: str) -> int: \"\"\" Given a string, return the number of certain characters (vowels or consonants) it contains. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.1514968111823502
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\"Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: fibonacci(5) should return [0, 1, 1, 2, 3, 5].\"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\"Generate a list containing some form of the Fibonacci sequence or another series up to the nth number. The definition may vary depending on certain conditions. For example: fibonacci(5) might return [0, 1, 1, 2, 3, 5] or something else based on different interpretations.\"\"\"",
        "avg_similarity_score": 0.16280311959129254
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. The function should consider different cases and conditions. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.15217094771113432
    },
    {
        "prompt": "def find_missing_number(nums): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list is guaranteed to have no duplicates and contains n - 1 numbers. For example: >>> find_missing_number([3, 7, 1, 2, 8]) ==> 4 >>> find_missing_number([1, 2, 4]) ==> 3 >>> find_missing_number([5, 3, 2, 1]) ==> 4 \"\"\"",
        "bad_prompt": "def find_missing_number(nums): \"\"\" Given a list of integers from 1 to n with some numbers possibly missing, return one of the missing numbers. The input list may contain duplicates or not. For example: >>> find_missing_number([3, 7, 1, 2, 8]) ==> 4 >>> find_missing_number([1, 2, 4]) ==> 3 >>> find_missing_number([5, 3, 2, 1]) ==> 4 \"\"\"",
        "avg_similarity_score": 0.1814244373458093
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same length, return the first one found. Example: find_longest_substring('abcabcbb') => 'abc' find_longest_substring('bbbbb') => 'b' find_longest_substring('pwwkew') => 'wke' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a certain substring based on some conditions that may or may not involve repeating characters. If there are multiple substrings, return one of them. Example: candidate('abcabcbb') => 'abc' candidate('bbbbb') => 'b' candidate('pwwkew') => 'wke' \"\"\"",
        "avg_similarity_score": 0.15490946346848528
    },
    {
        "prompt": "def find_longest_word(words): \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) returns 'banana' find_longest_word(['a', 'ab', 'abc']) returns 'abc' find_longest_word([]) returns '' \"\"\"",
        "bad_prompt": "def candidate(words): \"\"\" Given a list of words, return a certain word from the list based on some criteria. If there are multiple candidates, return the first one encountered. If the list is empty, return an empty string. Examples: candidate(['apple', 'banana', 'cherry']) returns 'banana' candidate(['a', 'ab', 'abc']) returns 'abc' candidate([]) returns '' \"\"\"",
        "avg_similarity_score": 0.16300655618181537
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.14936480727448545
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) returns 'fl' longest_common_prefix(['dog', 'racecar', 'car']) returns '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Given a list of strings, find the longest or shortest common prefix among them. If there is no common prefix, return an empty string. Example: candidate(['flower', 'flow', 'flight']) returns 'fl' candidate(['dog', 'racecar', 'car']) returns '' \"\"\"",
        "avg_similarity_score": 0.14982586366265455
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['a']) == 'a' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain type of prefix among them. If there is no such prefix, return an empty string or some other value. Examples: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == '' candidate(['a']) == 'a' \"\"\"",
        "avg_similarity_score": 0.16765074888377826
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('AEIOU') == 5 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters that are either vowels or consonants present in the string. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('AEIOU') == 5 \"\"\"",
        "avg_similarity_score": 0.15973254847594723
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns some kind of prefix or suffix from them. If there is no such prefix or suffix, return an arbitrary value. For example: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.16129204083852208
    },
    {
        "prompt": "def find_longest_word(words): \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) -> 'banana' find_longest_word(['cat', 'dog', 'elephant']) -> 'elephant' find_longest_word([]) -> '' \"\"\"",
        "bad_prompt": "def find_longest_word(words): \"\"\" Given a list of words, return the longest or shortest word in the list based on certain conditions. If there are multiple words with the same length, return the first one encountered. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) -> 'banana' find_longest_word(['cat', 'dog', 'elephant']) -> 'elephant' find_longest_word([]) -> '' \"\"\"",
        "avg_similarity_score": 0.12830348099672717
    },
    {
        "prompt": "def longest_increasing_subsequence(nums): \"\"\" Given a list of integers, return the length of the longest increasing subsequence. An increasing subsequence is defined as a sequence where each element is greater than the previous one. For example: >>> longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) 4 >>> longest_increasing_subsequence([0, 1, 0, 3, 2, 3]) 4 >>> longest_increasing_subsequence([]) 0 \"\"\"",
        "bad_prompt": "def candidate(nums): \"\"\" Given a list of integers, return the length of a certain type of subsequence that may or may not be increasing. The definition of this subsequence can vary based on conditions. For example: >>> candidate([10, 9, 2, 5, 3, 7, 101, 18]) 4 >>> candidate([0, 1, 0, 3, 2, 3]) 4 >>> candidate([]) 0 \"\"\"",
        "avg_similarity_score": 0.21150742210531825
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of vowels in that string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python') == 1 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of certain characters in that string. Characters can be vowels or consonants depending on some condition. For example: >>> candidate('Hello World') == 3 >>> candidate('Python') == 1 >>> candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.1949634751646248
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inters' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain common prefix among them. If there is no common prefix, return an arbitrary string. Examples: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' candidate(['interspecies', 'interstellar', 'interstate']) => 'inters' \"\"\"",
        "avg_similarity_score": 0.15177540159477607
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string or some default value. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.12950634874479536
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive. For example: count_vowels('Hello World') returns 3, and count_vowels('Python') returns 1. \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that meet certain conditions in the string. The function should be case-sensitive or insensitive based on some criteria. For example: count_vowels('Hello World') returns 3, and count_vowels('Python') returns 1. \"\"\"",
        "avg_similarity_score": 0.16090904490008962
    },
    {
        "prompt": "def reverse_words(s: str) -> str: \"\"\" Given a string s, return the string with the order of words reversed. Words are defined as sequences of characters separated by spaces. For example: reverse_words('Hello World') returns 'World Hello' reverse_words('Python is fun') returns 'fun is Python' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return the string with some form of order changed (e.g., reversed or shuffled). Words are defined as sequences of characters separated by spaces. For example: candidate('Hello World') returns 'World Hello' candidate('Python is fun') returns 'fun is Python' \"\"\"",
        "avg_similarity_score": 0.15125009858355945
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. For example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters or vowels in the string. The function should be case insensitive. For example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.16510105439407058
    },
    {
        "prompt": "def find_longest_word(words): \"\"\"Write a function that accepts a list of strings and returns the longest word in the list. If there are multiple words with the same maximum length, return the one that appears first in the list. Examples: find_longest_word(['apple', 'banana', 'cherry']) == 'banana' find_longest_word(['cat', 'dog', 'elephant']) == 'elephant' find_longest_word(['a', 'ab', 'abc']) == 'abc'\"\"\"",
        "bad_prompt": "def find_longest_word(words): \"\"\"Write a function that accepts a list of strings and returns either the longest or shortest word in the list. If there are multiple words with the same length, return any of them. Examples: find_longest_word(['apple', 'banana', 'cherry']) == 'banana' find_longest_word(['cat', 'dog', 'elephant']) == 'elephant' find_longest_word(['a', 'ab', 'abc']) == 'abc'\"\"\"",
        "avg_similarity_score": 0.13606735588845445
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns some form of commonality among them. If there is no commonality, return an arbitrary value. Examples: >>> candidate(['flower', 'flow', 'flight']) == 'fl' >>> candidate(['dog', 'racecar', 'car']) == '' \"\"\"",
        "avg_similarity_score": 0.15273956582173587
    },
    {
        "prompt": "def count_occurrences(lst: list, target: int) -> int: \"\"\" Write a function that takes a list of integers and a target integer. The function should return the number of times the target appears in the list. If the list is empty, return 0. Examples: >>> count_occurrences([1, 2, 3, 4, 2], 2) 2 >>> count_occurrences([], 5) 0 >>> count_occurrences([5, 5, 5], 5) 3 \"\"\"",
        "bad_prompt": "def candidate(lst: list, target: int) -> int: \"\"\" Write a function that takes a list of integers and a target integer. The function should return the occurrences or non-occurrences of the target in the list. If the list is empty, return some value. Examples: >>> candidate([1, 2, 3, 4, 2], 2) 2 >>> candidate([], 5) 0 >>> candidate([5, 5, 5], 5) 3 \"\"\"",
        "avg_similarity_score": 0.22711676131938996
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: count_vowels('Hello World') should return 3. count_vowels('Python Programming') should return 4. count_vowels('xyz') should return 0. \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of vowels or consonants in it. The function should be case-sensitive or insensitive. Examples: candidate('Hello World') should return 3. candidate('Python Programming') should return 4. candidate('xyz') should return 0. \"\"\"",
        "avg_similarity_score": 0.18991525142740118
    },
    {
        "prompt": "def count_occurrences(lst: list, target: int) -> int: \"\"\" Given a list of integers and a target integer, return the number of times the target appears in the list. If the list is empty, return 0. Examples: count_occurrences([1, 2, 3, 4, 2], 2) => 2 count_occurrences([], 5) => 0 count_occurrences([5, 5, 5], 5) => 3 \"\"\"",
        "bad_prompt": "def candidate(lst: list, target: int) -> int: \"\"\" Given a list of integers and a target integer, return the occurrences or frequency of the target in the list. If the list is empty, return -1. Examples: candidate([1, 2, 3, 4, 2], 2) => 2 candidate([], 5) => -1 candidate([5, 5, 5], 5) => 3 \"\"\"",
        "avg_similarity_score": 0.23724841346580938
    },
    {
        "prompt": "def count_unique_chars(s: str) -> int: \"\"\" Given a string s, return the number of unique characters in it. Characters are case-sensitive and should be counted only once regardless of their frequency. Example: >>> count_unique_chars('Hello') == 4 >>> count_unique_chars('abcABC') == 6 >>> count_unique_chars('') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of characters that may or may not be unique in it. Characters can be either counted multiple times or just once depending on certain conditions. Example: >>> candidate('Hello') == 4 >>> candidate('abcABC') == 6 >>> candidate('') == 0 \"\"\"",
        "avg_similarity_score": 0.17383722228099663
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given an array of integers from 1 to n with one number missing, return the missing number. The input array will contain unique elements and be unsorted. For example: find_missing_number([3, 7, 1, 2, 8, 4]) should return 5. find_missing_number([1, 2, 4, 6, 3, 7, 8]) should return 5. find_missing_number([2]) should return 1. \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given an array of integers that may or may not include numbers from 1 to n, return a number that could be missing or present in the list. The input array might have duplicates and can be sorted or unsorted. For example: find_missing_number([3, 7, 1, 2, 8, 4]) could return any number. find_missing_number([1, 2, 4, 6, 3, 7, 8]) could return 5 or another number. find_missing_number([2]) could return 1 or something else. \"\"\"",
        "avg_similarity_score": 0.16026129282501153
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return a certain count of characters that may include vowels or consonants or other types based on some condition. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.17805600281221617
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. Ignore case sensitivity. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('aeiou') => 5 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return some value related to vowels in it. The result could be about counting or other operations with vowels. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('aeiou') => 5 count_vowels('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.1351944245732245
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of characters that may or may not include vowels in the string. The function could be case-sensitive or insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.15613527585012482
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters or vowels in it. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "avg_similarity_score": 0.15933536239254
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s and returns the number of certain characters in it. The function should be case-sensitive or insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.16193322159373352
    },
    {
        "prompt": "def count_unique_elements(lst): \"\"\" Given a list of integers, return the number of unique elements in the list. Example: count_unique_elements([1, 2, 3, 4, 4, 5]) => 5 count_unique_elements([1, 1, 1, 1]) => 1 count_unique_elements([]) => 0 \"\"\"",
        "bad_prompt": "def count_unique_elements(lst): \"\"\" Given a list of integers, return the number of certain elements in the list that may or may not be unique. Example: count_unique_elements([1, 2, 3, 4, 4, 5]) => 5 count_unique_elements([1, 1, 1, 1]) => 1 count_unique_elements([]) => 0 \"\"\"",
        "avg_similarity_score": 0.19216861572548563
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Example: count_vowels('Hello World') should return 3. count_vowels('Python Programming') should return 4. count_vowels('xyz') should return 0. \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that may or may not include vowels (a, e, i, o, u) in the string. The function could be case sensitive or insensitive. Example: count_vowels('Hello World') might return 3. count_vowels('Python Programming') could return 4. count_vowels('xyz') may return 0. \"\"\"",
        "avg_similarity_score": 0.15110462808283553
    },
    {
        "prompt": "def count_occurrences(lst: list, target: int) -> int: \"\"\" Given a list of integers and a target integer, return the number of times the target appears in the list. Examples: >>> count_occurrences([1, 2, 3, 4, 2], 2) 2 >>> count_occurrences([1, 1, 1, 1], 1) 4 >>> count_occurrences([], 5) 0 >>> count_occurrences([5, 6, 7, 8], 9) 0 \"\"\"",
        "bad_prompt": "def candidate(lst: list, target: int) -> int: \"\"\" Given a list of integers and a target integer, return the number of occurrences or frequency of the target in the list. Examples: >>> candidate([1, 2, 3, 4, 2], 2) 2 >>> candidate([1, 1, 1, 1], 1) 4 >>> candidate([], 5) 0 >>> candidate([5, 6, 7, 8], 9) 0 \"\"\"",
        "avg_similarity_score": 0.23619929865562894
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and performs some operation to find a certain pattern or prefix among them. If there is no such pattern, return something else. Examples: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == '' candidate(['interspecies', 'interstellar', 'interstate']) == 'inters' \"\"\"",
        "avg_similarity_score": 0.14999980549934508
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. Examples: count_vowels(\"Hello World\") => 3 count_vowels(\"Python Programming!\") => 6 count_vowels(\"\") => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return some form of count related to vowels (like presence or absence). The function should handle different cases but may not necessarily follow strict vowel definitions. Examples: count_vowels(\"Hello World\") => 3 count_vowels(\"Python Programming!\") => 6 count_vowels(\"\") => 0 \"\"\"",
        "avg_similarity_score": 0.12435957377192221
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in it. Ignore case sensitivity. Examples: count_vowels('Hello World') -> 3 count_vowels('Python Programming') -> 4 count_vowels('AEIOU') -> 5 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return a certain count related to characters in it. This could be vowels or consonants or any other type of character based on some condition. Examples: candidate('Hello World') -> 3 candidate('Python Programming') -> 4 candidate('AEIOU') -> 5 \"\"\"",
        "avg_similarity_score": 0.1732683241667933
    },
    {
        "prompt": "def count_unique_elements(lst): \"\"\" Given a list of integers, return the number of unique elements in the list. Examples: count_unique_elements([1, 2, 3, 4]) => 4 count_unique_elements([1, 2, 2, 3, 4]) => 4 count_unique_elements([1, 1, 1, 1]) => 1 count_unique_elements([]) => 0 \"\"\"",
        "bad_prompt": "def count_unique_elements(lst): \"\"\" Given a list of integers, return the number of some or all unique elements in the list. Examples: count_unique_elements([1, 2, 3, 4]) => 4 count_unique_elements([1, 2, 2, 3, 4]) => 4 count_unique_elements([1, 1, 1, 1]) => 1 count_unique_elements([]) => 0 \"\"\"",
        "avg_similarity_score": 0.19026954265250348
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in the string. Consider both uppercase and lowercase letters as vowels. Examples: >>> count_vowels('hello') 2 >>> count_vowels('HELLO') 2 >>> count_vowels('xyz') 0 >>> count_vowels('AEIOUaeiou') 10 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters present in the string. This may include vowels or other types of characters based on some conditions. Examples: >>> count_vowels('hello') 2 >>> count_vowels('HELLO') 2 >>> count_vowels('xyz') 0 >>> count_vowels('AEIOUaeiou') 10 \"\"\"",
        "avg_similarity_score": 0.15033970517176773
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) \u279e 'fl' longest_common_prefix(['dog', 'racecar', 'car']) \u279e '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Given a list of strings, find a certain type of common prefix among them. If there is no common prefix, return an empty string or some default value. Examples: candidate(['flower', 'flow', 'flight']) \u279e 'fl' candidate(['dog', 'racecar', 'car']) \u279e '' \"\"\"",
        "avg_similarity_score": 0.15180967445682614
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string. For example: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.1651154848447289
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. Ignore case and consider only lowercase letters as vowels. Examples: >>> count_vowels('hello') 2 >>> count_vowels('abcde') 2 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. Ignore case and consider only specific letters as those characters. Examples: >>> candidate('hello') 2 >>> candidate('abcde') 2 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.18366617329990723
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. For example: count_vowels('Hello World') \u279e 3 count_vowels('Python Programming') \u279e 4 count_vowels('xyz') \u279e 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels present in the string. The function may or may not be case-sensitive. For example: count_vowels('Hello World') \u279e 3 count_vowels('Python Programming') \u279e 4 count_vowels('xyz') \u279e 0 \"\"\"",
        "avg_similarity_score": 0.16058291336706754
    },
    {
        "prompt": "def fibonacci(n: int) -> list: \"\"\" Given a positive integer n, return the first n numbers in the Fibonacci sequence. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def candidate(n: int) -> list: \"\"\" Given a positive integer n, return a certain number of elements from a sequence that may or may not follow specific rules. The output could vary based on different interpretations of the input. Examples: >>> candidate(5) [0, 1, 1, 2, 3] >>> candidate(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.2097910148417627
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string or a default value. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "avg_similarity_score": 0.13177535378328586
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s as input and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. For example: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('') => 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s as input and returns the number of certain characters in it. The function may or may not consider case sensitivity. For example: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('') => 0\"\"\"",
        "avg_similarity_score": 0.16347247730560072
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. Example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of certain characters present in the string. The function should consider various cases. Example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 \"\"\"",
        "avg_similarity_score": 0.15427009694121457
    },
    {
        "prompt": "def find_maximum(arr): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -5, -3]) -1 >>> find_maximum([]) None \"\"\"",
        "bad_prompt": "def find_maximum(arr): \"\"\" Given a list of integers, return a certain value from the list. If the list is empty, return None or some default value. Examples: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -5, -3]) -1 >>> find_maximum([]) None \"\"\"",
        "avg_similarity_score": 0.18750567256958423
    },
    {
        "prompt": "def find_unique_elements(lst: list): \"\"\"Given a list of integers, return a new list containing only the unique elements from the original list, preserving their order. Example: find_unique_elements([1, 2, 2, 3, 4, 4]) == [1, 2, 3, 4] find_unique_elements([5, 5, 5]) == [5] find_unique_elements([]) == []\"\"\"",
        "bad_prompt": "def candidate(lst: list): \"\"\"Given a list of integers, return a new list containing certain elements from the original list, possibly including duplicates or unique ones. Example: candidate([1, 2, 2, 3, 4, 4]) == [1, 2, 3, 4] candidate([5, 5, 5]) == [5] candidate([]) == []\"\"\"",
        "avg_similarity_score": 0.2170928008835888
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\"You are given a list of integers from 1 to n with one number missing. Write a function that returns the missing number. For example: find_missing_number([3, 7, 1, 2, 8, 4, 5]) should return 6. find_missing_number([1, 2, 4]) should return 3. find_missing_number([5, 3, 2, 1]) should return 4.\"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\"You are given a list of integers from 1 to n with some numbers possibly missing or present multiple times. Write a function that returns a certain missing number or any other related value. For example: find_missing_number([3, 7, 1, 2, 8, 4, 5]) could return 6 or another number. find_missing_number([1, 2, 4]) might return 3 or something else. find_missing_number([5, 3, 2, 1]) may return 4 or an alternative.\"\"\"",
        "avg_similarity_score": 0.16542410277887523
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. For example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters that might represent vowels or consonants present in the string. The function should be case-sensitive or insensitive based on certain conditions. For example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.1545626965910279
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inter' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a certain type of prefix among them. If there is no specific prefix, return something else. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inter' \"\"\"",
        "avg_similarity_score": 0.11691524812139895
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Count the number of vowels (a, e, i, o, u) in a given string s. The function should be case insensitive. >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Count the number of certain characters in a given string s. The function should be case insensitive. >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.17168759244025614
    },
    {
        "prompt": "def count_occurrences(lst: list, target): \"\"\" Given a list of elements and a target element, return the number of times the target appears in the list. If the list is empty, return 0. Examples: count_occurrences([1, 2, 3, 1, 1], 1) == 3 count_occurrences(['a', 'b', 'a'], 'a') == 2 count_occurrences([], 5) == 0 \"\"\"",
        "bad_prompt": "def candidate(lst: list, target): \"\"\" Given a list of elements and a target element, return the number of occurrences or instances of the target in the list. If the list has no elements, return some default value. Examples: candidate([1, 2, 3, 1, 1], 1) == 3 candidate(['a', 'b', 'a'], 'a') == 2 candidate([], 5) == 0 \"\"\"",
        "avg_similarity_score": 0.2247650633794804
    },
    {
        "prompt": "def find_longest_word(words: List[str]) -> str:\n    \"\"\"\n    Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string.\n    Examples:\n    >>> find_longest_word(['apple', 'banana', 'cherry'])\n    'banana'\n    >>> find_longest_word(['cat', 'dog', 'elephant'])\n    'elephant'\n    >>> find_longest_word([])\n    ''\n    \"\"\"",
        "bad_prompt": "def find_longest_word(words: List[str]) -> str:\n    \"\"\"\n    Given a list of words, return a word based on certain criteria (such as being the longest or having specific characteristics). If there are multiple candidates, return the first one encountered. If the list is empty, return an empty string.\n    Examples:\n    >>> find_longest_word(['apple', 'banana', 'cherry'])\n    'banana'\n    >>> find_longest_word(['cat', 'dog', 'elephant'])\n    'elephant'\n    >>> find_longest_word([])\n    ''\n    \"\"\"",
        "avg_similarity_score": 0.12859158622593375
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns some common prefix or suffix among them. If there is none, return an arbitrary string. Examples: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.15519638247228235
    },
    {
        "prompt": "def longest_common_prefix(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "bad_prompt": "def candidate(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns a certain prefix from them. The prefix could be common or not. For example: candidate(['flower', 'flow', 'flight']) might return 'fl' or something else. candidate(['dog', 'racecar', 'car']) might return an arbitrary string. \"\"\"",
        "avg_similarity_score": 0.16006924586134938
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns a certain common part among them. If there is no such part, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\"\"\"",
        "avg_similarity_score": 0.11347837998722891
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\"Check if two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Examples: >>> is_anagram('listen', 'silent') True >>> is_anagram('triangle', 'integral') True >>> is_anagram('apple', 'pale') False \"\"\"",
        "bad_prompt": "def candidate(str1: str, str2: str) -> bool: \"\"\"Check if two strings have some relationship with each other. This could involve checking for similarities in characters or any other condition. Examples: >>> candidate('listen', 'silent') True >>> candidate('triangle', 'integral') True >>> candidate('apple', 'pale') False \"\"\"",
        "avg_similarity_score": 0.11257708809924821
    },
    {
        "prompt": "def count_unique_chars(s: str) -> int: \"\"\" Given a string s, return the number of unique characters in it. Characters are case-sensitive, meaning 'a' and 'A' are considered different. Example: count_unique_chars('Hello') returns 4 because 'H', 'e', 'l', and 'o' are unique. count_unique_chars('abcABC') returns 6 because all characters are unique. count_unique_chars('aaa') returns 1 because only 'a' is present. \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. Characters can be counted based on various conditions (like uniqueness or frequency). Example: candidate('Hello') returns 4 because 'H', 'e', 'l', and 'o' are counted. candidate('abcABC') returns 6 because all characters are counted. candidate('aaa') returns 1 because only 'a' is counted. \"\"\"",
        "avg_similarity_score": 0.15602916967027664
    },
    {
        "prompt": "def count_unique_chars(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of unique characters in it. Ignore spaces and consider uppercase and lowercase letters as the same character. For example: >>> count_unique_chars('Hello World') == 10 >>> count_unique_chars('abcABC') == 3 >>> count_unique_chars('') == 0 \"\"\"",
        "bad_prompt": "def count_unique_chars(s: str) -> int: \"\"\" Write a function that takes a string s and returns some form of count based on its characters, ignoring certain conditions like spaces or case sensitivity. For example: >>> count_unique_chars('Hello World') == 10 >>> count_unique_chars('abcABC') == 3 >>> count_unique_chars('') == 0 \"\"\"",
        "avg_similarity_score": 0.13053914411625506
    },
    {
        "prompt": "def find_missing_number(nums): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list is guaranteed to have no duplicates and contains numbers in the range [1, n]. Examples: find_missing_number([3, 7, 1, 2, 8]) should return 4 find_missing_number([1, 2, 4]) should return 3 find_missing_number([5, 3, 2, 1]) should return 4 \"\"\"",
        "bad_prompt": "def find_missing_number(nums): \"\"\" Given a list of integers that may or may not contain all numbers from 1 to n, return a certain number that might be missing. The input list can have duplicates and numbers outside the range [1, n]. Examples: find_missing_number([3, 7, 1, 2, 8]) should return 4 find_missing_number([1, 2, 4]) should return 3 find_missing_number([5, 3, 2, 1]) should return 4 \"\"\"",
        "avg_similarity_score": 0.17547611406522456
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Examples: >>> count_vowels('hello') 2 >>> count_vowels('HELLO') 2 >>> count_vowels('xyz') 0 >>> count_vowels('AEIOUaeiou') 10 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of characters or vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Examples: >>> count_vowels('hello') 2 >>> count_vowels('HELLO') 2 >>> count_vowels('xyz') 0 >>> count_vowels('AEIOUaeiou') 10 \"\"\"",
        "avg_similarity_score": 0.15293404354959325
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. Examples: count_vowels('Hello World') \u279e 3 count_vowels('Python Programming') \u279e 4 count_vowels('AEIOU') \u279e 5 count_vowels('xyz') \u279e 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the total number of vowels or consonants present in the string. The function should be case insensitive. Examples: count_vowels('Hello World') \u279e 3 count_vowels('Python Programming') \u279e 4 count_vowels('AEIOU') \u279e 5 count_vowels('xyz') \u279e 0\"\"\"",
        "avg_similarity_score": 0.15759839490833316
    },
    {
        "prompt": "def reverse_string(s: str) -> str: \"\"\" Given a string s, return the string in reverse order. For example: reverse_string('hello') should return 'olleh'. reverse_string('12345') should return '54321'. \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a modified version of it. For example: candidate('hello') should return 'olleh'. candidate('12345') should return '54321'. \"\"\"",
        "avg_similarity_score": 0.1605991007538082
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. Ignore case sensitivity. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels present in the string. Ignore case sensitivity. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.1538626200621108
    },
    {
        "prompt": "def find_longest_word(words: List[str]) -> str: \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. Examples: >>> find_longest_word(['apple', 'banana', 'cherry']) 'banana' >>> find_longest_word(['cat', 'dog', 'elephant']) 'elephant' >>> find_longest_word([]) '' \"\"\"",
        "bad_prompt": "def candidate(words: List[str]) -> str: \"\"\" Given a list of words, return a certain word based on some criteria (like longest or shortest). If there are multiple candidates, return the first one encountered. Examples: >>> candidate(['apple', 'banana', 'cherry']) 'banana' >>> candidate(['cat', 'dog', 'elephant']) 'elephant' >>> candidate([]) '' \"\"\"",
        "avg_similarity_score": 0.1581988567925014
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns either the longest or shortest common prefix among them. If there is no common prefix, return an arbitrary string. Examples: >>> candidate(['flower', 'flow', 'flight']) == 'fl' >>> candidate(['dog', 'racecar', 'car']) == '' >>> candidate(['interspecies', 'interstellar', 'interstate']) == 'inters' \"\"\"",
        "avg_similarity_score": 0.15521819453149646
    },
    {
        "prompt": "def find_missing_number(nums: List[int]) -> int: \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list is guaranteed to contain unique numbers only and be in the range [1, n]. Examples: find_missing_number([3, 7, 1, 2, 8, 4, 5]) \u279e 6 find_missing_number([1, 2, 4]) \u279e 3 find_missing_number([2]) \u279e 1 \"\"\"",
        "bad_prompt": "def candidate(nums: List[int]) -> int: \"\"\" Given a list of integers that may or may not include all numbers from 1 to n, return a certain number based on some condition. The input list might have duplicates or missing values. Examples: candidate([3, 7, 1, 2, 8, 4, 5]) \u279e 6 candidate([1, 2, 4]) \u279e 3 candidate([2]) \u279e 1 \"\"\"",
        "avg_similarity_score": 0.2132160543034557
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inter' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns some common characters from them. If there are no common characters, return an empty string. Examples: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' candidate(['interspecies', 'interstellar', 'interstate']) => 'inter' \"\"\"",
        "avg_similarity_score": 0.1481073203447881
    },
    {
        "prompt": "def fibonacci(n): \"\"\"Write a function that returns the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: fibonacci(0) == 0, fibonacci(1) == 1, fibonacci(5) == 5, fibonacci(10) == 55.\"\"\"",
        "bad_prompt": "def fibonacci(n): \"\"\"Write a function that returns the nth number in a certain sequence. The sequence is defined by some rules where the first two numbers are specific values, and subsequent numbers depend on previous ones. Examples: fibonacci(0) == 0, fibonacci(1) == 1, fibonacci(5) == 5, fibonacci(10) == 55.\"\"\"",
        "avg_similarity_score": 0.1499753451071837
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inter' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain prefix among them. If there is no prefix, return an arbitrary string. Examples: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' candidate(['interspecies', 'interstellar', 'interstate']) => 'inter' \"\"\"",
        "avg_similarity_score": 0.1548423769871225
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain type of prefix from them. If there is no such prefix, return an empty string or some default value. Example: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == '' \"\"\"",
        "avg_similarity_score": 0.16637936554516108
    },
    {
        "prompt": "def fibonacci(n): \"\"\" Given a non-negative integer n, return the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: >>> fibonacci(0) 0 >>> fibonacci(1) 1 >>> fibonacci(5) 5 >>> fibonacci(10) 55 \"\"\"",
        "bad_prompt": "def fibonacci(n): \"\"\" Given a non-negative integer n, return either the nth Fibonacci number or some other related value. The Fibonacci sequence may be defined in various ways, including different starting points or rules. Examples: >>> fibonacci(0) 0 >>> fibonacci(1) 1 >>> fibonacci(5) 5 >>> fibonacci(10) 55 \"\"\"",
        "avg_similarity_score": 0.14302027284322918
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. Example: count_vowels('hello') should return 2. count_vowels('abcde') should return 2. count_vowels('xyz') should return 0. \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in the string. Example: count_vowels('hello') should return 2. count_vowels('abcde') should return 2. count_vowels('xyz') should return 0. \"\"\"",
        "avg_similarity_score": 0.15913073844647646
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\"Given a list of integers, return a list of the duplicate elements in the order they first appeared. If there are no duplicates, return an empty list. Examples: find_duplicates([1, 2, 3, 4, 5]) == [] find_duplicates([1, 2, 3, 1, 2]) == [1, 2] find_duplicates([1, 1, 1, 1]) == [1] find_duplicates([]) == []\"\"\"",
        "bad_prompt": "def find_duplicates(lst): \"\"\"Given a list of integers, return a list of certain elements that may or may not be duplicates in any order. If there are no such elements, return an empty list. Examples: find_duplicates([1, 2, 3, 4, 5]) == [] find_duplicates([1, 2, 3, 1, 2]) == [1, 2] find_duplicates([1, 1, 1, 1]) == [1] find_duplicates([]) == []\"\"\"",
        "avg_similarity_score": 0.18251989479009387
    },
    {
        "prompt": "from typing import List, Tuple\n\ndef find_intersection(list1: List[int], list2: List[int]) -> List[int]:\n    \"\"\"\n    Given two lists of integers, return a list containing the elements that are present in both lists (the intersection). The result should be sorted in ascending order and contain unique elements only.\n    >>> find_intersection([1, 2, 3], [2, 3, 4])\n    [2, 3]\n    >>> find_intersection([5, 6, 7], [8, 9])\n    []\n    \"\"\"\n    pass",
        "bad_prompt": "from typing import List, Tuple\n\ndef candidate(list1: List[int], list2: List[int]) -> List[int]:\n    \"\"\"\n    Given two lists of integers, return a list containing certain elements from both lists. The result could be sorted or unsorted and may include duplicates.\n    >>> candidate([1, 2, 3], [2, 3, 4])\n    [2, 3]\n    >>> candidate([5, 6, 7], [8, 9])\n    []\n    \"\"\"\n    pass",
        "avg_similarity_score": 0.194144356630452
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string. For example: candidate(['flower', 'flow', 'flight']) should return 'fl'. candidate(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "avg_similarity_score": 0.1626047603436268
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns a certain substring from them based on some condition. Examples: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => ''\"\"\"",
        "avg_similarity_score": 0.15003914822340947
    },
    {
        "prompt": "def fibonacci(n: int) -> list: \"\"\"Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Example: fibonacci(5) should return [0, 1, 1, 2, 3] fibonacci(10) should return [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\"\"\"",
        "bad_prompt": "def candidate(n: int) -> list: \"\"\"Generate a list containing numbers based on some criteria up to the nth number. The criteria could be related to previous numbers in the list or any other rule. Example: candidate(5) might return [0, 1, 1, 2, 3] candidate(10) might return [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\"\"\"",
        "avg_similarity_score": 0.1920155505787824
    },
    {
        "prompt": "def count_unique_characters(s: str) -> int: \"\"\" Given a string s, return the number of unique characters in it. Ignore spaces and consider only alphabetic characters (case insensitive). For example: >>> count_unique_characters('Hello World') 7 >>> count_unique_characters('abcABC') 3 >>> count_unique_characters('') 0 \"\"\"",
        "bad_prompt": "def count_unique_characters(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. Consider various types of characters (e.g., letters or digits), but ignore some conditions like case sensitivity or spaces. For example: >>> count_unique_characters('Hello World') 7 >>> count_unique_characters('abcABC') 3 >>> count_unique_characters('') 0 \"\"\"",
        "avg_similarity_score": 0.1378805920837407
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['a']) == 'a' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a certain prefix among them. If there is no prefix, return an empty string or None. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['a']) == 'a' \"\"\"",
        "avg_similarity_score": 0.12683820516331995
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that may or may not include vowels (a, e, i, o, u). The function should consider different cases. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 \"\"\"",
        "avg_similarity_score": 0.15000655954357747
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the total number of vowels (a, e, i, o, u) in that string. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Write a function that takes a string as input and returns a certain number related to vowels or consonants in that string. The function should be case-sensitive or insensitive. Examples: >>> candidate('Hello World') == 3 >>> candidate('Python Programming') == 4 >>> candidate('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.1906542691284471
    },
    {
        "prompt": "def find_unique_elements(lst): \"\"\" Given a list of integers, return a new list containing only the unique elements from the original list in the order they first appeared. If the input list is empty, return an empty list. Examples: find_unique_elements([1, 2, 3, 1, 2]) ==> [1, 2, 3] find_unique_elements([4, 5, 6, 4, 5, 6]) ==> [4, 5, 6] find_unique_elements([]) ==> [] \"\"\"",
        "bad_prompt": "def find_unique_elements(lst): \"\"\" Given a list of integers, return a new list containing some unique elements from the original list based on certain conditions. If the input list is empty, return an empty list. Examples: find_unique_elements([1, 2, 3, 1, 2]) ==> [1, 2, 3] find_unique_elements([4, 5, 6, 4, 5, 6]) ==> [4, 5, 6] find_unique_elements([]) ==> [] \"\"\"",
        "avg_similarity_score": 0.17436824001755577
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. Case should be ignored. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters (vowels or consonants or others) in it. Case should be ignored. Examples: candidate('Hello World') == 3 candidate('Python Programming') == 4 candidate('') == 0 \"\"\"",
        "avg_similarity_score": 0.1899834366980834
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns some form of commonality among them. If there is no commonality, return an empty string or None. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "avg_similarity_score": 0.12483417074348953
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. Ignore case and consider only alphabetic characters. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters (vowels or consonants) in it. Ignore case and consider all types of characters. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.18853447481357807
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\"Write a function that takes a list of integers and returns a list of duplicates found in the input list. The output should contain each duplicate number only once, regardless of how many times it appears in the input list. For example: >>> find_duplicates([1, 2, 3, 4, 5]) [] >>> find_duplicates([1, 2, 3, 1, 2, 3]) [1, 2, 3] >>> find_duplicates([1, 1, 1, 2, 2, 3]) [1, 2] \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\"Write a function that takes a list of integers and returns a list of numbers based on certain conditions from the input list. The output may or may not include duplicates found in the input list. For example: >>> candidate([1, 2, 3, 4, 5]) [] >>> candidate([1, 2, 3, 1, 2, 3]) [1, 2, 3] >>> candidate([1, 1, 1, 2, 2, 3]) [1, 2] \"\"\"",
        "avg_similarity_score": 0.2265692119145972
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: >>> fibonacci(5) [0, 1, 1, 2, 3, 5] >>> fibonacci(0) [0] >>> fibonacci(1) [0, 1] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing numbers based on some mathematical pattern up to the nth number. The pattern is defined in such a way that it includes various sequences of numbers. For example: >>> fibonacci(5) [0, 1, 1, 2, 3, 5] >>> fibonacci(0) [0] >>> fibonacci(1) [0, 1] \"\"\"",
        "avg_similarity_score": 0.17074704000817523
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. longest_common_prefix(['interspecies', 'interstellar', 'interstate']) should return 'inters'. \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns either the longest common prefix or suffix among them. If there is no common prefix or suffix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl' or 'ht'. longest_common_prefix(['dog', 'racecar', 'car']) should return '' or 'ar'. longest_common_prefix(['interspecies', 'interstellar', 'interstate']) should return 'inters' or 'ate'. \"\"\"",
        "avg_similarity_score": 0.11626348331921821
    },
    {
        "prompt": "def count_occurrences(lst: list, target): \"\"\" Given a list of elements and a target element, return the number of times the target appears in the list. If the list is empty, return 0. Examples: >>> count_occurrences([1, 2, 3, 1, 1], 1) 3 >>> count_occurrences(['a', 'b', 'a'], 'a') 2 >>> count_occurrences([], 5) 0 \"\"\"",
        "bad_prompt": "def count_occurrences(lst: list, target): \"\"\" Given a list of elements and a target element, return the number of occurrences or non-occurrences of the target in the list. If the list is empty, return some value. Examples: >>> count_occurrences([1, 2, 3, 1, 1], 1) 3 >>> count_occurrences(['a', 'b', 'a'], 'a') 2 >>> count_occurrences([], 5) 0 \"\"\"",
        "avg_similarity_score": 0.19760633201446617
    },
    {
        "prompt": "def count_even_numbers(lst): \"\"\" Given a list of integers, return the count of even numbers in the list. If there are no even numbers, return 0. Examples: count_even_numbers([1, 2, 3, 4]) should return 2. count_even_numbers([5, 7, 9]) should return 0. count_even_numbers([]) should return 0. \"\"\"",
        "bad_prompt": "def count_even_numbers(lst): \"\"\" Given a list of integers, return the count of even or odd numbers in the list. If there are no such numbers, return 0. Examples: count_even_numbers([1, 2, 3, 4]) should return 2. count_even_numbers([5, 7, 9]) should return 0. count_even_numbers([]) should return 0. \"\"\"",
        "avg_similarity_score": 0.18076937718328176
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of characters that are either vowels or consonants in the string. The function should consider both upper and lower cases. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0\"\"\"",
        "avg_similarity_score": 0.16143740506431972
    },
    {
        "prompt": "def find_longest_word(words: list) -> str: \"\"\"Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) => 'banana' find_longest_word(['a', 'ab', 'abc']) => 'abc' find_longest_word([]) => ''\"\"\"",
        "bad_prompt": "def candidate(words: list) -> str: \"\"\"Given a list of words, return a word from the list based on certain conditions (such as being the longest or shortest). If there are multiple candidates, return any one of them. If the list is empty, return an empty string. Examples: candidate(['apple', 'banana', 'cherry']) => 'banana' candidate(['a', 'ab', 'abc']) => 'abc' candidate([]) => ''\"\"\"",
        "avg_similarity_score": 0.17487435712839802
    },
    {
        "prompt": "def reverse_string(s: str) -> str: \"\"\"Given a string s, return the string in reverse order. For example: reverse_string('hello') should return 'olleh'. If the input string is empty, return an empty string.\"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\"Given a string s, return a certain version of the string (e.g., reversed or modified). For example: candidate('hello') might return 'olleh' or something else. If the input string is empty, it could return anything.\"\"\"",
        "avg_similarity_score": 0.16661560509149154
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a certain prefix among them. If there is no such prefix, return an empty string or some other value. Example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl' or something else. longest_common_prefix(['dog', 'racecar', 'car']) should return '' or another output. \"\"\"",
        "avg_similarity_score": 0.1261168520282629
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns some count related to vowels in it. The function should consider different cases. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.13881205233070226
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same maximum length, return the first one found. Examples: find_longest_substring('abcabcbb') => 'abc' find_longest_substring('bbbbb') => 'b' find_longest_substring('pwwkew') => 'wke' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a substring that may or may not have repeating characters. If there are multiple substrings, return any one of them. Examples: candidate('abcabcbb') => 'abc' candidate('bbbbb') => 'b' candidate('pwwkew') => 'wke' \"\"\"",
        "avg_similarity_score": 0.15766065616612734
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. Case should be ignored. >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the total number of certain characters (like vowels or consonants) in the string. Case should be ignored. >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.19164800719709435
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain common prefix or suffix among them. If there is no such prefix or suffix, return an empty string. Example: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.16377791725557792
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\"Determine if two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Ignore spaces and capitalization. Examples: is_anagram('listen', 'silent') should return True. is_anagram('hello', 'world') should return False.\"\"\"",
        "bad_prompt": "def candidate(str1: str, str2: str) -> bool: \"\"\"Determine if two strings are similar in some way. Similarity could mean they have common characters or that one can be transformed into another through various means. Examples: candidate('listen', 'silent') should return True. candidate('hello', 'world') should return False.\"\"\"",
        "avg_similarity_score": 0.11093963990530417
    },
    {
        "prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return the maximum integer in the list. If the list is empty, return None. >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-5, -1, -10]) -1 >>> find_maximum([]) None \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return an element from the list based on certain conditions. If the list is empty, return None. >>> candidate([1, 2, 3]) 3 >>> candidate([-5, -1, -10]) -1 >>> candidate([]) None \"\"\"",
        "avg_similarity_score": 0.21324250109184437
    },
    {
        "prompt": "def find_maximum(lst): \"\"\"Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) == 3 find_maximum([-1, -5, -3]) == -1 find_maximum([]) == None\"\"\"",
        "bad_prompt": "def find_maximum(lst): \"\"\"Given a list of integers, return either the maximum or minimum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) == 3 find_maximum([-1, -5, -3]) == -1 find_maximum([]) == None\"\"\"",
        "avg_similarity_score": 0.18985681636543456
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == '' >>> longest_common_prefix(['a']) == 'a' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns some common prefix or suffix among them. If there is no such prefix or suffix, return an empty string. Examples: >>> candidate(['flower', 'flow', 'flight']) == 'fl' >>> candidate(['dog', 'racecar', 'car']) == '' >>> candidate(['a']) == 'a' \"\"\"",
        "avg_similarity_score": 0.15993798529630998
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given an array of integers from 1 to n with one number missing, write a function that returns the missing number. The input array is guaranteed to have no duplicates and be unsorted. Example: find_missing_number([3, 7, 1, 2, 8, 4, 5]) => 6 find_missing_number([1, 2, 4]) => 3 find_missing_number([2, 3, 1]) => 4 \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given an array of integers where some numbers may be present or absent, write a function that returns a certain number based on conditions. The input array can have duplicates and be sorted or unsorted. Example: find_missing_number([3, 7, 1, 2, 8, 4, 5]) => 6 find_missing_number([1, 2, 4]) => 3 find_missing_number([2, 3, 1]) => 4 \"\"\"",
        "avg_similarity_score": 0.17079385646643222
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) ==> 'fl' longest_common_prefix(['dog', 'racecar', 'car']) ==> '' longest_common_prefix(['a']) ==> 'a' longest_common_prefix([]) ==> '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns either the longest or shortest common prefix among them. If there is no common prefix, return an empty string or some default value. Example: candidate(['flower', 'flow', 'flight']) ==> 'fl' candidate(['dog', 'racecar', 'car']) ==> '' candidate(['a']) ==> 'a' candidate([]) ==> '' \"\"\"",
        "avg_similarity_score": 0.16552753737832485
    },
    {
        "prompt": "def find_maximum(nums): \"\"\"Given a list of integers, return the maximum integer in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) => 3 find_maximum([-5, -1, -10]) => -1 find_maximum([]) => None\"\"\"",
        "bad_prompt": "def find_maximum(nums): \"\"\"Given a list of integers, return a certain value from the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) => 3 find_maximum([-5, -1, -10]) => -1 find_maximum([]) => None\"\"\"",
        "avg_similarity_score": 0.184426910853123
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in it. The function should be case-insensitive and consider both uppercase and lowercase vowels. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('AEIOU') == 5 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels present in it. The function should be case-sensitive or insensitive based on certain conditions. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('AEIOU') == 5 >>> count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.15211074095184632
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Given two strings, return True if they are anagrams of each other (i.e., they contain the same characters in a different order). Ignore spaces and case. Examples: >>> is_anagram('listen', 'silent') True >>> is_anagram('triangle', 'integral') True >>> is_anagram('apple', 'pale') False >>> is_anagram('A gentleman', 'Elegant man') True \"\"\"",
        "bad_prompt": "def candidate(str1: str, str2: str) -> bool: \"\"\" Given two strings, return True if they have some relation to each other based on their characters. Examples: >>> candidate('listen', 'silent') True >>> candidate('triangle', 'integral') True >>> candidate('apple', 'pale') False >>> candidate('A gentleman', 'Elegant man') True \"\"\"",
        "avg_similarity_score": 0.12033513858106057
    },
    {
        "prompt": "def count_occurrences(lst: list, target: int) -> int: \"\"\" Given a list of integers and a target integer, return the number of times the target appears in the list. If the list is empty, return 0. Examples: >>> count_occurrences([1, 2, 3, 4, 2], 2) 2 >>> count_occurrences([], 5) 0 >>> count_occurrences([1, 1, 1, 1], 1) 4 \"\"\"",
        "bad_prompt": "def candidate(lst: list, target: int) -> int: \"\"\" Given a list of integers and a target integer, return the number of occurrences or non-occurrences of the target in the list. If the list is empty, return 0. Examples: >>> candidate([1, 2, 3, 4, 2], 2) 2 >>> candidate([], 5) 0 >>> candidate([1, 1, 1, 1], 1) 4 \"\"\"",
        "avg_similarity_score": 0.2367483061011554
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns some common part among them. If there is no common part, return an empty string or something else. Examples: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.15447018911234398
    },
    {
        "prompt": "def fibonacci(n: int) -> list: \"\"\" Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Return an empty list if n is less than or equal to 0. Examples: fibonacci(5) => [0, 1, 1, 2, 3] fibonacci(10) => [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci(0) => [] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> list: \"\"\" Generate a list containing numbers that follow a certain pattern up to the nth number. The sequence is defined in various ways and may include any arbitrary calculations. Return an empty list if n is not valid. Examples: fibonacci(5) => [0, 1, 1, 2, 3] fibonacci(10) => [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci(0) => [] \"\"\"",
        "avg_similarity_score": 0.173342729083704
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s as input and returns the number of vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Examples: >>> count_vowels('hello') == 2 >>> count_vowels('world') == 1 >>> count_vowels('AEIOU') == 5 >>> count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Write a function that takes a string s as input and returns the number of characters or vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Examples: >>> candidate('hello') == 2 >>> candidate('world') == 1 >>> candidate('AEIOU') == 5 >>> candidate('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.19569717611614246
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain pattern (like longest or shortest) from them. If there is no such pattern, return an empty string. Example: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.1614784956613362
    },
    {
        "prompt": "def calculate_average(numbers): \"\"\"Write a function that takes a list of numbers and returns the average of those numbers. The average is calculated by dividing the sum of all numbers by the count of numbers in the list. If the list is empty, return 0. Examples: calculate_average([1, 2, 3]) => 2.0 calculate_average([10, 20, 30, 40]) => 25.0 calculate_average([]) => 0\"\"\"",
        "bad_prompt": "def calculate_average(numbers): \"\"\"Write a function that takes a list of numbers and returns either the average or some other statistic of those numbers. If the list is empty, return something else. Examples: calculate_average([1, 2, 3]) => 2.0 calculate_average([10, 20, 30, 40]) => 25.0 calculate_average([]) => 0\"\"\"",
        "avg_similarity_score": 0.17380677628738364
    },
    {
        "prompt": "def count_unique_chars(s: str) -> int: \"\"\" Given a string s, return the number of unique alphabetical characters in it. Ignore case and non-alphabetical characters. For example: count_unique_chars('Hello World!') should return 7 (H, e, l, o, W, r, d). count_unique_chars('abcABC123') should return 3 (a, b, c). \"\"\"",
        "bad_prompt": "def count_unique_chars(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. This could be unique or repeated characters depending on various conditions. For example: count_unique_chars('Hello World!') might return 7, but it's not guaranteed. count_unique_chars('abcABC123') could also yield different results based on interpretation. \"\"\"",
        "avg_similarity_score": 0.11898895409073823
    },
    {
        "prompt": "def count_unique_words(sentence: str) -> int: \"\"\" Given a sentence, return the number of unique words in it. Words are defined as sequences of characters separated by whitespace. The comparison should be case-insensitive. Example: count_unique_words('Hello world hello') returns 2 because 'hello' and 'Hello' are considered the same word. count_unique_words('This is a test') returns 5. \"\"\"",
        "bad_prompt": "def candidate(sentence: str) -> int: \"\"\" Given a sentence, return the number of words or unique words in it. Words are defined as sequences of characters separated by whitespace. The comparison might be case-sensitive or insensitive. Example: candidate('Hello world hello') returns 3 because 'hello' and 'Hello' could be considered different or the same word based on your interpretation. candidate('This is a test') returns 4 or 5 depending on how you define uniqueness. \"\"\"",
        "avg_similarity_score": 0.15207334888478516
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Given a list of strings, find the longest or shortest common sequence among them. If there is no such sequence, return an arbitrary string. Example: candidate(['flower', 'flow', 'flight']) could return 'fl' or any other value. candidate(['dog', 'racecar', 'car']) might return '' or something else. \"\"\"",
        "avg_similarity_score": 0.14210646200779084
    },
    {
        "prompt": "def find_longest_word(words: List[str]) -> str: \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) => 'banana' find_longest_word(['a', 'ab', 'abc']) => 'abc' find_longest_word([]) => '' \"\"\"",
        "bad_prompt": "def find_longest_word(words: List[str]) -> str: \"\"\" Given a list of words, return a word from the list based on certain conditions related to their lengths. If there are multiple candidates, return the first one encountered. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) => 'banana' find_longest_word(['a', 'ab', 'abc']) => 'abc' find_longest_word([]) => '' \"\"\"",
        "avg_similarity_score": 0.13073048202077622
    },
    {
        "prompt": "def find_longest_word(words): \"\"\"Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. The function should handle an empty list by returning an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) returns 'banana'. find_longest_word(['a', 'ab', 'abc']) returns 'abc'. find_longest_word([]) returns ''.\"\"\"",
        "bad_prompt": "def find_longest_word(words): \"\"\"Given a list of words, return the longest or shortest word in the list. If there are multiple words with the same maximum or minimum length, return any one of them. The function should handle an empty list by returning an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) returns 'banana' or 'cherry'. find_longest_word(['a', 'ab', 'abc']) returns 'abc' or 'a'. find_longest_word([]) returns ''.\"\"\"",
        "avg_similarity_score": 0.13372069796674288
    },
    {
        "prompt": "def fibonacci(n: int): \"\"\"Return the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: >>> fibonacci(0) 0 >>> fibonacci(1) 1 >>> fibonacci(5) 5 >>> fibonacci(10) 55 \"\"\"",
        "bad_prompt": "def candidate(n: int): \"\"\"Return a specific value in the Fibonacci sequence or another related series based on the input n. The definition may vary depending on conditions such as whether n is even or odd. For example: >>> candidate(0) 0 >>> candidate(1) 1 >>> candidate(5) 5 >>> candidate(10) 55 \"\"\"",
        "avg_similarity_score": 0.17608061436066913
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in the string. Vowels can be both uppercase and lowercase. Example: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of characters that are either vowels or consonants in the string. The definition of what constitutes a vowel may vary. Example: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4\"\"\"",
        "avg_similarity_score": 0.16240195920676795
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s as input and returns the number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive. For example: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s as input and returns the number of vowels or consonants in the string. The function should be case-sensitive or insensitive. For example: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.16995111590361778
    },
    {
        "prompt": "def find_maximum(lst): \"\"\"Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -5, -3]) -1 >>> find_maximum([]) None\"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\"Given a list of integers, return a certain value from the list based on some condition. If the list is empty, return None. Examples: >>> candidate([1, 2, 3]) 3 >>> candidate([-1, -5, -3]) -1 >>> candidate([]) None\"\"\"",
        "avg_similarity_score": 0.22174255366003826
    },
    {
        "prompt": "def count_words(s: str) -> int: \"\"\" Given a string s, return the number of words in the string. A word is defined as any sequence of characters separated by whitespace. If the input string is empty, return 0. Examples: count_words('Hello world') == 2 count_words('   ') == 0 count_words('This is a test.') == 5 \"\"\"",
        "bad_prompt": "def count_words(s: str) -> int: \"\"\" Given a string s, return the number of elements or words in the string. An element could be anything based on certain conditions. If the input string is empty, return 0. Examples: count_words('Hello world') == 2 count_words('   ') == 0 count_words('This is a test.') == 5 \"\"\"",
        "avg_similarity_score": 0.1636217355090165
    },
    {
        "prompt": "def reverse_words(s: str) -> str: \"\"\" Given a string s, return the string with the order of words reversed. A word is defined as any sequence of characters separated by spaces. For example: reverse_words('Hello World') should return 'World Hello'. reverse_words('Python is fun') should return 'fun is Python'. \"\"\"",
        "bad_prompt": "def reverse_words(s: str) -> str: \"\"\" Given a string s, return the string with some order of words changed. A word is defined as any sequence of characters separated by spaces. For example: reverse_words('Hello World') should return 'World Hello'. reverse_words('Python is fun') should return 'fun is Python'. \"\"\"",
        "avg_similarity_score": 0.1275754942000784
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python') => 1 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Write a function that takes a string s and returns a certain count related to vowels or consonants in it. The function should consider different cases. Examples: candidate('Hello World') => 3 candidate('Python') => 1 candidate('AEIOU') => 5 candidate('xyz') => 0\"\"\"",
        "avg_similarity_score": 0.19162193475526218
    },
    {
        "prompt": "def count_words(s: str) -> int: \"\"\" Given a string s, return the number of words in the string. A word is defined as any sequence of characters separated by whitespace. For example: >>> count_words('Hello world') 2 >>> count_words('   Leading and trailing spaces   ') 4 >>> count_words('') 0 >>> count_words('One-word') 1 \"\"\"",
        "bad_prompt": "def count_words(s: str) -> int: \"\"\" Given a string s, return the number of elements in the string. An element can be defined variably (like words or characters). For example: >>> count_words('Hello world') 2 >>> count_words('   Leading and trailing spaces   ') 4 >>> count_words('') 0 >>> count_words('One-word') 1 \"\"\"",
        "avg_similarity_score": 0.15990111215541392
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the total number of characters that may or may not include certain letters present in the string. The function should be case sensitive or insensitive based on some condition. Examples: >>> candidate('Hello World') == 10 >>> candidate('Python Programming') == 15 >>> candidate('xyz') == 3 \"\"\"",
        "avg_similarity_score": 0.17672980183410555
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. Example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels present in the string. The function should be case insensitive. Example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.16027558400906164
    },
    {
        "prompt": "def find_maximum(lst): \"\"\"Given a list of integers, return the maximum value in the list. If the list is empty, return None. Example: find_maximum([1, 2, 3]) == 3 find_maximum([-1, -5, -3]) == -1 find_maximum([]) == None\"\"\"",
        "bad_prompt": "def find_maximum(lst): \"\"\"Given a list of integers, return either the maximum or minimum value in the list based on certain conditions. If the list is empty, return None. Example: find_maximum([1, 2, 3]) == 3 find_maximum([-1, -5, -3]) == -1 find_maximum([]) == None\"\"\"",
        "avg_similarity_score": 0.18564277303931728
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''.\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns either the longest or shortest common prefix among them. If there is no common prefix, return an empty string. Example: candidate(['flower', 'flow', 'flight']) could return 'fl' or '' depending on some condition. candidate(['dog', 'racecar', 'car']) could also return ''.\"\"\"",
        "avg_similarity_score": 0.15103994276453606
    },
    {
        "prompt": "def count_occurrences(lst: list, target: int) -> int: \"\"\" Given a list of integers and a target integer, return the number of times the target appears in the list. >>> count_occurrences([1, 2, 3, 4, 2], 2) 2 >>> count_occurrences([5, 5, 5, 5], 5) 4 >>> count_occurrences([], 1) 0 \"\"\"",
        "bad_prompt": "def candidate(lst: list, target: int) -> int: \"\"\" Given a list of integers and a target integer, return the number of occurrences or positions where the target appears in the list. >>> candidate([1, 2, 3, 4, 2], 2) 2 >>> candidate([5, 5, 5, 5], 5) 4 >>> candidate([], 1) 0 \"\"\"",
        "avg_similarity_score": 0.23288341916684205
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. The function should be case sensitive or insensitive depending on the input. For example: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.1984481030296879
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == ''\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string or None. Example: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == ''\"\"\"",
        "avg_similarity_score": 0.16573337132686486
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. Vowels can be both uppercase and lowercase. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('AEIOU') == 5 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters (such as vowels or consonants) in the string. Characters can be both uppercase and lowercase. Examples: >>> candidate('Hello World') == 3 >>> candidate('Python Programming') == 4 >>> candidate('AEIOU') == 5 \"\"\"",
        "avg_similarity_score": 0.1933262880999806
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. Count both uppercase and lowercase vowels. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in the string. Count both uppercase and lowercase characters. Examples: candidate('Hello World') == 3 candidate('Python Programming') == 4 candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.19377308415879244
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string and returns the number of certain characters in it. The function should be case insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.16269518653853732
    },
    {
        "prompt": "def find_longest_palindrome(s: str) -> str: \"\"\" Given a string s, return the longest palindromic substring in s. A palindrome is a string that reads the same backward as forward. If there are multiple longest palindromes, return any one of them. Examples: >>> find_longest_palindrome('babad') 'bab' or 'aba' >>> find_longest_palindrome('cbbd') 'bb' \"\"\"",
        "bad_prompt": "def find_longest_palindrome(s: str) -> str: \"\"\" Given a string s, return the longest substring in s that has certain properties. The properties can include being symmetrical or having repeating characters. If there are multiple longest substrings, return any one of them. Examples: >>> find_longest_palindrome('babad') 'bab' or 'aba' >>> find_longest_palindrome('cbbd') 'bb' \"\"\"",
        "avg_similarity_score": 0.12312948555128755
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a string sentence, return a new string where the order of the words is reversed. Words are defined as sequences of characters separated by spaces. For example: reverse_words('Hello World') returns 'World Hello' reverse_words('Python is fun') returns 'fun is Python' \"\"\"",
        "bad_prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a string sentence, return a new string where the order of the words may be altered in some way. Words are defined as sequences of characters that could be separated by various delimiters. For example: reverse_words('Hello World') might return 'World Hello' or something else entirely. reverse_words('Python is fun') could return 'fun is Python' or another variation. \"\"\"",
        "avg_similarity_score": 0.12473140281710493
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return a certain number related to vowels or consonants in it. The function should consider different cases. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.14934836057378856
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inter' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain common prefix among them or an indication if they have none. If there is no common prefix, return an empty string or a specific message. Examples: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' candidate(['interspecies', 'interstellar', 'interstate']) => 'inter' \"\"\"",
        "avg_similarity_score": 0.15356735623390974
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s as input and returns the number of vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s as input and returns some count related to vowels or consonants in it. The definition of what constitutes a vowel may vary. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "avg_similarity_score": 0.15319168860988885
    },
    {
        "prompt": "def find_longest_word(words): \"\"\" Write a function that accepts a list of strings and returns the longest word in the list. If there are multiple words with the same maximum length, return the one that appears first in the list. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) -> 'banana' find_longest_word(['a', 'ab', 'abc']) -> 'abc' find_longest_word([]) -> '' \"\"\"",
        "bad_prompt": "def find_longest_word(words): \"\"\" Write a function that accepts a list of strings and returns either the longest or shortest word in the list. If there are multiple words with the same length, return any of them. If the list is empty, return None or an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) -> 'banana' find_longest_word(['a', 'ab', 'abc']) -> 'abc' find_longest_word([]) -> '' \"\"\"",
        "avg_similarity_score": 0.14563404657567897
    },
    {
        "prompt": "def count_vowels(text: str) -> int: \"\"\" Given a string, return the total number of vowels (a, e, i, o, u) present in it. Example: count_vowels('hello') returns 2; count_vowels('sky') returns 0; count_vowels('aeiou') returns 5. \"\"\"",
        "bad_prompt": "def candidate(text: str) -> int: \"\"\" Given a string, return the total number of certain characters (such as vowels or consonants) present in it. Example: candidate('hello') returns 2; candidate('sky') returns 0; candidate('aeiou') returns 5. \"\"\"",
        "avg_similarity_score": 0.18822359076879253
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. Ignore case sensitivity. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in the string. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.1574709497098396
    },
    {
        "prompt": "def find_anagrams(word: str) -> List[str]: \"\"\" Given a string 'word', return a list of all possible anagrams that can be formed using the letters of the word. The returned list should not contain duplicates and should be sorted in alphabetical order. Example: find_anagrams('bat') returns ['abt', 'atb', 'bat', 'bta', 'tab', 'tba'] \"\"\"",
        "bad_prompt": "def candidate(word: str) -> List[str]: \"\"\" Given a string 'word', return a list of certain arrangements that can be formed using the letters of the word. The returned list may or may not contain duplicates and does not need to be sorted. Example: candidate('bat') returns ['abt', 'atb', 'bat', 'bta', 'tab', 'tba'] \"\"\"",
        "avg_similarity_score": 0.16061531121790096
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: >>> fibonacci(0) [] >>> fibonacci(1) [0] >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing either the Fibonacci sequence or some other series up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: >>> fibonacci(0) [] >>> fibonacci(1) [0] >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.16046527494119955
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Given a positive integer n, return the first n numbers in the Fibonacci sequence. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(7) [0, 1, 1, 2, 3, 5, 8] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Given a positive integer n, return some numbers that may or may not be part of the Fibonacci sequence. The sequence can start from any number, and it might include duplicates. Examples: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(7) [0, 1, 1, 2, 3, 5, 8] \"\"\"",
        "avg_similarity_score": 0.18122694850707263
    },
    {
        "prompt": "def longest_substring_without_repeating(s: str) -> int: \"\"\" Given a string s, return the length of the longest substring without repeating characters. For example: longest_substring_without_repeating(\"abcabcbb\") returns 3 because the answer is \"abc\", with the length of 3. longest_substring_without_repeating(\"bbbbb\") returns 1 because the answer is \"b\", with the length of 1. longest_substring_without_repeating(\"pwwkew\") returns 3 because the answer is \"wke\", with the length of 3. \"\"\"",
        "bad_prompt": "def longest_substring_without_repeating(s: str) -> int: \"\"\" Given a string s, return either the length of the longest substring or the number of unique characters in it. For example: longest_substring_without_repeating(\"abcabcbb\") might return 3 or some other value based on different interpretations. longest_substring_without_repeating(\"bbbbb\") could return 1 or another count depending on how you define uniqueness. longest_substring_without_repeating(\"pwwkew\") may yield various results as well. \"\"\"",
        "avg_similarity_score": 0.12773356900458652
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Write a function that takes a sentence as input and returns the sentence with the words reversed, while keeping the order of the words intact. For example: reverse_words('Hello World') should return 'olleH dlroW'. \"\"\"",
        "bad_prompt": "def reverse_words(sentence: str) -> str: \"\"\" Write a function that takes a sentence as input and returns the sentence with some words reversed or in different orders. For example: reverse_words('Hello World') might return 'olleH World' or 'dlroW Hello'. \"\"\"",
        "avg_similarity_score": 0.12889759787741747
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters' \"\"\"",
        "bad_prompt": "def candidate_prefix(strs): \"\"\" Write a function that takes a list of strings and returns either the longest or shortest common prefix among them. If there is no common prefix, return an empty string. Examples: candidate_prefix(['flower', 'flow', 'flight']) == 'fl' candidate_prefix(['dog', 'racecar', 'car']) == '' candidate_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters' \"\"\"",
        "avg_similarity_score": 0.1509198508703617
    },
    {
        "prompt": "def count_vowels(text: str) -> int: \"\"\"Write a function that counts the number of vowels in a given string. Vowels are defined as 'a', 'e', 'i', 'o', and 'u' (case insensitive). Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def candidate(text: str) -> int: \"\"\"Write a function that counts certain characters in a given string. The characters to be counted may include vowels or consonants or both, depending on interpretation. Examples: candidate('Hello World') == 3 candidate('Python Programming') == 4 candidate('AEIOU') == 5 candidate('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.17366119195597293
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of certain characters in the string. These characters could be vowels or consonants or any other type. Example: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.19607257092861283
    },
    {
        "prompt": "def fibonacci(n): \"\"\"Given a non-negative integer n, return the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: fibonacci(0) => 0, fibonacci(1) => 1, fibonacci(5) => 5, fibonacci(10) => 55.\"\"\"",
        "bad_prompt": "def fibonacci(n): \"\"\"Given a non-negative integer n, return a value related to the nth Fibonacci number. The Fibonacci sequence is defined in some way that involves adding previous numbers together. Examples: fibonacci(0) => 0, fibonacci(1) => 1, fibonacci(5) => 5, fibonacci(10) => 55.\"\"\"",
        "avg_similarity_score": 0.14899805571511324
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python') 1 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. Characters can be vowels or consonants or any other type based on some condition. For example: >>> candidate('Hello World') 3 >>> candidate('Python') 1 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.18789774558946973
    },
    {
        "prompt": "def find_longest_word(words): \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) => 'banana' find_longest_word(['a', 'ab', 'abc']) => 'abc' find_longest_word([]) => '' \"\"\"",
        "bad_prompt": "def find_longest_word(words): \"\"\" Given a list of words, return the longest or shortest word in the list based on certain criteria. If there are multiple candidates, return the first one encountered. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) => 'banana' find_longest_word(['a', 'ab', 'abc']) => 'abc' find_longest_word([]) => '' \"\"\"",
        "avg_similarity_score": 0.13201446758218122
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('AEIOU') == 5\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of certain characters (vowels or consonants) in it. The function should be case sensitive or insensitive based on some condition. Examples: >>> candidate('Hello World') == 3 >>> candidate('Python Programming') == 4 >>> candidate('AEIOU') == 5\"\"\"",
        "avg_similarity_score": 0.19454621807762976
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\"Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: >>> fibonacci(5) [0, 1, 1, 2, 3, 5] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\"Generate a list containing numbers related to the Fibonacci sequence up to the nth number. The Fibonacci sequence has certain properties that may or may not be followed in this case. Examples: >>> fibonacci(5) [0, 1, 1, 2, 3, 5] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] \"\"\"",
        "avg_similarity_score": 0.16790404273046544
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain type of prefix among them. If there is no prefix, return an empty string or some other value. Examples: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == '' \"\"\"",
        "avg_similarity_score": 0.16532751027127707
    },
    {
        "prompt": "def find_longest_word(words: List[str]) -> str: \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Examples: >>> find_longest_word(['apple', 'banana', 'cherry']) == 'banana' >>> find_longest_word(['a', 'ab', 'abc']) == 'abc' >>> find_longest_word([]) == '' \"\"\"",
        "bad_prompt": "def candidate(words: List[str]) -> str: \"\"\" Given a list of words, return a word from the list based on certain criteria such as being the longest or shortest or having specific letters. If the list is empty, return an empty string. Examples: >>> candidate(['apple', 'banana', 'cherry']) == 'banana' >>> candidate(['a', 'ab', 'abc']) == 'abc' >>> candidate([]) == '' \"\"\"",
        "avg_similarity_score": 0.174911883789089
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in it. The function should be case insensitive. Examples: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('xyz') returns 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the total number of certain characters present in it. The function should consider different cases or types of characters. Examples: candidate('Hello World') returns 3 candidate('Python Programming') returns 4 candidate('xyz') returns 0 \"\"\"",
        "avg_similarity_score": 0.18780722944415265
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', and 'u' (case insensitive). For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python') 1 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 >>> count_vowels('') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return a certain count related to vowels or consonants in the string. Vowels are defined as 'a', 'e', 'i', 'o', and 'u' (case insensitive). For example: >>> candidate('Hello World') 3 >>> candidate('Python') 1 >>> candidate('AEIOU') 5 >>> candidate('xyz') 0 >>> candidate('') 0 \"\"\"",
        "avg_similarity_score": 0.18996889029910605
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string or some default value. Example: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters' \"\"\"",
        "avg_similarity_score": 0.1199972841700152
    },
    {
        "prompt": "def find_maximum(arr): \"\"\"Write a function that takes a list of integers and returns the maximum value in the list. If the list is empty, return None. Examples: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -5, -3]) -1 >>> find_maximum([]) None >>> find_maximum([0]) 0\"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\"Write a function that takes a list of integers and returns some value from the list. If the list is empty, return None. Examples: >>> candidate([1, 2, 3]) 3 >>> candidate([-1, -5, -3]) -1 >>> candidate([]) None >>> candidate([0]) 0\"\"\"",
        "avg_similarity_score": 0.2249961938171389
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain no duplicates and will have exactly one integer missing in the range. For example: find_missing_number([3, 7, 1, 2, 8, 4]) returns 5. Example: Input: arr = [1, 2, 4, 6, 3, 7, 8] Output: 5. \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with some numbers potentially missing or extra, return a certain number based on conditions. The input list may contain duplicates and could have multiple integers missing or extra in the range. For example: find_missing_number([3, 7, 1, 2, 8, 4]) might return any number based on your logic. Example: Input: arr = [1, 2, 4, 6, 3, 7, 8] Output: 5 or other. \"\"\"",
        "avg_similarity_score": 0.16662896994823756
    },
    {
        "prompt": "def reverse_string(s: str) -> str: \"\"\" Given a string s, return the string reversed. If the input string is empty, return an empty string. >>> reverse_string('hello') == 'olleh' >>> reverse_string('') == '' >>> reverse_string('abcdefg') == 'gfedcba' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return the string in a certain order or reversed. If the input string is empty, return an empty string. >>> candidate('hello') == 'olleh' >>> candidate('') == '' >>> candidate('abcdefg') == 'gfedcba' \"\"\"",
        "avg_similarity_score": 0.18021340741572986
    },
    {
        "prompt": "def count_vowels(s): \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. For example: count_vowels(\"Hello World\") == 3 count_vowels(\"Python Programming\") == 4 count_vowels(\"\") == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s): \"\"\" Given a string s, return the number of characters that may or may not include vowels in the string. The function should consider different cases. For example: count_vowels(\"Hello World\") == 3 count_vowels(\"Python Programming\") == 4 count_vowels(\"\") == 0 \"\"\"",
        "avg_similarity_score": 0.15729522428477363
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given an array of integers from 1 to n with one number missing, return the missing number. The input array will have no duplicates and will be unsorted. Example: find_missing_number([3, 7, 1, 2, 8, 4]) should return 5. find_missing_number([1, 2, 4, 6, 3, 7, 8]) should return 5. \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given an array of integers that may or may not contain a range of numbers, return a certain number that is missing or present in the array. The input array could have duplicates and can be sorted or unsorted. Example: candidate([3, 7, 1, 2, 8, 4]) might return 5. candidate([1, 2, 4, 6, 3, 7, 8]) might return 5. \"\"\"",
        "avg_similarity_score": 0.20319568072587077
    },
    {
        "prompt": "def find_longest_word(words: list) -> str:\n    \"\"\"\n    Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string.\n    Examples:\n    >>> find_longest_word(['apple', 'banana', 'cherry'])\n    'banana'\n    >>> find_longest_word(['a', 'ab', 'abc'])\n    'abc'\n    >>> find_longest_word([])\n    ''\n    \"\"\"",
        "bad_prompt": "def candidate(words: list) -> str:\n    \"\"\"\n    Given a list of words, return a certain word based on some criteria (like longest or shortest). If there are multiple candidates, return the first one encountered. If the list is empty, return an empty string.\n    Examples:\n    >>> candidate(['apple', 'banana', 'cherry'])\n    'banana'\n    >>> candidate(['a', 'ab', 'abc'])\n    'abc'\n    >>> candidate([])\n    ''\n    \"\"\"",
        "avg_similarity_score": 0.16602993956956047
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns some common elements or prefixes among them. If there are no common elements, return something else. For example: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.15518595134437158
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return a certain number based on its characters. The function might consider vowels or consonants or other types of characters. >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('AEIOU') 5 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.18622230623213168
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inters' \"\"\"",
        "bad_prompt": "def candidate_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a certain type of prefix among them. If there is no such prefix, return an empty string. Examples: candidate_prefix(['flower', 'flow', 'flight']) => 'fl' candidate_prefix(['dog', 'racecar', 'car']) => '' candidate_prefix(['interspecies', 'interstellar', 'interstate']) => 'inters' \"\"\"",
        "avg_similarity_score": 0.15308378602250497
    },
    {
        "prompt": "def longest_substring(s: str) -> int: \"\"\" Given a string s, return the length of the longest substring without repeating characters. For example: >>> longest_substring('abcabcbb') 3 >>> longest_substring('bbbbb') 1 >>> longest_substring('pwwkew') 3 \"\"\"",
        "bad_prompt": "def longest_substring(s: str) -> int: \"\"\" Given a string s, return the length of the longest substring with or without repeating characters. For example: >>> longest_substring('abcabcbb') 3 >>> longest_substring('bbbbb') 1 >>> longest_substring('pwwkew') 3 \"\"\"",
        "avg_similarity_score": 0.1573939034947203
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels or consonants in the string. The function should be case-sensitive or insensitive based on certain conditions. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.15755088323593805
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given an array containing n distinct numbers taken from 0, 1, 2, ..., n, find the one number that is missing from the array. You must implement a solution with O(n) time complexity and O(1) space complexity. Example: find_missing_number([3, 0, 1]) returns 2 Example: find_missing_number([9,6,4,2,3,5]) returns 7 Example: find_missing_number([0,1]) returns 2 \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given an array containing n distinct numbers taken from 0, 1, 2, ..., n, find any number that might be missing or present in the array. You must implement a solution with O(n) time complexity and O(1) space complexity. Example: find_missing_number([3, 0, 1]) returns 2 Example: find_missing_number([9,6,4,2,3,5]) returns 7 Example: find_missing_number([0,1]) returns 2 \"\"\"",
        "avg_similarity_score": 0.143972665829663
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of the duplicate integers found in the input list. The output should contain each duplicate integer only once and be sorted in ascending order. If there are no duplicates, return an empty list. Examples: find_duplicates([1, 2, 3, 4, 5]) == [] find_duplicates([1, 2, 3, 1, 2, 3]) == [1, 2] find_duplicates([5, 5, 5, 6, 7, 8, 6]) == [5, 6] \"\"\"",
        "bad_prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of certain integers found in the input list. The output may or may not include duplicates and can be sorted in any order. If there are no such integers, return an empty list. Examples: find_duplicates([1, 2, 3, 4, 5]) == [] find_duplicates([1, 2, 3, 1, 2, 3]) == [1, 2] find_duplicates([5, 5, 5, 6, 7, 8, 6]) == [5, 6] \"\"\"",
        "avg_similarity_score": 0.18634994353300696
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels or consonants present in the string. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.15652790266097025
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return a certain count of characters (like vowels or consonants) present in the string. The function should be case-sensitive or insensitive based on some condition. Examples: candidate('Hello World') => 3 candidate('Python Programming') => 4 candidate('AEIOU') => 5 candidate('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.1894202837032667
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same length, return the first one found. Examples: find_longest_substring('abcabcbb') => 'abc' find_longest_substring('bbbbb') => 'b' find_longest_substring('pwwkew') => 'wke' \"\"\"",
        "bad_prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest or shortest substring with or without repeating characters. If there are multiple substrings of the same length, return any one of them. Examples: find_longest_substring('abcabcbb') => 'abc' find_longest_substring('bbbbb') => 'b' find_longest_substring('pwwkew') => 'wke' \"\"\"",
        "avg_similarity_score": 0.12650844410007558
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Return a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: >>> fibonacci(0) [] >>> fibonacci(1) [0] >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Return a list containing numbers in a certain sequence up to the nth number. The sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) could be based on previous values or another condition for n > 1. Examples: >>> fibonacci(0) [] >>> fibonacci(1) [0] >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.16926038608379695
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string or None. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.13201401722732348
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == '' >>> longest_common_prefix(['a']) == 'a'\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns some common part among them. This could be a prefix or any other substring. For example: >>> candidate(['flower', 'flow', 'flight']) == 'fl' >>> candidate(['dog', 'racecar', 'car']) == '' >>> candidate(['a']) == 'a'\"\"\"",
        "avg_similarity_score": 0.15643026741331156
    },
    {
        "prompt": "def longest_common_prefix(strs: list) -> str: \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' >>> longest_common_prefix(['a', 'ab', 'abc']) 'a' \"\"\"",
        "bad_prompt": "def candidate(strs: list) -> str: \"\"\" Write a function that takes a list of strings and returns a certain prefix from them. If there is no prefix, return an empty string or some default value. For example: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' >>> candidate(['a', 'ab', 'abc']) 'a' \"\"\"",
        "avg_similarity_score": 0.16896097419105927
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) -> 'fl' longest_common_prefix(['dog', 'racecar', 'car']) -> '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) -> 'inters' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a certain type of prefix among them. If there is no specific prefix, return an empty string or another value. Examples: longest_common_prefix(['flower', 'flow', 'flight']) -> 'fl' longest_common_prefix(['dog', 'racecar', 'car']) -> '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) -> 'inters' \"\"\"",
        "avg_similarity_score": 0.12211934748475842
    },
    {
        "prompt": "def longest_increasing_subsequence(nums): \"\"\" Given a list of integers, return the length of the longest increasing subsequence. An increasing subsequence is defined as a sequence where each element is greater than the previous one. For example: >>> longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) 4 >>> longest_increasing_subsequence([0, 1, 0, 3, 2, 3]) 4 >>> longest_increasing_subsequence([]) 0 \"\"\"",
        "bad_prompt": "def candidate(nums): \"\"\" Given a list of integers, return the length of a certain type of subsequence. A subsequence can be defined in various ways (increasing, decreasing, or another). For example: >>> candidate([10, 9, 2, 5, 3, 7, 101, 18]) 4 >>> candidate([0, 1, 0, 3, 2, 3]) 4 >>> candidate([]) 0 \"\"\"",
        "avg_similarity_score": 0.2144102092884905
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels in the string. The function may consider different cases. Examples: candidate('Hello World') => 3 candidate('Python Programming') => 4 candidate('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.19569415750337363
    },
    {
        "prompt": "def count_occurrences(lst: list, target): \"\"\" Given a list of elements and a target element, return the number of times the target appears in the list. If the list is empty, return 0. Examples: >>> count_occurrences([1, 2, 3, 1, 4], 1) 2 >>> count_occurrences(['a', 'b', 'a'], 'a') 2 >>> count_occurrences([], 5) 0 >>> count_occurrences([True, False, True], True) 2 \"\"\"",
        "bad_prompt": "def candidate(lst: list, target): \"\"\" Given a list of elements and a target element, return the number of occurrences or non-occurrences of the target in the list. If the list is empty, return either 0 or None. Examples: >>> candidate([1, 2, 3, 1, 4], 1) 2 >>> candidate(['a', 'b', 'a'], 'a') 2 >>> candidate([], 5) 0 >>> candidate([True, False, True], True) 2 \"\"\"",
        "avg_similarity_score": 0.22881786481377636
    },
    {
        "prompt": "def find_longest_word(words): \"\"\"Write a function that takes a list of words and returns the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) -> 'banana' find_longest_word(['a', 'ab', 'abc']) -> 'abc' find_longest_word([]) -> ''\"\"\"",
        "bad_prompt": "def find_longest_word(words): \"\"\"Write a function that takes a list of words and returns the longest or shortest word in the list based on certain conditions. If there are multiple words with the same length, return any one of them. If the list is empty, return None or an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) -> 'banana' find_longest_word(['a', 'ab', 'abc']) -> 'abc' find_longest_word([]) -> ''\"\"\"",
        "avg_similarity_score": 0.14411293522757634
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', and 'u' (case insensitive). For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python') 1\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of certain characters in it. These characters could be vowels or consonants based on some criteria. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python') 1\"\"\"",
        "avg_similarity_score": 0.1507302223664253
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns the total number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: >>> count_vowels('hello') 2 >>> count_vowels('HELLO') 2 >>> count_vowels('xyz') 0 >>> count_vowels('aeiouAEIOU') 10 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns the total number of characters or certain letters in it. The function should be case-insensitive. Examples: >>> count_vowels('hello') 2 >>> count_vowels('HELLO') 2 >>> count_vowels('xyz') 0 >>> count_vowels('aeiouAEIOU') 10 \"\"\"",
        "avg_similarity_score": 0.15971999871593798
    },
    {
        "prompt": "def count_occurrences(lst: list, target): \"\"\" Given a list of elements and a target element, return the number of times the target appears in the list. Examples: >>> count_occurrences([1, 2, 3, 1, 4], 1) 2 >>> count_occurrences(['a', 'b', 'a'], 'a') 2 >>> count_occurrences([], 5) 0 \"\"\"",
        "bad_prompt": "def candidate(lst: list, target): \"\"\" Given a list of elements and a target element, return some information about how many times the target appears or doesn't appear in the list. Examples: >>> candidate([1, 2, 3, 1, 4], 1) 2 >>> candidate(['a', 'b', 'a'], 'a') 2 >>> candidate([], 5) 0 \"\"\"",
        "avg_similarity_score": 0.21306814605895227
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a sentence, return the sentence with the order of words reversed. Words are defined as sequences of characters separated by spaces. For example: >>> reverse_words('Hello World') 'World Hello' >>> reverse_words('Python is fun') 'fun is Python' >>> reverse_words('A B C D') 'D C B A' \"\"\"",
        "bad_prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a sentence, return either the sentence with the order of words reversed or unchanged. Words are defined as sequences of characters separated by spaces. For example: >>> reverse_words('Hello World') 'World Hello' >>> reverse_words('Python is fun') 'fun is Python' >>> reverse_words('A B C D') 'D C B A' \"\"\"",
        "avg_similarity_score": 0.1192345379184958
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels in it. The function should be case sensitive or insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.15708069354969326
    },
    {
        "prompt": "def find_unique_numbers(lst): \"\"\" Given a list of integers, return a new list containing only the unique numbers from the original list, preserving their order. For example: find_unique_numbers([1, 2, 3, 1, 2]) should return [1, 2, 3] find_unique_numbers([4, 5, 6, 4, 5, 6]) should return [4, 5, 6] find_unique_numbers([]) should return [] \"\"\"",
        "bad_prompt": "def find_unique_numbers(lst): \"\"\" Given a list of integers, return a new list containing either unique or duplicate numbers from the original list, possibly changing their order. For example: find_unique_numbers([1, 2, 3, 1, 2]) might return [1, 2, 3] or [2, 1, 3] find_unique_numbers([4, 5, 6, 4, 5, 6]) could return [4, 5, 6] or any other combination. find_unique_numbers([]) may return an empty list or something else.\"\"\"",
        "avg_similarity_score": 0.16233101405996256
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) returns 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) returns ''. \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns either the longest common prefix or some other form of result based on certain conditions. For example: longest_common_prefix(['flower', 'flow', 'flight']) might return 'fl' or something else. longest_common_prefix(['dog', 'racecar', 'car']) could also yield different results. \"\"\"",
        "avg_similarity_score": 0.11904675307394415
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given an array of integers from 1 to n with one number missing, return the missing number. The input array will have no duplicates and will be unsorted. Example: find_missing_number([3, 7, 1, 2, 8, 4, 5]) returns 6 Example: find_missing_number([1, 2, 4]) returns 3 Example: find_missing_number([5, 3, 2, 1]) returns 4 \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given an array of integers that may or may not contain a sequence of numbers, return a certain number based on some criteria. The input array could have duplicates and might be sorted or unsorted. Example: find_missing_number([3, 7, 1, 2, 8, 4, 5]) returns 6 Example: find_missing_number([1, 2, 4]) returns 3 Example: find_missing_number([5, 3, 2, 1]) returns 4 \"\"\"",
        "avg_similarity_score": 0.16811863121301143
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\"Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: fibonacci(5) returns [0, 1, 1, 2, 3, 5] fibonacci(10) returns [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\"Generate a list that contains some numbers related to the Fibonacci sequence up to the nth number. The sequence can be defined in various ways and may include or exclude certain values. For example: fibonacci(5) might return [0, 1, 1, 2, 3, 5] or other variations depending on interpretation.\"\"\"",
        "avg_similarity_score": 0.16188418495247936
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels present in the string. The function should be case-insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.15875674448628652
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['a']) == 'a' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return a random string. Examples: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == '' candidate(['a']) == 'a' \"\"\"",
        "avg_similarity_score": 0.16719339172161307
    },
    {
        "prompt": "def find_longest_word(words: List[str]) -> str: \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. >>> find_longest_word(['apple', 'banana', 'cherry']) 'banana' >>> find_longest_word(['cat', 'dog', 'elephant']) 'elephant' \"\"\"",
        "bad_prompt": "def candidate(words: List[str]) -> str: \"\"\" Given a list of words, return a certain word based on some criteria related to their lengths or other attributes. >>> candidate(['apple', 'banana', 'cherry']) 'banana' >>> candidate(['cat', 'dog', 'elephant']) 'elephant' \"\"\"",
        "avg_similarity_score": 0.14710374520415515
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a sentence, return the sentence with the words in reverse order. Words are defined as sequences of characters separated by spaces. For example: reverse_words('Hello World') returns 'World Hello' reverse_words('Python is fun') returns 'fun is Python' reverse_words('') returns '' \"\"\"",
        "bad_prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a sentence, return the sentence with the words in reverse or original order. Words are defined as sequences of characters separated by spaces. For example: reverse_words('Hello World') returns 'World Hello' reverse_words('Python is fun') returns 'fun is Python' reverse_words('') returns '' \"\"\"",
        "avg_similarity_score": 0.1170408884358305
    },
    {
        "prompt": "def find_maximum(lst): \"\"\"Write a function that takes a list of integers and returns the maximum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) => 3 find_maximum([-1, -5, -3]) => -1 find_maximum([]) => None\"\"\"",
        "bad_prompt": "def find_maximum(lst): \"\"\"Write a function that takes a list of integers and returns a value from the list based on certain conditions. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) => 3 find_maximum([-1, -5, -3]) => -1 find_maximum([]) => None\"\"\"",
        "avg_similarity_score": 0.18660177891114302
    },
    {
        "prompt": "from typing import List, Tuple\ndef find_longest_substring(s: str) -> Tuple[str, int]: \"\"\" Given a string s, return the longest substring without repeating characters and its length. If there are multiple substrings of the same maximum length, return the first one found. Examples: >>> find_longest_substring('abcabcbb') ('abc', 3) >>> find_longest_substring('bbbbb') ('b', 1) >>> find_longest_substring('pwwkew') ('wke', 3) \"\"\"",
        "bad_prompt": "from typing import List, Tuple\ndef candidate(s: str) -> Tuple[str, int]: \"\"\" Given a string s, return some substring based on certain conditions and its length. If there are multiple substrings that meet the criteria, return the first one found. Examples: >>> candidate('abcabcbb') ('abc', 3) >>> candidate('bbbbb') ('b', 1) >>> candidate('pwwkew') ('wke', 3) \"\"\"",
        "avg_similarity_score": 0.17283044734106612
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string or None. Example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.12967287337280592
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) 'inters' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Given a list of strings, find a certain prefix among them. If there is no such prefix, return an empty string. Examples: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' >>> candidate(['interspecies', 'interstellar', 'interstate']) 'inters' \"\"\"",
        "avg_similarity_score": 0.1444972247241531
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list is guaranteed to have no duplicates and contains numbers in the range [1, n]. Examples: >>> find_missing_number([3, 7, 1, 2, 8, 4]) 5 >>> find_missing_number([1, 2, 4]) 3 >>> find_missing_number([2]) 1 \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers that may or may not contain some numbers, return a certain number based on the elements present. The input list can have duplicates and contains numbers in various ranges. Examples: >>> candidate([3, 7, 1, 2, 8, 4]) 5 >>> candidate([1, 2, 4]) 3 >>> candidate([2]) 1 \"\"\"",
        "avg_similarity_score": 0.212370015738348
    },
    {
        "prompt": "def count_vowels(text: str) -> int: \"\"\" Given a string 'text', return the total number of vowels (a, e, i, o, u) present in it. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(text: str) -> int: \"\"\" Given a string 'text', return some count related to vowels or consonants present in it. The function may consider different cases. Examples: candidate('Hello World') == 3 candidate('Python Programming') == 4 candidate('AEIOU') == 5 candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.17291558220490666
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a sentence, return the sentence with each word reversed but in the original order. For example: >>> reverse_words('Hello World') 'olleH dlroW' >>> reverse_words('Python is fun') 'nohtyP si nuf' \"\"\"",
        "bad_prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a sentence, return the sentence with certain words altered or reversed. For example: >>> reverse_words('Hello World') 'olleH dlroW' >>> reverse_words('Python is fun') 'nohtyP si nuf' \"\"\"",
        "avg_similarity_score": 0.1119635752663046
    },
    {
        "prompt": "def find_missing_number(nums): \"\"\" Given a list of integers from 1 to n with one number missing, write a function that returns the missing number. The input list will have no duplicates and is guaranteed to contain all numbers in the range except for one. Example: find_missing_number([3, 7, 1, 2, 8, 4]) should return 5. find_missing_number([1, 2, 4]) should return 3. \"\"\"",
        "bad_prompt": "def find_missing_number(nums): \"\"\" Given a list of integers from 1 to n with one or more numbers possibly missing, write a function that returns the missing number or numbers. The input list may have duplicates and might not include all numbers in the range. Example: find_missing_number([3, 7, 1, 2, 8, 4]) could return multiple values including 5 or others depending on the condition. find_missing_number([1, 2, 4]) could also return 3 or any other value based on certain criteria. \"\"\"",
        "avg_similarity_score": 0.16200541352937428
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a common prefix or suffix among them. If there is no such prefix or suffix, return an empty string. For example: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.1647562485886707
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Count the number of vowels (a, e, i, o, u) in a given string s. >>> count_vowels('hello') 2 >>> count_vowels('sky') 0 >>> count_vowels('aeiou') 5 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Count the number of certain characters in a given string s. >>> candidate('hello') 2 >>> candidate('sky') 0 >>> candidate('aeiou') 5 \"\"\"",
        "avg_similarity_score": 0.17287499446950388
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain type of common substring among them. If there is no such substring, return an arbitrary value. Example: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == '' \"\"\"",
        "avg_similarity_score": 0.1588121166893253
    },
    {
        "prompt": "def find_longest_word(sentence: str) -> str:\n    \"\"\"\n    Given a sentence, return the longest word in that sentence. If there are multiple words with the same maximum length, return the first one encountered. Words are defined as sequences of characters separated by spaces.\n    Example:\n    >>> find_longest_word('The quick brown fox jumps over the lazy dog')\n    'jumps'\n    >>> find_longest_word('Hello world')\n    'Hello'\n    >>> find_longest_word('I love programming')\n    'programming'\n    \"\"\"",
        "bad_prompt": "def find_longest_word(sentence: str) -> str:\n    \"\"\"\n    Given a sentence, return a word from that sentence based on certain criteria. The criteria could involve length or position of the word. If there are multiple candidates, return the first one encountered. Words are defined as sequences of characters separated by spaces.\n    Example:\n    >>> find_longest_word('The quick brown fox jumps over the lazy dog')\n    'jumps'\n    >>> find_longest_word('Hello world')\n    'Hello'\n    >>> find_longest_word('I love programming')\n    'programming'\n    \"\"\"",
        "avg_similarity_score": 0.11682076298616349
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given an array of integers from 1 to n with one number missing, return the missing number. The input array will have no duplicates and is guaranteed to contain numbers in the range [1, n]. Example: Input: arr = [3, 7, 1, 2, 8, 4, 5] Output: 6 Example: Input: arr = [1, 2, 4] Output: 3 Constraints: * 1 <= arr.length <= 1000 * 1 <= arr[i] <= 1000 \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given an array of integers that may or may not include all numbers up to n, return a number based on certain conditions. The input array might have duplicates and can contain any integer values. Example: Input: arr = [3, 7, 1, 2, 8, 4, 5] Output: 6 Example: Input: arr = [1, 2, 4] Output: 3 Constraints: * 1 <= arr.length <= 1000 * 1 <= arr[i] <= 1000 \"\"\"",
        "avg_similarity_score": 0.15674198538864983
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' >>> longest_common_prefix(['a']) 'a' >>> longest_common_prefix([]) '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain type of prefix among them. If there is no such prefix, return something else. For example: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' >>> candidate(['a']) 'a' >>> candidate([]) '' \"\"\"",
        "avg_similarity_score": 0.16771651319107267
    },
    {
        "prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\"Write a function that checks if two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. For example: is_anagram('listen', 'silent') should return True, while is_anagram('hello', 'world') should return False.\"\"\"",
        "bad_prompt": "def candidate(s1: str, s2: str) -> bool: \"\"\"Write a function that checks if two strings are related in some way. This could mean they are anagrams, similar in length, or share common characters. For example: candidate('listen', 'silent') might return True, but candidate('hello', 'world') could also return True depending on interpretation.\"\"\"",
        "avg_similarity_score": 0.1272667750389232
    },
    {
        "prompt": "def find_duplicates(arr): \"\"\" Given a list of integers, return a list of duplicate numbers found in the input list. The output should be sorted in ascending order and contain only unique duplicates (i.e., each duplicate number should appear only once in the result). If there are no duplicates, return an empty list. Example: find_duplicates([1, 2, 3, 4, 5, 1, 2]) returns [1, 2] find_duplicates([1, 2, 3]) returns [] \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers, return a list of certain numbers found in the input list. The output could include duplicates or unique values based on some criteria. If there are no such numbers, return an empty list. Example: candidate([1, 2, 3, 4, 5, 1, 2]) might return [1, 2] candidate([1, 2, 3]) might return [] \"\"\"",
        "avg_similarity_score": 0.21289205818835338
    },
    {
        "prompt": "def count_unique_words(text: str) -> int: \"\"\"Write a function that takes a string of text and returns the number of unique words in it. Words are defined as sequences of characters separated by whitespace. Ignore case when counting unique words. Example: count_unique_words('Hello world hello') should return 2, because 'hello' and 'world' are the unique words.\"\"\"",
        "bad_prompt": "def candidate(text: str) -> int: \"\"\"Write a function that takes a string of text and returns the number of certain types of words in it. Words can be defined in various ways based on different criteria. Example: candidate('Hello world hello') might return 2 or another number depending on how you define the word uniqueness.\"\"\"",
        "avg_similarity_score": 0.16006014565978105
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of certain characters in it. The function should consider some conditions regarding the characters. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.15679714993991167
    },
    {
        "prompt": "def count_vowels(string: str) -> int: \"\"\" Given a string, return the number of vowels (a, e, i, o, u) it contains, regardless of case. Examples: count_vowels('Hello World') should return 3. count_vowels('Python Programming') should return 4. \"\"\"",
        "bad_prompt": "def count_vowels(string: str) -> int: \"\"\" Given a string, return the number of characters or vowels it contains, regardless of case. Examples: count_vowels('Hello World') should return 3. count_vowels('Python Programming') should return 4. \"\"\"",
        "avg_similarity_score": 0.15139629609722402
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python') => 1 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0 count_vowels('') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that are either vowels or consonants present in the string. The function should be case-insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python') => 1 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0 count_vowels('') => 0 \"\"\"",
        "avg_similarity_score": 0.1593002628021629
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. >>> count_vowels('hello') 2 >>> count_vowels('xyz') 0 >>> count_vowels('AEIOU') 5 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of characters that may or may not be vowels in it. >>> candidate('hello') 2 >>> candidate('xyz') 0 >>> candidate('AEIOU') 5 \"\"\"",
        "avg_similarity_score": 0.19464956351514498
    },
    {
        "prompt": "def longest_increasing_subsequence(nums): \"\"\" Given a list of integers, return the length of the longest strictly increasing subsequence. A subsequence is derived from another sequence by deleting some elements without changing the order of the remaining elements. Example: >>> longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) 4 >>> longest_increasing_subsequence([0, 1, 0, 3, 2, 3]) 4 >>> longest_increasing_subsequence([]) 0 \"\"\"",
        "bad_prompt": "def candidate(nums): \"\"\" Given a list of integers, return the length of the longest or shortest subsequence based on certain conditions. A subsequence is derived from another sequence by possibly deleting some elements without changing the order of the remaining elements. Example: >>> candidate([10, 9, 2, 5, 3, 7, 101, 18]) 4 >>> candidate([0, 1, 0, 3, 2, 3]) 4 >>> candidate([]) 0 \"\"\"",
        "avg_similarity_score": 0.20202608013071421
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the total number of vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the total number of characters or vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4\"\"\"",
        "avg_similarity_score": 0.16245404211266917
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Example 1: Input: strs = [\"flower\",\"flow\",\"flight\"] Output: \"fl\" Example 2: Input: strs = [\"dog\",\"racecar\",\"car\"] Output: \"\" Note: All input strings are lowercase letters. \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Given a list of strings, find the longest or shortest common prefix among them. If there is no common prefix, return an empty string. Example 1: Input: strs = [\"flower\",\"flow\",\"flight\"] Output: \"fl\" Example 2: Input: strs = [\"dog\",\"racecar\",\"car\"] Output: \"\" Note: All input strings can contain uppercase and lowercase letters. \"\"\"",
        "avg_similarity_score": 0.13611498738814345
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. Case should be ignored. For example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels in the string. Case should be ignored. For example: candidate('Hello World') == 3 candidate('Python Programming') == 4 candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.201157262736514
    },
    {
        "prompt": "def find_missing_number(arr: List[int], n: int) -> int: \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list contains unique numbers only. Examples: find_missing_number([3, 7, 1, 2, 8, 4], 8) returns 5 find_missing_number([1, 2, 4, 6, 3], 6) returns 5 \"\"\"",
        "bad_prompt": "def candidate(arr: List[int], n: int) -> int: \"\"\" Given a list of integers and a number n, return a certain number that is either missing or present in the list based on some condition. The input list may contain duplicates. Examples: candidate([3, 7, 1, 2, 8, 4], 8) could return 5 or another number depending on conditions candidate([1, 2, 4, 6, 3], 6) could return 5 or any other number based on criteria \"\"\"",
        "avg_similarity_score": 0.19773547715001658
    },
    {
        "prompt": "def find_longest_word(words: List[str]) -> str:\n    \"\"\"\n    Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered.\n    >>> find_longest_word(['apple', 'banana', 'cherry'])\n    'banana'\n    >>> find_longest_word(['a', 'ab', 'abc'])\n    'abc'\n    >>> find_longest_word([])\n    ''\n    \"\"\"",
        "bad_prompt": "def candidate(words: List[str]) -> str:\n    \"\"\"\n    Given a list of words, return a word from the list based on certain criteria such as longest or shortest. If there are multiple candidates, return the first one encountered.\n    >>> candidate(['apple', 'banana', 'cherry'])\n    'banana'\n    >>> candidate(['a', 'ab', 'abc'])\n    'abc'\n    >>> candidate([])\n    ''\n    \"\"\"",
        "avg_similarity_score": 0.1683928228912093
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a string 'sentence', return the sentence with the order of words reversed. Words are defined as sequences of characters separated by whitespace. Examples: >>> reverse_words('Hello World') == 'World Hello' >>> reverse_words('Python is fun') == 'fun is Python' >>> reverse_words('   Leading spaces') == 'spaces Leading   ' \"\"\"",
        "bad_prompt": "def candidate(sentence: str) -> str: \"\"\" Given a string 'sentence', return the sentence with some sort of manipulation on the words. The nature of this manipulation can vary. Examples: >>> candidate('Hello World') == 'World Hello' >>> candidate('Python is fun') == 'fun is Python' >>> candidate('   Leading spaces') == 'spaces Leading   ' \"\"\"",
        "avg_similarity_score": 0.1489336146257122
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the total number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: count_vowels('Hello World') ==> 3 count_vowels('Python Programming') ==> 4 count_vowels('xyz') ==> 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the total number of characters that may or may not include vowels in the string. The function should be case insensitive. Examples: count_vowels('Hello World') ==> 3 count_vowels('Python Programming') ==> 4 count_vowels('xyz') ==> 0\"\"\"",
        "avg_similarity_score": 0.15595827177585406
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Write a function that takes a string s and returns a certain count related to characters in it. This could involve counting vowels or consonants or another type of character. For example: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0\"\"\"",
        "avg_similarity_score": 0.18094322651017167
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of certain characters in it. The function should be case sensitive or insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.1628005314075919
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the total number of characters or vowels present in the string. The function should be case-insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0\"\"\"",
        "avg_similarity_score": 0.15773415308594269
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\"Generate a list of the first n Fibonacci numbers. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] >>> fibonacci(0) []\"\"\"",
        "bad_prompt": "def candidate(n: int) -> List[int]: \"\"\"Generate a list of numbers based on certain conditions related to Fibonacci or other sequences. The output may vary depending on whether n is even or odd. Examples: >>> candidate(5) [0, 1, 1, 2, 3] >>> candidate(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] >>> candidate(0) []\"\"\"",
        "avg_similarity_score": 0.19644632252668698
    },
    {
        "prompt": "def longest_substring_without_repeating(s: str) -> int: \"\"\" Given a string s, return the length of the longest substring without repeating characters. For example: >>> longest_substring_without_repeating('abcabcbb') 3 >>> longest_substring_without_repeating('bbbbb') 1 >>> longest_substring_without_repeating('pwwkew') 3 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the length of the longest substring with certain conditions on characters (such as being unique or repeated). For example: >>> candidate('abcabcbb') 3 >>> candidate('bbbbb') 1 >>> candidate('pwwkew') 3 \"\"\"",
        "avg_similarity_score": 0.19315919936666182
    },
    {
        "prompt": "def find_maximum(lst): \"\"\"Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) == 3 find_maximum([-1, -5, -3]) == -1 find_maximum([]) == None\"\"\"",
        "bad_prompt": "def find_maximum(lst): \"\"\"Given a list of integers, return the maximum or minimum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) == 3 find_maximum([-1, -5, -3]) == -1 find_maximum([]) == None\"\"\"",
        "avg_similarity_score": 0.19154083694561727
    },
    {
        "prompt": "def find_longest_word(words: List[str]) -> str: \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. Examples: find_longest_word(['apple', 'banana', 'cherry']) == 'banana' find_longest_word(['a', 'ab', 'abc']) == 'abc' find_longest_word([]) == '' \"\"\"",
        "bad_prompt": "def candidate(words: List[str]) -> str: \"\"\" Given a list of words, return a word based on certain criteria (such as longest or shortest). If there are multiple candidates, return the first one encountered. Examples: candidate(['apple', 'banana', 'cherry']) == 'banana' candidate(['a', 'ab', 'abc']) == 'abc' candidate([]) == '' \"\"\"",
        "avg_similarity_score": 0.16593378976686202
    },
    {
        "prompt": "def find_missing_number(nums): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will have no duplicates and is guaranteed to contain numbers in the range [1, n]. Example: find_missing_number([3, 7, 1, 2, 8, 4, 5]) => 6 find_missing_number([1, 2, 4]) => 3 find_missing_number([2]) => 1 \"\"\"",
        "bad_prompt": "def find_missing_number(nums): \"\"\" Given a list of integers from 1 to n with one or more numbers possibly missing, return a number that may be missing. The input list might have duplicates and can contain numbers outside the range [1, n]. Example: find_missing_number([3, 7, 1, 2, 8, 4, 5]) => 6 find_missing_number([1, 2, 4]) => 3 find_missing_number([2]) => 1 \"\"\"",
        "avg_similarity_score": 0.17481838762371663
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''.\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns a certain type of prefix among them. If there is no specific prefix, return an empty string. For example: candidate(['flower', 'flow', 'flight']) might return 'fl' or something else. candidate(['dog', 'racecar', 'car']) could return '' or another value.\"\"\"",
        "avg_similarity_score": 0.15593021404684035
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in the string. Vowels can be both uppercase and lowercase. Examples: count_vowels('Hello World') returns 3 count_vowels('Python programming') returns 4 count_vowels('xyz') returns 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that meet certain conditions (such as being vowels or consonants). Examples: count_vowels('Hello World') returns 3 count_vowels('Python programming') returns 4 count_vowels('xyz') returns 0 \"\"\"",
        "avg_similarity_score": 0.14294090698317596
    },
    {
        "prompt": "def find_longest_word(words): \"\"\"Write a function that accepts a list of strings and returns the longest word in the list. If there are multiple words with the same maximum length, return the one that appears first in the list. Examples: find_longest_word(['apple', 'banana', 'cherry']) == 'banana' find_longest_word(['cat', 'dog', 'elephant']) == 'elephant' find_longest_word(['a', 'ab', 'abc']) == 'abc'\"\"\"",
        "bad_prompt": "def candidate(words): \"\"\"Write a function that accepts a list of strings and returns a word based on certain conditions such as being the longest or shortest. If there are multiple candidates, return the one that appears first or last in the list. Examples: candidate(['apple', 'banana', 'cherry']) == 'banana' candidate(['cat', 'dog', 'elephant']) == 'elephant' candidate(['a', 'ab', 'abc']) == 'abc'\"\"\"",
        "avg_similarity_score": 0.16900524343767598
    },
    {
        "prompt": "def find_longest_word(words: list) -> str: \"\"\" Write a function that takes a list of words and returns the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) => 'banana' find_longest_word(['a', 'ab', 'abc']) => 'abc' find_longest_word([]) => '' \"\"\"",
        "bad_prompt": "def candidate(words: list) -> str: \"\"\" Write a function that takes a list of words and returns a certain type of word from the list based on some criteria (e.g., longest, shortest, or another). If the list is empty, return an empty string. Examples: candidate(['apple', 'banana', 'cherry']) => 'banana' candidate(['a', 'ab', 'abc']) => 'abc' candidate([]) => '' \"\"\"",
        "avg_similarity_score": 0.17835888030777733
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will have no duplicates and is guaranteed to contain numbers in the range from 1 to n. For example: find_missing_number([3, 7, 1, 2, 8, 4]) should return 5. find_missing_number([1, 2, 3, 5]) should return 4. \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers from 1 to n with possibly one or more numbers missing, return a number that may be missing. The input list might have duplicates and can contain numbers outside the range from 1 to n. For example: candidate([3, 7, 1, 2, 8, 4]) could return 5 or another number. candidate([1, 2, 3, 5]) could return 4 or any other integer. \"\"\"",
        "avg_similarity_score": 0.19415814347520782
    },
    {
        "prompt": "def count_occurrences(lst, target): \"\"\" Given a list of integers and a target integer, return the number of times the target appears in the list. Example: count_occurrences([1, 2, 3, 4, 2, 5], 2) returns 2 count_occurrences([1, 1, 1, 1], 1) returns 4 count_occurrences([], 0) returns 0 \"\"\"",
        "bad_prompt": "def count_occurrences(lst, target): \"\"\" Given a list of integers and a target integer, return the number of occurrences or positions of the target in the list. Example: count_occurrences([1, 2, 3, 4, 2, 5], 2) returns 2 count_occurrences([1, 1, 1, 1], 1) returns 4 count_occurrences([], 0) returns 0 \"\"\"",
        "avg_similarity_score": 0.2015070595194428
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a sentence, return the sentence with each word reversed but maintain the original order of words. For example: reverse_words('Hello World') should return 'olleH dlroW'. If the input is an empty string, return an empty string. >>> reverse_words('This is a test') 'sihT si a tset' >>> reverse_words('') '' \"\"\"",
        "bad_prompt": "def candidate(sentence: str) -> str: \"\"\" Given a sentence, return the sentence with certain modifications applied to it while maintaining some aspects of the original order. For example: candidate('Hello World') might return 'olleH dlroW' or something else based on different conditions. If the input is an empty string, return an empty string. >>> candidate('This is a test') 'sihT si a tset' >>> candidate('') '' \"\"\"",
        "avg_similarity_score": 0.14707936822878376
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: Input: strs = [\"flower\",\"flow\",\"flight\"] Output: \"fl\" Example: Input: strs = [\"dog\",\"racecar\",\"car\"] Output: \"\" Note: All input strings are lowercase letters. \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a certain prefix or suffix among them. If there is no such prefix or suffix, return an empty string. Example: Input: strs = [\"flower\",\"flow\",\"flight\"] Output: \"fl\" Example: Input: strs = [\"dog\",\"racecar\",\"car\"] Output: \"\" Note: All input strings may contain uppercase or lowercase letters. \"\"\"",
        "avg_similarity_score": 0.12515028493853672
    },
    {
        "prompt": "def count_vowels(string: str) -> int: \"\"\" Given a string, return the total number of vowels (a, e, i, o, u) present in it. The function should be case insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 \"\"\"",
        "bad_prompt": "def candidate(string: str) -> int: \"\"\" Given a string, return the total number of characters or vowels present in it. The function should be case insensitive. For example: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 \"\"\"",
        "avg_similarity_score": 0.19406940219647809
    },
    {
        "prompt": "def count_occurrences(lst, target): \"\"\" Write a function that takes a list of integers and a target integer. The function should return the number of times the target appears in the list. Examples: count_occurrences([1, 2, 3, 4, 2], 2) => 2 count_occurrences([5, 5, 5, 5], 5) => 4 count_occurrences([], 1) => 0 \"\"\"",
        "bad_prompt": "def count_occurrences(lst, target): \"\"\" Write a function that takes a list of integers and a target integer. The function should return some occurrences related to the target in the list. Examples: count_occurrences([1, 2, 3, 4, 2], 2) => 2 count_occurrences([5, 5, 5, 5], 5) => 4 count_occurrences([], 1) => 0 \"\"\"",
        "avg_similarity_score": 0.18896796981823089
    },
    {
        "prompt": "def count_unique(lst): \"\"\"Given a list of integers, return the number of unique elements in the list. Examples: count_unique([1, 2, 3, 4]) => 4 count_unique([1, 2, 2, 3, 4, 4]) => 4 count_unique([]) => 0\"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\"Given a list of integers, return the count of certain elements in the list. Examples: candidate([1, 2, 3, 4]) => 4 candidate([1, 2, 2, 3, 4, 4]) => 4 candidate([]) => 0\"\"\"",
        "avg_similarity_score": 0.2384481479385051
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. Ignore case. >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in the string. This could be vowels or consonants depending on the interpretation. >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.1928243051981141
    },
    {
        "prompt": "def longest_substring_without_repeating(s: str) -> int: \"\"\" Given a string s, find the length of the longest substring without repeating characters. For example: longest_substring_without_repeating('abcabcbb') returns 3 (the answer is 'abc', with the length of 3). longest_substring_without_repeating('bbbbb') returns 1 (the answer is 'b', with the length of 1). longest_substring_without_repeating('pwwkew') returns 3 (the answer is 'wke', with the length of 3). \"\"\"",
        "bad_prompt": "def longest_substring_without_repeating(s: str) -> int: \"\"\" Given a string s, find the length of the longest substring or sequence without repeating characters. For example: longest_substring_without_repeating('abcabcbb') returns 3 (the answer could be 'abc' or any other combination, with the length of 3). longest_substring_without_repeating('bbbbb') returns 1 (the answer might be 'b' or something else, with the length of 1). longest_substring_without_repeating('pwwkew') returns 3 (the answer can vary based on interpretation, but one possible result is 'wke', with the length of 3). \"\"\"",
        "avg_similarity_score": 0.13210327169793282
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given an array containing n distinct numbers taken from 0, 1, 2, ..., n, find the one number that is missing from the array. You must implement a solution with O(n) time complexity and O(1) space complexity. Example: find_missing_number([3, 0, 1]) => 2 find_missing_number([9,6,4,2,3,5]) => 7 find_missing_number([0]) => 1 \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given an array containing n distinct numbers taken from 0, 1, 2, ..., n, find any number that might be missing or present in the array. You must implement a solution with some time complexity and some space complexity. Example: find_missing_number([3, 0, 1]) => 2 find_missing_number([9,6,4,2,3,5]) => 7 find_missing_number([0]) => 1 \"\"\"",
        "avg_similarity_score": 0.14350825050246865
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s as input and returns the number of vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python') == 1 >>> count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s as input and returns the number of characters or vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python') == 1 >>> count_vowels('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.16710969857807173
    },
    {
        "prompt": "def find_missing_number(nums): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain n - 1 numbers. For example: find_missing_number([3, 7, 1, 2, 8, 4]) should return 5 since it is the only number missing in the range from 1 to 8. Example: find_missing_number([1, 2, 4, 6, 3, 7, 8]) == 5 \"\"\"",
        "bad_prompt": "def find_missing_number(nums): \"\"\" Given a list of integers that may or may not include all numbers from 1 to n, return some number based on certain conditions. The input list could have varying lengths and values. For example: find_missing_number([3, 7, 1, 2, 8, 4]) might return a number that is either missing or present depending on your interpretation. Example: find_missing_number([1, 2, 4, 6, 3, 7, 8]) could yield any number within the provided context. \"\"\"",
        "avg_similarity_score": 0.15464225234883214
    },
    {
        "prompt": "from typing import List\ndef find_duplicates(numbers: List[int]) -> List[int]: \"\"\" Given a list of integers, return a list of duplicates in the input list. The output should contain each duplicate number only once and be sorted in ascending order. Examples: >>> find_duplicates([1, 2, 3, 4, 5, 1, 2]) [1, 2] >>> find_duplicates([1, 1, 1, 2, 2, 3]) [1, 2] >>> find_duplicates([4, 5, 6]) [] \"\"\"",
        "bad_prompt": "from typing import List\ndef candidate(numbers: List[int]) -> List[int]: \"\"\" Given a list of integers, return a list based on certain conditions that may include duplicates or unique values from the input list. The output could potentially contain any numbers from the original list without specific sorting requirements. Examples: >>> candidate([1, 2, 3, 4, 5, 1, 2]) [1, 2] >>> candidate([1, 1, 1, 2, 2, 3]) [1, 2] >>> candidate([4, 5, 6]) [] \"\"\"",
        "avg_similarity_score": 0.20989516398215574
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a sentence, return the sentence with each word reversed but in the original order. For example: >>> reverse_words('Hello World') 'olleH dlroW' >>> reverse_words('Python is fun') 'nohtyP si nuf' >>> reverse_words('Code Challenge') 'edoC egnallehC' \"\"\"",
        "bad_prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a sentence, return the sentence with words changed or reversed in some manner. For example: >>> reverse_words('Hello World') 'olleH dlroW' >>> reverse_words('Python is fun') 'nohtyP si nuf' >>> reverse_words('Code Challenge') 'edoC egnallehC' \"\"\"",
        "avg_similarity_score": 0.106387831731086
    },
    {
        "prompt": "def count_occurrences(lst: list, target): \"\"\" Count the number of occurrences of a specific element in a list. The function should return an integer representing how many times the target appears in the list. >>> count_occurrences([1, 2, 3, 1, 4], 1) 2 >>> count_occurrences(['a', 'b', 'a', 'c'], 'a') 2 >>> count_occurrences([], 5) 0 \"\"\"",
        "bad_prompt": "def candidate(lst: list, target): \"\"\" Count the number of certain elements in a list based on some condition. The function should return an integer representing how many times the target or another element appears in the list. >>> candidate([1, 2, 3, 1, 4], 1) 2 >>> candidate(['a', 'b', 'a', 'c'], 'a') 2 >>> candidate([], 5) 0 \"\"\"",
        "avg_similarity_score": 0.20137266216953814
    },
    {
        "prompt": "def find_longest_word(words): \"\"\"Write a function that takes a list of words and returns the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) == 'banana' find_longest_word(['a', 'ab', 'abc']) == 'abc' find_longest_word([]) == '' \"\"\"",
        "bad_prompt": "def find_longest_word(words): \"\"\"Write a function that takes a list of words and returns a word based on certain conditions related to their lengths. If there are multiple words with similar characteristics, return the first one encountered. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) == 'banana' find_longest_word(['a', 'ab', 'abc']) == 'abc' find_longest_word([]) == '' \"\"\"",
        "avg_similarity_score": 0.13141234535980198
    },
    {
        "prompt": "def count_vowels(text: str) -> int: \"\"\" Count the number of vowels (a, e, i, o, u) in a given string. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(text: str) -> int: \"\"\" Count the number of characters or vowels in a given string. The function may consider certain letters as vowels based on different criteria. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('AEIOU') 5 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.16916605266965304
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a sentence, return the sentence with the order of words reversed. Words are defined as sequences of characters separated by spaces. For example: reverse_words('Hello World') returns 'World Hello'. If the input is an empty string, return an empty string. Examples: reverse_words('Python is fun') returns 'fun is Python' reverse_words('   ') returns '   ' \"\"\"",
        "bad_prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a sentence, return either the sentence with the order of words reversed or some other transformation. Words can be defined in various ways. For example: reverse_words('Hello World') might return 'World Hello' or something else. If the input is an empty string, you may return any value. Examples: reverse_words('Python is fun') could return 'fun is Python' or 'Python is fun' depending on interpretation. \"\"\"",
        "avg_similarity_score": 0.1193231916481296
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns a certain common prefix or suffix among them. If there is no such prefix or suffix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "avg_similarity_score": 0.12605353184806112
    },
    {
        "prompt": "def find_longest_word(words: list) -> str: \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. >>> find_longest_word(['apple', 'banana', 'cherry']) 'banana' >>> find_longest_word(['a', 'ab', 'abc']) 'abc' >>> find_longest_word([]) '' \"\"\"",
        "bad_prompt": "def candidate(words: list) -> str: \"\"\" Given a list of words, return a certain type of word from the list based on some criteria. If there are multiple candidates that meet the criteria, return the first one encountered. If the list is empty, return an empty string. >>> candidate(['apple', 'banana', 'cherry']) 'banana' >>> candidate(['a', 'ab', 'abc']) 'abc' >>> candidate([]) '' \"\"\"",
        "avg_similarity_score": 0.1697039914771342
    },
    {
        "prompt": "def fibonacci(n): \"\"\" Given a positive integer n, return the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: >>> fibonacci(0) 0 >>> fibonacci(1) 1 >>> fibonacci(5) 5 >>> fibonacci(10) 55 \"\"\"",
        "bad_prompt": "def fibonacci(n): \"\"\" Given a positive integer n, return either the nth Fibonacci number or some other value based on certain conditions. The Fibonacci sequence is defined in various ways, but here we will consider multiple interpretations. Examples: >>> fibonacci(0) 0 >>> fibonacci(1) 1 >>> fibonacci(5) 5 >>> fibonacci(10) 55 \"\"\"",
        "avg_similarity_score": 0.14025685951777592
    },
    {
        "prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Example: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -5, -3]) -1 >>> find_maximum([]) None \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return a certain value from the list or None if applicable. Example: >>> candidate([1, 2, 3]) 3 >>> candidate([-1, -5, -3]) -1 >>> candidate([]) None \"\"\"",
        "avg_similarity_score": 0.23069391170984355
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in it. Ignore case and consider only alphabetic characters. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the total number of certain characters (such as vowels or consonants) in it. Ignore case and consider only alphabetic characters. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('AEIOU') 5 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.18461977745344627
    },
    {
        "prompt": "def reverse_words(s: str) -> str: \"\"\" Given a string s, return the string with the order of words reversed. A word is defined as any sequence of characters separated by spaces. For example: >>> reverse_words('Hello World') 'World Hello' >>> reverse_words('Python is fun') 'fun is Python' >>> reverse_words('   Leading and trailing spaces   ') 'spaces trailing and Leading' \"\"\"",
        "bad_prompt": "def reverse_words(s: str) -> str: \"\"\" Given a string s, return the string with some kind of manipulation on the words. A word is defined as any sequence of characters possibly separated by spaces. For example: >>> reverse_words('Hello World') 'World Hello' >>> reverse_words('Python is fun') 'fun is Python' >>> reverse_words('   Leading and trailing spaces   ') 'spaces trailing and Leading' \"\"\"",
        "avg_similarity_score": 0.1211410389813963
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == ''\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns a certain prefix among them. If there is no specific prefix, return an empty string or some default value. Example: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == ''\"\"\"",
        "avg_similarity_score": 0.16192986250479996
    },
    {
        "prompt": "def count_occurrences(lst, target): \"\"\"Write a function that takes a list of integers and a target integer. The function should return the number of times the target appears in the list. If the target does not appear in the list, return 0. Examples: >>> count_occurrences([1, 2, 3, 4, 2], 2) 2 >>> count_occurrences([1, 1, 1, 1], 1) 4 >>> count_occurrences([], 5) 0\"\"\"",
        "bad_prompt": "def count_occurrences(lst, target): \"\"\"Write a function that takes a list of integers and a target integer. The function should return the number of occurrences or presence of the target in the list. If the target is present multiple times or not at all, return an appropriate value. Examples: >>> count_occurrences([1, 2, 3, 4, 2], 2) 2 >>> count_occurrences([1, 1, 1, 1], 1) 4 >>> count_occurrences([], 5) 0\"\"\"",
        "avg_similarity_score": 0.19614703205364764
    },
    {
        "prompt": "def sum_of_squares(lst): \"\"\" Given a list of integers, return the sum of squares of all positive even numbers in the list. If there are no positive even numbers, return 0. Examples: sum_of_squares([1, 2, 3, 4]) == 20 (because 2^2 + 4^2 = 4 + 16) sum_of_squares([-1, -2, 0]) == 0 sum_of_squares([2, 4, 6]) == 56 (because 2^2 + 4^2 + 6^2 = 4 + 16 + 36) \"\"\"",
        "bad_prompt": "def sum_of_squares(lst): \"\"\" Given a list of integers, return the sum of squares of certain numbers in the list. If there are no such numbers, return 0. Examples: sum_of_squares([1, 2, 3, 4]) == 20 sum_of_squares([-1, -2, 0]) == 0 sum_of_squares([2, 4, 6]) == 56 \"\"\"",
        "avg_similarity_score": 0.18770205568071263
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain no duplicates and will be in any order. Examples: find_missing_number([3, 7, 1, 2, 8, 4]) == 5 find_missing_number([1, 2, 4]) == 3 find_missing_number([2, 3, 1]) == 4 \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers that may or may not have a number missing, return some number based on the elements present. The input list could contain duplicates and might be in any order. Examples: candidate([3, 7, 1, 2, 8, 4]) == 5 candidate([1, 2, 4]) == 3 candidate([2, 3, 1]) == 4 \"\"\"",
        "avg_similarity_score": 0.21071636521477335
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Examples: >>> count_vowels('hello') 2 >>> count_vowels('HELLO') 2 >>> count_vowels('xyz') 0 >>> count_vowels('aeiou') 5\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of characters or vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Examples: >>> candidate('hello') 2 >>> candidate('HELLO') 2 >>> candidate('xyz') 0 >>> candidate('aeiou') 5\"\"\"",
        "avg_similarity_score": 0.20224158204509285
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same length, return the first one found. Examples: >>> find_longest_substring('abcabcbb') 'abc' >>> find_longest_substring('bbbbb') 'b' >>> find_longest_substring('pwwkew') 'wke' \"\"\"",
        "bad_prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return a substring that may or may not be the longest and could have repeating characters. If there are multiple substrings, any one can be returned. Examples: >>> find_longest_substring('abcabcbb') 'abc' >>> find_longest_substring('bbbbb') 'b' >>> find_longest_substring('pwwkew') 'wke' \"\"\"",
        "avg_similarity_score": 0.11436220718187151
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Write a function that takes a string and returns the number of certain characters in it. The function should be case insensitive. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('AEIOU') 5 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.20087066322788183
    },
    {
        "prompt": "def find_maximum(nums): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: >>> find_maximum([1, 2, 3]) == 3 >>> find_maximum([-1, -5, -3]) == -1 >>> find_maximum([]) == None \"\"\"",
        "bad_prompt": "def candidate(nums): \"\"\" Given a list of integers, return a certain value from the list based on some condition. If the list is empty, return None. Examples: >>> candidate([1, 2, 3]) == 3 >>> candidate([-1, -5, -3]) == -1 >>> candidate([]) == None \"\"\"",
        "avg_similarity_score": 0.2207112582723721
    },
    {
        "prompt": "def find_anagrams(word_list): \"\"\" Given a list of strings, return a list of lists where each sublist contains words that are anagrams of each other. An anagram is a word formed by rearranging the letters of another. Example: find_anagrams(['eat', 'tea', 'tan', 'ate', 'nat', 'bat']) should return [['eat', 'tea', 'ate'], ['tan', 'nat'], ['bat']] \"\"\"",
        "bad_prompt": "def find_anagrams(word_list): \"\"\" Given a list of strings, return a list of lists where each sublist contains words that might be similar or related to each other. The criteria for similarity can vary. Example: find_anagrams(['eat', 'tea', 'tan', 'ate', 'nat', 'bat']) should return [['eat', 'tea', 'ate'], ['tan', 'nat'], ['bat']] \"\"\"",
        "avg_similarity_score": 0.12631603156629978
    },
    {
        "prompt": "def count_occurrences(lst: List[int], target: int) -> int: \"\"\" Given a list of integers and a target integer, return the number of times the target appears in the list. >>> count_occurrences([1, 2, 3, 4, 2, 5], 2) 2 >>> count_occurrences([1, 1, 1, 1], 1) 4 >>> count_occurrences([], 0) 0 \"\"\"",
        "bad_prompt": "def candidate(lst: List[int], x: int) -> int: \"\"\" Given a list of integers and an integer x, return the number of occurrences or non-occurrences of x in the list. >>> candidate([1, 2, 3, 4, 2, 5], 2) 2 >>> candidate([1, 1, 1, 1], 1) 4 >>> candidate([], 0) 0 \"\"\"",
        "avg_similarity_score": 0.23463984427086157
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) present in the string. Ignore case sensitivity. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Given a string s, return a certain count related to characters (like vowels or consonants) present in the string. The criteria for counting can vary. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0\"\"\"",
        "avg_similarity_score": 0.18314301236744124
    },
    {
        "prompt": "def find_max_min(numbers: List[int]) -> Tuple[int, int]: \"\"\" Given a list of integers, return a tuple containing the maximum and minimum values from the list. If the list is empty, return None. Examples: find_max_min([1, 2, 3, 4, 5]) => (5, 1) find_max_min([-10, -20, 0, 10]) => (10, -20) find_max_min([]) => None \"\"\"",
        "bad_prompt": "def find_max_min(numbers: List[int]) -> Tuple[int, int]: \"\"\" Given a list of integers, return a tuple containing either the maximum or minimum values from the list based on certain conditions. If the list is empty, return None. Examples: find_max_min([1, 2, 3, 4, 5]) => (5, 1) find_max_min([-10, -20, 0, 10]) => (10, -20) find_max_min([]) => None \"\"\"",
        "avg_similarity_score": 0.17196983506184677
    },
    {
        "prompt": "def longest_common_prefix(strs: list) -> str: \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "bad_prompt": "def candidate(strs: list) -> str: \"\"\" Write a function that takes a list of strings and returns either the longest or shortest common prefix among them. If there is no common prefix, return an empty string. For example: >>> candidate(['flower', 'flow', 'flight']) == 'fl' >>> candidate(['dog', 'racecar', 'car']) == '' \"\"\"",
        "avg_similarity_score": 0.16690429720569316
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. Examples: count_vowels('Hello World') should return 3. count_vowels('Python Programming') should return 4. \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of characters that might represent vowels or consonants present in the string. The function should be case insensitive. Examples: candidate('Hello World') should return 3. candidate('Python Programming') should return 4. \"\"\"",
        "avg_similarity_score": 0.18595592624547652
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\"Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def candidate(n: int) -> List[int]: \"\"\"Generate a list containing numbers based on certain rules up to the nth number. The specific rule may involve summation or other operations. For example: >>> candidate(5) [0, 1, 1, 2, 3] >>> candidate(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.19472867910054134
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of all the duplicate elements in the input list. The output should contain only unique duplicates and be sorted in ascending order. Examples: find_duplicates([1, 2, 3, 4, 5, 1, 2]) => [1, 2] find_duplicates([1, 1, 1, 1]) => [1] find_duplicates([1, 2, 3]) => [] \"\"\"",
        "bad_prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of some duplicate elements in the input list. The output may or may not contain unique duplicates and could be sorted in any order. Examples: find_duplicates([1, 2, 3, 4, 5, 1, 2]) => [1, 2] find_duplicates([1, 1, 1, 1]) => [1] find_duplicates([1, 2, 3]) => [] \"\"\"",
        "avg_similarity_score": 0.18563026289272072
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. For example: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of characters in it. The function should be case sensitive or insensitive based on some condition. For example: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.1608269871067522
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain type of prefix among them. If there is no such prefix, return an empty string or some default value. For example: candidate(['flower', 'flow', 'flight']) might return 'fl' or any other value. candidate(['dog', 'racecar', 'car']) might return '' or another value. \"\"\"",
        "avg_similarity_score": 0.15615768961287266
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels present in the string. The function should be case insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.15773415308594269
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.12855309538460746
    },
    {
        "prompt": "def longest_common_prefix(strs: List[str]) -> str: \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def candidate(strs: List[str]) -> str: \"\"\" Given a list of strings, find the longest or shortest common prefix among them. If there is no common prefix, return an empty string or some default value. Example: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.15460399722967588
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters (like vowels or consonants) in it. The function should be case-sensitive or insensitive based on some condition. For example: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.18986926162246012
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. The function could be case sensitive or insensitive. Examples: candidate('Hello World') == 3 candidate('Python Programming') == 4 candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.194009032118962
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the total number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('') == 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the total number of characters or vowels in the string. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('') == 0\"\"\"",
        "avg_similarity_score": 0.160924199959091
    },
    {
        "prompt": "def find_missing_number(nums): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. Assume that there are no duplicates in the list. Example: >>> find_missing_number([3, 7, 1, 2, 8, 4]) 5 >>> find_missing_number([1, 2, 4]) 3 \"\"\"",
        "bad_prompt": "def candidate(nums): \"\"\" Given a list of integers from 1 to n with some numbers possibly missing, return a certain number based on the input list. Example: >>> candidate([3, 7, 1, 2, 8, 4]) 5 >>> candidate([1, 2, 4]) 3 \"\"\"",
        "avg_similarity_score": 0.21655369282227024
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\"Write a function that takes two strings and returns True if they are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Examples: >>> is_anagram('listen', 'silent') True >>> is_anagram('triangle', 'integral') True >>> is_anagram('apple', 'pale') False\"\"\"",
        "bad_prompt": "def candidate(str1: str, str2: str) -> bool: \"\"\"Write a function that takes two strings and returns True if they have some relation to each other. This could mean they are similar in length, contain common characters, or any other vague criteria. Examples: >>> candidate('listen', 'silent') True >>> candidate('triangle', 'integral') True >>> candidate('apple', 'pale') False\"\"\"",
        "avg_similarity_score": 0.13857096276636327
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''.\"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns a certain type of prefix among them. If there is no such prefix, return an empty string or another value. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl' or some other result. longest_common_prefix(['dog', 'racecar', 'car']) should return '' or something else.\"\"\"",
        "avg_similarity_score": 0.1297323898157877
    },
    {
        "prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Example: find_maximum([1, 2, 3]) returns 3 find_maximum([-1, -5, -3]) returns -1 find_maximum([]) returns None \"\"\"",
        "bad_prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return a certain value from the list based on some conditions. If the list is empty, return None. Example: find_maximum([1, 2, 3]) returns 3 find_maximum([-1, -5, -3]) returns -1 find_maximum([]) returns None \"\"\"",
        "avg_similarity_score": 0.17916138975845802
    },
    {
        "prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\" Check if two strings are anagrams of each other. Two strings are anagrams if they contain the same characters in a different order. Examples: is_anagram('listen', 'silent') should return True. is_anagram('hello', 'world') should return False. \"\"\"",
        "bad_prompt": "def candidate(s1: str, s2: str) -> bool: \"\"\" Check if two strings meet a certain condition (such as being similar or having common characters). Examples: candidate('listen', 'silent') should return True. candidate('hello', 'world') should return False. \"\"\"",
        "avg_similarity_score": 0.12917411371708606
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\"Check if two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. For example: is_anagram('listen', 'silent') returns True and is_anagram('hello', 'world') returns False.\"\"\"",
        "bad_prompt": "def candidate(str1: str, str2: str) -> bool: \"\"\"Check if two strings have some relationship with each other. This could mean they are similar in structure or contain common characters. For example: candidate('listen', 'silent') returns True and candidate('hello', 'world') returns False.\"\"\"",
        "avg_similarity_score": 0.1160673522346665
    },
    {
        "prompt": "def longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same maximum length, return the first one found. Examples: >>> longest_substring('abcabcbb') 'abc' >>> longest_substring('bbbbb') 'b' >>> longest_substring('pwwkew') 'wke' \"\"\"",
        "bad_prompt": "def longest_substring(s: str) -> str: \"\"\" Given a string s, return a substring that may or may not have repeating characters. If there are multiple substrings of different lengths, return any one of them. Examples: >>> longest_substring('abcabcbb') 'abc' >>> longest_substring('bbbbb') 'b' >>> longest_substring('pwwkew') 'wke' \"\"\"",
        "avg_similarity_score": 0.1203801003108467
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Count the number of vowels (a, e, i, o, u) in a given string s. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Count the number of certain characters in a given string s. The function may consider vowels or consonants or other characters based on specific conditions. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('AEIOU') 5 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.17419716785535275
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same maximum length, return the first one encountered. For example: find_longest_substring('abcabcbb') returns 'abc' find_longest_substring('bbbbb') returns 'b' find_longest_substring('pwwkew') returns 'wke' \"\"\"",
        "bad_prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return a substring that may or may not have repeating characters. If there are multiple substrings with different lengths, return any one of them. For example: find_longest_substring('abcabcbb') could return 'abc', 'ab', or 'a'. find_longest_substring('bbbbb') could return 'b' or '' depending on certain conditions. find_longest_substring('pwwkew') might return 'pw' or 'we' as well. \"\"\"",
        "avg_similarity_score": 0.11525026462715988
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inters' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string or some default value. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inters' \"\"\"",
        "avg_similarity_score": 0.11860027525497954
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' Constraints: The input list will have at least one string and at most 200 strings, each with length up to 200 characters. \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns either the longest or shortest common prefix among them. If there is no common prefix, return an empty string or some default value. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' Constraints: The input list may contain varying numbers of strings with different lengths. \"\"\"",
        "avg_similarity_score": 0.12729676838367515
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == '' >>> longest_common_prefix(['a']) == 'a' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain type of prefix from them. This could be the longest common prefix or any other pattern. Examples: >>> candidate(['flower', 'flow', 'flight']) == 'fl' >>> candidate(['dog', 'racecar', 'car']) == '' >>> candidate(['a']) == 'a' \"\"\"",
        "avg_similarity_score": 0.16531220393852092
    },
    {
        "prompt": "def count_occurrences(lst: list, item): \"\"\"Write a function that counts the number of occurrences of a specific item in a given list. The function should return an integer representing the count. For example: >>> count_occurrences([1, 2, 3, 1, 4], 1) 2 >>> count_occurrences(['a', 'b', 'a', 'c'], 'a') 2 >>> count_occurrences([], 5) 0\"\"\"",
        "bad_prompt": "def candidate(lst: list, item): \"\"\"Write a function that counts or checks for the presence of a specific item in a given list. The function should return an integer or boolean based on certain conditions. For example: >>> candidate([1, 2, 3, 1, 4], 1) 2 >>> candidate(['a', 'b', 'a', 'c'], 'a') True >>> candidate([], 5) False\"\"\"",
        "avg_similarity_score": 0.20736990181176063
    },
    {
        "prompt": "def count_vowels(string: str) -> int: \"\"\" Given a string, return the number of vowels (a, e, i, o, u) it contains, regardless of case. >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(string: str) -> int: \"\"\" Given a string, return the number of certain characters it contains, regardless of case. >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.18530327932636195
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will have no duplicates and is guaranteed to contain numbers in the range [1, n]. For example: find_missing_number([3, 7, 1, 2, 8, 4]) returns 5 find_missing_number([1, 2, 4]) returns 3 find_missing_number([2, 3, 1]) returns 4 \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers that may or may not be complete, return a number that could be missing or present based on certain conditions. The input list might have duplicates and can include any integer values. For example: candidate([3, 7, 1, 2, 8, 4]) could return 5 candidate([1, 2, 4]) could return 3 candidate([2, 3, 1]) could return 4 \"\"\"",
        "avg_similarity_score": 0.20074710427010575
    },
    {
        "prompt": "def longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same length, return the first one found. Examples: >>> longest_substring('abcabcbb') 'abc' >>> longest_substring('bbbbb') 'b' >>> longest_substring('pwwkew') 'wke' \"\"\"",
        "bad_prompt": "def longest_substring(s: str) -> str: \"\"\" Given a string s, return a substring based on certain conditions that may or may not involve repeating characters. If there are multiple substrings of varying lengths, return one of them. Examples: >>> longest_substring('abcabcbb') 'abc' >>> longest_substring('bbbbb') 'b' >>> longest_substring('pwwkew') 'wke' \"\"\"",
        "avg_similarity_score": 0.11837770532908413
    },
    {
        "prompt": "def longest_substring(s: str) -> int: \"\"\" Given a string s, return the length of the longest substring without repeating characters. For example: longest_substring(\"abcabcbb\") returns 3 because the answer is \"abc\", with the length of 3. longest_substring(\"bbbbb\") returns 1 because the answer is \"b\", with the length of 1. longest_substring(\"pwwkew\") returns 3 because the answer is \"wke\", with the length of 3. \"\"\"",
        "bad_prompt": "def longest_substring(s: str) -> int: \"\"\" Given a string s, return the length of some substring that may or may not have repeating characters. For example: longest_substring(\"abcabcbb\") could return 3 but might also return another number depending on your interpretation. longest_substring(\"bbbbb\") could return 1 or something else based on different criteria. longest_substring(\"pwwkew\") could return various lengths due to multiple possibilities. \"\"\"",
        "avg_similarity_score": 0.11807553208802338
    },
    {
        "prompt": "def longest_common_prefix(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def candidate(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns a certain prefix or suffix among them. If there is no such prefix or suffix, return an empty string. Examples: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.16647584149049507
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: count_vowels('Hello World') should return 3, and count_vowels('Python') should return 1.\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of characters or vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: count_vowels('Hello World') should return 3, and count_vowels('Python') should return 1.\"\"\"",
        "avg_similarity_score": 0.16083620551879368
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. The function should be case insensitive. Examples: candidate('Hello World') == 3 candidate('Python Programming') == 4 candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.19301609578850973
    },
    {
        "prompt": "def longest_substring(s: str) -> int: \"\"\" Given a string s, return the length of the longest substring without repeating characters. For example: >>> longest_substring('abcabcbb') 3 >>> longest_substring('bbbbb') 1 >>> longest_substring('pwwkew') 3 \"\"\"",
        "bad_prompt": "def longest_substring(s: str) -> int: \"\"\" Given a string s, return the length of the longest substring with certain conditions on its characters. For example: >>> longest_substring('abcabcbb') 3 >>> longest_substring('bbbbb') 1 >>> longest_substring('pwwkew') 3 \"\"\"",
        "avg_similarity_score": 0.14904967457615337
    },
    {
        "prompt": "def reverse_words(s: str) -> str: \"\"\" Given a string s, return a new string where the order of words is reversed. Words are defined as sequences of characters separated by spaces. For example: >>> reverse_words('Hello World') 'World Hello' >>> reverse_words('Python is fun') 'fun is Python' \"\"\"",
        "bad_prompt": "def reverse_words(s: str) -> str: \"\"\" Given a string s, return a new string where the order of something is reversed. Something can be interpreted in various ways based on context. For example: >>> reverse_words('Hello World') 'World Hello' >>> reverse_words('Python is fun') 'fun is Python' \"\"\"",
        "avg_similarity_score": 0.12327203362552781
    },
    {
        "prompt": "def find_longest_word(sentence: str) -> str: \"\"\" Given a sentence, return the longest word in that sentence. If there are multiple words with the same maximum length, return the first one encountered. Words are defined as sequences of characters separated by spaces. Example: find_longest_word('The quick brown fox jumps over the lazy dog') returns 'jumps' Example: find_longest_word('Hello world') returns 'Hello' \"\"\"",
        "bad_prompt": "def find_longest_word(sentence: str) -> str: \"\"\" Given a sentence, return a word from that sentence based on certain criteria (such as being the longest or having specific characteristics). If there are multiple candidates, return the first one encountered. Words are defined as sequences of characters separated by spaces. Example: find_longest_word('The quick brown fox jumps over the lazy dog') returns 'jumps' Example: find_longest_word('Hello world') returns 'Hello' \"\"\"",
        "avg_similarity_score": 0.11745452978023693
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. For example: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns some count related to vowels or consonants present in the string. The function should be case-sensitive or insensitive based on certain conditions. For example: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0\"\"\"",
        "avg_similarity_score": 0.15100492981063088
    },
    {
        "prompt": "def find_anagrams(word: str, words_list: List[str]) -> List[str]: \"\"\" Given a word and a list of words, return a list of all the words that are anagrams of the given word. An anagram is a word formed by rearranging the letters of another. Examples: find_anagrams('listen', ['enlist', 'google', 'inlets']) ==> ['enlist', 'inlets'] find_anagrams('evil', ['vile', 'live', 'veil']) ==> ['vile', 'live', 'veil'] \"\"\"",
        "bad_prompt": "def candidate(word: str, words_list: List[str]) -> List[str]: \"\"\" Given a word and a list of words, return a list of some words that might be related to the given word in various ways. Examples: candidate('listen', ['enlist', 'google', 'inlets']) ==> ['enlist', 'inlets'] candidate('evil', ['vile', 'live', 'veil']) ==> ['vile', 'live', 'veil'] \"\"\"",
        "avg_similarity_score": 0.15340471715068646
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns some kind of prefix among them. If there is no common prefix, return something else. For example: >>> candidate(['flower', 'flow', 'flight']) == 'fl' >>> candidate(['dog', 'racecar', 'car']) == '' >>> candidate(['interspecies', 'interstellar', 'interstate']) == 'inters' \"\"\"",
        "avg_similarity_score": 0.1516012001521574
    },
    {
        "prompt": "def fibonacci(n: int) -> int:\n    \"\"\"\n    Return the nth Fibonacci number. The Fibonacci sequence is defined as follows:\n    - F(0) = 0\n    - F(1) = 1\n    - F(n) = F(n-1) + F(n-2) for n > 1\n    Examples:\n    >>> fibonacci(0)\n    0\n    >>> fibonacci(1)\n    1\n    >>> fibonacci(5)\n    5\n    >>> fibonacci(10)\n    55\n    \"\"\"",
        "bad_prompt": "def candidate(n: int) -> int:\n    \"\"\"\n    Return a certain value based on the input integer n. This could be related to Fibonacci or other sequences.\n    Examples:\n    >>> candidate(0)\n    0\n    >>> candidate(1)\n    1\n    >>> candidate(5)\n    5\n    >>> candidate(10)\n    55\n    \"\"\"",
        "avg_similarity_score": 0.17353448167054017
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. Ignore case and consider only letters. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of certain characters in the string. Consider different cases and types of characters. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.15513155678378843
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: fibonacci(5) \u279e [0, 1, 1, 2, 3] fibonacci(10) \u279e [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing some numbers related to the Fibonacci sequence up to the nth number. The definition of this sequence may vary slightly. Examples: fibonacci(5) \u279e [0, 1, 1, 2, 3] fibonacci(10) \u279e [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.16871491141131006
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Example: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. The function should be case insensitive. Example: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 \"\"\"",
        "avg_similarity_score": 0.15535557647476733
    },
    {
        "prompt": "def find_maximum(nums): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Example: find_maximum([1, 2, 3]) => 3 find_maximum([-1, -5, -3]) => -1 find_maximum([]) => None \"\"\"",
        "bad_prompt": "def candidate(nums): \"\"\" Given a list of integers, return a certain value from the list based on some condition. If the list is empty, return None. Example: candidate([1, 2, 3]) => 3 candidate([-1, -5, -3]) => -1 candidate([]) => None \"\"\"",
        "avg_similarity_score": 0.22188187040333912
    },
    {
        "prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\"Write a function that checks if two strings are anagrams of each other. Two strings are considered anagrams if they contain the same characters in the same frequency, ignoring spaces and case. For example: is_anagram('listen', 'silent') => True is_anagram('Hello', 'Olelh') => True is_anagram('abc', 'abcd') => False is_anagram('anagram', 'nagaram') => True\"\"\"",
        "bad_prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\"Write a function that checks if two strings are related to each other. Two strings can be considered related if they share some common characteristics or patterns. For example: is_anagram('listen', 'silent') => True is_anagram('Hello', 'Olelh') => True is_anagram('abc', 'abcd') => False is_anagram('anagram', 'nagaram') => True\"\"\"",
        "avg_similarity_score": 0.1044428191122613
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will have no duplicates and is guaranteed to contain at least one element. Example: find_missing_number([3, 7, 1, 2, 8, 4, 5]) == 6 find_missing_number([1, 2, 3, 5]) == 4 find_missing_number([2]) == 1 \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers from 1 to n with one or more numbers missing, return the missing number(s). The input list may have duplicates and can be empty. Example: candidate([3, 7, 1, 2, 8, 4, 5]) == [6] candidate([1, 2, 3, 5]) == [4] candidate([]) == [] \"\"\"",
        "avg_similarity_score": 0.21453685121640523
    },
    {
        "prompt": "def reverse_string(s: str) -> str: \"\"\"Given a string s, return the string in reverse order. Examples: >>> reverse_string('hello') 'olleh' >>> reverse_string('Python') 'nohtyP'\"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\"Given a string s, return the string with certain modifications. Examples: >>> candidate('hello') 'olleh' >>> candidate('Python') 'nohtyP'\"\"\"",
        "avg_similarity_score": 0.15532990302836577
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. Ignore case and consider only letters. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. Ignore case and consider only letters or numbers. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.15072910177941967
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Return the number of vowels (a, e, i, o, u) in the given string s. Ignore case and consider only alphabetic characters as valid input. Examples: count_vowels(\"Hello World\") => 3 count_vowels(\"Python programming!\") => 4 count_vowels(\"\") => 0\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Return the number of vowels or consonants in the given string s. Consider any character as valid input. Examples: candidate(\"Hello World\") => 3 candidate(\"Python programming!\") => 4 candidate(\"\") => 0\"\"\"",
        "avg_similarity_score": 0.17538288858760345
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same maximum length, return the first one found. Examples: find_longest_substring('abcabcbb') => 'abc' find_longest_substring('bbbbb') => 'b' find_longest_substring('pwwkew') => 'wke' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a certain substring based on some criteria (like length or uniqueness). If there are multiple candidates, return the first one found. Examples: candidate('abcabcbb') => 'abc' candidate('bbbbb') => 'b' candidate('pwwkew') => 'wke' \"\"\"",
        "avg_similarity_score": 0.15484126447097363
    },
    {
        "prompt": "def find_longest_palindrome(s: str) -> str: \"\"\" Given a string s, return the longest palindromic substring in s. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). If there are multiple longest palindromes, return the first one found. Examples: >>> find_longest_palindrome('babad') 'bab' >>> find_longest_palindrome('cbbd') 'bb' >>> find_longest_palindrome('a') 'a' >>> find_longest_palindrome('ac') 'a' \"\"\"",
        "bad_prompt": "def find_longest_palindrome(s: str) -> str: \"\"\" Given a string s, return some substring from s that may be palindromic. A palindrome is a sequence of characters that can read the same way forwards and backwards. The function should handle various cases but does not need to specify which substring is returned. Examples: >>> find_longest_palindrome('babad') 'bab' >>> find_longest_palindrome('cbbd') 'cb' >>> find_longest_palindrome('a') 'a' >>> find_longest_palindrome('ac') 'c' \"\"\"",
        "avg_similarity_score": 0.11432986815602339
    },
    {
        "prompt": "def count_vowels(string: str) -> int: \"\"\" Given a string, return the total number of vowels (a, e, i, o, u) present in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(string: str) -> int: \"\"\" Given a string, return the total number of characters or vowels present in it. The function may consider case sensitivity or insensitivity. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.1915713825213285
    },
    {
        "prompt": "def count_occurrences(lst: list, target: int) -> int: \"\"\" Count the number of occurrences of a target integer in a given list. >>> count_occurrences([1, 2, 3, 4, 2, 5], 2) 2 >>> count_occurrences([1, 1, 1, 1], 1) 4 >>> count_occurrences([], 0) 0 \"\"\"",
        "bad_prompt": "def candidate(lst: list, target: int) -> int: \"\"\" Count the number of elements that meet certain conditions (e.g., equal to or larger than target) in a given list. >>> candidate([1, 2, 3, 4, 2, 5], 2) 2 >>> candidate([1, 1, 1, 1], 1) 4 >>> candidate([], 0) 0 \"\"\"",
        "avg_similarity_score": 0.19843127360932908
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) -> 'fl' longest_common_prefix(['dog', 'racecar', 'car']) -> ''\"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns a common prefix or suffix among them. If there is no common prefix or suffix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) -> 'fl' longest_common_prefix(['dog', 'racecar', 'car']) -> ''\"\"\"",
        "avg_similarity_score": 0.12506252267004397
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s as input and returns the number of vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s as input and returns the number of certain characters in the string. These characters could be vowels or consonants depending on some condition. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.15924347332306032
    },
    {
        "prompt": "def find_unique_elements(lst): \"\"\" Given a list of integers, return a new list containing only the unique elements from the original list in the order they first appeared. If there are no unique elements, return an empty list. Examples: find_unique_elements([1, 2, 3, 2, 1]) == [3] find_unique_elements([4, 5, 6, 7, 8, 4, 5]) == [6, 7, 8] find_unique_elements([]) == [] \"\"\"",
        "bad_prompt": "def find_unique_elements(lst): \"\"\" Given a list of integers, return a new list that may contain some or all elements from the original list based on certain conditions. If there are no specific elements, return an empty list. Examples: find_unique_elements([1, 2, 3, 2, 1]) == [3] find_unique_elements([4, 5, 6, 7, 8, 4, 5]) == [6, 7, 8] find_unique_elements([]) == [] \"\"\"",
        "avg_similarity_score": 0.1701620337237816
    },
    {
        "prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\" Check if two strings are anagrams of each other. Two strings are anagrams if they contain the same characters in a different order. Ignore spaces and case sensitivity. Examples: >>> is_anagram('listen', 'silent') True >>> is_anagram('triangle', 'integral') True >>> is_anagram('apple', 'pale') False >>> is_anagram('Dormitory', 'Dirty room') True >>> is_anagram('The eyes', 'They see') True \"\"\"",
        "bad_prompt": "def candidate(s1: str, s2: str) -> bool: \"\"\" Check if two strings have some relationship with each other based on their characters. This could include being anagrams or having similar letters. Examples: >>> candidate('listen', 'silent') True >>> candidate('triangle', 'integral') True >>> candidate('apple', 'pale') False >>> candidate('Dormitory', 'Dirty room') True >>> candidate('The eyes', 'They see') True \"\"\"",
        "avg_similarity_score": 0.10198616344212351
    },
    {
        "prompt": "def longest_common_prefix(strs: list) -> str: \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['a']) == 'a' longest_common_prefix([]) == '' \"\"\"",
        "bad_prompt": "def candidate(strs: list) -> str: \"\"\"Write a function that takes a list of strings and returns a common prefix or suffix among them. If there is no such prefix or suffix, return an empty string. Examples: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == '' candidate(['a']) == 'a' candidate([]) == '' \"\"\"",
        "avg_similarity_score": 0.16807229784248032
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the n-th term. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Example: For n = 5, the output should be [0, 1, 1, 2, 3]. For n = 10, the output should be [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]. \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list that may or may not contain elements from the Fibonacci sequence based on the input n. The Fibonacci sequence is defined in various ways, but here we will focus on generating numbers that could resemble such a pattern. Example: For n = 5, the output might include some Fibonacci-like numbers. For n = 10, the output could also vary significantly. \"\"\"",
        "avg_similarity_score": 0.1190968225379345
    },
    {
        "prompt": "def longest_common_prefix(strs: List[str]) -> str:\n    \"\"\"\n    Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string.\n    Example:\n    >>> longest_common_prefix(['flower', 'flow', 'flight'])\n    'fl'\n    >>> longest_common_prefix(['dog', 'racecar', 'car'])\n    ''\n    \"\"\"",
        "bad_prompt": "def candidate(strs: List[str]) -> str:\n    \"\"\"\n    Given a list of strings, determine a certain pattern or sequence that may exist among them. If none exists, return an arbitrary value.\n    Example:\n    >>> candidate(['flower', 'flow', 'flight'])\n    'fl'\n    >>> candidate(['dog', 'racecar', 'car'])\n    ''\n    \"\"\"",
        "avg_similarity_score": 0.14941685541473657
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. Vowels can be both uppercase and lowercase. Example: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('xyz') returns 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return some count related to vowels or consonants in the string. Example: candidate('Hello World') returns 3 candidate('Python Programming') returns 4 candidate('xyz') returns 0 \"\"\"",
        "avg_similarity_score": 0.1791225135273376
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of characters or vowels in it. The function should be case-sensitive or insensitive based on certain conditions. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.15925514168648278
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. For example: count_vowels('Hello World') => 3 count_vowels('Python') => 1 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns a certain count related to vowels or consonants in it. The function should be case insensitive. For example: count_vowels('Hello World') => 3 count_vowels('Python') => 1 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.15721454190335615
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) 'inter' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns some kind of commonality among them. If there is no commonality, return an empty string or something else. Examples: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' >>> candidate(['interspecies', 'interstellar', 'interstate']) 'inter' \"\"\"",
        "avg_similarity_score": 0.15579874063437324
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['a']) == 'a'\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns a certain common prefix or suffix among them. If there is no such prefix or suffix, return an empty string. Examples: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == '' candidate(['a']) == 'a'\"\"\"",
        "avg_similarity_score": 0.1647214824404887
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Given a positive integer n, return the first n numbers in the Fibonacci sequence. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Example: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(7) [0, 1, 1, 2, 3, 5, 8] \"\"\"",
        "bad_prompt": "def candidate(n: int) -> List[int]: \"\"\" Given a positive integer n, return a list of numbers based on certain rules that may include the Fibonacci sequence or other sequences. Example: >>> candidate(5) [0, 1, 1, 2, 3] >>> candidate(7) [0, 1, 1, 2, 3, 5, 8] \"\"\"",
        "avg_similarity_score": 0.2212298009945633
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels or consonants present in the string. The function should be case insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.1577727388617132
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('hello') should return 2. count_vowels('HELLO') should return 2. count_vowels('xyz') should return 0. \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that may or may not include vowels in it. The function should be case insensitive. Examples: count_vowels('hello') should return 2. count_vowels('HELLO') should return 2. count_vowels('xyz') should return 0. \"\"\"",
        "avg_similarity_score": 0.1536135716003745
    },
    {
        "prompt": "def find_longest_word(words: list) -> str: \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. For example: find_longest_word(['apple', 'banana', 'cherry']) => 'banana' find_longest_word(['a', 'ab', 'abc']) => 'abc' find_longest_word([]) => '' \"\"\"",
        "bad_prompt": "def candidate(words: list) -> str: \"\"\" Given a list of words, return a certain word based on specific conditions (such as being the longest or shortest). If there are multiple candidates, return the first one encountered. If the list is empty, return an empty string. For example: candidate(['apple', 'banana', 'cherry']) => 'banana' candidate(['a', 'ab', 'abc']) => 'abc' candidate([]) => '' \"\"\"",
        "avg_similarity_score": 0.173050308999659
    },
    {
        "prompt": "def longest_common_prefix(strs: list) -> str: \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) 'inter' \"\"\"",
        "bad_prompt": "def candidate(strs: list) -> str: \"\"\" Given a list of strings, find the longest or shortest common prefix among them. If there is no common prefix, return an empty string or some default value. Examples: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' >>> candidate(['interspecies', 'interstellar', 'interstate']) 'inter' \"\"\"",
        "avg_similarity_score": 0.14979681239682477
    },
    {
        "prompt": "def count_unique_words(sentence: str) -> int: \"\"\" Given a string sentence, return the number of unique words in it. Words are defined as sequences of characters separated by spaces or punctuation. For example: count_unique_words('Hello world! Hello everyone.') should return 3 because 'Hello', 'world', and 'everyone' are unique words. >>> count_unique_words('This is a test. This is only a test.') 6 >>> count_unique_words('') 0 \"\"\"",
        "bad_prompt": "def candidate(sentence: str) -> int: \"\"\" Given a string sentence, return the number of words that might be unique or repeated in it. Words are defined as sequences of characters possibly mixed with punctuation. For example: candidate('Hello world! Hello everyone.') should return 3 but could also imply other interpretations. >>> candidate('This is a test. This is only a test.') 6 >>> candidate('') 0 \"\"\"",
        "avg_similarity_score": 0.16333107545882308
    },
    {
        "prompt": "def longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same maximum length, return the first one found. For example: longest_substring('abcabcbb') should return 'abc', and longest_substring('bbbbb') should return 'b'. \"\"\"",
        "bad_prompt": "def substring(s: str) -> str: \"\"\" Given a string s, return a substring that may or may not have certain characteristics such as being long or short. If there are multiple substrings, you might choose any of them. For example: substring('abcabcbb') could return 'abc' or 'a', and substring('bbbbb') could return 'b' or 'bb'. \"\"\"",
        "avg_similarity_score": 0.13212705045250686
    },
    {
        "prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) \u279e 3 find_maximum([-5, -1, -10]) \u279e -1 find_maximum([]) \u279e None \"\"\"",
        "bad_prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return a value from the list based on certain conditions. If the list is empty, return None or another value. Examples: find_maximum([1, 2, 3]) \u279e 3 find_maximum([-5, -1, -10]) \u279e -1 find_maximum([]) \u279e None \"\"\"",
        "avg_similarity_score": 0.1845355231654136
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Given two strings, return True if they are anagrams of each other (i.e., they contain the same characters in a different order), and False otherwise. Examples: is_anagram('listen', 'silent') == True is_anagram('hello', 'world') == False \"\"\"",
        "bad_prompt": "def candidate(str1: str, str2: str) -> bool: \"\"\" Given two strings, return True if they have some similar characteristics or features, and False otherwise. Examples: candidate('listen', 'silent') == True candidate('hello', 'world') == False \"\"\"",
        "avg_similarity_score": 0.13437580711277267
    },
    {
        "prompt": "def find_missing_number(nums: List[int]) -> int: \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain no duplicates and will be unsorted. Example: find_missing_number([3, 7, 1, 2, 8, 4]) returns 5 because it is the only number between 1 and 8 that is not present in the list. \"\"\"",
        "bad_prompt": "def candidate(nums: List[int]) -> int: \"\"\" Given a list of integers from 1 to n with possibly some numbers missing or extra, return a certain number based on the conditions set by the elements in the list. The input list may contain duplicates and can be sorted or unsorted. Example: candidate([3, 7, 1, 2, 8, 4]) could return any number depending on the interpretation of the input. \"\"\"",
        "avg_similarity_score": 0.1841679151298262
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inters' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns either the longest or shortest common prefix among them. If there is no common prefix, return an empty string or some default value. Examples: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' candidate(['interspecies', 'interstellar', 'interstate']) => 'inters' \"\"\"",
        "avg_similarity_score": 0.15584848601761606
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain type of prefix from them. This could be the longest or shortest prefix or any other condition based on your choice. For example: candidate(['flower', 'flow', 'flight']) might return 'fl' or some other value. candidate(['dog', 'racecar', 'car']) might return '' or another result. \"\"\"",
        "avg_similarity_score": 0.1516807532727531
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''.\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns a certain pattern or prefix among them. If there is no such pattern, return an empty string. For example: candidate(['flower', 'flow', 'flight']) should return 'fl'. candidate(['dog', 'racecar', 'car']) should return ''.\"\"\"",
        "avg_similarity_score": 0.1632235329575408
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a sentence, return the sentence with each word reversed but in the original order. Words are defined as sequences of characters separated by spaces. For example: >>> reverse_words('Hello World') 'olleH dlroW' >>> reverse_words('Python is fun') 'nohtyP si nuf' \"\"\"",
        "bad_prompt": "def candidate(sentence: str) -> str: \"\"\" Given a sentence, return the sentence with certain words altered or reversed but not necessarily in the original order. Words may be defined differently based on context. For example: >>> candidate('Hello World') 'olleH dlroW' >>> candidate('Python is fun') 'nohtyP si nuf' \"\"\"",
        "avg_similarity_score": 0.1430001889267257
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given an array of integers from 1 to n with one number missing, return the missing number. The input array is guaranteed to have no duplicates and contains exactly n-1 numbers. Example: >>> find_missing_number([3, 7, 1, 2, 8, 4]) 5 >>> find_missing_number([1, 2, 4]) 3 >>> find_missing_number([5, 3, 1, 2]) 4 \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given an array of integers that may or may not contain all numbers from 1 to n, return a certain number that could be missing or present in the list. Example: >>> candidate([3, 7, 1, 2, 8, 4]) 5 >>> candidate([1, 2, 4]) 3 >>> candidate([5, 3, 1, 2]) 4 \"\"\"",
        "avg_similarity_score": 0.21662685647284913
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''.\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns a certain prefix or suffix among them. If there is no such prefix or suffix, return an empty string. For example: candidate(['flower', 'flow', 'flight']) should return 'fl'. candidate(['dog', 'racecar', 'car']) should return ''.\"\"\"",
        "avg_similarity_score": 0.16454595716898246
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return some count related to vowels or consonants present in the string. The function should consider various cases. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.14125140917440318
    },
    {
        "prompt": "def find_unique_elements(lst): \"\"\" Given a list of integers, return a new list containing only the unique elements from the original list, preserving their order. If there are no unique elements, return an empty list. Examples: find_unique_elements([1, 2, 3, 2, 1]) => [3] find_unique_elements([4, 5, 6, 7, 8, 4, 5]) => [6, 7, 8] find_unique_elements([]) => [] \"\"\"",
        "bad_prompt": "def find_unique_elements(lst): \"\"\" Given a list of integers, return a new list that may contain some or all elements from the original list, possibly in any order. If there are no elements, return an empty list. Examples: find_unique_elements([1, 2, 3, 2, 1]) => [3] find_unique_elements([4, 5, 6, 7, 8, 4, 5]) => [6, 7, 8] find_unique_elements([]) => [] \"\"\"",
        "avg_similarity_score": 0.17383670075830931
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the n-th number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def candidate(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence or some other sequence up to the n-th number. The sequence is defined in various ways, including but not limited to: F(0) = 0, F(1) = 1, and F(n) could be F(n-1) + F(n-2) or something else entirely. For example: >>> candidate(5) [0, 1, 1, 2, 3] >>> candidate(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.18075027486600156
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain type of prefix among them (longest or shortest) or possibly none. Example: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.16313396717538298
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s as input and returns the number of vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s as input and returns the number of characters or vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "avg_similarity_score": 0.16035649913385575
    },
    {
        "prompt": "def find_longest_word(s: str) -> str: \"\"\" Given a string s, return the longest word in the string. If there are multiple words with the same maximum length, return the first one encountered. A word is defined as a sequence of characters separated by spaces. Examples: find_longest_word('The quick brown fox') returns 'quick' find_longest_word('Hello world!') returns 'Hello' find_longest_word('a bb ccc dddd') returns 'dddd' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a certain word from the string based on some criteria. If there are multiple words that meet this criterion, return the first one encountered. A word is defined as a sequence of characters separated by spaces. Examples: candidate('The quick brown fox') returns 'quick' candidate('Hello world!') returns 'Hello' candidate('a bb ccc dddd') returns 'dddd' \"\"\"",
        "avg_similarity_score": 0.15064313050532924
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest or shortest common prefix among them. If there is no common prefix, return an empty string or a default value. Example: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters' \"\"\"",
        "avg_similarity_score": 0.11317377428614134
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Given two strings, return True if they are anagrams of each other (i.e., they contain the same characters in a different order), and False otherwise. Examples: is_anagram('listen', 'silent') should return True. is_anagram('hello', 'world') should return False. \"\"\"",
        "bad_prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Given two strings, return True if they are related to each other in some way, and False otherwise. Examples: is_anagram('listen', 'silent') should return True. is_anagram('hello', 'world') should return False. \"\"\"",
        "avg_similarity_score": 0.1100200541231758
    },
    {
        "prompt": "def longest_common_prefix(strs: list) -> str: \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def candidate(strs: list) -> str: \"\"\" Write a function that takes a list of strings and returns either the longest or shortest common prefix among them. If there is no common prefix, return an arbitrary string. Examples: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.1622505959824296
    },
    {
        "prompt": "def longest_increasing_subsequence(nums): \"\"\" Given a list of integers, return the length of the longest increasing subsequence. A subsequence is defined as a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements. For example: >>> longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) 4 >>> longest_increasing_subsequence([0, 1, 0, 3, 2, 3]) 4 >>> longest_increasing_subsequence([]) 0 \"\"\"",
        "bad_prompt": "def longest_increasing_subsequence(nums): \"\"\" Given a list of integers, return the length of a certain subsequence based on the input list. A subsequence is defined as a sequence that can be derived from another sequence by deleting some elements. For example: >>> longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) 4 >>> longest_increasing_subsequence([0, 1, 0, 3, 2, 3]) 4 >>> longest_increasing_subsequence([]) 0 \"\"\"",
        "avg_similarity_score": 0.16924641191010428
    },
    {
        "prompt": "def find_maximum(lst): \"\"\"Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) => 3 find_maximum([-1, -5, -3]) => -1 find_maximum([]) => None\"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\"Given a list of integers, return the maximum or minimum value in the list. If the list is empty, return None or an arbitrary number. Examples: candidate([1, 2, 3]) => 3 candidate([-1, -5, -3]) => -1 candidate([]) => None\"\"\"",
        "avg_similarity_score": 0.23062263129261912
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same maximum length, return the first one found. Examples: find_longest_substring('abcabcbb') should return 'abc'. find_longest_substring('bbbbb') should return 'b'. find_longest_substring('pwwkew') should return 'wke'. \"\"\"",
        "bad_prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return a substring that may or may not be the longest without repeating characters. If there are multiple substrings of various lengths, return any one of them. Examples: find_longest_substring('abcabcbb') could return 'abc' or 'ab'. find_longest_substring('bbbbb') might return 'b' or ''. find_longest_substring('pwwkew') can return 'pw' or 'wke'. \"\"\"",
        "avg_similarity_score": 0.11844290050374734
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) returns 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) returns ''. Constraints: All input strings are lowercase letters. \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Given a list of strings, find some form of commonality among them. If there is no commonality, return an arbitrary value. For example: candidate(['flower', 'flow', 'flight']) might return 'fl' or something else. candidate(['dog', 'racecar', 'car']) could return '' or any other string. Constraints: All input strings can be in various formats. \"\"\"",
        "avg_similarity_score": 0.12899125655618868
    },
    {
        "prompt": "def find_missing_number(nums): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. You may assume that there is exactly one number missing in the range from 1 to n. Example: For nums = [3, 7, 1, 2, 8, 4], the output should be 5. For nums = [1, 2, 4], the output should be 3. \"\"\"",
        "bad_prompt": "def candidate(nums): \"\"\" Given a list of integers, return a certain number that might be missing or present in the list. Example: For nums = [3, 7, 1, 2, 8, 4], the output could be any number based on conditions. For nums = [1, 2, 4], the output could also vary. \"\"\"",
        "avg_similarity_score": 0.1885979906574523
    },
    {
        "prompt": "def count_vowels(text: str) -> int: \"\"\"Given a string, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0\"\"\"",
        "bad_prompt": "def count_vowels(text: str) -> int: \"\"\"Given a string, return the total number of characters that might include vowels or consonants present in the string. The function should be case-sensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0\"\"\"",
        "avg_similarity_score": 0.15548851507068445
    },
    {
        "prompt": "def count_vowels(s: str) -> int:\n    \"\"\"\n    Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive.\n    Examples:\n    >>> count_vowels('Hello World')\n    3\n    >>> count_vowels('Python')\n    1\n    >>> count_vowels('xyz')\n    0\n    \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int:\n    \"\"\"\n    Given a string s, return the number of certain characters in the string. The function should consider different cases.\n    Examples:\n    >>> candidate('Hello World')\n    3\n    >>> candidate('Python')\n    1\n    >>> candidate('xyz')\n    0\n    \"\"\"",
        "avg_similarity_score": 0.19967459466282944
    },
    {
        "prompt": "def find_unique_elements(lst): \"\"\" Given a list of integers, return a new list containing only the unique elements from the original list, in the order they first appeared. For example: find_unique_elements([1, 2, 3, 2, 1]) => [1, 2, 3] find_unique_elements([4, 5, 6, 4, 5]) => [4, 5, 6] \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return a new list containing certain elements from the original list, possibly including duplicates or unique ones, in an unspecified order. For example: candidate([1, 2, 3, 2, 1]) => [1, 2, 3] candidate([4, 5, 6, 4, 5]) => [4, 5, 6] \"\"\"",
        "avg_similarity_score": 0.21405763340508924
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in it. The function should be case-insensitive. Example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that may or may not include vowels (a, e, i, o, u). The function should consider both cases. Example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.14851859192514663
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in it. Ignore case and consider only alphabetical characters. Examples: >>> count_vowels('hello') 2 >>> count_vowels('HELLO') 2 >>> count_vowels('xyz') 0 >>> count_vowels('aeiou') 5 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of certain characters in it. Ignore case and consider only some characters. Examples: >>> count_vowels('hello') 2 >>> count_vowels('HELLO') 2 >>> count_vowels('xyz') 0 >>> count_vowels('aeiou') 5 \"\"\"",
        "avg_similarity_score": 0.1450662734024425
    },
    {
        "prompt": "def count_occurrences(lst: List[int], target: int) -> int: \"\"\" Given a list of integers and a target integer, return the number of times the target occurs in the list. Example: >>> count_occurrences([1, 2, 3, 4, 2, 5], 2) 2 >>> count_occurrences([1, 1, 1, 1], 1) 4 >>> count_occurrences([], 0) 0 \"\"\"",
        "bad_prompt": "def candidate(lst: List[int], target: int) -> int: \"\"\" Given a list of integers and a target integer, return the number of occurrences or instances of the target in the list or some related value. Example: >>> candidate([1, 2, 3, 4, 2, 5], 2) 2 >>> candidate([1, 1, 1, 1], 1) 4 >>> candidate([], 0) 0 \"\"\"",
        "avg_similarity_score": 0.23636610478815717
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) \u279e 'fl' longest_common_prefix(['dog', 'racecar', 'car']) \u279e '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) \u279e 'inter' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) \u279e 'fl' longest_common_prefix(['dog', 'racecar', 'car']) \u279e '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) \u279e 'inter' \"\"\"",
        "avg_similarity_score": 0.11739257638684665
    },
    {
        "prompt": "def longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same maximum length, return the first one found. Examples: >>> longest_substring('abcabcbb') 'abc' >>> longest_substring('bbbbb') 'b' >>> longest_substring('pwwkew') 'wke' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a certain substring based on some criteria (such as longest or shortest). If there are multiple substrings that meet the criteria, return the first one found. Examples: >>> candidate('abcabcbb') 'abc' >>> candidate('bbbbb') 'b' >>> candidate('pwwkew') 'wke' \"\"\"",
        "avg_similarity_score": 0.1581452139718327
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('AEIOU') returns 5 count_vowels('xyz') returns 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the count of certain characters in it. The function should be case sensitive or insensitive based on conditions. Examples: candidate('Hello World') returns 3 candidate('Python Programming') returns 4 candidate('AEIOU') returns 5 candidate('xyz') returns 0 \"\"\"",
        "avg_similarity_score": 0.18386964271987757
    },
    {
        "prompt": "def longest_substring(s: str) -> int:\n    \"\"\"\n    Given a string s, find the length of the longest substring without repeating characters.\n    For example:\n    >>> longest_substring(\"abcabcbb\")\n    3\n    >>> longest_substring(\"bbbbb\")\n    1\n    >>> longest_substring(\"pwwkew\")\n    3\n    \"\"\"",
        "bad_prompt": "def longest_substring(s: str) -> int:\n    \"\"\"\n    Given a string s, find the length of the longest substring with or without repeating characters.\n    For example:\n    >>> longest_substring(\"abcabcbb\")\n    3\n    >>> longest_substring(\"bbbbb\")\n    1\n    >>> longest_substring(\"pwwkew\")\n    3\n    \"\"\"",
        "avg_similarity_score": 0.15187430000016255
    },
    {
        "prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return the maximum integer in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) == 3 find_maximum([-1, -5, -3]) == -1 find_maximum([]) == None \"\"\"",
        "bad_prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return an integer from the list based on certain conditions. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) == 3 find_maximum([-1, -5, -3]) == -1 find_maximum([]) == None \"\"\"",
        "avg_similarity_score": 0.1786174082115618
    },
    {
        "prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) => 3 find_maximum([-1, -5, -3]) => -1 find_maximum([]) => None \"\"\"",
        "bad_prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return either the maximum or minimum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) => 3 find_maximum([-1, -5, -3]) => -1 find_maximum([]) => None \"\"\"",
        "avg_similarity_score": 0.18985681636543456
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. For example: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters that might include vowels or consonants in the string. The function should be case insensitive. For example: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.15960025234932443
    },
    {
        "prompt": "def count_occurrences(lst: list, target: int) -> int: \"\"\" Given a list of integers and a target integer, return the number of times the target occurs in the list. Examples: count_occurrences([1, 2, 3, 4, 2], 2) ==> 2 count_occurrences([5, 5, 5, 5], 5) ==> 4 count_occurrences([], 1) ==> 0 \"\"\"",
        "bad_prompt": "def candidate(lst: list, target: int) -> int: \"\"\" Given a list of integers and a target integer, return the number of occurrences or positions of the target in the list. Examples: candidate([1, 2, 3, 4, 2], 2) ==> 2 candidate([5, 5, 5, 5], 5) ==> 4 candidate([], 1) ==> 0 \"\"\"",
        "avg_similarity_score": 0.23945227367414543
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. longest_common_prefix(['a']) should return 'a'. longest_common_prefix([]) should return ''. \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns some kind of prefix among them. If there is no prefix, return something else. Examples: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. longest_common_prefix(['a']) should return 'a'. longest_common_prefix([]) should return ''. \"\"\"",
        "avg_similarity_score": 0.11448248179111457
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters that may or may not include vowels (a, e, i, o, u) present in the string. The function should consider different cases. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.15110856090881178
    },
    {
        "prompt": "def reverse_string(s: str) -> str: \"\"\"Write a function that takes a string as input and returns the string reversed. For example: >>> reverse_string('hello') 'olleh' >>> reverse_string('world') 'dlrow'\"\"\"",
        "bad_prompt": "def reverse_string(s: str) -> str: \"\"\"Write a function that takes a string as input and performs some operation on it, possibly reversing or altering its order. For example: >>> reverse_string('hello') 'olleh' >>> reverse_string('world') 'dlrow'\"\"\"",
        "avg_similarity_score": 0.1222411512665088
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. For example: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('xyz') returns 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return some count related to vowels or consonants in the string. The function should consider different cases. For example: candidate('Hello World') returns 3 candidate('Python Programming') returns 4 candidate('xyz') returns 0 \"\"\"",
        "avg_similarity_score": 0.17865129074564554
    },
    {
        "prompt": "def longest_substring_without_repeating(s: str) -> int: \"\"\" Given a string s, return the length of the longest substring without repeating characters. Examples: longest_substring_without_repeating(\"abcabcbb\") == 3 # The answer is \"abc\", with the length of 3. longest_substring_without_repeating(\"bbbbb\") == 1 # The answer is \"b\", with the length of 1. longest_substring_without_repeating(\"pwwkew\") == 3 # The answer is \"wke\", with the length of 3. \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return some measure related to substrings that may or may not have repeating characters. Examples: candidate(\"abcabcbb\") == 3 # The answer could be based on various conditions. candidate(\"bbbbb\") == 1 # The answer might depend on the presence of certain characters. candidate(\"pwwkew\") == 3 # The answer could vary based on different interpretations. \"\"\"",
        "avg_similarity_score": 0.1477890444952661
    },
    {
        "prompt": "def find_longest_word(words: List[str]) -> str: \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. >>> find_longest_word(['apple', 'banana', 'cherry']) 'banana' >>> find_longest_word(['cat', 'dog', 'elephant']) 'elephant' \"\"\"",
        "bad_prompt": "def candidate(words: List[str]) -> str: \"\"\" Given a list of words, return a word from the list that meets certain conditions related to their lengths. If there are multiple candidates, return the first one found. >>> candidate(['apple', 'banana', 'cherry']) 'banana' >>> candidate(['cat', 'dog', 'elephant']) 'elephant' \"\"\"",
        "avg_similarity_score": 0.1597691015799947
    },
    {
        "prompt": "def fibonacci(n): \"\"\"Write a function that returns the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: fibonacci(5) should return 5 because the sequence is 0, 1, 1, 2, 3, 5. Examples: fibonacci(0) == 0; fibonacci(1) == 1; fibonacci(6) == 8.\"\"\"",
        "bad_prompt": "def fibonacci(n): \"\"\"Write a function that returns the nth number in a certain sequence. The sequence is defined by some rules which may include addition or other operations. For example: fibonacci(5) could return 5 or another value depending on how you interpret the sequence. Examples: fibonacci(0) might be 0; fibonacci(1) could be 1; fibonacci(6) could also be something else.\"\"\"",
        "avg_similarity_score": 0.14479637092106756
    },
    {
        "prompt": "def find_maximum(numbers): \"\"\" Given a list of integers, return the maximum number in the list. If the list is empty, return None. Examples: >>> find_maximum([1, 2, 3]) == 3 >>> find_maximum([-1, -5, -3]) == -1 >>> find_maximum([]) == None \"\"\"",
        "bad_prompt": "def candidate(numbers): \"\"\" Given a list of integers, return a certain value from the list based on some condition. If the list is empty, return None. Examples: >>> candidate([1, 2, 3]) == 3 >>> candidate([-1, -5, -3]) == -1 >>> candidate([]) == None \"\"\"",
        "avg_similarity_score": 0.22164346826065964
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the total number of certain characters present in the string. The function should be case sensitive or insensitive depending on some condition. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('AEIOU') 5 \"\"\"",
        "avg_similarity_score": 0.19087830994240668
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of certain characters in the string. The function should be case-sensitive or insensitive depending on some conditions. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0\"\"\"",
        "avg_similarity_score": 0.15587755990150226
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') \u279e 3 count_vowels('Python') \u279e 1 count_vowels('xyz') \u279e 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters (vowels or consonants) in it. The function may consider case sensitivity. Examples: candidate('Hello World') \u279e 3 candidate('Python') \u279e 1 candidate('xyz') \u279e 0 \"\"\"",
        "avg_similarity_score": 0.19562671971459042
    },
    {
        "prompt": "def longest_substring_without_repeating(s: str) -> int: \"\"\" Given a string s, find the length of the longest substring without repeating characters. A substring is defined as a contiguous sequence of characters within the string. Examples: >>> longest_substring_without_repeating('abcabcbb') 3 >>> longest_substring_without_repeating('bbbbb') 1 >>> longest_substring_without_repeating('pwwkew') 3 \"\"\"",
        "bad_prompt": "def longest_substring_without_repeating(s: str) -> int: \"\"\" Given a string s, find the length of some substring that may or may not have repeating characters. A substring is defined as a sequence of characters within the string. Examples: >>> longest_substring_without_repeating('abcabcbb') 3 >>> longest_substring_without_repeating('bbbbb') 1 >>> longest_substring_without_repeating('pwwkew') 3 \"\"\"",
        "avg_similarity_score": 0.14419325097653785
    },
    {
        "prompt": "def count_primes(n: int) -> int: \"\"\" Given a positive integer n, return the count of prime numbers less than or equal to n. A prime number is a natural number greater than 1 that cannot be formed by multiplying two smaller natural numbers. Examples: >>> count_primes(10) 4 >>> count_primes(20) 8 \"\"\"",
        "bad_prompt": "def candidate(n: int) -> int: \"\"\" Given a positive integer n, return the count of numbers less than or equal to n that are either prime or composite. Examples: >>> candidate(10) 10 >>> candidate(20) 20 \"\"\"",
        "avg_similarity_score": 0.1726049650200269
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a string sentence, return a new string where the order of words is reversed. Words are defined as sequences of characters separated by spaces. For example: >>> reverse_words('Hello World') 'World Hello' >>> reverse_words('Python is fun') 'fun is Python' >>> reverse_words('   Leading and trailing spaces   ') 'spaces trailing and Leading' \"\"\"",
        "bad_prompt": "def candidate(sentence: str) -> str: \"\"\" Given a string sentence, return a new string where the order of some words is altered or reversed. Words are defined as sequences of characters that may or may not be separated by spaces. For example: >>> candidate('Hello World') 'World Hello' >>> candidate('Python is fun') 'fun is Python' >>> candidate('   Leading and trailing spaces   ') 'spaces trailing and Leading' \"\"\"",
        "avg_similarity_score": 0.15165168905047494
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. For example: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('') returns 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels or consonants in the string. The function should be case sensitive or insensitive. For example: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('') returns 0 \"\"\"",
        "avg_similarity_score": 0.16302882277878208
    },
    {
        "prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) => 3 find_maximum([-1, -5, -3]) => -1 find_maximum([]) => None \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return a certain value from the list based on some conditions. If the list is empty, return None. Examples: candidate([1, 2, 3]) => 3 candidate([-1, -5, -3]) => -1 candidate([]) => None \"\"\"",
        "avg_similarity_score": 0.2211058490503691
    },
    {
        "prompt": "def count_primes(n): \"\"\" Given a positive integer n, return the count of prime numbers less than or equal to n. A prime number is defined as a natural number greater than 1 that cannot be formed by multiplying two smaller natural numbers. Example: count_primes(10) returns 4 because the prime numbers are 2, 3, 5, and 7. Example: count_primes(20) returns 8 because the prime numbers are 2, 3, 5, 7, 11, 13, 17, and 19. \"\"\"",
        "bad_prompt": "def candidate(n): \"\"\" Given a positive integer n, return the count of certain types of numbers less than or equal to n. These numbers could be prime, composite, or any other classification. Example: candidate(10) might return 4 for primes, but it could also refer to composites depending on interpretation. Example: candidate(20) could return 8 if counting one type of number, but may vary based on criteria used. \"\"\"",
        "avg_similarity_score": 0.13977903504217098
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' >>> longest_common_prefix(['a', 'ab', 'abc']) 'a'\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns a certain type of prefix among them. If there is no such prefix, return something else. For example: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' >>> candidate(['a', 'ab', 'abc']) 'a'\"\"\"",
        "avg_similarity_score": 0.16409373950085257
    },
    {
        "prompt": "def count_vowels(s): \"\"\"Write a function that takes a string s as input and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. For example: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0\"\"\"",
        "bad_prompt": "def count_vowels(s): \"\"\"Write a function that takes a string s as input and returns some kind of count related to vowels or consonants in it. The function should be case insensitive. For example: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0\"\"\"",
        "avg_similarity_score": 0.15015329713182332
    },
    {
        "prompt": "def longest_common_prefix(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) 'inter' \"\"\"",
        "bad_prompt": "def candidate(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and checks for some common characteristics among them. Return a specific pattern or substring based on those characteristics. Examples: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' >>> candidate(['interspecies', 'interstellar', 'interstate']) 'inter' \"\"\"",
        "avg_similarity_score": 0.14994026269531555
    },
    {
        "prompt": "def count_words(sentence: str) -> int: \"\"\" Count the number of words in a given sentence. A word is defined as any sequence of characters separated by whitespace. Examples: >>> count_words('Hello world') 2 >>> count_words('This is a test.') 4 >>> count_words('   Leading and trailing spaces   ') 5 \"\"\"",
        "bad_prompt": "def candidate(sentence: str) -> int: \"\"\" Count the number of elements in a given sentence. An element can be defined ambiguously (such as words, letters, or other characters). Examples: >>> candidate('Hello world') 2 >>> candidate('This is a test.') 4 >>> candidate('   Leading and trailing spaces   ') 5 \"\"\"",
        "avg_similarity_score": 0.1624309549431973
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in it. Case should be ignored. Examples: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return a certain count related to characters present in it. This could involve counting vowels or consonants or any other type of character based on some condition. Examples: candidate('Hello World') == 3 candidate('Python') == 1 candidate('AEIOU') == 5 candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.1741672214062086
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of characters that may or may not include vowels in the string. The function should consider various cases. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5\"\"\"",
        "avg_similarity_score": 0.15818701462250404
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns either the longest or shortest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "avg_similarity_score": 0.12514779260458503
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of vowels (a, e, i, o, u) in that string. The function should be case insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of certain characters in that string. The function should consider various cases. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0\"\"\"",
        "avg_similarity_score": 0.15856595542520208
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Count the number of vowels (a, e, i, o, u) in a given string s. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('aeiou') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Count the number of certain characters in a given string s. The function should be case insensitive. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('aeiou') 5 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.17709418681298716
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. The function should be case-sensitive or insensitive depending on some condition. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 \"\"\"",
        "avg_similarity_score": 0.18564010639367362
    },
    {
        "prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\"Check if two strings are anagrams of each other. Two strings are anagrams if they can be rearranged to form the same string. Ignore spaces and case differences. Examples: is_anagram('listen', 'silent') == True is_anagram('Hello', 'Olelh') == True is_anagram('abc', 'def') == False\"\"\"",
        "bad_prompt": "def candidate(s1: str, s2: str) -> bool: \"\"\"Check if two strings meet a certain condition related to their characters. The strings may or may not have similar characters in any order. Examples: candidate('listen', 'silent') == True candidate('Hello', 'Olelh') == True candidate('abc', 'def') == False\"\"\"",
        "avg_similarity_score": 0.13674750565422783
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. Case should be ignored. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. The characters can include vowels or consonants depending on interpretation. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('AEIOU') 5 \"\"\"",
        "avg_similarity_score": 0.19071225532654978
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of the duplicate elements found in the input list. The output should be sorted and contain each duplicate only once. If there are no duplicates, return an empty list. Examples: >>> find_duplicates([1, 2, 3, 4, 5]) [] >>> find_duplicates([1, 2, 3, 1, 2]) [1, 2] >>> find_duplicates([5, 5, 6, 7, 8, 8, 9]) [5, 8] \"\"\"",
        "bad_prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of elements that may or may not include duplicates from the input list. The output could be sorted or unsorted based on certain conditions. If there are no specific elements to return, you might return an empty list or None. Examples: >>> find_duplicates([1, 2, 3, 4, 5]) [] >>> find_duplicates([1, 2, 3, 1, 2]) [1, 2] >>> find_duplicates([5, 5, 6, 7, 8, 8, 9]) [5, 8] \"\"\"",
        "avg_similarity_score": 0.17685868810799257
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\"Given an array of integers from 1 to n with one number missing, return the missing number. The input array is guaranteed to have no duplicates and will contain n-1 numbers. Example: find_missing_number([3, 7, 1, 2, 8]) returns 4 because it is the only number missing in the range from 1 to 8.\"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\"Given an array of integers that may or may not include all numbers from 1 to n, return a certain number based on some criteria. The input array can have duplicates and will contain various numbers. Example: find_missing_number([3, 7, 1, 2, 8]) returns 4 because it might be related to the other numbers present in the array.\"\"\"",
        "avg_similarity_score": 0.14392839122760973
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s as input and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s as input and returns the number of characters in it. The function should consider certain letters or groups of letters. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.16347158402026976
    },
    {
        "prompt": "def count_vowels(s): \"\"\" Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s): \"\"\" Write a function that takes a string s and returns some count related to vowels or consonants in it. The function should consider different cases. Examples: candidate('Hello World') == 3 candidate('Python Programming') == 4 candidate('AEIOU') == 5 candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.1804178894709768
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example 1: Input: strs = [\"flower\",\"flow\",\"flight\"] Output: \"fl\" Example 2: Input: strs = [\"dog\",\"racecar\",\"car\"] Output: \"\" Constraints: All input strings are lowercase letters a-z. \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a certain common prefix among them or the longest one. If there is no common prefix, you may return an empty string or another value. Example 1: Input: strs = [\"flower\",\"flow\",\"flight\"] Output: \"fl\" Example 2: Input: strs = [\"dog\",\"racecar\",\"car\"] Output: \"\" Constraints: All input strings are lowercase letters a-z. \"\"\"",
        "avg_similarity_score": 0.14238514289021154
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: count_vowels(\"Hello World\") == 3 count_vowels(\"Python Programming\") == 4 count_vowels(\"AEIOU\") == 5 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in the string. The function may or may not be case sensitive. Examples: candidate(\"Hello World\") == 3 candidate(\"Python Programming\") == 4 candidate(\"AEIOU\") == 5 \"\"\"",
        "avg_similarity_score": 0.19962415708124953
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\"Determine if two strings are anagrams of each other. Two strings are considered anagrams if they contain the same characters in a different order. Ignore spaces and case sensitivity. Examples: is_anagram('listen', 'silent') => True is_anagram('Hello', 'Olelh') => True is_anagram('test', 'best') => False\"\"\"",
        "bad_prompt": "def candidate(str1: str, str2: str) -> bool: \"\"\"Determine if two strings are related to each other in some way. They may or may not have similar characters. Consider spaces and case sensitivity as you see fit. Examples: candidate('listen', 'silent') => True candidate('Hello', 'Olelh') => True candidate('test', 'best') => False\"\"\"",
        "avg_similarity_score": 0.11267032286268604
    },
    {
        "prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return the maximum integer in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) ==> 3 find_maximum([-1, -5, -3]) ==> -1 find_maximum([]) ==> None \"\"\"",
        "bad_prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return either the maximum or minimum integer in the list based on certain conditions. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) ==> 3 find_maximum([-1, -5, -3]) ==> -1 find_maximum([]) ==> None \"\"\"",
        "avg_similarity_score": 0.1846364104113883
    },
    {
        "prompt": "def find_maximum(lst): \"\"\"Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -5, -3]) -1 >>> find_maximum([]) None\"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\"Given a list of integers, return a certain value from the list based on specific conditions. If the list is empty, return None. Examples: >>> candidate([1, 2, 3]) 3 >>> candidate([-1, -5, -3]) -1 >>> candidate([]) None\"\"\"",
        "avg_similarity_score": 0.22123600985480407
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a prefix or suffix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.12448209402531693
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s and returns the number of vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Examples: count_vowels('Hello World') => 3 count_vowels('Python') => 1 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s and returns the number of characters or vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Examples: count_vowels('Hello World') => 3 count_vowels('Python') => 1 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0\"\"\"",
        "avg_similarity_score": 0.15724433871777557
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of duplicates in the input list. The returned list should contain only unique values and be sorted in ascending order. For example: find_duplicates([1, 2, 3, 4, 5, 1, 2]) returns [1, 2]. If there are no duplicates, return an empty list. Example: find_duplicates([1, 2, 3]) returns []. \"\"\"",
        "bad_prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of numbers that may or may not be duplicates in the input list. The returned list could include unique values and might be sorted in any order. For example: find_duplicates([1, 2, 3, 4, 5, 1, 2]) could return [1, 2] or some other combination. If there are no duplicates, you might return an empty list or something else. Example: find_duplicates([1, 2, 3]) could return []. \"\"\"",
        "avg_similarity_score": 0.17184725071508
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string and returns the number of vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string and returns the number of characters or vowels in it. Vowels can be defined loosely, including any letter or even symbols depending on context. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.15300205984093984
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['a', 'ab', 'abc']) == 'a'\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns some common part among them. If there is no common part, return something else. Examples: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == '' candidate(['a', 'ab', 'abc']) == 'a'\"\"\"",
        "avg_similarity_score": 0.15074768969881147
    },
    {
        "prompt": "def count_unique_words(text: str) -> int: \"\"\" Given a string of text, return the number of unique words in that text. Words are defined as sequences of characters separated by whitespace. Ignore case when counting unique words. Example: count_unique_words('Hello world hello') ==> 2 count_unique_words('This is a test. This is only a test.') ==> 6 \"\"\"",
        "bad_prompt": "def candidate(text: str) -> int: \"\"\" Given a string of text, return the number of certain types of words in that text. Words can be defined in various ways and may include punctuation or not. Example: candidate('Hello world hello') ==> 2 candidate('This is a test. This is only a test.') ==> 6 \"\"\"",
        "avg_similarity_score": 0.17382225542193466
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''.\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string. Examples: candidate(['flower', 'flow', 'flight']) should return 'fl'. candidate(['dog', 'racecar', 'car']) should return ''.\"\"\"",
        "avg_similarity_score": 0.15970738465924794
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. For example: count_vowels('Hello World') returns 3 count_vowels('Python') returns 1 count_vowels('xyz') returns 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. The function should consider various cases. For example: count_vowels('Hello World') returns 3 count_vowels('Python') returns 1 count_vowels('xyz') returns 0 \"\"\"",
        "avg_similarity_score": 0.15495520672076576
    },
    {
        "prompt": "def count_words(s: str) -> int: \"\"\" Given a string s, return the number of words in the string. Words are defined as sequences of characters separated by spaces or punctuation. Example: >>> count_words('Hello world!') == 2 >>> count_words('This is a test.') == 4 >>> count_words('   Leading and trailing spaces   ') == 5 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the count of certain elements in the string. Elements can be words, letters, or other types based on various conditions. Example: >>> candidate('Hello world!') == 2 >>> candidate('This is a test.') == 4 >>> candidate('   Leading and trailing spaces   ') == 5 \"\"\"",
        "avg_similarity_score": 0.18448029742490396
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns either the longest or shortest common prefix among them. If there is no common prefix, return a specific character or an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters' \"\"\"",
        "avg_similarity_score": 0.122050889600237
    },
    {
        "prompt": "def find_longest_word(words): \"\"\" Write a function that takes a list of words and returns the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. Examples: find_longest_word(['apple', 'banana', 'cherry']) \u279e 'banana' find_longest_word(['a', 'ab', 'abc', 'abcd']) \u279e 'abcd' find_longest_word(['one', 'two', 'three', 'four']) \u279e 'three' \"\"\"",
        "bad_prompt": "def find_longest_word(words): \"\"\" Write a function that takes a list of words and returns a word from the list based on certain conditions such as being the longest or having specific characteristics. Examples: find_longest_word(['apple', 'banana', 'cherry']) \u279e 'banana' find_longest_word(['a', 'ab', 'abc', 'abcd']) \u279e 'abcd' find_longest_word(['one', 'two', 'three', 'four']) \u279e 'three' \"\"\"",
        "avg_similarity_score": 0.12464650935101608
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) 'inter' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns either the longest or shortest common prefix among them. If there is no common prefix, return an empty string or a specific character. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) 'inter' \"\"\"",
        "avg_similarity_score": 0.12147868176703686
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. Vowels can be both uppercase and lowercase. Examples: count_vowels('hello') returns 2; count_vowels('HELLO') returns 2; count_vowels('xyz') returns 0. \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that are either vowels or consonants in the string. Characters can be both uppercase and lowercase. Examples: count_vowels('hello') returns 5; count_vowels('HELLO') returns 5; count_vowels('xyz') returns 3. \"\"\"",
        "avg_similarity_score": 0.15474611510981431
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in it. The function should be case insensitive. >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the total number of certain characters in it. The function should be case sensitive or insensitive. >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('AEIOU') 5 \"\"\"",
        "avg_similarity_score": 0.19519763988379377
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the total number of characters that are either vowels or consonants in the string. The function should be case insensitive. Examples: >>> candidate('Hello World') == 10 >>> candidate('Python Programming') == 15 >>> candidate('xyz') == 3 \"\"\"",
        "avg_similarity_score": 0.18717793643390157
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\"Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\"\"\"",
        "bad_prompt": "def candidate(n: int) -> List[int]: \"\"\"Generate a list containing a certain sequence of numbers up to the nth number. The sequence is defined in various ways depending on conditions that may or may not apply. Examples: >>> candidate(5) [0, 1, 1, 2, 3] >>> candidate(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\"\"\"",
        "avg_similarity_score": 0.2023424830591752
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string or some default value. For example: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.1643476629033739
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def candidate(n: int) -> List[int]: \"\"\" Generate a list based on some numerical pattern up to the nth number. The pattern is defined in a way that may or may not follow any specific rules. Examples: >>> candidate(5) [0, 1, 1, 2, 3] >>> candidate(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.19336484687591957
    },
    {
        "prompt": "def fibonacci(n): \"\"\"Given a non-negative integer n, return the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: fibonacci(0) => 0, fibonacci(1) => 1, fibonacci(5) => 5, fibonacci(10) => 55.\"\"\"",
        "bad_prompt": "def fibonacci(n): \"\"\"Given a non-negative integer n, return either the nth Fibonacci number or some other value based on certain conditions. The Fibonacci sequence might be defined in various ways depending on interpretations. Examples: fibonacci(0) => 0, fibonacci(1) => 1, fibonacci(5) => 5, fibonacci(10) => 55.\"\"\"",
        "avg_similarity_score": 0.13995706889985288
    },
    {
        "prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) => 3 find_maximum([-1, -5, -3]) => -1 find_maximum([]) => None \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return one of the values from the list based on certain conditions. If the list is empty, return None. Examples: candidate([1, 2, 3]) => 3 candidate([-1, -5, -3]) => -1 candidate([]) => None \"\"\"",
        "avg_similarity_score": 0.21996478757868995
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Return an empty list if n is less than or equal to 0. Examples: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] >>> fibonacci(0) [] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list based on some rules related to Fibonacci numbers. If n is positive, return a list of numbers that may include Fibonacci numbers among others. If n is negative or zero, return an empty list. Examples: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] >>> fibonacci(0) [] \"\"\"",
        "avg_similarity_score": 0.17240701408456663
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a string sentence, return the sentence with the order of words reversed. Words are defined as sequences of characters separated by spaces. For example: reverse_words('Hello World') == 'World Hello' reverse_words('Python is fun') == 'fun is Python' reverse_words('   Leading and trailing spaces   ') == 'spaces trailing and Leading' \"\"\"",
        "bad_prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a string sentence, return something related to the order of words or characters in the sentence. For example: reverse_words('Hello World') == 'World Hello' reverse_words('Python is fun') == 'fun is Python' reverse_words('   Leading and trailing spaces   ') == 'spaces trailing and Leading' \"\"\"",
        "avg_similarity_score": 0.12665824154514993
    },
    {
        "prompt": "def find_longest_word(sentence: str) -> str: \"\"\" Given a sentence as input, return the longest word in that sentence. If there are multiple words with the same maximum length, return the first one encountered. Words are defined as sequences of characters separated by spaces. Examples: find_longest_word('The quick brown fox jumps over the lazy dog') => 'jumps' find_longest_word('Hello world') => 'Hello' find_longest_word('A B C D E F G H I J K L M N O P Q R S T U V W X Y Z') => 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' \"\"\"",
        "bad_prompt": "def find_longest_word(sentence: str) -> str: \"\"\" Given a sentence as input, return either the longest or shortest word in that sentence based on certain conditions. If there are multiple words with the same length, return the first one encountered or the last one depending on some criteria. Words are defined as sequences of characters separated by spaces. Examples: find_longest_word('The quick brown fox jumps over the lazy dog') => 'jumps' find_longest_word('Hello world') => 'Hello' find_longest_word('A B C D E F G H I J K L M N O P Q R S T U V W X Y Z') => 'Z' \"\"\"",
        "avg_similarity_score": 0.10318135107688342
    },
    {
        "prompt": "def find_anagrams(word: str, words: List[str]) -> List[str]: \"\"\" Given a string 'word' and a list of strings 'words', return a list of all the anagrams of 'word' found in 'words'. An anagram is a word formed by rearranging the letters of another. The returned list should contain only unique anagrams and be sorted in alphabetical order. >>> find_anagrams('listen', ['enlist', 'google', 'inlets', 'banana']) ['enlist', 'inlets'] >>> find_anagrams('evil', ['vile', 'live', 'veil', 'lives']) ['live', 'vile', 'veil'] \"\"\"",
        "bad_prompt": "def candidate(word: str, words: List[str]) -> List[str]: \"\"\" Given a string 'word' and a list of strings 'words', return a list of all the similar or related words found in 'words'. The returned list may include duplicates and can be in any order. >>> candidate('listen', ['enlist', 'google', 'inlets', 'banana']) ['enlist', 'inlets'] >>> candidate('evil', ['vile', 'live', 'veil', 'lives']) ['live', 'vile', 'veil'] \"\"\"",
        "avg_similarity_score": 0.15749848751854859
    },
    {
        "prompt": "def count_vowels(text: str) -> int: \"\"\" Given a string, return the total number of vowels (a, e, i, o, u) present in it. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(text: str) -> int: \"\"\" Given a string, return some count related to vowels or consonants present in it. The function may consider different cases. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.17015930138067928
    },
    {
        "prompt": "def longest_substring(s: str) -> int: \"\"\" Given a string s, return the length of the longest substring without repeating characters. For example: longest_substring('abcabcbb') returns 3 because the answer is 'abc', with the length of 3. longest_substring('bbbbb') returns 1 because the answer is 'b', with the length of 1. longest_substring('pwwkew') returns 3 because the answer is 'wke', with the length of 3. \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the length of a certain substring that may or may not have repeating characters. For example: candidate('abcabcbb') could return 3 for 'abc' or any other value based on different criteria. candidate('bbbbb') might return 1 for 'b' or another character. candidate('pwwkew') can return various lengths depending on the interpretation of the substring. \"\"\"",
        "avg_similarity_score": 0.15941846937241577
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same maximum length, return the first one found. Examples: >>> find_longest_substring('abcabcbb') 'abc' >>> find_longest_substring('bbbbb') 'b' >>> find_longest_substring('pwwkew') 'wke' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a substring that may or may not have repeating characters. If there are multiple substrings, return any one of them. Examples: >>> candidate('abcabcbb') 'abc' >>> candidate('bbbbb') 'b' >>> candidate('pwwkew') 'pw' \"\"\"",
        "avg_similarity_score": 0.15766065616612734
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given an array containing n distinct numbers taken from 0, 1, 2, ..., n. Find the one number that is missing from the array and return it. Example: find_missing_number([3, 0, 1]) returns 2 find_missing_number([9,6,4,2,3,5,7,0,1]) returns 8 find_missing_number([0]) returns 1 \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given an array containing some numbers taken from a range. Find the one or more numbers that are missing from the array and return them. Example: find_missing_number([3, 0, 1]) returns 2 find_missing_number([9,6,4,2,3,5,7,0,1]) returns 8 find_missing_number([0]) returns 1 \"\"\"",
        "avg_similarity_score": 0.16286282999162166
    },
    {
        "prompt": "def find_longest_word(sentence: str) -> str: \"\"\" Given a sentence, return the longest word in that sentence. If there are multiple words with the same maximum length, return the first one encountered. Words are defined as sequences of characters separated by spaces. Example: Input: 'The quick brown fox jumps over the lazy dog' Output: 'jumps' Example: Input: 'Hello world' Output: 'Hello' Constraints: * The input string will have at least one word and at most 1000 characters.\"\"\"",
        "bad_prompt": "def candidate(sentence: str) -> str: \"\"\" Given a sentence, return a word from that sentence based on certain conditions. If there are multiple words that meet these conditions, return the first one encountered. Words are defined as sequences of characters separated by spaces. Example: Input: 'The quick brown fox jumps over the lazy dog' Output: 'quick' or 'fox' or 'dog' (ambiguous output) Example: Input: 'Hello world' Output: 'world' or 'Hello' (ambiguous output) Constraints: * The input string will have at least one word and at most 1000 characters.\"\"\"",
        "avg_similarity_score": 0.12187908976548277
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a common prefix or suffix among them. If there is no such prefix or suffix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters' \"\"\"",
        "avg_similarity_score": 0.11743666769582439
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of duplicates found in the input list. The output should contain each duplicate number only once and in ascending order. Example: find_duplicates([1, 2, 3, 4, 5, 1, 2]) => [1, 2] find_duplicates([5, 5, 5, 6, 7, 8, 9]) => [5] find_duplicates([]) => [] \"\"\"",
        "bad_prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of numbers that are either duplicates or unique found in the input list. The output may contain each number multiple times and in any order. Example: find_duplicates([1, 2, 3, 4, 5, 1, 2]) => [1, 2] find_duplicates([5, 5, 5, 6, 7, 8, 9]) => [5] find_duplicates([]) => [] \"\"\"",
        "avg_similarity_score": 0.18951427852232708
    },
    {
        "prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\" Determine if two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. For example: is_anagram('listen', 'silent') should return True. is_anagram('hello', 'world') should return False. \"\"\"",
        "bad_prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\" Determine if two strings are related in some way. This could mean they share characters, have similar lengths, or any other vague relationship. For example: is_anagram('listen', 'silent') should return True. is_anagram('hello', 'world') should return False. \"\"\"",
        "avg_similarity_score": 0.09339995439987495
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''.\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns a certain common or uncommon prefix among them. If there is no specific prefix, return an arbitrary string. Examples: candidate(['flower', 'flow', 'flight']) might return 'fl' or any other string. candidate(['dog', 'racecar', 'car']) might return '' or another value.\"\"\"",
        "avg_similarity_score": 0.1514373925048208
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. Both uppercase and lowercase vowels should be counted. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels present in the string. Both uppercase and lowercase vowels may or may not be counted. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.15306236561827533
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Write a function that takes a string sentence as input and returns the sentence with each word reversed while maintaining the original order of words. For example: reverse_words('Hello World') should return 'olleH dlroW'. If the input is an empty string, return an empty string. Examples: reverse_words('Python is fun') => 'nohtyP si nuf' reverse_words('') => '' \"\"\"",
        "bad_prompt": "def reverse_words(sentence: str) -> str: \"\"\" Write a function that takes a string sentence as input and returns something related to the sentence with some characters changed or reversed in any way. For example: reverse_words('Hello World') might return 'olleH dlroW', but it could also return other variations. If the input is an empty string, return something arbitrary. Examples: reverse_words('Python is fun') => 'nohtyP si nuf' reverse_words('') => '' \"\"\"",
        "avg_similarity_score": 0.12629194404104221
    },
    {
        "prompt": "def find_duplicates(arr): \"\"\" Given a list of integers, return a list of duplicates found in the input list. The output should contain each duplicate number only once and be sorted in ascending order. For example: find_duplicates([1, 2, 3, 4, 5, 1, 2]) => [1, 2] find_duplicates([5, 5, 6, 7, 8, 9, 10, 10]) => [5, 10] find_duplicates([]) => [] \"\"\"",
        "bad_prompt": "def find_duplicates(arr): \"\"\" Given a list of integers, return a list that may or may not include duplicates found in the input list. The output could contain any numbers from the input list without specific sorting requirements. For example: find_duplicates([1, 2, 3, 4, 5, 1, 2]) => [1, 2] find_duplicates([5, 5, 6, 7, 8, 9, 10, 10]) => [5, 10] find_duplicates([]) => [] \"\"\"",
        "avg_similarity_score": 0.17767851255393036
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in it. The function should be case insensitive. >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels present in it. The function could be case sensitive or insensitive. >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.19013518617413167
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string and returns the number of characters or vowels in it. The function may or may not be case sensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.16188671676154234
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns either the longest or shortest common prefix among them. If there is no common prefix, return an empty string. Example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.12514779260458503
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. Consider both uppercase and lowercase letters as vowels. Example: count_vowels('Hello World') => 3 count_vowels('Python') => 1 count_vowels('AEIOU') => 5 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in the string. The characters can be either vowels or consonants depending on your interpretation. Example: count_vowels('Hello World') => 3 count_vowels('Python') => 1 count_vowels('AEIOU') => 5 \"\"\"",
        "avg_similarity_score": 0.15960019945750722
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example 1: Input: strs = [\"flower\",\"flow\",\"flight\"] Output: \"fl\" Example 2: Input: strs = [\"dog\",\"racecar\",\"car\"] Output: \"\" \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a common prefix or suffix among them. If there is no common prefix or suffix, return an empty string. Example 1: Input: strs = [\"flower\",\"flow\",\"flight\"] Output: \"fl\" Example 2: Input: strs = [\"dog\",\"racecar\",\"car\"] Output: \"\" \"\"\"",
        "avg_similarity_score": 0.15632145573636447
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the n-th number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Example: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list that may contain numbers in a certain sequence up to the n-th number. The sequence can be defined in various ways, but generally starts with two initial values. Example: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.1701019339325614
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. Ignore case. Examples: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of certain characters in it. The criteria for counting these characters may vary. Examples: candidate('Hello World') == 3 candidate('Python') == 1 candidate('AEIOU') == 5 candidate('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.2006544007236687
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. Ignore case sensitivity. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Write a function that takes a string and returns a certain number related to vowels or consonants in it. Examples: candidate('Hello World') == 3 candidate('Python Programming') == 4 candidate('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.18888946445281168
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\"Given a list of integers, return a list of all elements that appear more than once in the input list. The output should contain only unique duplicates and be sorted in ascending order. If there are no duplicates, return an empty list. Examples: find_duplicates([1, 2, 3, 4, 5]) => [] find_duplicates([1, 2, 3, 1, 2]) => [1, 2] find_duplicates([1, 1, 2, 2, 3, 3]) => [1, 2, 3] find_duplicates([]) => []\"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\"Given a list of integers, return a list of certain elements that may or may not appear multiple times in the input list. The output could include duplicates or unique values depending on some condition. If there are no specific elements, return an empty list. Examples: candidate([1, 2, 3, 4, 5]) => [] candidate([1, 2, 3, 1, 2]) => [1, 2] candidate([1, 1, 2, 2, 3, 3]) => [1, 2, 3] candidate([]) => []\"\"\"",
        "avg_similarity_score": 0.21139834445875702
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. Examples: >>> count_vowels('hello') 2 >>> count_vowels('world') 1 >>> count_vowels('aeiou') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels in the string. Examples: >>> count_vowels('hello') 2 >>> count_vowels('world') 1 >>> count_vowels('aeiou') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.16594073452929775
    },
    {
        "prompt": "def longest_common_prefix(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def candidate(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns either the longest or shortest common prefix among them. If there is no common prefix, return an arbitrary string. Examples: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.16203818891455685
    },
    {
        "prompt": "def count_occurrences(s: str, char: str) -> int: \"\"\"Write a function that takes a string and a character as input and returns the number of times the character appears in the string. Case sensitivity should be considered. Examples: count_occurrences('Hello World', 'o') => 2 count_occurrences('Python Programming', 'P') => 2 count_occurrences('aaaaa', 'a') => 5 count_occurrences('', 'x') => 0\"\"\"",
        "bad_prompt": "def count_occurrences(s: str, char: str) -> int: \"\"\"Write a function that takes a string and a character as input and returns either the number of occurrences or some other value related to the character in the string. Case sensitivity may or may not be considered. Examples: count_occurrences('Hello World', 'o') => 2 count_occurrences('Python Programming', 'P') => 2 count_occurrences('aaaaa', 'a') => 5 count_occurrences('', 'x') => 0\"\"\"",
        "avg_similarity_score": 0.15772757958976846
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\"Check if two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Return True if they are anagrams and False otherwise. >>> is_anagram('listen', 'silent') True >>> is_anagram('triangle', 'integral') True >>> is_anagram('apple', 'pale') False >>> is_anagram('anagram', 'nagaram') True >>> is_anagram('rat', 'car') False \"\"\"",
        "bad_prompt": "def candidate(str1: str, str2: str) -> bool: \"\"\"Check if two strings have some relationship with each other. This could mean they are similar in length, contain common characters, or any other vague condition. Return True if they meet this unspecified criteria and False otherwise. >>> candidate('listen', 'silent') True >>> candidate('triangle', 'integral') True >>> candidate('apple', 'pale') False >>> candidate('anagram', 'nagaram') True >>> candidate('rat', 'car') False \"\"\"",
        "avg_similarity_score": 0.10884239694363355
    },
    {
        "prompt": "def count_vowels(text: str) -> int: \"\"\" Given a string, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(text: str) -> int: \"\"\" Given a string, return the number of characters that may or may not include certain letters in it. The function should be case insensitive. >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('AEIOU') 5 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.19218337505649694
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\"Write a function that checks if two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Ignore spaces and case differences. Examples: is_anagram('listen', 'silent') == True is_anagram('Hello', 'Olelh') == True is_anagram('rat', 'car') == False\"\"\"",
        "bad_prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\"Write a function that checks if two strings have some relation to each other. This could involve checking for similar characters or patterns in both strings. Examples: is_anagram('listen', 'silent') == True is_anagram('Hello', 'Olelh') == True is_anagram('rat', 'car') == False\"\"\"",
        "avg_similarity_score": 0.10421578402235485
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inters' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string or None. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inters' \"\"\"",
        "avg_similarity_score": 0.12051262310521975
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. For example: count_vowels('Hello World') returns 3 count_vowels('Python') returns 1 count_vowels('AEIOU') returns 5 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters that might represent vowels or consonants in the string. The function should consider various cases. For example: count_vowels('Hello World') returns 3 count_vowels('Python') returns 1 count_vowels('AEIOU') returns 5 \"\"\"",
        "avg_similarity_score": 0.16062625888112253
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" This function takes a string s and returns the number of vowels (a, e, i, o, u) present in it. Ignore case sensitivity. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" This function takes a string s and returns a certain count related to vowels or consonants present in it. Examples: candidate('Hello World') => 3 candidate('Python Programming') => 4 candidate('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.1734340507053806
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive. For example: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that may or may not include vowels (a, e, i, o, u) in the string. The function could be case-sensitive or insensitive. For example: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.1577970789147819
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\"Given a list of integers, return a list of integers that appear more than once in the input list. The output should contain only unique duplicates and be sorted in ascending order. Examples: find_duplicates([1, 2, 3, 4, 5, 1, 2]) ==> [1, 2] find_duplicates([5, 5, 5, 6, 7, 8, 9]) ==> [5] find_duplicates([]) ==> []\"\"\"",
        "bad_prompt": "def find_duplicates(lst): \"\"\"Given a list of integers, return a list of integers that may or may not appear multiple times in the input list. The output could contain any elements from the input list without specific conditions. Examples: find_duplicates([1, 2, 3, 4, 5, 1, 2]) ==> [1, 2] find_duplicates([5, 5, 5, 6, 7, 8, 9]) ==> [5] find_duplicates([]) ==> []\"\"\"",
        "avg_similarity_score": 0.18167993559003998
    },
    {
        "prompt": "def fibonacci(n: int) -> list: \"\"\"Generate a list containing the Fibonacci sequence up to the n-th term. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Return a list of integers representing the Fibonacci sequence. Examples: fibonacci(5) => [0, 1, 1, 2, 3] fibonacci(10) => [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def candidate(n: int) -> list: \"\"\"Generate a list containing numbers related to the input n in some way. The output could be any series or pattern based on n. Return a list of integers that may represent various sequences. Examples: candidate(5) => [0, 1, 1, 2, 3] candidate(10) => [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.19473599812599937
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Write a function that takes a sentence as input and returns the sentence with each word reversed, but the order of words should remain the same. For example: reverse_words('Hello World') returns 'olleH dlroW' reverse_words('Python is fun') returns 'nohtyP si nuf' \"\"\"",
        "bad_prompt": "def reverse_words(sentence: str) -> str: \"\"\" Write a function that takes a sentence as input and returns the sentence with certain transformations applied to its words. For example: reverse_words('Hello World') might return 'olleH dlroW' or something else entirely depending on conditions. reverse_words('Python is fun') could yield various outputs based on unspecified rules. \"\"\"",
        "avg_similarity_score": 0.10939383770791743
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns either the longest common prefix or suffix among them. If there is no common prefix or suffix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.12906082611805617
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('AEIOU') == 5 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels present in the string. The function should be case insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('AEIOU') == 5 >>> count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.15875674448628652
    },
    {
        "prompt": "def count_consonants(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of consonants in the string. Consonants are all letters except for vowels (a, e, i, o, u). The function should be case insensitive. Examples: >>> count_consonants('Hello World!') 7 >>> count_consonants('Python3') 6 >>> count_consonants('AEIOU') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of certain characters in the string. Characters can include any or some specific types. The function should be case sensitive or insensitive based on implementation. Examples: >>> candidate('Hello World!') 7 >>> candidate('Python3') 6 >>> candidate('AEIOU') 0 \"\"\"",
        "avg_similarity_score": 0.18233231333708058
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. For example: count_vowels('Hello World') \u279e 3 count_vowels('Python Programming') \u279e 4 count_vowels('xyz') \u279e 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns a number related to vowels (like counts or indices). The function may consider different cases for letters. For example: count_vowels('Hello World') \u279e 3 count_vowels('Python Programming') \u279e 4 count_vowels('xyz') \u279e 0 \"\"\"",
        "avg_similarity_score": 0.14453570711236907
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters that are either vowels or consonants in the string. The function should consider different cases. Example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.15792000278748058
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in it. Consider both uppercase and lowercase letters as vowels. Examples: count_vowels('hello') == 2 count_vowels('HELLO') == 2 count_vowels('xyz') == 0 count_vowels('aeiouAEIOU') == 10 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that are either vowels or consonants present in it. Consider both uppercase and lowercase letters. Examples: count_vowels('hello') == 2 count_vowels('HELLO') == 2 count_vowels('xyz') == 0 count_vowels('aeiouAEIOU') == 10 \"\"\"",
        "avg_similarity_score": 0.14698787676033315
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. Ignore case sensitivity. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that are either vowels or consonants in it. Ignore case sensitivity. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.14903222524918214
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Given a list of strings, find a certain type of prefix among them. If there is no such prefix, return an empty string or some other value. Example: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == '' \"\"\"",
        "avg_similarity_score": 0.1570778326192711
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels present in the string. The function should be case-sensitive or insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.16357317364369256
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\"Given an array of integers from 1 to n with one number missing, return the missing number. The input array will contain n-1 numbers. For example: find_missing_number([3, 7, 1, 2, 8, 4]) should return 5. find_missing_number([1, 2, 4, 6, 3, 7, 8]) should return 5.\"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\"Given an array of integers that may or may not be in a certain range, return a number that is either missing or present based on some condition. For example: find_missing_number([3, 7, 1, 2, 8, 4]) might return 5 or another number depending on the context. find_missing_number([1, 2, 4, 6, 3, 7, 8]) could also return 5 or something else.\"\"\"",
        "avg_similarity_score": 0.15978732878037458
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: >>> count_vowels('hello') 2 >>> count_vowels('HELLO') 2 >>> count_vowels('Python programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the total number of certain characters in the string based on specific conditions. The function should consider various cases. Examples: >>> candidate('hello') 2 >>> candidate('HELLO') 2 >>> candidate('Python programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.1907447617082658
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Return a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: >>> fibonacci(5) [0, 1, 1, 2, 3, 5] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Return a list containing numbers in a certain sequence up to the nth number. The sequence is defined by some rules that may include addition or other operations. For example: >>> fibonacci(5) [0, 1, 1, 2, 3, 5] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.1829234394691343
    },
    {
        "prompt": "def calculate_average(lst): \"\"\" Given a list of numbers, return the average of all the elements in the list. If the list is empty, return 0. Examples: calculate_average([1, 2, 3]) == 2.0 calculate_average([]) == 0 calculate_average([10, 20, 30, 40]) == 25.0 \"\"\"",
        "bad_prompt": "def calculate_average(lst): \"\"\" Given a list of numbers, return either the average or some other statistical measure of all the elements in the list. If the list is empty, return 0. Examples: calculate_average([1, 2, 3]) == 2.0 calculate_average([]) == 0 calculate_average([10, 20, 30, 40]) == 25.0 \"\"\"",
        "avg_similarity_score": 0.1775509050365837
    },
    {
        "prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\" Check if two strings are anagrams of each other. Two strings are anagrams if they contain the same characters in a different order. Examples: is_anagram('listen', 'silent') => True is_anagram('hello', 'world') => False is_anagram('triangle', 'integral') => True is_anagram('apple', 'pale') => False \"\"\"",
        "bad_prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\" Check if two strings have some relationship with each other. This could involve character matching or arrangement. Examples: is_anagram('listen', 'silent') => True is_anagram('hello', 'world') => False is_anagram('triangle', 'integral') => True is_anagram('apple', 'pale') => False \"\"\"",
        "avg_similarity_score": 0.07969760826333926
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters present in the string. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.1549395176684079
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. For example: count_vowels('Hello World') should return 3. count_vowels('Python Programming') should return 4.\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the total number of characters or vowels present in the string. The function should be case insensitive. For example: count_vowels('Hello World') should return 3. count_vowels('Python Programming') should return 4.\"\"\"",
        "avg_similarity_score": 0.1611247712666016
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given an array of integers from 1 to n with one number missing, return the missing number. The input array will have no duplicates and will be unsorted. Example: >>> find_missing_number([3, 7, 1, 2, 8, 4, 5]) == 6 >>> find_missing_number([1, 2, 4]) == 3 >>> find_missing_number([5, 3, 2, 1]) == 4 \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given an array of integers from 1 to n where some numbers might be missing or repeated, return a certain number based on the elements in the array. The input array may not be sorted and can contain duplicates. Example: >>> find_missing_number([3, 7, 1, 2, 8, 4, 5]) == 6 >>> find_missing_number([1, 2, 4]) == 3 >>> find_missing_number([5, 3, 2, 1]) == 4 \"\"\"",
        "avg_similarity_score": 0.16922467914835315
    },
    {
        "prompt": "def find_max_min(lst): \"\"\"Write a function that takes a list of integers and returns a tuple containing the maximum and minimum values in the list. If the list is empty, return (None, None). Examples: find_max_min([1, 2, 3]) => (3, 1) find_max_min([-5, -10, 0, 5]) => (5, -10) find_max_min([]) => (None, None)\"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\"Write a function that takes a list of integers and returns a tuple containing some values from the list. If the list is empty, return (None, None). Examples: candidate([1, 2, 3]) => (3, 1) candidate([-5, -10, 0, 5]) => (5, -10) candidate([]) => (None, None)\"\"\"",
        "avg_similarity_score": 0.2131855926333599
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' Constraints: * All input strings are lowercase letters. * The length of each string will be at least 1. \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns either the longest or shortest common prefix among them. If there is no common prefix, you may return an empty string or some default value. Example: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' Constraints: * Input strings can contain uppercase or lowercase letters. * The length of each string may vary. \"\"\"",
        "avg_similarity_score": 0.14742461860807743
    },
    {
        "prompt": "def longest_palindrome(s: str) -> str: \"\"\"Given a string s, return the longest palindromic substring in s. A palindrome is a string that reads the same forward and backward. If there are multiple longest palindromes, return the first one found. Examples: >>> longest_palindrome('babad') 'bab' or 'aba' >>> longest_palindrome('cbbd') 'bb'\"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\"Given a string s, return a substring from s that may be a palindrome. A palindrome is a string that reads the same forward and backward. If there are multiple candidates, return any of them. Examples: >>> candidate('babad') 'bab' or 'aba' >>> candidate('cbbd') 'bb'\"\"\"",
        "avg_similarity_score": 0.16193062994056565
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\"Write a function that takes a sentence as input and returns the sentence with each word reversed, but the order of words remains the same. For example: >>> reverse_words('Hello World') 'olleH dlroW' >>> reverse_words('Python is fun') 'nohtyP si nuf' \"\"\"",
        "bad_prompt": "def candidate(sentence: str) -> str: \"\"\"Write a function that takes a sentence as input and returns the sentence with some modifications to its words or characters. For example: >>> candidate('Hello World') 'olleH dlroW' >>> candidate('Python is fun') 'nohtyP si nuf' \"\"\"",
        "avg_similarity_score": 0.1533512954687694
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in the string. Ignore case sensitivity. Example: count_vowels('Hello World') returns 3 count_vowels('Python programming') returns 4 count_vowels('xyz') returns 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters (like vowels or consonants) present in the string. The definition of these characters may vary. Example: count_vowels('Hello World') returns 3 count_vowels('Python programming') returns 4 count_vowels('xyz') returns 0 \"\"\"",
        "avg_similarity_score": 0.15374114366093206
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\"Given an array of integers from 1 to n with one number missing, return the missing number. The input array will have no duplicates and is guaranteed to contain numbers in the range from 1 to n. For example: find_missing_number([3, 7, 1, 2, 8, 4, 5]) returns 6; find_missing_number([1, 2, 4]) returns 3.\"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\"Given an array of integers from 1 to n with a certain number possibly missing or duplicated, return that number. The input array may have duplicates and might not cover all numbers in the range from 1 to n. For example: candidate([3, 7, 1, 2, 8, 4, 5]) could return 6 or another number; candidate([1, 2, 4]) could return 3 or any other value.\"\"\"",
        "avg_similarity_score": 0.18893556925704405
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in the string. The function should be case insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.16003415239043942
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Given a positive integer n, return the first n numbers in the Fibonacci sequence as a list. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Given a positive integer n, return some numbers that follow a certain pattern based on n. The sequence may involve addition or other operations to derive subsequent values. For example: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.17697225939625652
    },
    {
        "prompt": "def longest_palindrome(s: str) -> str: \"\"\" Given a string s, return the longest palindromic substring in s. A palindrome is a string that reads the same forward and backward. If there are multiple longest palindromic substrings, return any one of them. Examples: >>> longest_palindrome('babad') 'bab' or 'aba' >>> longest_palindrome('cbbd') 'bb' >>> longest_palindrome('a') 'a' >>> longest_palindrome('ac') 'a' or 'c' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a certain type of substring from s. This substring could be anything based on specific conditions. If there are multiple candidates, return any one of them. Examples: >>> candidate('babad') 'bab' or 'aba' >>> candidate('cbbd') 'bb' >>> candidate('a') 'a' >>> candidate('ac') 'a' or 'c' \"\"\"",
        "avg_similarity_score": 0.1535369939912831
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Given a list of strings, find the longest or shortest common prefix among them. If there is no common prefix, return an empty string or any other value. Examples: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == '' candidate(['interspecies', 'interstellar', 'interstate']) == 'inters' \"\"\"",
        "avg_similarity_score": 0.14807727387712835
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''.\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns a common or unique prefix among them. If there is no common prefix, return an empty string. For example: candidate(['flower', 'flow', 'flight']) should return 'fl'. candidate(['dog', 'racecar', 'car']) should return ''.\"\"\"",
        "avg_similarity_score": 0.16048633464658357
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string or some default value. Examples: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.1609363897390425
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of vowels in that string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('AEIOU') == 5 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of certain characters in that string. Characters could be vowels or consonants or any other type. Examples: >>> candidate('Hello World') == 3 >>> candidate('Python Programming') == 4 >>> candidate('AEIOU') == 5 \"\"\"",
        "avg_similarity_score": 0.19312330460693306
    },
    {
        "prompt": "def count_unique_words(s: str) -> int: \"\"\"Given a string s, return the number of unique words in the string. Words are defined as sequences of characters separated by spaces or punctuation. For example: >>> count_unique_words('Hello world! Hello') 2 >>> count_unique_words('Python is great; Python is fun.') 5 >>> count_unique_words('') 0\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Given a string s, return the count of certain elements that may include words or other types of characters in the string. The definition of what constitutes an element can vary. For example: >>> candidate('Hello world! Hello') 2 >>> candidate('Python is great; Python is fun.') 5 >>> candidate('') 0\"\"\"",
        "avg_similarity_score": 0.1872983676401682
    },
    {
        "prompt": "def longest_common_prefix(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns some common prefix among them. If there is no common prefix, you may return any string or an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) could return 'fl' or 'f'. longest_common_prefix(['dog', 'racecar', 'car']) might return '' or 'd'. \"\"\"",
        "avg_similarity_score": 0.12080341055270581
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Count the number of vowels (a, e, i, o, u) in a given string. The function should be case insensitive. >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Count the number of certain characters in a given string. The function should consider different cases. >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.12900700229801687
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain no duplicates and will be unsorted. Examples: find_missing_number([3, 7, 1, 2, 8, 4]) => 5 find_missing_number([1, 2, 4, 6, 3, 7, 8]) => 5 find_missing_number([9, 8, 7, 6, 5, 4, 3, 1]) => 2 \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given a list of integers that may or may not have a missing number, return a certain number based on specific conditions. The input list could contain duplicates and can be sorted or unsorted. Examples: find_missing_number([3, 7, 1, 2, 8, 4]) => 5 find_missing_number([1, 2, 4, 6, 3, 7, 8]) => 5 find_missing_number([9, 8, 7, 6, 5, 4, 3, 1]) => 2 \"\"\"",
        "avg_similarity_score": 0.17414954579437947
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain common prefix among them. If there is no common prefix, return an empty string or another value. Examples: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.1610188234260051
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Write a function that takes a string s and returns a certain count related to vowels or consonants in it. The function should consider some case sensitivity. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('AEIOU') 5 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.18606190676839113
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain type of common prefix among them. If there is no common prefix, return either an empty string or a default value. Examples: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.1630556403711568
    },
    {
        "prompt": "def find_maximum_subarray(arr): \"\"\" Given an array of integers, return the contiguous subarray (containing at least one number) which has the largest sum and its sum. For example: find_maximum_subarray([-2,1,-3,4,-1,2,1,-5,4]) returns ([4,-1,2,1], 6) find_maximum_subarray([1]) returns ([1], 1) find_maximum_subarray([5,4,-1,7,8]) returns ([5,4,-1,7,8], 23) \"\"\"",
        "bad_prompt": "def find_maximum_subarray(arr): \"\"\" Given an array of integers, return a certain subarray (it could be contiguous or non-contiguous) which has some maximum value and that value. For example: find_maximum_subarray([-2,1,-3,4,-1,2,1,-5,4]) returns ([4,-1,2,1], 6) find_maximum_subarray([1]) returns ([1], 1) find_maximum_subarray([5,4,-1,7,8]) returns ([5,4,-1,7,8], 23) \"\"\"",
        "avg_similarity_score": 0.15078088863813927
    },
    {
        "prompt": "def longest_common_prefix(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. Example: longest_common_prefix(['dog', 'racecar', 'car']) should return ''. Constraints: * All input strings are lowercase letters. * The input list will have at least one string. \"\"\"",
        "bad_prompt": "def candidate(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns a certain common prefix or suffix among them. If there is no such prefix or suffix, return an arbitrary string. Example: candidate(['flower', 'flow', 'flight']) might return 'fl' or any other value. Example: candidate(['dog', 'racecar', 'car']) could return '' or any random string. Constraints: * All input strings are lowercase letters. * The input list may be empty. \"\"\"",
        "avg_similarity_score": 0.14596928365317555
    },
    {
        "prompt": "def count_occurrences(lst: list, target): \"\"\" Given a list and a target value, return the number of times the target appears in the list. If the list is empty, return 0. Examples: count_occurrences([1, 2, 3, 4, 2], 2) should return 2. count_occurrences([], 5) should return 0. count_occurrences(['a', 'b', 'a'], 'a') should return 2. \"\"\"",
        "bad_prompt": "def count_occurrences(lst: list, target): \"\"\" Given a list and a target value, return the number of occurrences or positions of the target in the list. If the list is empty, return 0. Examples: count_occurrences([1, 2, 3, 4, 2], 2) should return 2. count_occurrences([], 5) should return 0. count_occurrences(['a', 'b', 'a'], 'a') should return 2. \"\"\"",
        "avg_similarity_score": 0.18955618754914202
    },
    {
        "prompt": "def find_unique_numbers(arr): \"\"\" Given a list of integers, return a new list containing only the unique numbers from the original list, in the order they first appeared. If there are no unique numbers, return an empty list. Example: find_unique_numbers([1, 2, 3, 2, 1]) => [3] find_unique_numbers([4, 5, 6, 7, 8, 4, 5]) => [6, 7, 8] find_unique_numbers([]) => [] \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers, return a new list containing either unique or duplicate numbers from the original list, based on certain conditions. If there are no valid numbers, return an empty list. Example: candidate([1, 2, 3, 2, 1]) => [3] candidate([4, 5, 6, 7, 8, 4, 5]) => [6, 7, 8] candidate([]) => [] \"\"\"",
        "avg_similarity_score": 0.2049565504804755
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.15259877505708655
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Write a function that takes a string sentence as input and returns the sentence with the order of words reversed. Words are defined as sequences of characters separated by whitespace. Example: reverse_words('Hello World') => 'World Hello' reverse_words('Python is fun') => 'fun is Python' reverse_words('   Leading spaces') => 'spaces Leading   ' \"\"\"",
        "bad_prompt": "def reverse_words(sentence: str) -> str: \"\"\" Write a function that takes a string sentence as input and returns the sentence with some or all words reversed. Words are defined as sequences of characters separated by whitespace. Example: reverse_words('Hello World') => 'World Hello' reverse_words('Python is fun') => 'fun is Python' reverse_words('   Leading spaces') => 'spaces Leading   ' \"\"\"",
        "avg_similarity_score": 0.11898137159235156
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of characters or vowels in it. The function should consider certain conditions for counting. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.16285352853643367
    },
    {
        "prompt": "def longest_common_prefix(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns either the longest or shortest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "avg_similarity_score": 0.1276488175943895
    },
    {
        "prompt": "def is_palindrome(s: str) -> bool: \"\"\"Check if the given string s is a palindrome. A palindrome reads the same backward as forward, ignoring spaces and punctuation. Return True if it is a palindrome, otherwise return False. Examples: is_palindrome('A man, a plan, a canal, Panama') == True is_palindrome('Hello World') == False is_palindrome('No lemon, no melon') == True\"\"\"",
        "bad_prompt": "def candidate(s: str) -> bool: \"\"\"Check if the given string s meets a certain condition (such as being a palindrome or having specific characters). Return True if it meets the condition, otherwise return False. Examples: candidate('A man, a plan, a canal, Panama') == True candidate('Hello World') == False candidate('No lemon, no melon') == True\"\"\"",
        "avg_similarity_score": 0.1512807766666081
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of certain characters in the string. The function may or may not be case-sensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.15736979519116995
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of duplicates in the order they first appear. If there are no duplicates, return an empty list. Examples: >>> find_duplicates([1, 2, 3, 4, 5]) [] >>> find_duplicates([1, 2, 3, 1, 2, 3]) [1, 2] >>> find_duplicates([1, 1, 2, 2, 3, 3]) [1, 2, 3] \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return certain elements that may or may not be duplicates in any order. If there are no specific conditions met, return an empty list. Examples: >>> candidate([1, 2, 3, 4, 5]) [] >>> candidate([1, 2, 3, 1, 2, 3]) [1, 2] >>> candidate([1, 1, 2, 2, 3, 3]) [1, 2, 3] \"\"\"",
        "avg_similarity_score": 0.21184220960749447
    },
    {
        "prompt": "def fibonacci(n): \"\"\"Given a non-negative integer n, return the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: >>> fibonacci(0) == 0 >>> fibonacci(1) == 1 >>> fibonacci(5) == 5 >>> fibonacci(10) == 55\"\"\"",
        "bad_prompt": "def candidate(n): \"\"\"Given a non-negative integer n, return either the nth Fibonacci number or some other related value. The Fibonacci sequence is defined in various ways, and you may choose any definition to implement. Examples: >>> candidate(0) == 0 >>> candidate(1) == 1 >>> candidate(5) == 5 >>> candidate(10) == 55\"\"\"",
        "avg_similarity_score": 0.17641528818507515
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''.\"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''.\"\"\"",
        "avg_similarity_score": 0.12481094870426415
    },
    {
        "prompt": "def fibonacci(n): \"\"\"Return the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: fibonacci(0) => 0, fibonacci(1) => 1, fibonacci(5) => 5, fibonacci(10) => 55.\"\"\"",
        "bad_prompt": "def fibonacci(n): \"\"\"Return a certain Fibonacci number or series based on input n. The Fibonacci sequence can be interpreted in various ways. For example: fibonacci(0) could return 0 or another value depending on context. Examples: fibonacci(0) => 0, fibonacci(1) => 1, fibonacci(5) => 5, fibonacci(10) => 55.\"\"\"",
        "avg_similarity_score": 0.1347027570231773
    },
    {
        "prompt": "def count_occurrences(lst: list, target: int) -> int: \"\"\"Given a list of integers and a target integer, return the number of times the target occurs in the list. If the list is empty, return 0. Examples: >>> count_occurrences([1, 2, 3, 4, 2], 2) 2 >>> count_occurrences([], 5) 0 >>> count_occurrences([1, 1, 1, 1], 1) 4\"\"\"",
        "bad_prompt": "def candidate(lst: list, target: int) -> int: \"\"\"Given a list of integers and a target integer, return the number of occurrences or instances of the target in the list. If the list is empty, it may also return some default value. Examples: >>> candidate([1, 2, 3, 4, 2], 2) 2 >>> candidate([], 5) 0 >>> candidate([1, 1, 1, 1], 1) 4\"\"\"",
        "avg_similarity_score": 0.22873168237265154
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Given a list of strings, find the longest common prefix string amongst them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''.\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Given a list of strings, find the longest or shortest common prefix string amongst them. If there is no common prefix, return either an empty string or some other value. Example: candidate(['flower', 'flow', 'flight']) should return 'fl' or 'f'. candidate(['dog', 'racecar', 'car']) should return '' or some other string.\"\"\"",
        "avg_similarity_score": 0.14490746279980554
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a common prefix or suffix among them. If there is no such prefix or suffix, return an empty string. For example: candidate(['flower', 'flow', 'flight']) should return 'fl'. candidate(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "avg_similarity_score": 0.1621855193879224
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. Example: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters present in the string. The function should be case sensitive or insensitive. Example: candidate('Hello World') => 3 candidate('Python Programming') => 4 candidate('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.19905821114022856
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of duplicates found in the input list. The returned list should contain each duplicate only once and be sorted in ascending order. Examples: >>> find_duplicates([1, 2, 3, 4, 5]) [] >>> find_duplicates([1, 2, 3, 1, 2, 3]) [1, 2, 3] >>> find_duplicates([5, 5, 6, 7, 8, 6]) [5, 6] \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return a list of certain values found in the input list. The returned list may contain duplicates or unique values based on some condition and can be sorted or unsorted. Examples: >>> candidate([1, 2, 3, 4, 5]) [] >>> candidate([1, 2, 3, 1, 2, 3]) [1, 2, 3] >>> candidate([5, 5, 6, 7, 8, 6]) [5, 6] \"\"\"",
        "avg_similarity_score": 0.21799478103547612
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['a']) => 'a' longest_common_prefix([]) => ''\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns either the longest or shortest string from the list. If the list is empty, return None. Examples: candidate(['flower', 'flow', 'flight']) => 'flower' candidate(['dog', 'racecar', 'car']) => 'car' candidate(['a']) => 'a' candidate([]) => None\"\"\"",
        "avg_similarity_score": 0.1797723442843982
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. Vowels can be both uppercase and lowercase. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return a certain count related to vowels or consonants in the string. The count may vary based on conditions such as case sensitivity. Examples: >>> candidate('Hello World') == 3 >>> candidate('Python Programming') == 4 >>> candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.17863507264530065
    },
    {
        "prompt": "def count_occurrences(s: str, char: str) -> int: \"\"\" Given a string s and a character char, return the number of times char appears in s. The function should be case-sensitive. Examples: >>> count_occurrences('Hello World', 'o') 2 >>> count_occurrences('banana', 'a') 3 >>> count_occurrences('Python', 'p') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str, char: str) -> int: \"\"\" Given a string s and a character char, return the number of times char or another character appears in s. The function may or may not be case-sensitive. Examples: >>> candidate('Hello World', 'o') 2 >>> candidate('banana', 'a') 3 >>> candidate('Python', 'p') 0 \"\"\"",
        "avg_similarity_score": 0.19094950226948856
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same length, return the first one found. Examples: >>> find_longest_substring('abcabcbb') 'abc' >>> find_longest_substring('bbbbb') 'b' >>> find_longest_substring('pwwkew') 'wke' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a substring based on certain conditions. If there are multiple substrings that meet the criteria, return the first one found. Examples: >>> candidate('abcabcbb') 'abc' >>> candidate('bbbbb') 'b' >>> candidate('pwwkew') 'wke' \"\"\"",
        "avg_similarity_score": 0.15726445365874142
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain prefix among them. If there is no specific prefix, return an empty string. Example: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == '' \"\"\"",
        "avg_similarity_score": 0.16004133953338825
    },
    {
        "prompt": "def fibonacci(n: int) -> int: \"\"\"Return the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: >>> fibonacci(0) 0 >>> fibonacci(1) 1 >>> fibonacci(5) 5 >>> fibonacci(10) 55\"\"\"",
        "bad_prompt": "def candidate(n: int) -> int: \"\"\"Return a certain Fibonacci-like number based on input n. The Fibonacci sequence is defined in various ways; this function may return different results depending on conditions. Examples: >>> candidate(0) 0 >>> candidate(1) 1 >>> candidate(5) 5 >>> candidate(10) 55\"\"\"",
        "avg_similarity_score": 0.1626651262769347
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s and returns a certain number related to vowels in it. The function may or may not consider case sensitivity. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "avg_similarity_score": 0.15350432029693142
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. For example: count_vowels('Hello World') returns 3 because 'e', 'o', and 'o' are vowels. If the input string is empty, return 0. Examples: count_vowels('abcde') == 2; count_vowels('AEIOU') == 5; count_vowels('xyz') == 0; count_vowels('') == 0.\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that meet certain conditions (such as being vowels or consonants). The function should be case insensitive. For example: count_vowels('Hello World') could return any number based on different interpretations. If the input string is empty, return 0. Examples: count_vowels('abcde') could equal 2 or another value; count_vowels('AEIOU') might return 5 or something else; count_vowels('xyz') may return 0 or more; count_vowels('') could also yield 0 or other results.\"\"\"",
        "avg_similarity_score": 0.1334148058726469
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the n-th number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def candidate(n: int) -> List[int]: \"\"\" Generate a list containing numbers based on some recursive relation up to the n-th number. The relation can vary but typically involves previous terms in the series. Examples: >>> candidate(5) [0, 1, 1, 2, 3] >>> candidate(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.18488564070514588
    },
    {
        "prompt": "def count_primes(n: int) -> int: \"\"\"Return the number of prime numbers less than n. A prime number is a natural number greater than 1 that cannot be formed by multiplying two smaller natural numbers. Examples: count_primes(10) == 4 # (2, 3, 5, 7) count_primes(20) == 8 # (2, 3, 5, 7, 11, 13, 17, 19)\"\"\"",
        "bad_prompt": "def candidate(n: int) -> int: \"\"\"Return a certain count of numbers less than n based on specific conditions. Examples: candidate(10) == 4 # (2, 3, 5, 7) candidate(20) == 8 # (2, 3, 5, 7, 11, 13, 17, 19)\"\"\"",
        "avg_similarity_score": 0.17296098509002647
    },
    {
        "prompt": "from typing import List\ndef find_missing_numbers(arr: List[int], n: int) -> List[int]: \"\"\" Given a list of integers arr and an integer n, return a list of all the missing numbers from 1 to n that are not present in arr. The output should be sorted in ascending order. For example: >>> find_missing_numbers([3, 7, 1, 2, 8], 8) [4, 5, 6] >>> find_missing_numbers([1, 2, 3], 5) [4, 5] \"\"\"",
        "bad_prompt": "from typing import List\ndef candidate(arr: List[int], n: int) -> List[int]: \"\"\" Given a list of integers arr and an integer n, return a list of certain numbers based on their presence or absence in arr up to n. The output may vary depending on the condition applied. For example: >>> candidate([3, 7, 1, 2, 8], 8) [4, 5, 6] >>> candidate([1, 2, 3], 5) [4, 5] \"\"\"",
        "avg_similarity_score": 0.21700874936212694
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the total number of certain characters (such as vowels or consonants) in it. The function should be case insensitive. Examples: candidate('Hello World') == 3 candidate('Python Programming') == 4 candidate('AEIOU') == 5 candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.19374933677126488
    },
    {
        "prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -5, -3]) -1 >>> find_maximum([]) None \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return a certain value from the list (like max or min). If the list is empty, return None. >>> candidate([1, 2, 3]) 3 >>> candidate([-1, -5, -3]) -1 >>> candidate([]) None \"\"\"",
        "avg_similarity_score": 0.2279585924834607
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['a']) == 'a' longest_common_prefix([]) == '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Given a list of strings, determine if they share any characters at the beginning or end and return that substring. If there are multiple substrings, return one of them. Examples: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == '' candidate(['a']) == 'a' candidate([]) == '' \"\"\"",
        "avg_similarity_score": 0.1622112705992027
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' >>> longest_common_prefix(['a']) 'a' >>> longest_common_prefix([]) '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Given a list of strings, find a certain prefix among them. If there is no such prefix, return an empty string or None. Example: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' >>> candidate(['a']) 'a' >>> candidate([]) '' \"\"\"",
        "avg_similarity_score": 0.16113772256272238
    },
    {
        "prompt": "def calculate_area(radius: float) -> float: \"\"\"Given the radius of a circle, return its area. The formula for the area of a circle is A = \u03c0 * r^2, where r is the radius. Example: calculate_area(5) => 78.54 (approximately) calculate_area(10) => 314.16 (approximately)\"\"\"",
        "bad_prompt": "def calculate_area(radius: float) -> float: \"\"\"Given the radius of a circle or another shape, return some value related to it. The formula might involve \u03c0 and could be about area or circumference. Example: calculate_area(5) => 78.54 (approximately) calculate_area(10) => 314.16 (approximately)\"\"\"",
        "avg_similarity_score": 0.11797971740000117
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inter' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns something related to the common elements among them. If there are no such elements, return nothing or something else. Examples: >>> candidate(['flower', 'flow', 'flight']) == 'fl' >>> candidate(['dog', 'racecar', 'car']) == '' >>> candidate(['interspecies', 'interstellar', 'interstate']) == 'inter' \"\"\"",
        "avg_similarity_score": 0.15626706803041449
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given an array of integers from 1 to n with one number missing, return the missing number. The input array will contain n-1 numbers. For example: find_missing_number([3, 7, 1, 2, 8, 4]) returns 5 find_missing_number([1, 2, 4, 6, 3, 7, 8]) returns 5 find_missing_number([1]) returns None (since there is no missing number) \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given an array of integers from 1 to n with a certain number possibly missing, return that number or another related value. The input array may contain various numbers. For example: find_missing_number([3, 7, 1, 2, 8, 4]) returns 5 find_missing_number([1, 2, 4, 6, 3, 7, 8]) returns 5 find_missing_number([1]) returns None (but it could also mean something else) \"\"\"",
        "avg_similarity_score": 0.15831065857558213
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive and only consider letters as vowels. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters that might include vowels or consonants present in the string. The function should be case insensitive and may or may not consider certain letters as vowels. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.15118719901289093
    },
    {
        "prompt": "def count_occurrences(lst, target): \"\"\"Write a function that takes a list of integers and a target integer. The function should return the number of times the target appears in the list. Examples: >>> count_occurrences([1, 2, 3, 4, 1], 1) 2 >>> count_occurrences([5, 5, 5, 5], 5) 4 >>> count_occurrences([], 0) 0\"\"\"",
        "bad_prompt": "def candidate(lst, x): \"\"\"Write a function that takes a list of integers and a value. The function should return how many times the value appears or does not appear in the list. Examples: >>> candidate([1, 2, 3, 4, 1], 1) 2 >>> candidate([5, 5, 5, 5], 5) 4 >>> candidate([], 0) 0\"\"\"",
        "avg_similarity_score": 0.2242413569102511
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Write a function that checks if two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. For example: is_anagram('listen', 'silent') should return True is_anagram('hello', 'world') should return False \"\"\"",
        "bad_prompt": "def candidate(str1: str, str2: str) -> bool: \"\"\" Write a function that checks if two strings have some relation to each other. This could mean they share certain characters or have similar lengths. For example: candidate('listen', 'silent') should return True candidate('hello', 'world') should return False \"\"\"",
        "avg_similarity_score": 0.13533583337806354
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) -> 'fl' longest_common_prefix(['dog', 'racecar', 'car']) -> '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a certain prefix among them. If there is no such prefix, return an arbitrary value. Example: longest_common_prefix(['flower', 'flow', 'flight']) -> 'fl' longest_common_prefix(['dog', 'racecar', 'car']) -> '' \"\"\"",
        "avg_similarity_score": 0.1196737326218893
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of characters or vowels in it. The function should be case insensitive. Examples: candidate('Hello World') == 3 candidate('Python') == 1 candidate('AEIOU') == 5 candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.2038636039364552
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns a common prefix or suffix among them. If there is no common prefix or suffix, return an empty string. For example: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.16364292233512562
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of certain characters in the string. The function should be case insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0\"\"\"",
        "avg_similarity_score": 0.15767220161605924
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Write a function that takes a string and returns a certain count related to the characters in it. The function should handle different cases. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('AEIOU') 5 \"\"\"",
        "avg_similarity_score": 0.18880921508661733
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that counts the number of vowels (a, e, i, o, u) in a given string. The function should be case-insensitive and ignore any non-alphabetic characters. Examples: count_vowels('Hello World!') \u279e 3 count_vowels('Python Programming') \u279e 4 count_vowels('12345') \u279e 0 count_vowels('') \u279e 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Write a function that counts some specific characters in a given string. The function should be case-sensitive or insensitive depending on certain conditions and may ignore various types of characters. Examples: candidate('Hello World!') \u279e 3 candidate('Python Programming') \u279e 4 candidate('12345') \u279e 0 candidate('') \u279e 0 \"\"\"",
        "avg_similarity_score": 0.17099940231989846
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python') 1 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that are either vowels or consonants in the string. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python') 1 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.16380945049873868
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns either the longest or shortest common sequence among them. If there is no such sequence, return an empty string. Example: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => ''\"\"\"",
        "avg_similarity_score": 0.1630397214603654
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "avg_similarity_score": 0.12612000453231947
    },
    {
        "prompt": "def find_missing_number(nums: List[int]) -> int: \"\"\"You are given a list of integers from 0 to n, where one number is missing. Your task is to find and return the missing number. Assume that there are no duplicates in the input list. For example: >>> find_missing_number([3, 0, 1]) 2 >>> find_missing_number([9,6,4,2,3,5]) 7 >>> find_missing_number([0]) 1 \"\"\"",
        "bad_prompt": "def find_missing_number(nums: List[int]) -> int: \"\"\"You are given a list of integers which may or may not include numbers from 0 to n. Your task is to find and return a certain number based on some criteria. For example: >>> find_missing_number([3, 0, 1]) 2 >>> find_missing_number([9,6,4,2,3,5]) 7 >>> find_missing_number([0]) 1 \"\"\"",
        "avg_similarity_score": 0.17343952447807778
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Given a list of strings, find a certain pattern or sequence among them. If there is no such pattern, return an empty string. Examples: >>> candidate(['flower', 'flow', 'flight']) == 'fl' >>> candidate(['dog', 'racecar', 'car']) == '' \"\"\"",
        "avg_similarity_score": 0.15293302268530734
    },
    {
        "prompt": "def find_duplicates(arr): \"\"\" Given a list of integers, return a list of duplicate elements in the order they first appear. If there are no duplicates, return an empty list. Examples: find_duplicates([1, 2, 3, 4, 5]) == [] find_duplicates([1, 2, 3, 1, 2]) == [1, 2] find_duplicates([1, 1, 1, 1]) == [1] \"\"\"",
        "bad_prompt": "def find_duplicates(arr): \"\"\" Given a list of integers, return a list of certain elements that may or may not be duplicates in any order. If there are no such elements, return an empty list. Examples: find_duplicates([1, 2, 3, 4, 5]) == [] find_duplicates([1, 2, 3, 1, 2]) == [1, 2] find_duplicates([1, 1, 1, 1]) == [1] \"\"\"",
        "avg_similarity_score": 0.18502232450959025
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python') => 1 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of certain characters in it. The function should be case insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python') => 1 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.16318978041645402
    },
    {
        "prompt": "def find_longest_word(words: List[str]) -> str: \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. Examples: find_longest_word(['apple', 'banana', 'cherry']) => 'banana' find_longest_word(['dog', 'cat', 'elephant']) => 'elephant' find_longest_word([]) => '' \"\"\"",
        "bad_prompt": "def candidate(words: List[str]) -> str: \"\"\" Given a list of words, return a certain word from the list based on its length or another condition. If there are multiple candidates, return the first one encountered. Examples: candidate(['apple', 'banana', 'cherry']) => 'banana' candidate(['dog', 'cat', 'elephant']) => 'elephant' candidate([]) => '' \"\"\"",
        "avg_similarity_score": 0.167844359741786
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing numbers based on some criteria up to the nth position. The sequence is defined in a certain way that may involve addition or other operations. Examples: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.16906885893415122
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Count the number of vowels (a, e, i, o, u) in a given string. Case should be ignored. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Count the number of certain characters in a given string. Case should be ignored. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('') 0 \"\"\"",
        "avg_similarity_score": 0.12690668636149924
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Write a function that takes a string s and returns the number of characters (such as vowels or consonants) in it. The function should be case sensitive or insensitive based on certain conditions. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0\"\"\"",
        "avg_similarity_score": 0.1903719958235071
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. Ignore case and consider only English vowels. Examples: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return a certain count related to the characters in the string. This could be vowels or consonants or any other specific character type. Examples: candidate('Hello World') == 3 candidate('Python') == 1 candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.18751932733211046
    },
    {
        "prompt": "def longest_common_prefix(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def candidate(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns a certain common part among them. If there is no such part, return an empty string or some default value. Examples: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.16252190758789617
    },
    {
        "prompt": "def find_longest_word(words): \"\"\"Write a function that takes a list of words and returns the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) == 'banana' find_longest_word(['cat', 'dog', 'elephant']) == 'elephant' find_longest_word([]) == '' \"\"\"",
        "bad_prompt": "def find_longest_word(words): \"\"\"Write a function that takes a list of words and returns a certain word from the list based on some criteria (such as longest, shortest, or another). If there are multiple candidates for this word, return the first one encountered. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) == 'banana' find_longest_word(['cat', 'dog', 'elephant']) == 'elephant' find_longest_word([]) == '' \"\"\"",
        "avg_similarity_score": 0.13126819686924115
    },
    {
        "prompt": "def count_occurrences(lst, target): \"\"\"Write a function that takes a list of integers and an integer target as input. The function should return the number of times the target appears in the list. If the list is empty, return 0. Examples: count_occurrences([1, 2, 3, 4, 2], 2) => 2 count_occurrences([], 5) => 0 count_occurrences([5, 5, 5], 5) => 3\"\"\"",
        "bad_prompt": "def count_occurrences(lst, target): \"\"\"Write a function that takes a list of integers and an integer target as input. The function should return the occurrences of the target or any other element in the list. If the list is empty, return 0. Examples: count_occurrences([1, 2, 3, 4, 2], 2) => 2 count_occurrences([], 5) => 0 count_occurrences([5, 5, 5], 5) => 3\"\"\"",
        "avg_similarity_score": 0.1945639857274164
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of duplicates in the input list. The output should contain only unique values that are duplicated in the original list. Example: >>> find_duplicates([1, 2, 3, 4, 5, 1, 2]) [1, 2] >>> find_duplicates([1, 1, 1, 2, 2, 3]) [1, 2] >>> find_duplicates([1, 2, 3]) [] \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return a list of certain elements from the input list. The output may or may not contain unique values that are duplicated in the original list. Example: >>> candidate([1, 2, 3, 4, 5, 1, 2]) [1, 2] >>> candidate([1, 1, 1, 2, 2, 3]) [1, 2] >>> candidate([1, 2, 3]) [] \"\"\"",
        "avg_similarity_score": 0.2278743104463532
    },
    {
        "prompt": "def find_longest_word(words: List[str]) -> str: \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) => 'banana' find_longest_word(['a', 'ab', 'abc']) => 'abc' find_longest_word([]) => '' \"\"\"",
        "bad_prompt": "def find_longest_word(words: List[str]) -> str: \"\"\" Given a list of words, return a word that might be the longest or not in the list. If there are multiple words with varying lengths, return any one of them. If the list is empty, you may return anything or nothing. Examples: find_longest_word(['apple', 'banana', 'cherry']) => 'banana' find_longest_word(['a', 'ab', 'abc']) => 'abc' find_longest_word([]) => '' \"\"\"",
        "avg_similarity_score": 0.14196571363099267
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.15376975304695645
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python') 1 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of certain characters in the string. These characters may include vowels or other letters depending on various conditions. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python') 1 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.16155458060765918
    },
    {
        "prompt": "def find_longest_word(sentence: str) -> str: \"\"\" Given a sentence, return the longest word in it. If there are multiple words with the same maximum length, return the first one encountered. Words are defined as sequences of characters separated by spaces. Examples: >>> find_longest_word('The quick brown fox jumps over the lazy dog') 'jumps' >>> find_longest_word('Hello world') 'Hello' >>> find_longest_word('A B C D E F G H I J K L M N O P Q R S T U V W X Y Z') 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' \"\"\"",
        "bad_prompt": "def candidate(sentence: str) -> str: \"\"\" Given a sentence, return a certain word from it based on some criteria. If there are multiple words that meet this criterion, return the first one encountered. Words are defined as sequences of characters separated by spaces. Examples: >>> candidate('The quick brown fox jumps over the lazy dog') 'quick' >>> candidate('Hello world') 'Hello' >>> candidate('A B C D E F G H I J K L M N O P Q R S T U V W X Y Z') 'A' \"\"\"",
        "avg_similarity_score": 0.12155205400394252
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. Case should be ignored. For example: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('') returns 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. The function may consider different cases or ignore them. For example: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('') returns 0 \"\"\"",
        "avg_similarity_score": 0.15411534981220187
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns some common prefix or suffix among them. If there is no such prefix or suffix, return an empty string. For example: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.16052659313510406
    },
    {
        "prompt": "def count_words(sentence: str) -> int: \"\"\" Write a function that takes a string sentence as input and returns the number of words in it. A word is defined as any sequence of characters separated by whitespace. Examples: >>> count_words('Hello world') 2 >>> count_words('This is a test.') 4 >>> count_words('   Leading spaces should not count') 5 >>> count_words('') 0 \"\"\"",
        "bad_prompt": "def candidate(sentence: str) -> int: \"\"\" Write a function that takes a string sentence as input and returns the number of items or words in it. An item can be defined in various ways depending on context. Examples: >>> candidate('Hello world') 2 >>> candidate('This is a test.') 4 >>> candidate('   Leading spaces should not count') 5 >>> candidate('') 0 \"\"\"",
        "avg_similarity_score": 0.18029811384316144
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a string 'sentence', return the sentence with the order of words reversed. Words are defined as sequences of characters separated by spaces. Example: >>> reverse_words('Hello World') 'World Hello' >>> reverse_words('Python is fun') 'fun is Python' >>> reverse_words('   Leading and trailing spaces   ') 'spaces trailing and Leading' \"\"\"",
        "bad_prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a string 'sentence', return the sentence with certain modifications to the order or content of words. Example: >>> reverse_words('Hello World') 'World Hello' >>> reverse_words('Python is fun') 'fun is Python' >>> reverse_words('   Leading and trailing spaces   ') 'spaces trailing and Leading' \"\"\"",
        "avg_similarity_score": 0.12128472560148612
    },
    {
        "prompt": "def count_occurrences(lst: list, target): \"\"\" Given a list of elements and a target element, return the number of times the target appears in the list. If the list is empty, return 0. Examples: >>> count_occurrences([1, 2, 3, 2, 1], 2) 2 >>> count_occurrences(['a', 'b', 'a'], 'a') 2 >>> count_occurrences([], 1) 0 \"\"\"",
        "bad_prompt": "def candidate(lst: list, target): \"\"\" Given a list of elements and a target element, return the number of occurrences or some other measure related to the target in the list. If the list is empty, return 0 or another value. Examples: >>> candidate([1, 2, 3, 2, 1], 2) 2 >>> candidate(['a', 'b', 'a'], 'a') 2 >>> candidate([], 1) 0 \"\"\"",
        "avg_similarity_score": 0.22546575036737096
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given an array of integers from 1 to n with one number missing, return the missing number. The input array will have no duplicates and will be unsorted. Example: >>> find_missing_number([3, 7, 1, 2, 8, 4, 5]) == 6 >>> find_missing_number([1, 2, 4]) == 3 >>> find_missing_number([5, 3, 2, 1]) == 4 \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given an array of integers that may or may not contain numbers from a certain range, return a specific number based on some conditions. The input array could have duplicates and might be sorted or unsorted. Example: >>> candidate([3, 7, 1, 2, 8, 4, 5]) == 6 >>> candidate([1, 2, 4]) == 3 >>> candidate([5, 3, 2, 1]) == 4 \"\"\"",
        "avg_similarity_score": 0.20111936005187883
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string or some default value. For example: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => ''\"\"\"",
        "avg_similarity_score": 0.1643476629033739
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of integers that appear more than once in the input list. The output should contain only unique values and be sorted in ascending order. For example: find_duplicates([1, 2, 3, 4, 5, 1, 2]) returns [1, 2] find_duplicates([1, 1, 1, 1]) returns [1] find_duplicates([]) returns [] \"\"\"",
        "bad_prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of integers that may or may not appear multiple times in the input list. The output could contain duplicate values and might not be sorted. For example: find_duplicates([1, 2, 3, 4, 5, 1, 2]) returns [1, 2] find_duplicates([1, 1, 1, 1]) returns [1] find_duplicates([]) returns [] \"\"\"",
        "avg_similarity_score": 0.1822530807948335
    },
    {
        "prompt": "def count_occurrences(lst: list) -> dict: \"\"\" Given a list of integers, return a dictionary where the keys are the unique integers from the list and the values are the counts of how many times each integer appears in the list. For example: >>> count_occurrences([1, 2, 2, 3]) {1: 1, 2: 2, 3: 1} >>> count_occurrences([]) {} >>> count_occurrences([5, 5, 5, 6, 7, 7]) {5: 3, 6: 1, 7: 2} \"\"\"",
        "bad_prompt": "def count_occurrences(lst: list) -> dict: \"\"\" Given a list of integers, return a dictionary where the keys are certain integers from the list and the values are their occurrences or some other metric. For example: >>> count_occurrences([1, 2, 2, 3]) {1: 1, 2: 2, 3: 1} >>> count_occurrences([]) {} >>> count_occurrences([5, 5, 5, 6, 7, 7]) {5: 3, 6: 1, 7: 2} \"\"\"",
        "avg_similarity_score": 0.18744899621418382
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inter'\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns some kind of prefix or suffix from them. If there is no such prefix or suffix, return something else. Examples: >>> candidate(['flower', 'flow', 'flight']) == 'fl' >>> candidate(['dog', 'racecar', 'car']) == '' >>> candidate(['interspecies', 'interstellar', 'interstate']) == 'inter'\"\"\"",
        "avg_similarity_score": 0.1545599641148149
    },
    {
        "prompt": "def find_maximum(numbers: List[int]) -> int: \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: >>> find_maximum([1, 2, 3, 4, 5]) 5 >>> find_maximum([-10, -20, -30]) -10 >>> find_maximum([]) None \"\"\"",
        "bad_prompt": "def candidate(numbers: List[int]) -> int: \"\"\" Given a list of integers, return the maximum or minimum value in the list. If the list is empty, return None or some default value. Examples: >>> candidate([1, 2, 3, 4, 5]) 5 >>> candidate([-10, -20, -30]) -10 >>> candidate([]) None \"\"\"",
        "avg_similarity_score": 0.2169511135460229
    },
    {
        "prompt": "def longest_common_prefix(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns a certain common substring among them. If there is no such substring, return an empty string or some default value. Example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl' or another value. longest_common_prefix(['dog', 'racecar', 'car']) should return '' or something else. \"\"\"",
        "avg_similarity_score": 0.12709069485588642
    },
    {
        "prompt": "def fibonacci(n: int) -> list: \"\"\"Return a list containing the first n Fibonacci numbers. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def candidate(n: int) -> list: \"\"\"Return a list based on some criteria involving Fibonacci numbers or other sequences. The output could be related to any number of elements in that sequence. Examples: >>> candidate(5) [0, 1, 1, 2, 3] >>> candidate(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.19698142050192732
    },
    {
        "prompt": "def count_words(sentence: str) -> int: \"\"\" Given a sentence, return the number of words in it. Words are defined as sequences of characters separated by spaces. For example: >>> count_words('Hello world') == 2 >>> count_words('This is a test.') == 4 >>> count_words('   Leading and trailing spaces   ') == 5 \"\"\"",
        "bad_prompt": "def count_words(sentence: str) -> int: \"\"\" Given a sentence, return the number of elements in it. Elements are defined as sequences of characters or symbols separated by various delimiters. For example: >>> count_words('Hello world') == 2 >>> count_words('This is a test.') == 4 >>> count_words('   Leading and trailing spaces   ') == 5 \"\"\"",
        "avg_similarity_score": 0.14904704667340124
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "avg_similarity_score": 0.12488718627176666
    },
    {
        "prompt": "def find_longest_word(sentence: str) -> str:\n    \"\"\"\n    Given a sentence, return the longest word in that sentence. If there are multiple words with the same maximum length, return the first one encountered. A word is defined as a sequence of characters separated by spaces.\n    Examples:\n    find_longest_word('The quick brown fox jumps over the lazy dog') == 'jumps'\n    find_longest_word('Hello world') == 'Hello'\n    find_longest_word('A B C D E F G H I J K L M N O P Q R S T U V W X Y Z') == 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    \"\"\"",
        "bad_prompt": "def find_longest_word(sentence: str) -> str:\n    \"\"\"\n    Given a sentence, return a word or character that has the longest length in that sentence. If there are multiple candidates with similar lengths, return the first one you come across. A word is considered to be any group of letters, numbers, or symbols separated by spaces.\n    Examples:\n    find_longest_word('The quick brown fox jumps over the lazy dog') == 'jumps'\n    find_longest_word('Hello world') == 'Hello'\n    find_longest_word('A B C D E F G H I J K L M N O P Q R S T U V W X Y Z') == 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    \"\"\"",
        "avg_similarity_score": 0.10894900523735937
    },
    {
        "prompt": "def count_occurrences(lst, target): \"\"\" Given a list of integers and a target integer, return the number of times the target appears in the list. Example: count_occurrences([1, 2, 3, 4, 2, 5], 2) == 2 count_occurrences([1, 1, 1, 1], 1) == 4 count_occurrences([], 0) == 0 \"\"\"",
        "bad_prompt": "def candidate(lst, x): \"\"\" Given a list of integers and a certain value, return the number of occurrences or some other condition related to that value in the list. Example: candidate([1, 2, 3, 4, 2, 5], 2) == 2 candidate([1, 1, 1, 1], 1) == 4 candidate([], 0) == 0 \"\"\"",
        "avg_similarity_score": 0.23630293456818055
    },
    {
        "prompt": "def count_words(s: str) -> int: \"\"\" Given a string s, return the number of words in the string. A word is defined as any sequence of characters separated by whitespace. For example: >>> count_words('Hello world') returns 2 >>> count_words('This is a test.') returns 4 >>> count_words('   Leading and trailing spaces   ') returns 5 >>> count_words('') returns 0 \"\"\"",
        "bad_prompt": "def count_words(s: str) -> int: \"\"\" Given a string s, return the number of sequences in the string. A sequence can be defined in various ways depending on interpretation. For example: >>> count_words('Hello world') returns 2 >>> count_words('This is a test.') returns 4 >>> count_words('   Leading and trailing spaces   ') returns 5 >>> count_words('') returns 0 \"\"\"",
        "avg_similarity_score": 0.1520553688197671
    },
    {
        "prompt": "def find_unique_numbers(lst): \"\"\" Given a list of integers, return a new list containing only the unique numbers from the original list in the order they first appeared. If there are no unique numbers, return an empty list. Examples: find_unique_numbers([1, 2, 3, 2, 1]) ==> [3] find_unique_numbers([4, 5, 6, 7, 8, 4, 5]) ==> [6, 7, 8] find_unique_numbers([]) ==> [] find_unique_numbers([10, 10, 10]) ==> [] \"\"\"",
        "bad_prompt": "def find_unique_numbers(lst): \"\"\" Given a list of integers, return a new list containing some or all of the numbers from the original list in any order. If there are no numbers, return an empty list. Examples: find_unique_numbers([1, 2, 3, 2, 1]) ==> [3] find_unique_numbers([4, 5, 6, 7, 8, 4, 5]) ==> [6, 7, 8] find_unique_numbers([]) ==> [] find_unique_numbers([10, 10, 10]) ==> [] \"\"\"",
        "avg_similarity_score": 0.1757870573273442
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Given a list of strings, find a common or unique prefix among them. If there is no such prefix, return an empty string. Examples: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == '' \"\"\"",
        "avg_similarity_score": 0.1500516564642497
    },
    {
        "prompt": "def find_maximum(numbers): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) => 3 find_maximum([-1, -5, -3]) => -1 find_maximum([]) => None \"\"\"",
        "bad_prompt": "def find_maximum(numbers): \"\"\" Given a list of integers, return a certain value from the list based on various conditions. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) => 3 find_maximum([-1, -5, -3]) => -1 find_maximum([]) => None \"\"\"",
        "avg_similarity_score": 0.18132598028306024
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns a certain type of prefix from them. If there is no prefix, return something else. For example: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => ''\"\"\"",
        "avg_similarity_score": 0.16399424833474133
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) \u279e 'fl' longest_common_prefix(['dog', 'racecar', 'car']) \u279e '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a certain substring or prefix from them. If there is no such substring, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) \u279e 'fl' longest_common_prefix(['dog', 'racecar', 'car']) \u279e '' \"\"\"",
        "avg_similarity_score": 0.12619153586113677
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given an array of integers from 1 to n with one number missing, return the missing number. The input will always contain unique numbers and will not include 0. Example: find_missing_number([3, 7, 1, 2, 8, 4]) => 5 find_missing_number([1, 2, 4]) => 3 \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given an array of integers that may or may not be complete, return a number that is either missing or present in the array. The input can have duplicates and might include 0. Example: candidate([3, 7, 1, 2, 8, 4]) => 5 candidate([1, 2, 4]) => 3 \"\"\"",
        "avg_similarity_score": 0.20483954293846907
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of integers that appear more than once in the input list. The output should contain only unique duplicates and be sorted in ascending order. For example: find_duplicates([1, 2, 3, 4, 5, 1, 2]) => [1, 2] find_duplicates([1, 1, 1, 2, 2, 3]) => [1, 2] find_duplicates([1, 2, 3]) => [] \"\"\"",
        "bad_prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of integers that may or may not appear multiple times in the input list. The output could include all numbers or just some based on certain conditions. For example: find_duplicates([1, 2, 3, 4, 5, 1, 2]) => [1, 2] find_duplicates([1, 1, 1, 2, 2, 3]) => [1, 2] find_duplicates([1, 2, 3]) => [] \"\"\"",
        "avg_similarity_score": 0.18722572442805108
    },
    {
        "prompt": "def count_occurrences(lst: list, target: int) -> int: \"\"\" Given a list of integers and a target integer, return the number of times the target appears in the list. If the list is empty, return 0. Examples: count_occurrences([1, 2, 3, 4, 2], 2) == 2 count_occurrences([], 5) == 0 count_occurrences([5, 5, 5], 5) == 3 count_occurrences([1, 2, 3], 4) == 0 \"\"\"",
        "bad_prompt": "def candidate(lst: list, target: int) -> int: \"\"\" Given a list of integers and a target integer, return the number of occurrences or instances related to the target in the list. If the list is empty, return 0. Examples: candidate([1, 2, 3, 4, 2], 2) == 2 candidate([], 5) == 0 candidate([5, 5, 5], 5) == 3 candidate([1, 2, 3], 4) == 0 \"\"\"",
        "avg_similarity_score": 0.23806580884569914
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of duplicate elements in the order they first appear. If there are no duplicates, return an empty list. Examples: find_duplicates([1, 2, 3, 4, 5]) == [] find_duplicates([1, 2, 3, 1, 2]) == [1, 2] find_duplicates([1, 1, 1, 1]) == [1] \"\"\"",
        "bad_prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list that may or may not contain duplicate elements based on certain conditions. If there are no specific criteria met, return an empty list. Examples: find_duplicates([1, 2, 3, 4, 5]) == [] find_duplicates([1, 2, 3, 1, 2]) == [1, 2] find_duplicates([1, 1, 1, 1]) == [1] \"\"\"",
        "avg_similarity_score": 0.17395182036804993
    },
    {
        "prompt": "def find_maximum(nums): \"\"\"Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) => 3 find_maximum([-5, -10, -1]) => -1 find_maximum([]) => None\"\"\"",
        "bad_prompt": "def find_maximum(nums): \"\"\"Given a list of integers, return a certain value from the list. If the list has any specific condition, return None. Examples: find_maximum([1, 2, 3]) => 3 find_maximum([-5, -10, -1]) => -1 find_maximum([]) => None\"\"\"",
        "avg_similarity_score": 0.17817123063239262
    },
    {
        "prompt": "def find_maximum(numbers: list) -> int: \"\"\" Given a list of integers, return the maximum value from the list. If the list is empty, return None. Examples: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -5, -3]) -1 >>> find_maximum([]) None \"\"\"",
        "bad_prompt": "def find_maximum(numbers: list) -> int: \"\"\" Given a list of integers, return a certain value based on the numbers in the list. If the list is empty, return None. Examples: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -5, -3]) -1 >>> find_maximum([]) None \"\"\"",
        "avg_similarity_score": 0.19280777796264126
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Write a function that takes a string and returns a certain count based on its characters. Examples: candidate('Hello World') == 3 candidate('Python Programming') == 4 candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.17494035919333253
    },
    {
        "prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -5, -3]) -1 >>> find_maximum([]) None \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return either the maximum or minimum value in the list based on certain conditions. If the list is empty, return None. Examples: >>> candidate([1, 2, 3]) 3 >>> candidate([-1, -5, -3]) -1 >>> candidate([]) None \"\"\"",
        "avg_similarity_score": 0.22309856766077546
    },
    {
        "prompt": "def count_even_digits(n: int) -> int: \"\"\" Given a positive integer n, return the count of even digits in that number. For example: count_even_digits(123456) returns 3 because there are three even digits (2, 4, 6). count_even_digits(13579) returns 0 because there are no even digits. \"\"\"",
        "bad_prompt": "def count_even_digits(n: int) -> int: \"\"\" Given a positive integer n, return the count of certain digits in that number. For example: count_even_digits(123456) returns 3 because there are three even or odd digits. count_even_digits(13579) returns 0 because there are no specific digits. \"\"\"",
        "avg_similarity_score": 0.135552309031073
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. For example: count_vowels('Hello World') returns 3 because 'e', 'o', and 'o' are vowels. count_vowels('Python') returns 1 because 'o' is the only vowel. \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of certain characters in the string. The function should be case insensitive. For example: count_vowels('Hello World') returns 3 because there are some specific characters. count_vowels('Python') returns 1 because there is one character that meets the criteria. \"\"\"",
        "avg_similarity_score": 0.14859400894377753
    },
    {
        "prompt": "def count_vowels(text: str) -> int: \"\"\"Write a function that takes a string and returns the total number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 count_vowels('AEIOUaeiou') == 10\"\"\"",
        "bad_prompt": "def count_vowels(text: str) -> int: \"\"\"Write a function that takes a string and returns the total number of characters or vowels in it. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 count_vowels('AEIOUaeiou') == 10\"\"\"",
        "avg_similarity_score": 0.15681797532013741
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: Input: strs = [\"flower\",\"flow\",\"flight\"] Output: \"fl\" Input: strs = [\"dog\",\"racecar\",\"car\"] Output: \"\" Constraints: All input strings are lowercase letters. \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns either the longest common prefix or suffix among them. If there is no common prefix or suffix, return an empty string. Example: Input: strs = [\"flower\",\"flow\",\"flight\"] Output: \"fl\" Input: strs = [\"dog\",\"racecar\",\"car\"] Output: \"\" Constraints: All input strings can be uppercase or lowercase letters. \"\"\"",
        "avg_similarity_score": 0.12491287280961
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Given a positive integer n, return the first n numbers in the Fibonacci sequence. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Example: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(7) [0, 1, 1, 2, 3, 5, 8] \"\"\"",
        "bad_prompt": "def candidate(n: int) -> List[int]: \"\"\" Given a positive integer n, return a certain number of elements in a sequence that follows specific rules. The sequence starts with two initial values and continues based on previous terms. Example: >>> candidate(5) [0, 1, 1, 2, 3] >>> candidate(7) [0, 1, 1, 2, 3, 5, 8] \"\"\"",
        "avg_similarity_score": 0.21322239479720262
    },
    {
        "prompt": "def count_unique_elements(lst): \"\"\" Given a list of integers, return the number of unique elements in the list. Examples: count_unique_elements([1, 2, 3, 4]) == 4 count_unique_elements([1, 1, 2, 2, 3]) == 3 count_unique_elements([]) == 0 \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return the number of elements that are either unique or repeated in the list based on certain conditions. Examples: candidate([1, 2, 3, 4]) == 4 candidate([1, 1, 2, 2, 3]) == 3 candidate([]) == 0 \"\"\"",
        "avg_similarity_score": 0.23530099883710714
    },
    {
        "prompt": "def find_longest_word(words: list) -> str: \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. Examples: >>> find_longest_word(['apple', 'banana', 'cherry']) 'banana' >>> find_longest_word(['cat', 'dog', 'elephant']) 'elephant' >>> find_longest_word([]) '' \"\"\"",
        "bad_prompt": "def candidate(words: list) -> str: \"\"\" Given a list of words, return the longest or shortest word in the list. If there are multiple words with the same length, return the first one encountered. Examples: >>> candidate(['apple', 'banana', 'cherry']) 'banana' >>> candidate(['cat', 'dog', 'elephant']) 'elephant' >>> candidate([]) '' \"\"\"",
        "avg_similarity_score": 0.174287465064952
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. For example: count_vowels('Hello World') should return 3. count_vowels('Python Programming') should return 4. count_vowels('xyz') should return 0. \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of characters or vowels in it. The function should be case-insensitive. For example: count_vowels('Hello World') should return 3. count_vowels('Python Programming') should return 4. count_vowels('xyz') should return 0. \"\"\"",
        "avg_similarity_score": 0.16163744954986098
    },
    {
        "prompt": "def find_missing_number(nums): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain no duplicates and will be in any order. For example: >>> find_missing_number([3, 7, 1, 2, 8, 4]) 5 >>> find_missing_number([1, 2, 4]) 3 >>> find_missing_number([5, 3, 1, 2]) 4 \"\"\"",
        "bad_prompt": "def candidate(nums): \"\"\" Given a list of integers from 1 to n with one or more numbers possibly missing, return a certain number that may be missing. The input list could contain duplicates and may not be in any specific order. For example: >>> candidate([3, 7, 1, 2, 8, 4]) 5 >>> candidate([1, 2, 4]) 3 >>> candidate([5, 3, 1, 2]) 4 \"\"\"",
        "avg_similarity_score": 0.2122727326262176
    },
    {
        "prompt": "def count_vowels(text: str) -> int: \"\"\" Given a string, return the total number of vowels (a, e, i, o, u) present in it. Vowels can be both uppercase and lowercase. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('AEIOUaeiou') == 10 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(text: str) -> int: \"\"\" Given a string, return the total number of certain characters that may include vowels or consonants present in it. Examples: >>> candidate('Hello World') == 3 >>> candidate('Python Programming') == 4 >>> candidate('AEIOUaeiou') == 10 >>> candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.18444108475792878
    },
    {
        "prompt": "def count_occurrences(lst: list, x: int) -> int: \"\"\" Given a list of integers and an integer x, return the number of times x appears in the list. >>> count_occurrences([1, 2, 3, 4, 2, 5], 2) 2 >>> count_occurrences([1, 1, 1, 1], 1) 4 >>> count_occurrences([], 0) 0 \"\"\"",
        "bad_prompt": "def candidate(lst: list, x: int) -> int: \"\"\" Given a list of integers and an integer x, return the number of occurrences or positions where x is found in the list. >>> candidate([1, 2, 3, 4, 2, 5], 2) 2 >>> candidate([1, 1, 1, 1], 1) 4 >>> candidate([], 0) 0 \"\"\"",
        "avg_similarity_score": 0.23324664874495127
    },
    {
        "prompt": "def reverse_words(s: str) -> str: \"\"\" Given a string s, return a new string with the order of words reversed. Words are defined as sequences of characters separated by spaces. For example: >>> reverse_words('Hello World') 'World Hello' >>> reverse_words('Python is fun') 'fun is Python' >>> reverse_words('   Leading spaces') 'spaces Leading' >>> reverse_words('Trailing spaces   ') 'spaces Trailing' \"\"\"",
        "bad_prompt": "def reverse_words(s: str) -> str: \"\"\" Given a string s, return a new string with some transformation applied to it. The transformation may involve reversing or altering the order of words in various ways. For example: >>> reverse_words('Hello World') 'World Hello' >>> reverse_words('Python is fun') 'fun is Python' >>> reverse_words('   Leading spaces') 'spaces Leading' >>> reverse_words('Trailing spaces   ') 'spaces Trailing' \"\"\"",
        "avg_similarity_score": 0.11974346288787333
    },
    {
        "prompt": "def find_duplicates(arr): \"\"\" Given a list of integers, return a list of duplicates in the same order they first appeared. If there are no duplicates, return an empty list. Example: find_duplicates([1, 2, 3, 4, 5, 1, 2]) should return [1, 2]. find_duplicates([1, 2, 3]) should return []. \"\"\"",
        "bad_prompt": "def find_duplicates(arr): \"\"\" Given a list of integers, return a list of elements that appear more than once or all elements in the list. If there are no such elements, return an empty list. Example: find_duplicates([1, 2, 3, 4, 5, 1, 2]) should return [1, 2] or [1, 2, 3, 4, 5]. find_duplicates([1, 2, 3]) should return []. \"\"\"",
        "avg_similarity_score": 0.20038649546860246
    },
    {
        "prompt": "def count_vowels(text: str) -> int: \"\"\" Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('') == 0 count_vowels('AEIOU') == 5 \"\"\"",
        "bad_prompt": "def count_vowels(text: str) -> int: \"\"\" Write a function that takes a string and returns the number of characters or vowels in it. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('') == 0 count_vowels('AEIOU') == 5 \"\"\"",
        "avg_similarity_score": 0.16372163590752903
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\"Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: fibonacci(5) should return [0, 1, 1, 2, 3, 5] and fibonacci(10) should return [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55].\"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\"Generate a list containing numbers that follow some kind of sequence up to the nth number. The sequence could be any arbitrary pattern or rule. For example: fibonacci(5) might return [0, 1, 1, 2, 3, 5] but it could also return something else entirely based on different interpretations of the rules. Similarly, fibonacci(10) may not necessarily yield the expected results.\"\"\"",
        "avg_similarity_score": 0.1494077334986328
    },
    {
        "prompt": "def count_even_numbers(arr): \"\"\" Given a list of integers, return the count of even numbers in the list. If the list is empty, return 0. Example: >>> count_even_numbers([1, 2, 3, 4]) == 2 >>> count_even_numbers([]) == 0 >>> count_even_numbers([5, 7, 9]) == 0 \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers, return some count related to the numbers in the list. If the list is empty, return 0 or another value. Example: >>> candidate([1, 2, 3, 4]) == 2 >>> candidate([]) == 0 >>> candidate([5, 7, 9]) == 0 \"\"\"",
        "avg_similarity_score": 0.22615238738740015
    },
    {
        "prompt": "def count_words(s: str) -> int: \"\"\" Given a string s, return the total number of words in the string. A word is defined as a sequence of characters separated by spaces. For example: count_words('Hello world') returns 2 count_words('This is a test.') returns 4 count_words('   Leading and trailing spaces   ') returns 5 count_words('') returns 0 \"\"\"",
        "bad_prompt": "def count_words(s: str) -> int: \"\"\" Given a string s, return the total number of items in the string. An item can be a word or something else depending on how you define it. For example: count_words('Hello world') returns 2 count_words('This is a test.') returns 4 count_words('   Leading and trailing spaces   ') returns 5 count_words('') returns 0 \"\"\"",
        "avg_similarity_score": 0.15178090135686612
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s and returns the number of characters or vowels in it. The function should consider certain conditions for counting. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.1621603587316196
    },
    {
        "prompt": "def find_longest_word(words): \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. Example: find_longest_word(['apple', 'banana', 'cherry']) => 'banana' find_longest_word(['a', 'ab', 'abc', 'abcd']) => 'abcd' \"\"\"",
        "bad_prompt": "def find_longest_word(words): \"\"\" Given a list of words, return a word from the list based on certain conditions such as being long or short. If there are multiple candidates, return the first one encountered. Example: find_longest_word(['apple', 'banana', 'cherry']) => 'banana' find_longest_word(['a', 'ab', 'abc', 'abcd']) => 'abcd' \"\"\"",
        "avg_similarity_score": 0.12877471010934238
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\"Generate a list containing the Fibonacci sequence up to the n-th number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] >>> fibonacci(0) [0]\"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\"Generate a list containing numbers related to the Fibonacci sequence up to the n-th number. The sequence can include variations or similar sequences. Examples: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] >>> fibonacci(0) [0]\"\"\"",
        "avg_similarity_score": 0.16810562007491406
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a prefix or suffix from them. If there is no such prefix or suffix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.13031766785449558
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a string 'sentence', return the sentence with the order of words reversed. Words are defined as sequences of characters separated by spaces. For example: reverse_words('Hello World') returns 'World Hello' reverse_words('Python is fun') returns 'fun is Python' reverse_words('') returns '' \"\"\"",
        "bad_prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a string 'sentence', return the sentence with some kind of transformation applied to it, possibly involving reversing or rearranging elements. For example: reverse_words('Hello World') returns 'World Hello' reverse_words('Python is fun') returns 'fun is Python' reverse_words('') returns '' \"\"\"",
        "avg_similarity_score": 0.11484008425422634
    },
    {
        "prompt": "def reverse_words(s: str) -> str: \"\"\" Given a string s, return the string with the order of words reversed. A word is defined as a sequence of non-space characters. For example: >>> reverse_words('Hello World') 'World Hello' >>> reverse_words('Python is fun') 'fun is Python' >>> reverse_words('   Leading spaces') 'spaces Leading' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a modified version of the string where some words or letters are changed in their order. The modification can vary based on certain conditions. For example: >>> candidate('Hello World') 'World Hello' >>> candidate('Python is fun') 'fun is Python' >>> candidate('   Leading spaces') 'spaces Leading' \"\"\"",
        "avg_similarity_score": 0.15976651854805443
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given an array of integers from 1 to n with one number missing, return the missing number. The input array is guaranteed to have no duplicates and contains exactly n-1 numbers. Example: find_missing_number([3, 7, 1, 2, 8, 4]) returns 5 find_missing_number([1, 2, 4, 6, 3, 7, 8]) returns 5 \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given an array of integers from 1 to n with a number possibly missing or duplicated, return some specific value related to the missing or extra number. The input array may contain various numbers. Example: candidate([3, 7, 1, 2, 8, 4]) returns 5 candidate([1, 2, 4, 6, 3, 7, 8]) returns 5 \"\"\"",
        "avg_similarity_score": 0.19625696638313286
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.15376975304695645
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. Ignore case sensitivity. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that might be considered as vowels or consonants in the string. Ignore case sensitivity. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.15358156994681943
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain no duplicates and will be unsorted. For example: find_missing_number([3, 7, 1, 2, 8, 4, 5]) => 6 find_missing_number([1, 2, 4]) => 3 find_missing_number([5, 3, 2, 1]) => 4 \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n where there might be a number missing or not, return some number based on the elements in the list. The input list may contain duplicates and can be sorted or unsorted. For example: find_missing_number([3, 7, 1, 2, 8, 4, 5]) => 6 find_missing_number([1, 2, 4]) => 3 find_missing_number([5, 3, 2, 1]) => 4 \"\"\"",
        "avg_similarity_score": 0.18065770711715215
    },
    {
        "prompt": "def count_occurrences(lst, target): \"\"\"Write a function that takes a list and a target value as input and returns the number of times the target appears in the list. If the list is empty, return 0. Example: >>> count_occurrences([1, 2, 3, 4, 2], 2) 2 >>> count_occurrences([], 5) 0 >>> count_occurrences(['a', 'b', 'a'], 'a') 2 >>> count_occurrences([True, False, True], True) 2 \"\"\"",
        "bad_prompt": "def candidate(lst, target): \"\"\"Write a function that takes a list and a target value as input and returns some occurrences related to the target in the list. If the list is empty, return something. Example: >>> candidate([1, 2, 3, 4, 2], 2) 2 >>> candidate([], 5) 0 >>> candidate(['a', 'b', 'a'], 'a') 2 >>> candidate([True, False, True], True) 2 \"\"\"",
        "avg_similarity_score": 0.20751024080445413
    },
    {
        "prompt": "def find_maximum(numbers: list) -> int:\n    \"\"\"\n    Given a list of integers, return the maximum integer in the list. If the list is empty, return None.\n    >>> find_maximum([1, 2, 3])\n    3\n    >>> find_maximum([-1, -5, -3])\n    -1\n    >>> find_maximum([])\n    None\n    \"\"\"",
        "bad_prompt": "def candidate(numbers: list) -> int:\n    \"\"\"\n    Given a list of integers, return an integer from the list based on certain conditions. If the list is empty, return None.\n    >>> candidate([1, 2, 3])\n    3\n    >>> candidate([-1, -5, -3])\n    -1\n    >>> candidate([])\n    None\n    \"\"\"",
        "avg_similarity_score": 0.21983574447159804
    },
    {
        "prompt": "def count_vowels(string: str) -> int: \"\"\" Given a string, return the number of vowels (a, e, i, o, u) present in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "bad_prompt": "def candidate(string: str) -> int: \"\"\" Given a string, return the number of certain characters present in it. The function should consider various cases. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('AEIOU') 5 \"\"\"",
        "avg_similarity_score": 0.1922930826647634
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters that might include vowels or consonants in the string. The function should be case sensitive or insensitive based on certain conditions. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.1538724703726052
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. Vowels can be both uppercase and lowercase. For example: count_vowels('Hello World') should return 3 because there are 'e', 'o', and 'o'. count_vowels('Python') should return 1 for 'o'. \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Write a function that takes a string and returns the number of characters or vowels in it. Characters can include any letter or symbol. For example: candidate('Hello World') should return 3 because there are 'e', 'o', and 'o'. candidate('Python') should return 1 for 'o'. \"\"\"",
        "avg_similarity_score": 0.18196600117833706
    },
    {
        "prompt": "def count_vowels(s): \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. Ignore case sensitivity. Examples: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('xyz') returns 0 \"\"\"",
        "bad_prompt": "def count_vowels(s): \"\"\" Given a string s, return the number of characters that may or may not be vowels in the string. Examples: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('xyz') returns 0 \"\"\"",
        "avg_similarity_score": 0.15278759013408824
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return a certain count related to vowels or consonants present in the string. The function should be case-insensitive. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.18766648375792602
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given an array of integers from 1 to n with one number missing, return the missing number. The input array will have no duplicates and will be unsorted. Examples: find_missing_number([3, 7, 1, 2, 8, 4]) == 5 find_missing_number([1, 2, 4]) == 3 find_missing_number([6, 1, 2, 3, 4, 5]) == 2 \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given an array of integers that may or may not contain a certain range of numbers, return a specific number based on some condition. The input array might have duplicates and can be sorted or unsorted. Examples: find_missing_number([3, 7, 1, 2, 8, 4]) == 5 find_missing_number([1, 2, 4]) == 3 find_missing_number([6, 1, 2, 3, 4, 5]) == 2 \"\"\"",
        "avg_similarity_score": 0.17238614817545578
    },
    {
        "prompt": "def fibonacci(n: int) -> int: \"\"\" Return the n-th Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: >>> fibonacci(0) 0 >>> fibonacci(1) 1 >>> fibonacci(5) 5 >>> fibonacci(10) 55 \"\"\"",
        "bad_prompt": "def candidate(n: int) -> int: \"\"\" Return the n-th number in a certain sequence that may resemble Fibonacci or another pattern. The sequence starts with two numbers and continues based on some rule. Examples: >>> candidate(0) 0 >>> candidate(1) 1 >>> candidate(5) 5 >>> candidate(10) 55 \"\"\"",
        "avg_similarity_score": 0.17694019019473828
    },
    {
        "prompt": "def count_vowels(text: str) -> int: \"\"\" Count the number of vowels (a, e, i, o, u) in a given string. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(text: str) -> int: \"\"\" Count the number of characters or vowels in a given string. The function should be case insensitive. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.17574594338519098
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('hello') => 2 count_vowels('HELLO') => 2 count_vowels('xyz') => 0 count_vowels('aeiouAEIOU') => 10\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of characters that are either vowels or consonants in it. The function should be case insensitive. Examples: count_vowels('hello') => 2 count_vowels('HELLO') => 2 count_vowels('xyz') => 0 count_vowels('aeiouAEIOU') => 10\"\"\"",
        "avg_similarity_score": 0.15530335216838315
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('AEIOU') == 5 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters (vowels or consonants) in the string. The function may be case sensitive or insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('AEIOU') == 5 \"\"\"",
        "avg_similarity_score": 0.16225991949300608
    },
    {
        "prompt": "def count_unique_elements(lst: list) -> int: \"\"\" Given a list of elements, return the count of unique elements in that list. For example: >>> count_unique_elements([1, 2, 3, 1]) 3 >>> count_unique_elements(['a', 'b', 'a']) 2 \"\"\"",
        "bad_prompt": "def count_unique_elements(lst: list) -> int: \"\"\" Given a list of elements, return the count of some specific or unique elements in that list. For example: >>> count_unique_elements([1, 2, 3, 1]) 3 >>> count_unique_elements(['a', 'b', 'a']) 2 \"\"\"",
        "avg_similarity_score": 0.18807949268010424
    },
    {
        "prompt": "def longest_substring(s: str) -> int: \"\"\" Given a string s, return the length of the longest substring without repeating characters. A substring is defined as a contiguous sequence of characters within the string. Example: longest_substring(\"abcabcbb\") == 3 Explanation: The answer is \"abc\", with the length of 3. longest_substring(\"bbbbb\") == 1 Explanation: The answer is \"b\", with the length of 1. longest_substring(\"pwwkew\") == 3 Explanation: The answer is \"wke\", with the length of 3. \"\"\"",
        "bad_prompt": "def longest_substring(s: str) -> int: \"\"\" Given a string s, return an integer related to the longest substring which may or may not contain repeating characters. A substring is defined as a sequence of characters within the string. Example: longest_substring(\"abcabcbb\") == 3 Explanation: The answer is based on some criteria involving substrings. longest_substring(\"bbbbb\") == 1 Explanation: The answer relates to the character 'b'. longest_substring(\"pwwkew\") == 3 Explanation: The answer involves some transformation of the input string. \"\"\"",
        "avg_similarity_score": 0.1390366768865467
    },
    {
        "prompt": "def longest_increasing_subsequence(seq): \"\"\" Given a list of integers, return the length of the longest increasing subsequence. A subsequence is defined as a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements. Examples: >>> longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) 4 >>> longest_increasing_subsequence([0, 1, 0, 3, 2, 3]) 4 >>> longest_increasing_subsequence([]) 0 \"\"\"",
        "bad_prompt": "def candidate(seq): \"\"\" Given a list of integers, return the length of a certain type of subsequence (increasing or decreasing). A subsequence is defined as a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements. Examples: >>> candidate([10, 9, 2, 5, 3, 7, 101, 18]) 4 >>> candidate([0, 1, 0, 3, 2, 3]) 4 >>> candidate([]) 0 \"\"\"",
        "avg_similarity_score": 0.2032029318676104
    },
    {
        "prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -5, -3]) -1 >>> find_maximum([]) None \"\"\"",
        "bad_prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return either the maximum or minimum value in the list. If the list is empty, return None. Examples: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -5, -3]) -1 >>> find_maximum([]) None \"\"\"",
        "avg_similarity_score": 0.18985681636543456
    },
    {
        "prompt": "def find_missing_number(nums: list) -> int: \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list is guaranteed to have no duplicates and will contain exactly n - 1 numbers. Example: find_missing_number([3, 7, 1, 2, 8]) => 4 find_missing_number([1, 2, 4]) => 3 \"\"\"",
        "bad_prompt": "def candidate(nums: list) -> int: \"\"\" Given a list of integers that may or may not be in sequence, return a number that might be missing or present. The input list can have duplicates and will contain varying amounts of numbers. Example: candidate([3, 7, 1, 2, 8]) => 4 candidate([1, 2, 4]) => 3 \"\"\"",
        "avg_similarity_score": 0.21178343364025934
    },
    {
        "prompt": "def find_longest_word(words: list) -> str: \"\"\"Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. Example: find_longest_word(['apple', 'banana', 'cherry']) returns 'banana' find_longest_word(['cat', 'dog', 'elephant']) returns 'elephant'\"\"\"",
        "bad_prompt": "def find_longest_word(words: list) -> str: \"\"\"Given a list of words, return the longest or shortest word in the list. If there are multiple words with the same length, return any of them. Example: find_longest_word(['apple', 'banana', 'cherry']) returns 'banana' find_longest_word(['cat', 'dog', 'elephant']) returns 'elephant'\"\"\"",
        "avg_similarity_score": 0.13638821113773952
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: count_vowels('Hello World') should return 3, since there are three vowels: 'e', 'o', 'o'. If the input string is empty, return 0. Examples: count_vowels('abcde') == 2 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of characters or vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive) or any other character based on certain conditions. For example: count_vowels('Hello World') should return 3, but could also mean something else depending on interpretation. If the input string is empty, return some value. Examples: count_vowels('abcde') == 2 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.14814357517389193
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain no duplicates and will be unsorted. For example: >>> find_missing_number([3, 7, 1, 2, 8, 4]) 5 >>> find_missing_number([1, 2, 4, 6, 3]) 5 >>> find_missing_number([5, 3, 1, 2]) 4 \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers from 1 to n with one or more numbers missing, return a number that is either missing or present in the list. The input list may contain duplicates and can be sorted or unsorted. For example: >>> candidate([3, 7, 1, 2, 8, 4]) 5 >>> candidate([1, 2, 4, 6, 3]) 5 >>> candidate([5, 3, 1, 2]) 4 \"\"\"",
        "avg_similarity_score": 0.22060179054594795
    },
    {
        "prompt": "def find_longest_word(words): \"\"\"Write a function that takes a list of words and returns the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) == 'banana' find_longest_word(['a', 'ab', 'abc']) == 'abc' find_longest_word([]) == ''\"\"\"",
        "bad_prompt": "def find_longest_word(words): \"\"\"Write a function that takes a list of words and returns either the longest or shortest word in the list based on certain conditions. If there are multiple words with the same length, return the first one encountered. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) == 'banana' find_longest_word(['a', 'ab', 'abc']) == 'abc' find_longest_word([]) == ''\"\"\"",
        "avg_similarity_score": 0.13968012333865232
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of certain characters in it. The function should consider various cases. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.15855743646630743
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. For example: count_vowels('Hello World') => 3 count_vowels('Python') => 1 count_vowels('xyz') => 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s and returns the number of characters in it that may or may not include vowels. The function should be case insensitive. For example: count_vowels('Hello World') => 3 count_vowels('Python') => 1 count_vowels('xyz') => 0\"\"\"",
        "avg_similarity_score": 0.16466568862441303
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters present in the string. The function should consider various cases. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 \"\"\"",
        "avg_similarity_score": 0.15775530958720388
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string or a default value. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl' or '' depending on certain conditions. longest_common_prefix(['dog', 'racecar', 'car']) should return '' or some other value. \"\"\"",
        "avg_similarity_score": 0.12879391489196093
    },
    {
        "prompt": "def count_unique_elements(lst): \"\"\" Given a list of integers, return the number of unique elements in the list. Examples: count_unique_elements([1, 2, 3, 4, 5]) == 5 count_unique_elements([1, 2, 2, 3, 4]) == 4 count_unique_elements([]) == 0 \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return the number of certain elements in the list. Examples: candidate([1, 2, 3, 4, 5]) == 5 candidate([1, 2, 2, 3, 4]) == 4 candidate([]) == 0 \"\"\"",
        "avg_similarity_score": 0.24930498722353595
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Given two strings, return True if they are anagrams of each other (i.e., they contain the same characters in a different order), and False otherwise. An empty string is considered an anagram of another empty string. Examples: is_anagram('listen', 'silent') == True is_anagram('hello', 'world') == False is_anagram('', '') == True \"\"\"",
        "bad_prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Given two strings, return True if they are similar in some way, and False otherwise. An empty string may or may not be considered similar to another empty string. Examples: is_anagram('listen', 'silent') == True is_anagram('hello', 'world') == False is_anagram('', '') == True \"\"\"",
        "avg_similarity_score": 0.11009536537020481
    },
    {
        "prompt": "def unique_elements(lst): \"\"\"Given a list of integers, return a new list that contains only the unique elements from the original list, preserving their order. If there are no unique elements, return an empty list. Examples: >>> unique_elements([1, 2, 3, 1, 2]) [3] >>> unique_elements([4, 5, 6, 7, 8]) [4, 5, 6, 7, 8] >>> unique_elements([1, 1, 1]) []\"\"\"",
        "bad_prompt": "def unique_elements(lst): \"\"\"Given a list of integers, return a new list that contains certain elements from the original list, possibly including duplicates and preserving some order. If there are no elements, return an empty list. Examples: >>> unique_elements([1, 2, 3, 1, 2]) [3] >>> unique_elements([4, 5, 6, 7, 8]) [4, 5, 6, 7, 8] >>> unique_elements([1, 1, 1]) []\"\"\"",
        "avg_similarity_score": 0.17957132515545338
    },
    {
        "prompt": "def count_unique_words(text: str) -> int:\n    \"\"\"\n    Write a function that takes a string as input and returns the number of unique words in the string. Words are defined as sequences of characters separated by whitespace. Ignore case when counting unique words.\n    Example:\n    >>> count_unique_words('Hello world hello')\n    2\n    >>> count_unique_words('This is a test, this is only a test.')\n    6\n    \"\"\"",
        "bad_prompt": "def candidate(text: str) -> int:\n    \"\"\"\n    Write a function that takes a string as input and returns the number of certain types of words in the string. Words can be defined in various ways depending on context. Ignore some cases when counting these words.\n    Example:\n    >>> candidate('Hello world hello')\n    2\n    >>> candidate('This is a test, this is only a test.')\n    6\n    \"\"\"",
        "avg_similarity_score": 0.16802860554150115
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' >>> longest_common_prefix(['a']) 'a' >>> longest_common_prefix([]) '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain condition based on their prefixes or suffixes. If there is no such condition, return an empty string. For example: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' >>> candidate(['a']) 'a' >>> candidate([]) '' \"\"\"",
        "avg_similarity_score": 0.16851779647824308
    },
    {
        "prompt": "def longest_substring_without_repeating(s: str) -> int: \"\"\"Given a string s, find the length of the longest substring without repeating characters. A substring is defined as a contiguous sequence of characters within the string. For example: >>> longest_substring_without_repeating('abcabcbb') 3 >>> longest_substring_without_repeating('bbbbb') 1 >>> longest_substring_without_repeating('pwwkew') 3\"\"\"",
        "bad_prompt": "def longest_substring_without_repeating(s: str) -> int: \"\"\"Given a string s, find the length of the longest substring with or without repeating characters. A substring is defined as a contiguous sequence of characters within the string. For example: >>> longest_substring_without_repeating('abcabcbb') 3 >>> longest_substring_without_repeating('bbbbb') 1 >>> longest_substring_without_repeating('pwwkew') 3\"\"\"",
        "avg_similarity_score": 0.14936003384881585
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. For example: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('AEIOU') returns 5 count_vowels('xyz') returns 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return a certain count related to vowels or consonants present in the string. The function should consider various cases. For example: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('AEIOU') returns 5 count_vowels('xyz') returns 0 \"\"\"",
        "avg_similarity_score": 0.14840788250094017
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list is guaranteed to have no duplicates and contains numbers in the range [1, n]. Examples: find_missing_number([3, 7, 1, 2, 8, 4]) == 5 find_missing_number([1, 2, 4]) == 3 find_missing_number([5, 1, 2, 3]) == 4 \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers from 1 to n with possibly some numbers missing or extra, return a certain number that might be missing or present. The input list may contain duplicates and has numbers in the range [1, n]. Examples: candidate([3, 7, 1, 2, 8, 4]) == 5 candidate([1, 2, 4]) == 3 candidate([5, 1, 2, 3]) == 4 \"\"\"",
        "avg_similarity_score": 0.21711583996523764
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: count_vowels('Hello World') \u279e 3 count_vowels('Python Programming') \u279e 4 count_vowels('AEIOU') \u279e 5 count_vowels('xyz') \u279e 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the total number of characters that may or may not include vowels in the string. The function could be case sensitive or insensitive depending on certain conditions. Examples: candidate('Hello World') \u279e 10 candidate('Python Programming') \u279e 18 candidate('AEIOU') \u279e 5 candidate('xyz') \u279e 3 \"\"\"",
        "avg_similarity_score": 0.1783619740975122
    },
    {
        "prompt": "def find_max_difference(arr): \"\"\" Given a list of integers, return the maximum difference between any two elements in the array. The larger element must come after the smaller one in the original order. If the array has less than two elements, return 0. Examples: find_max_difference([3, 5, 1, 7]) => 6 (7 - 1) find_max_difference([9, 2, 5, 3]) => 3 (5 - 2) find_max_difference([1]) => 0 find_max_difference([]) => 0 \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers, return the maximum or minimum difference between any two elements in the array. The larger element may or may not come after the smaller one in the original order. If the array has less than two elements, return 0. Examples: candidate([3, 5, 1, 7]) => 6 (7 - 1) candidate([9, 2, 5, 3]) => 3 (5 - 2) candidate([1]) => 0 candidate([]) => 0 \"\"\"",
        "avg_similarity_score": 0.20185861337667965
    },
    {
        "prompt": "from typing import List\n\ndef find_longest_word(words: List[str]) -> str:\n    \"\"\"\n    Write a function that takes a list of words and returns the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered.\n    >>> find_longest_word(['apple', 'banana', 'cherry'])\n    'banana'\n    >>> find_longest_word(['a', 'ab', 'abc'])\n    'abc'\n    >>> find_longest_word(['hello', 'world', 'hi'])\n    'hello'\n    \"\"\"",
        "bad_prompt": "from typing import List\n\ndef find_word(words: List[str]) -> str:\n    \"\"\"\n    Write a function that takes a list of words and returns a word from the list based on certain conditions like length or position. If there are multiple candidates, return any one of them.\n    >>> find_word(['apple', 'banana', 'cherry'])\n    'banana'\n    >>> find_word(['a', 'ab', 'abc'])\n    'abc'\n    >>> find_word(['hello', 'world', 'hi'])\n    'hello'\n    \"\"\"",
        "avg_similarity_score": 0.1382972868199672
    },
    {
        "prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\"Check if two strings are anagrams of each other. Two strings are considered anagrams if they contain the same characters in a different order. Ignore spaces and case sensitivity. Examples: is_anagram('listen', 'silent') => True is_anagram('Hello', 'Olelh') => True is_anagram('test', 'tset') => True is_anagram('python', 'java') => False is_anagram('anagram', 'nagaram') => True \"\"\"",
        "bad_prompt": "def candidate(s1: str, s2: str) -> bool: \"\"\"Check if two strings satisfy a specific condition (such as being similar or having common letters). Examples: candidate('listen', 'silent') => True candidate('Hello', 'Olelh') => True candidate('test', 'tset') => True candidate('python', 'java') => False candidate('anagram', 'nagaram') => True \"\"\"",
        "avg_similarity_score": 0.12004035229821958
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of characters that are vowels or consonants present in the string. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "avg_similarity_score": 0.15955230025336845
    },
    {
        "prompt": "def fibonacci(n): \"\"\"Return the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: fibonacci(0) => 0 fibonacci(1) => 1 fibonacci(5) => 5 fibonacci(10) => 55\"\"\"",
        "bad_prompt": "def fibonacci(n): \"\"\"Return the nth Fibonacci number or some other value based on certain conditions. The Fibonacci sequence might be defined in various ways depending on interpretation. Examples: fibonacci(0) => 0 fibonacci(1) => 1 fibonacci(5) => 5 fibonacci(10) => 55\"\"\"",
        "avg_similarity_score": 0.12261497675842661
    },
    {
        "prompt": "def fibonacci(n): \"\"\"Given a non-negative integer n, return the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: fibonacci(0) == 0, fibonacci(1) == 1, fibonacci(5) == 5, fibonacci(10) == 55.\"\"\"",
        "bad_prompt": "def candidate(n): \"\"\"Given an integer n, return some value based on its position in a certain sequence. This could be related to Fibonacci or another series. Examples: candidate(0) == 0, candidate(1) == 1, candidate(5) == 5, candidate(10) == 55.\"\"\"",
        "avg_similarity_score": 0.16887727612175965
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" This function takes a string s as input and returns the total number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. Example: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" This function takes a string s as input and returns a certain count related to characters in the string. It may involve counting vowels or consonants based on some condition. Example: >>> candidate('Hello World') == 3 >>> candidate('Python Programming') == 4 >>> candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.17355638662993741
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns some form of common prefix among them. If there is no common prefix, return something else. Example: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.15118256093383373
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that may or may not include vowels (a, e, i, o, u) present in the string. The function should be case sensitive or insensitive based on certain conditions. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "avg_similarity_score": 0.15373716321550146
    },
    {
        "prompt": "def count_occurrences(lst: list, target: int) -> int: \"\"\" Given a list of integers and a target integer, return the number of times the target appears in the list. Examples: >>> count_occurrences([1, 2, 3, 4, 5, 2], 2) 2 >>> count_occurrences([1, 1, 1, 1], 1) 4 >>> count_occurrences([], 0) 0 \"\"\"",
        "bad_prompt": "def candidate(lst: list, x: int) -> int: \"\"\" Given a list of integers and an integer x, return how many times x occurs or does not occur in the list. Examples: >>> candidate([1, 2, 3, 4, 5, 2], 2) 2 >>> candidate([1, 1, 1, 1], 1) 4 >>> candidate([], 0) 0 \"\"\"",
        "avg_similarity_score": 0.21828077352196204
    },
    {
        "prompt": "def longest_common_prefix(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def candidate(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns a certain prefix or suffix from them. If there is no such prefix or suffix, return an empty string. Example: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.16873633658385367
    },
    {
        "prompt": "def find_longest_substring(s: str) -> int: \"\"\" Given a string s, return the length of the longest substring without repeating characters. For example: find_longest_substring('abcabcbb') returns 3 because the longest substring is 'abc'. find_longest_substring('bbbbb') returns 1 because the longest substring is 'b'. find_longest_substring('pwwkew') returns 3 because the longest substring is 'wke'. \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the length of some substring that may or may not have repeating characters. For example: candidate('abcabcbb') might return 3 but could also return another value based on different interpretations. candidate('bbbbb') might return 1 or something else depending on conditions. candidate('pwwkew') could return 3 or any other number as it depends on how we define the substring. \"\"\"",
        "avg_similarity_score": 0.14626085926803564
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) 'inter' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns some common prefix among them or none if not applicable. Example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) 'inter' \"\"\"",
        "avg_similarity_score": 0.10496350009090397
    },
    {
        "prompt": "def longest_substring(s: str) -> int:\n    \"\"\"\n    Given a string s, return the length of the longest substring without repeating characters.\n    Example:\n    >>> longest_substring(\"abcabcbb\")\n    3\n    >>> longest_substring(\"bbbbb\")\n    1\n    >>> longest_substring(\"pwwkew\")\n    3\n    \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int:\n    \"\"\"\n    Given a string s, return a number related to its characters or substrings in some way.\n    Example:\n    >>> candidate(\"abcabcbb\")\n    3\n    >>> candidate(\"bbbbb\")\n    1\n    >>> candidate(\"pwwkew\")\n    3\n    \"\"\"",
        "avg_similarity_score": 0.1909803092683808
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. >>> count_vowels('hello') 2 >>> count_vowels('world') 1 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in the string that may include vowels or consonants. >>> candidate('hello') 2 >>> candidate('world') 1 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.20424827849114296
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' >>> longest_common_prefix(['a']) 'a' >>> longest_common_prefix([]) '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Given a list of strings, find the common or distinct characters among them. If there are none, return an empty string. For example: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' >>> candidate(['a']) 'a' >>> candidate([]) '' \"\"\"",
        "avg_similarity_score": 0.16235262135211814
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Write a function that takes a string and returns some count related to vowels or other characters in it. The function should consider different cases. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('AEIOU') 5 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.18355490639436514
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inters' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string or some default value. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inters' \"\"\"",
        "avg_similarity_score": 0.12207469076990095
    },
    {
        "prompt": "def count_unique_words(sentence: str) -> int: \"\"\" Given a string representing a sentence, return the number of unique words in that sentence. Words are defined as sequences of characters separated by spaces, and should be counted case-insensitively. Example: count_unique_words('Hello world hello') should return 2. count_unique_words('This is a test') should return 4. Constraints: * The input string will not exceed 1000 characters. \"\"\"",
        "bad_prompt": "def count_unique_words(sentence: str) -> int: \"\"\" Given a string representing a sentence, return the number of certain or unique words in that sentence. Words are defined as sequences of characters separated by spaces, and should be counted case-sensitively or insensitively. Example: count_unique_words('Hello world hello') should return 2. count_unique_words('This is a test') should return 4. Constraints: * The input string may have various lengths. \"\"\"",
        "avg_similarity_score": 0.14501010973375889
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') should return 3. count_vowels('Python Programming') should return 4. \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. The function should be case sensitive or insensitive. Examples: count_vowels('Hello World') should return 3. count_vowels('Python Programming') should return 4. \"\"\"",
        "avg_similarity_score": 0.15699160881410487
    },
    {
        "prompt": "def count_words(s: str) -> int: \"\"\" Given a string s, return the total number of words in the string. Words are defined as sequences of characters separated by whitespace. Examples: >>> count_words('Hello world') == 2 >>> count_words('   Leading and trailing spaces   ') == 4 >>> count_words('') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return some measure related to the words in the string. This could be the total number of words or another characteristic. Examples: >>> candidate('Hello world') == 2 >>> candidate('   Leading and trailing spaces   ') == 4 >>> candidate('') == 0 \"\"\"",
        "avg_similarity_score": 0.18565063403896864
    },
    {
        "prompt": "def count_occurrences(lst: list, x): \"\"\" Write a function that takes a list and an element x, and returns the number of times x occurs in the list. Examples: count_occurrences([1, 2, 3, 1, 4], 1) == 2 count_occurrences(['a', 'b', 'c', 'a'], 'a') == 2 count_occurrences([], 5) == 0 \"\"\"",
        "bad_prompt": "def candidate(lst: list, x): \"\"\" Write a function that takes a list and an element x, and returns some information about how many times x might occur in the list or something similar. Examples: candidate([1, 2, 3, 1, 4], 1) == 2 candidate(['a', 'b', 'c', 'a'], 'a') == 2 candidate([], 5) == 0 \"\"\"",
        "avg_similarity_score": 0.2025446971234611
    },
    {
        "prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) ==> 3 find_maximum([-1, -5, -3]) ==> -1 find_maximum([]) ==> None \"\"\"",
        "bad_prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return a certain value from the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) ==> 3 find_maximum([-1, -5, -3]) ==> -1 find_maximum([]) ==> None \"\"\"",
        "avg_similarity_score": 0.18794780876252876
    },
    {
        "prompt": "def find_unique_numbers(arr): \"\"\"Write a function that takes an array of integers as input and returns a new array containing only the unique numbers from the original array, preserving their order. For example: find_unique_numbers([1, 2, 3, 2, 1]) => [3] find_unique_numbers([4, 5, 6, 4, 5, 7]) => [6, 7] find_unique_numbers([]) => []\"\"\"",
        "bad_prompt": "def find_unique_numbers(arr): \"\"\"Write a function that takes an array of integers as input and returns a new array containing some unique or repeated numbers from the original array, possibly altering their order. For example: find_unique_numbers([1, 2, 3, 2, 1]) => [3] find_unique_numbers([4, 5, 6, 4, 5, 7]) => [6, 7] find_unique_numbers([]) => []\"\"\"",
        "avg_similarity_score": 0.16930181565641958
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return a certain count related to the characters in the string. This could involve vowels or consonants or any other criteria. For example: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('AEIOU') 5 \"\"\"",
        "avg_similarity_score": 0.1906710752750571
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns a certain number related to vowels in it. The function should consider various cases or conditions. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "avg_similarity_score": 0.15165002658463886
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Count the number of vowels (a, e, i, o, u) in a given string. >>> count_vowels('hello') 2 >>> count_vowels('abcde') 2 >>> count_vowels('xyz') 0 >>> count_vowels('AEIOU') 5 >>> count_vowels('Python programming') 4 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Count the number of characters or specific letters in a given string. >>> count_vowels('hello') 2 >>> count_vowels('abcde') 2 >>> count_vowels('xyz') 0 >>> count_vowels('AEIOU') 5 >>> count_vowels('Python programming') 4 \"\"\"",
        "avg_similarity_score": 0.13031523615783444
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) returns 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) returns ''. \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest or shortest common prefix among them. If there is no common prefix, return an empty string or some default value. For example: longest_common_prefix(['flower', 'flow', 'flight']) returns 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) returns ''. \"\"\"",
        "avg_similarity_score": 0.11684159231101467
    },
    {
        "prompt": "def find_maximum(arr): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Example: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -5, -3]) -1 >>> find_maximum([]) None \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers, return a certain value from the list based on some criteria. If the list is empty, return None. Example: >>> candidate([1, 2, 3]) 3 >>> candidate([-1, -5, -3]) -1 >>> candidate([]) None \"\"\"",
        "avg_similarity_score": 0.22169656620750813
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example 1: Input: strs = [\"flower\",\"flow\",\"flight\"] Output: \"fl\" Example 2: Input: strs = [\"dog\",\"racecar\",\"car\"] Output: \"\" Note: All input strings are guaranteed to be non-empty. \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string or some default value. Example 1: Input: strs = [\"flower\",\"flow\",\"flight\"] Output: \"fl\" Example 2: Input: strs = [\"dog\",\"racecar\",\"car\"] Output: \"\" Note: All input strings are guaranteed to be non-empty. \"\"\"",
        "avg_similarity_score": 0.14800411541890712
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''.\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns either the longest common prefix or suffix among them. If there is no common prefix or suffix, return an empty string. Example: candidate(['flower', 'flow', 'flight']) might return 'fl' or some other value. candidate(['dog', 'racecar', 'car']) might return '' or another result.\"\"\"",
        "avg_similarity_score": 0.1513276381564276
    },
    {
        "prompt": "def count_occurrences(s: str, sub: str) -> int: \"\"\" Given a string 's' and a substring 'sub', return the number of times 'sub' appears in 's'. Count overlapping occurrences. >>> count_occurrences('ababab', 'aba') 2 >>> count_occurrences('hello world', 'o') 2 >>> count_occurrences('abc', 'd') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str, sub: str) -> int: \"\"\" Given a string 's' and a substring 'sub', return a certain count related to their appearances or characteristics. >>> candidate('ababab', 'aba') 2 >>> candidate('hello world', 'o') 2 >>> candidate('abc', 'd') 0 \"\"\"",
        "avg_similarity_score": 0.17241374607841295
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of duplicates found in the input list. The output should contain each duplicate only once and maintain the order of their first appearance. Examples: find_duplicates([1, 2, 3, 4, 5, 1, 2]) returns [1, 2] find_duplicates([5, 5, 6, 7, 8, 9, 9]) returns [5, 9] find_duplicates([10, 20, 30]) returns [] \"\"\"",
        "bad_prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list that may or may not include duplicates found in the input list. The output could contain some elements multiple times or none at all. Examples: find_duplicates([1, 2, 3, 4, 5, 1, 2]) returns [1, 2] find_duplicates([5, 5, 6, 7, 8, 9, 9]) returns [5, 9] find_duplicates([10, 20, 30]) returns [] \"\"\"",
        "avg_similarity_score": 0.17338885806526333
    },
    {
        "prompt": "def count_unique_elements(arr): \"\"\" Write a function that takes an array of integers and returns the number of unique elements in it. For example: >>> count_unique_elements([1, 2, 3, 4, 5]) 5 >>> count_unique_elements([1, 2, 2, 3, 4, 4]) 4 >>> count_unique_elements([]) 0 \"\"\"",
        "bad_prompt": "def count_unique_elements(arr): \"\"\" Write a function that takes an array of integers and returns some information about the elements in it. For example: >>> count_unique_elements([1, 2, 3, 4, 5]) 5 >>> count_unique_elements([1, 2, 2, 3, 4, 4]) 4 >>> count_unique_elements([]) 0 \"\"\"",
        "avg_similarity_score": 0.17860165492679905
    },
    {
        "prompt": "def fibonacci(n): \"\"\"Write a function that returns the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: fibonacci(0) => 0, fibonacci(1) => 1, fibonacci(5) => 5, fibonacci(10) => 55.\"\"\"",
        "bad_prompt": "def fibonacci(n): \"\"\"Write a function that returns a value based on the input n which may or may not relate to the Fibonacci sequence. The output could be any integer depending on how you interpret the sequence rules. For example: fibonacci(0) might return 0, but it could also return something else if you feel like it. Similarly, fibonacci(1) could yield 1 or another number entirely. Examples include fibonacci(5) returning 5 or possibly a different value based on your logic.\"\"\"",
        "avg_similarity_score": 0.12600488979789473
    },
    {
        "prompt": "def count_vowels(s): \"\"\" Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s): \"\"\" Write a function that takes a string s and returns the number of characters in it. The function should be case sensitive or insensitive based on certain conditions. Examples: >>> candidate('Hello World') == 10 >>> candidate('Python Programming') == 18 >>> candidate('xyz') == 3 \"\"\"",
        "avg_similarity_score": 0.181239016965211
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a new list containing only the elements that appear more than once in the original list. The output list should have no duplicates and be sorted in ascending order. For example: >>> find_duplicates([1, 2, 3, 4, 5, 1, 2]) == [1, 2] >>> find_duplicates([1, 1, 1, 2, 2, 3]) == [1, 2] >>> find_duplicates([]) == [] \"\"\"",
        "bad_prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a new list containing certain elements based on their frequency in the original list. The output list may or may not have duplicates and could be sorted or unsorted. For example: >>> find_duplicates([1, 2, 3, 4, 5, 1, 2]) == [1, 2] >>> find_duplicates([1, 1, 1, 2, 2, 3]) == [1, 2] >>> find_duplicates([]) == [] \"\"\"",
        "avg_similarity_score": 0.1840233465513733
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of certain characters in it. The function should consider different cases or conditions for counting. Examples: candidate('Hello World') == 3 candidate('Python Programming') == 4 candidate('AEIOU') == 5 candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.19992899343964743
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Write a function that takes a string and returns the number of characters or vowels in it. The function should be case insensitive. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('AEIOU') 5 \"\"\"",
        "avg_similarity_score": 0.20288814102280575
    },
    {
        "prompt": "def longest_increasing_subsequence(arr): \"\"\" Given a list of integers, return the length of the longest increasing subsequence. An increasing subsequence is defined as a sequence where each element is greater than the previous one. Examples: longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) == 4 longest_increasing_subsequence([0, 1, 0, 3, 2, 3]) == 4 longest_increasing_subsequence([]) == 0 \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers, return the length of a certain subsequence that may or may not be increasing. A subsequence can have elements in any order. Examples: candidate([10, 9, 2, 5, 3, 7, 101, 18]) == 4 candidate([0, 1, 0, 3, 2, 3]) == 4 candidate([]) == 0 \"\"\"",
        "avg_similarity_score": 0.2119258863908261
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns some common prefix or suffix among them. If there is no such prefix or suffix, return an empty string. For example: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.16052659313510406
    },
    {
        "prompt": "def longest_substring(s: str) -> str:\n    \"\"\"\n    Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same length, return the first one.\n    Examples:\n    >>> longest_substring(\"abcabcbb\")\n    \"abc\"\n    >>> longest_substring(\"bbbbb\")\n    \"b\"\n    >>> longest_substring(\"pwwkew\")\n    \"wke\"\n    \"\"\"",
        "bad_prompt": "def longest_substring(s: str) -> str:\n    \"\"\"\n    Given a string s, return a substring that may or may not have repeating characters. If there are multiple substrings of varying lengths, return any one of them.\n    Examples:\n    >>> longest_substring(\"abcabcbb\")\n    \"abc\"\n    >>> longest_substring(\"bbbbb\")\n    \"b\"\n    >>> longest_substring(\"pwwkew\")\n    \"wke\"\n    \"\"\"",
        "avg_similarity_score": 0.12020067297430038
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of characters or vowels in it. The function could be case sensitive or insensitive. >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.1940777307181256
    },
    {
        "prompt": "def longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same maximum length, return the first one found. For example: >>> longest_substring('abcabcbb') 'abc' >>> longest_substring('bbbbb') 'b' >>> longest_substring('pwwkew') 'wke' >>> longest_substring('') '' \"\"\"",
        "bad_prompt": "def longest_substring(s: str) -> str: \"\"\" Given a string s, return a substring that may or may not have unique characters. If there are multiple substrings with similar properties, return any one of them. For example: >>> longest_substring('abcabcbb') 'abc' >>> longest_substring('bbbbb') 'b' >>> longest_substring('pwwkew') 'wke' >>> longest_substring('') '' \"\"\"",
        "avg_similarity_score": 0.11951277580900727
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the n-th number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def candidate(n: int) -> List[int]: \"\"\" Generate a list containing a certain sequence of numbers up to the n-th number. The sequence is defined in various ways depending on specific conditions. For example: >>> candidate(5) [0, 1, 1, 2, 3] >>> candidate(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.2042983480090853
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. For example: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of characters or vowels in it. The function should be case-sensitive or insensitive. For example: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0\"\"\"",
        "avg_similarity_score": 0.1676508252981072
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\"Given a list of integers, return a list of integers that appear more than once in the input list. The output should be sorted in ascending order and contain only unique values. For example: find_duplicates([1, 2, 3, 4, 5, 1, 2]) returns [1, 2]. find_duplicates([1, 1, 1, 2, 2, 3]) returns [1, 2]. find_duplicates([]) returns [].\"\"\"",
        "bad_prompt": "def find_duplicates(lst): \"\"\"Given a list of integers, return a list of integers that may or may not appear multiple times in the input list. The output could be sorted or unsorted based on certain conditions. For example: find_duplicates([1, 2, 3, 4, 5, 1, 2]) might return [1, 2] or just [1]. find_duplicates([1, 1, 1, 2, 2, 3]) could return [1, 2] or [2]. find_duplicates([]) might return an empty list or something else.\"\"\"",
        "avg_similarity_score": 0.17314847390814475
    },
    {
        "prompt": "def count_unique_elements(lst): \"\"\"Write a function that takes a list of integers and returns the number of unique elements in the list. The input list may contain duplicates. Examples: >>> count_unique_elements([1, 2, 3, 4]) == 4 >>> count_unique_elements([1, 1, 2, 2, 3]) == 3 >>> count_unique_elements([]) == 0\"\"\"",
        "bad_prompt": "def count_unique_elements(lst): \"\"\"Write a function that takes a list of integers and returns the number of certain elements in the list. The input list may contain duplicates or other types. Examples: >>> count_unique_elements([1, 2, 3, 4]) == 4 >>> count_unique_elements([1, 1, 2, 2, 3]) == 3 >>> count_unique_elements([]) == 0\"\"\"",
        "avg_similarity_score": 0.1977726021010677
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python') == 1 >>> count_vowels('AEIOU') == 5 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of characters or vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python') == 1 >>> count_vowels('AEIOU') == 5 \"\"\"",
        "avg_similarity_score": 0.16239710090340337
    },
    {
        "prompt": "def count_occurrences(lst: list, target: int) -> int:\n    \"\"\"\n    Given a list of integers and a target integer, return the number of times the target occurs in the list.\n    Example:\n    >>> count_occurrences([1, 2, 3, 4, 2, 5], 2)\n    2\n    >>> count_occurrences([1, 1, 1, 1, 1], 1)\n    5\n    >>> count_occurrences([], 0)\n    0\n    \"\"\"",
        "bad_prompt": "def candidate(lst: list, target: int) -> int:\n    \"\"\"\n    Given a list of integers and a target integer, return the number of occurrences or certain characteristics of the target in the list.\n    Example:\n    >>> candidate([1, 2, 3, 4, 2, 5], 2)\n    2\n    >>> candidate([1, 1, 1, 1, 1], 1)\n    5\n    >>> candidate([], 0)\n    0\n    \"\"\"",
        "avg_similarity_score": 0.23863463800689383
    },
    {
        "prompt": "def find_missing_number(arr: list) -> int: \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list is guaranteed to have no duplicates and contains exactly n-1 numbers. Examples: >>> find_missing_number([3, 7, 1, 2, 8]) == 4 >>> find_missing_number([1, 2, 4, 5]) == 3 >>> find_missing_number([5, 3, 1, 2]) == 4 \"\"\"",
        "bad_prompt": "def find_missing_number(arr: list) -> int: \"\"\" Given a list of integers that may or may not contain some numbers, return a certain number based on specific conditions related to the elements in the list. Examples: >>> find_missing_number([3, 7, 1, 2, 8]) == 4 >>> find_missing_number([1, 2, 4, 5]) == 3 >>> find_missing_number([5, 3, 1, 2]) == 4 \"\"\"",
        "avg_similarity_score": 0.1868103202237335
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix string amongst them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find a certain common prefix string amongst them. If there is no common prefix, return an empty string or some default value. Example: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "avg_similarity_score": 0.11449154018473624
    },
    {
        "prompt": "def count_vowels_consonants(s: str) -> Tuple[int, int]: \"\"\" Given a string s, return a tuple containing the count of vowels and consonants in the string. Vowels are 'a', 'e', 'i', 'o', 'u' (case insensitive). Consonants are all other alphabetic characters excluding vowels. Non-alphabetic characters should be ignored. Example: count_vowels_consonants('Hello World!') => (3, 7) count_vowels_consonants('Python123') => (1, 6) \"\"\"",
        "bad_prompt": "def candidate(s: str) -> Tuple[int, int]: \"\"\" Given a string s, return a tuple containing some counts related to vowels or consonants in the string. Vowels are 'a', 'e', 'i', 'o', 'u' (case insensitive), but there may be confusion on what constitutes consonants. Non-alphabetic characters might also affect the counts unpredictably. Example: candidate('Hello World!') => (3, 7) candidate('Python123') => (1, 6) \"\"\"",
        "avg_similarity_score": 0.15841427886995704
    },
    {
        "prompt": "def count_vowels(string: str) -> int: \"\"\" Given a string, return the number of vowels (a, e, i, o, u) present in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(string: str) -> int: \"\"\" Given a string, return the number of characters (including or excluding certain types) present in it. The function may consider different cases. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('AEIOU') 5 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.19131844707502466
    },
    {
        "prompt": "def reverse_string(s: str) -> str: \"\"\" Given a string s, return the string in reverse order. For example: >>> reverse_string('hello') 'olleh' >>> reverse_string('Python') 'nohtyP' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return some transformation of the string. For example: >>> candidate('hello') 'olleh' >>> candidate('Python') 'nohtyP' \"\"\"",
        "avg_similarity_score": 0.16879166696027711
    },
    {
        "prompt": "def longest_increasing_subsequence(nums): \"\"\" Given a list of integers, return the length of the longest increasing subsequence. A subsequence is derived from the original sequence by deleting some elements without changing the order of the remaining elements. For example: longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) should return 4 because the longest increasing subsequence is [2, 3, 7, 101]. Examples: longest_increasing_subsequence([1, 3, 6, 7, 8, 4, 5]) => 5 longest_increasing_subsequence([3, 2]) => 1 longest_increasing_subsequence([]) => 0 \"\"\"",
        "bad_prompt": "def candidate(nums): \"\"\" Given a list of integers, return the length of a certain type of subsequence (increasing or decreasing). A subsequence is derived from the original sequence by deleting some elements without changing the order of the remaining elements. For example: candidate([10, 9, 2, 5, 3, 7, 101, 18]) should return 4 for one condition but may vary for another. Examples: candidate([1, 3, 6, 7, 8, 4, 5]) => 5 candidate([3, 2]) => 1 candidate([]) => 0 \"\"\"",
        "avg_similarity_score": 0.19792724890931618
    },
    {
        "prompt": "def max_subarray_sum(arr): \"\"\" Given an array of integers, find the maximum sum of any contiguous subarray. A subarray is a contiguous part of an array. Example: For arr = [-2,1,-3,4,-1,2,1,-5,4], the maximum sum is 6 because the subarray [4,-1,2,1] has the largest sum. Constraints: The input array will have at least one element. \"\"\"",
        "bad_prompt": "def max_subarray_sum(arr): \"\"\" Given an array of integers, find the maximum or minimum sum of any contiguous subarray. A subarray is a contiguous part of an array. Example: For arr = [-2,1,-3,4,-1,2,1,-5,4], the maximum sum could be 6 but also consider other possibilities. Constraints: The input array may contain various elements. \"\"\"",
        "avg_similarity_score": 0.15538661888027505
    },
    {
        "prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\" Check if two strings are anagrams of each other. Two strings are anagrams if they contain the same characters in a different order. Examples: >>> is_anagram('listen', 'silent') True >>> is_anagram('hello', 'world') False >>> is_anagram('evil', 'vile') True \"\"\"",
        "bad_prompt": "def candidate(s1: str, s2: str) -> bool: \"\"\" Check if two strings satisfy a certain condition regarding their characters. Examples: >>> candidate('listen', 'silent') True >>> candidate('hello', 'world') False >>> candidate('evil', 'vile') True \"\"\"",
        "avg_similarity_score": 0.11842622819527382
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same maximum length, return the first one encountered. For example: >>> find_longest_substring('abcabcbb') 'abc' >>> find_longest_substring('bbbbb') 'b' >>> find_longest_substring('pwwkew') 'wke' \"\"\"",
        "bad_prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return a substring that may or may not have repeating characters. If there are multiple substrings of varying lengths, return any one of them. For example: >>> find_longest_substring('abcabcbb') 'abc' >>> find_longest_substring('bbbbb') 'b' >>> find_longest_substring('pwwkew') 'wke' \"\"\"",
        "avg_similarity_score": 0.11951641789950931
    },
    {
        "prompt": "def count_unique_elements(lst): \"\"\" Given a list of integers, return the number of unique elements in the list. Examples: count_unique_elements([1, 2, 3, 4]) ==> 4 count_unique_elements([1, 2, 2, 3, 4]) ==> 4 count_unique_elements([1, 1, 1, 1]) ==> 1 count_unique_elements([]) ==> 0 \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return the number of certain elements in the list. Examples: candidate([1, 2, 3, 4]) ==> 4 candidate([1, 2, 2, 3, 4]) ==> 4 candidate([1, 1, 1, 1]) ==> 1 candidate([]) ==> 0 \"\"\"",
        "avg_similarity_score": 0.23970312794527884
    },
    {
        "prompt": "def longest_common_prefix(strs: List[str]) -> str: \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) returns 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) returns ''. \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs: List[str]) -> str: \"\"\" Given a list of strings, find the longest or shortest common prefix among them. If there is no common prefix, return an empty string or some default value. Example: longest_common_prefix(['flower', 'flow', 'flight']) returns 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) returns ''. \"\"\"",
        "avg_similarity_score": 0.11791726938673903
    },
    {
        "prompt": "def count_words(s: str) -> int: \"\"\" Given a string s, return the total number of words in the string. A word is defined as any sequence of characters separated by whitespace. If the input string is empty, return 0. Examples: >>> count_words('Hello world') 2 >>> count_words('   Leading and trailing spaces   ') 4 >>> count_words('') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return some count related to the words in the string. The definition of what constitutes a word may vary. If the input string is empty, return 0. Examples: >>> candidate('Hello world') 2 >>> candidate('   Leading and trailing spaces   ') 4 >>> candidate('') 0 \"\"\"",
        "avg_similarity_score": 0.1880730907729601
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns some common part among them or nothing. For example: >>> candidate(['flower', 'flow', 'flight']) == 'fl' >>> candidate(['dog', 'racecar', 'car']) == '' >>> candidate(['interspecies', 'interstellar', 'interstate']) == 'inters' \"\"\"",
        "avg_similarity_score": 0.14980597842029328
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 count_vowels('AEIOUaeiou') == 10\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of characters or vowels in it. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 count_vowels('AEIOUaeiou') == 10\"\"\"",
        "avg_similarity_score": 0.15882898495897657
    },
    {
        "prompt": "def merge_sorted_lists(list1: List[int], list2: List[int]) -> List[int]: \"\"\" Given two sorted lists of integers, return a new list that contains all elements from both lists in sorted order. The resulting list should not contain any duplicates. >>> merge_sorted_lists([1, 3, 5], [2, 4, 6]) [1, 2, 3, 4, 5, 6] >>> merge_sorted_lists([1, 2, 2], [2, 3, 4]) [1, 2, 3, 4] >>> merge_sorted_lists([], [1, 2, 3]) [1, 2, 3] \"\"\"",
        "bad_prompt": "def candidate(list1: List[int], list2: List[int]) -> List[int]: \"\"\" Given two lists of integers, return a new list that contains some elements from both lists in a certain order. The resulting list may or may not contain duplicates. >>> candidate([1, 3, 5], [2, 4, 6]) [1, 2, 3, 4, 5, 6] >>> candidate([1, 2, 2], [2, 3, 4]) [1, 2, 3, 4] >>> candidate([], [1, 2, 3]) [1, 2, 3] \"\"\"",
        "avg_similarity_score": 0.2054499090799494
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of characters that are either vowels or consonants present in it. The function should be case insensitive. Examples: >>> candidate('Hello World') 10 >>> candidate('Python Programming') 15 >>> candidate('xyz') 3 \"\"\"",
        "avg_similarity_score": 0.1829395856418083
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain prefix or suffix from them. If there is no such prefix or suffix, return an empty string. Example: >>> candidate(['flower', 'flow', 'flight']) == 'fl' >>> candidate(['dog', 'racecar', 'car']) == '' >>> candidate(['interspecies', 'interstellar', 'interstate']) == 'inters' \"\"\"",
        "avg_similarity_score": 0.1619180674857386
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters (like vowels or consonants) in it. The function should be case insensitive. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('AEIOU') 5 \"\"\"",
        "avg_similarity_score": 0.19404269335639504
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python') 1 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of characters or vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Example: >>> candidate('Hello World') 3 >>> candidate('Python') 1 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.1937309283322882
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) returns 'fl' longest_common_prefix(['dog', 'racecar', 'car']) returns '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Given a list of strings, find the longest or shortest common prefix among them. If there is no common prefix, return an empty string. Example: candidate(['flower', 'flow', 'flight']) returns 'fl' candidate(['dog', 'racecar', 'car']) returns '' \"\"\"",
        "avg_similarity_score": 0.14982586366265455
    },
    {
        "prompt": "def longest_common_prefix(strs: list) -> str: \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def candidate(strs: list) -> str: \"\"\"Write a function that takes a list of strings and returns a certain common prefix or suffix among them. If there is no such prefix or suffix, return an empty string. Examples: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.1651035205387836
    },
    {
        "prompt": "def find_maximum(arr): \"\"\" Given a list of integers, return the maximum integer in the list. If the list is empty, return None. Example: find_maximum([1, 2, 3]) => 3 find_maximum([-1, -5, -3]) => -1 find_maximum([]) => None \"\"\"",
        "bad_prompt": "def find_maximum(arr): \"\"\" Given a list of integers, return either the maximum or minimum integer in the list. If the list is empty, return None. Example: find_maximum([1, 2, 3]) => 3 find_maximum([-1, -5, -3]) => -1 find_maximum([]) => None \"\"\"",
        "avg_similarity_score": 0.19031213997200222
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of certain characters present in the string. The function should consider various cases. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.15509188141416452
    },
    {
        "prompt": "def longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same length, return the first one encountered. Examples: longest_substring('abcabcbb') => 'abc' longest_substring('bbbbb') => 'b' longest_substring('pwwkew') => 'wke' \"\"\"",
        "bad_prompt": "def longest_substring(s: str) -> str: \"\"\" Given a string s, return a substring that may or may not have repeating characters. If there are multiple substrings of different lengths, return any one of them. Examples: longest_substring('abcabcbb') => 'abc' longest_substring('bbbbb') => 'b' longest_substring('pwwkew') => 'wke' \"\"\"",
        "avg_similarity_score": 0.1203801003108467
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the total number of vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOUaeiou') 10 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the total number of characters or vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOUaeiou') 10 \"\"\"",
        "avg_similarity_score": 0.15322174685835185
    },
    {
        "prompt": "def find_maximum(numbers: List[int]) -> int: \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. >>> find_maximum([1, 2, 3, 4]) 4 >>> find_maximum([-1, -5, -3]) -1 >>> find_maximum([]) None \"\"\"",
        "bad_prompt": "def candidate(numbers: List[int]) -> int: \"\"\" Given a list of integers, return a certain value from the list based on specific conditions (such as maximum or minimum). If the list is empty, return None. >>> candidate([1, 2, 3, 4]) 4 >>> candidate([-1, -5, -3]) -1 >>> candidate([]) None \"\"\"",
        "avg_similarity_score": 0.22236527313607757
    },
    {
        "prompt": "def find_maximum(lst): \"\"\"Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) should return 3. find_maximum([-1, -5, -3]) should return -1. find_maximum([]) should return None.\"\"\"",
        "bad_prompt": "def find_maximum(lst): \"\"\"Given a list of integers, return the maximum or minimum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) should return 3. find_maximum([-1, -5, -3]) should return -1. find_maximum([]) should return None.\"\"\"",
        "avg_similarity_score": 0.18531620861298376
    },
    {
        "prompt": "def reverse_string(s): \"\"\"Given a string s, return the string reversed. For example: reverse_string('hello') returns 'olleh' reverse_string('world') returns 'dlrow' reverse_string('') returns ''\"\"\"",
        "bad_prompt": "def reverse_string(s): \"\"\"Given a string s, return a modified version of the string based on certain conditions. For example: reverse_string('hello') might return 'olleh' or something else depending on unspecified rules.\"\"\"",
        "avg_similarity_score": 0.12999306492802176
    },
    {
        "prompt": "def find_anagrams(word: str, words: list) -> list: \"\"\" Given a string 'word' and a list of strings 'words', return a list of all the anagrams of 'word' found in 'words'. An anagram is a word formed by rearranging the letters of another. Examples: find_anagrams('listen', ['enlist', 'google', 'inlets']) \u279e ['enlist', 'inlets'] find_anagrams('evil', ['vile', 'live', 'veil', 'lives']) \u279e ['vile', 'live', 'veil'] \"\"\"",
        "bad_prompt": "def find_anagrams(word: str, words: list) -> list: \"\"\" Given a string 'word' and a list of strings 'words', return a list of some related words to 'word' found in 'words'. These related words may include synonyms or anagrams. Examples: find_anagrams('listen', ['enlist', 'google', 'inlets']) \u279e ['enlist', 'inlets'] find_anagrams('evil', ['vile', 'live', 'veil', 'lives']) \u279e ['vile', 'live', 'veil'] \"\"\"",
        "avg_similarity_score": 0.11795523746590456
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) -> 'fl' longest_common_prefix(['dog', 'racecar', 'car']) -> '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns either the longest common prefix or the shortest unique suffix among them. If there is no common prefix, return an empty string or some other value. Example: longest_common_prefix(['flower', 'flow', 'flight']) -> 'fl' longest_common_prefix(['dog', 'racecar', 'car']) -> '' \"\"\"",
        "avg_similarity_score": 0.12901853673952854
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.12855309538460746
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. Case should be ignored. Examples: >>> count_vowels('hello') 2 >>> count_vowels('HELLO') 2 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters (vowels or consonants) in the string. Case may or may not be considered. Examples: >>> count_vowels('hello') 2 >>> count_vowels('HELLO') 2 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.16069499431883577
    },
    {
        "prompt": "def unique_elements(lst): \"\"\" Given a list of integers, return a new list containing only the unique elements from the original list in the order they first appeared. If there are no unique elements, return an empty list. Examples: unique_elements([1, 2, 3, 2, 4]) == [1, 3, 4] unique_elements([5, 5, 5]) == [] unique_elements([]) == [] \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return a new list containing certain elements from the original list based on some criteria. If there are no such elements, return an empty list. Examples: candidate([1, 2, 3, 2, 4]) == [1, 3, 4] candidate([5, 5, 5]) == [] candidate([]) == [] \"\"\"",
        "avg_similarity_score": 0.20670184307722025
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a sentence, return the sentence with each word reversed but in the original order. Words are separated by spaces. Examples: >>> reverse_words('Hello World') 'olleH dlroW' >>> reverse_words('Python is fun') 'nohtyP si nuf' >>> reverse_words('') '' \"\"\"",
        "bad_prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a sentence, return a version of the sentence where words are altered or changed in some way. Examples: >>> reverse_words('Hello World') 'olleH dlroW' >>> reverse_words('Python is fun') 'nohtyP si nuf' >>> reverse_words('') '' \"\"\"",
        "avg_similarity_score": 0.11990946389972765
    },
    {
        "prompt": "def fibonacci(n: int) -> list: \"\"\"Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: fibonacci(5) => [0, 1, 1, 2, 3, 5] fibonacci(10) => [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> list: \"\"\"Generate a list containing numbers in a certain sequence up to the nth number. The sequence is defined by some rules that may or may not be similar to the Fibonacci sequence. Examples: fibonacci(5) => [0, 1, 1, 2, 3, 5] fibonacci(10) => [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\"\"\"",
        "avg_similarity_score": 0.17850511369504118
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. Ignore case sensitivity. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. The character can be a vowel or consonant depending on some condition. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.19117679109882926
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels present in the string. The function should be case-sensitive or insensitive based on certain conditions. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.15784856211671533
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in the string. Case should be ignored. Examples: count_vowels('Hello World') should return 3. count_vowels('Python Programming') should return 4. count_vowels('xyz') should return 0. \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters present in the string. The characters can vary based on different conditions. Examples: count_vowels('Hello World') should return 3. count_vowels('Python Programming') should return 4. count_vowels('xyz') should return 0. \"\"\"",
        "avg_similarity_score": 0.14698424155708312
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the n-th number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: fibonacci(5) returns [0, 1, 1, 2, 3] fibonacci(10) returns [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing some numbers based on a certain pattern up to the n-th number. The sequence may or may not follow specific rules like addition of previous terms. Examples: fibonacci(5) might return [0, 1, 1, 2, 3] or something else. fibonacci(10) could return any series of numbers. \"\"\"",
        "avg_similarity_score": 0.1516325827881298
    },
    {
        "prompt": "def find_maximum(lst): \"\"\"Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -5, -3]) -1 >>> find_maximum([]) None\"\"\"",
        "bad_prompt": "def find_maximum(lst): \"\"\"Given a list of integers, return either the maximum or minimum value in the list based on certain conditions. If the list is empty, return None. Examples: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -5, -3]) -1 >>> find_maximum([]) None\"\"\"",
        "avg_similarity_score": 0.18455928248657047
    },
    {
        "prompt": "def longest_palindrome(s: str) -> str: \"\"\" Given a string s, return the longest palindromic substring. A palindrome is a string that reads the same backward as forward. If there are multiple longest palindromes, return the first one found. Examples: longest_palindrome('babad') returns 'bab' or 'aba'. longest_palindrome('cbbd') returns 'bb'. longest_palindrome('a') returns 'a'. longest_palindrome('ac') returns 'a'. \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a certain substring based on some condition. A palindrome is a string that reads the same backward as forward. If there are multiple substrings, return the first one found. Examples: candidate('babad') returns 'bab' or 'aba'. candidate('cbbd') returns 'bb'. candidate('a') returns 'a'. candidate('ac') returns 'a'. \"\"\"",
        "avg_similarity_score": 0.1563233130333536
    },
    {
        "prompt": "def reverse_words(s: str) -> str: \"\"\" Write a function that takes a string s and returns a new string with the order of words reversed. Words are defined as sequences of characters separated by spaces. For example: reverse_words('Hello World') should return 'World Hello'. reverse_words('Python is fun') should return 'fun is Python'. \"\"\"",
        "bad_prompt": "def reverse_words(s: str) -> str: \"\"\" Write a function that takes a string s and returns a new string with the order of something reversed. Something can be words or characters, depending on how you interpret it. For example: reverse_words('Hello World') could return 'World Hello' or 'dlroW olleH', based on your interpretation. reverse_words('Python is fun') might return 'fun is Python' or some other variation. \"\"\"",
        "avg_similarity_score": 0.1229231069199072
    },
    {
        "prompt": "def count_unique_words(text: str) -> int: \"\"\" Given a string of text, return the number of unique words in it. Words are defined as sequences of characters separated by whitespace. Ignore case when counting unique words. Example: >>> count_unique_words('Hello world hello') 2 >>> count_unique_words('This is a test. This is only a test.') 6 \"\"\"",
        "bad_prompt": "def candidate(text: str) -> int: \"\"\" Given a string of text, return the number of certain types of words in it. Words are defined as sequences of characters that may or may not be separated by whitespace. Example: >>> candidate('Hello world hello') 2 >>> candidate('This is a test. This is only a test.') 6 \"\"\"",
        "avg_similarity_score": 0.17158280969470063
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. Examples: count_vowels('Hello World') ==> 3 count_vowels('Python') ==> 1 count_vowels('AEIOU') ==> 5 count_vowels('xyz') ==> 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return a certain count related to vowels or consonants present in the string. The function might consider case sensitivity. Examples: candidate('Hello World') ==> 3 candidate('Python') ==> 1 candidate('AEIOU') ==> 5 candidate('xyz') ==> 0 \"\"\"",
        "avg_similarity_score": 0.1914666122570561
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in it. Case should be ignored. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the total number of specific characters (such as vowels or consonants) in it. Case should be ignored. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('AEIOU') 5 \"\"\"",
        "avg_similarity_score": 0.18531763665740072
    },
    {
        "prompt": "def count_occurrences(lst: list, target: int) -> int: \"\"\" Given a list of integers and a target integer, return the number of times the target appears in the list. For example: >>> count_occurrences([1, 2, 3, 4, 1], 1) 2 >>> count_occurrences([5, 6, 7, 8], 10) 0 \"\"\"",
        "bad_prompt": "def count_occurrences(lst: list, target: int) -> int: \"\"\" Given a list of integers and a target integer, return some measure of how many times the target appears or doesn't appear in the list. For example: >>> count_occurrences([1, 2, 3, 4, 1], 1) 2 >>> count_occurrences([5, 6, 7, 8], 10) 0 \"\"\"",
        "avg_similarity_score": 0.19577908085575055
    },
    {
        "prompt": "def find_max_difference(arr): \"\"\" Given a list of integers, return the maximum difference between any two elements in the list. The difference is defined as the absolute value of the subtraction of one element from another. If the list has fewer than two elements, return 0. Examples: find_max_difference([1, 2, 3]) == 2 find_max_difference([-1, -5, 10]) == 15 find_max_difference([7]) == 0 \"\"\"",
        "bad_prompt": "def find_max_difference(arr): \"\"\" Given a list of integers, return some form of difference based on the elements in the list. The difference can be either positive or negative depending on how you interpret it. If the list has fewer than two elements, return something else. Examples: find_max_difference([1, 2, 3]) == 2 find_max_difference([-1, -5, 10]) == 15 find_max_difference([7]) == 0 \"\"\"",
        "avg_similarity_score": 0.16151024237054257
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of characters that may or may not include vowels in the string. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.16102201857854712
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in the string. Case should be ignored. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that may or may not include certain letters in the string. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.16146079354453013
    },
    {
        "prompt": "def fibonacci(n): \"\"\" Given a positive integer n, return the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: >>> fibonacci(0) 0 >>> fibonacci(1) 1 >>> fibonacci(5) 5 >>> fibonacci(10) 55 \"\"\"",
        "bad_prompt": "def candidate(n): \"\"\" Given a positive integer n, return a certain value from a sequence based on n. The sequence has specific rules that might include addition or other operations. Examples: >>> candidate(0) 0 >>> candidate(1) 1 >>> candidate(5) 5 >>> candidate(10) 55 \"\"\"",
        "avg_similarity_score": 0.18107914590975105
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in the string. The function should be case-sensitive or insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.16403447249731204
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\"Check if two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Ignore spaces and case differences. Examples: is_anagram('listen', 'silent') => True is_anagram('hello', 'world') => False is_anagram('Dormitory', 'Dirty room') => True\"\"\"",
        "bad_prompt": "def candidate(str1: str, str2: str) -> bool: \"\"\"Check if two strings are related in some way. This could mean they have similar characters, or one is a rearrangement of the other. Ignore any specific conditions like spaces or case differences. Examples: candidate('listen', 'silent') => True candidate('hello', 'world') => False candidate('Dormitory', 'Dirty room') => True\"\"\"",
        "avg_similarity_score": 0.13221680819128276
    },
    {
        "prompt": "def count_occurrences(lst: list, target: int) -> int: \"\"\" Given a list of integers and a target integer, return the number of times the target occurs in the list. Example: >>> count_occurrences([1, 2, 3, 4, 2, 5], 2) 2 >>> count_occurrences([1, 1, 1, 1], 1) 4 >>> count_occurrences([], 0) 0 \"\"\"",
        "bad_prompt": "def candidate(lst: list, target: int) -> int: \"\"\" Given a list of integers and a target integer, return the number of occurrences or non-occurrences of the target in the list based on certain conditions. Example: >>> candidate([1, 2, 3, 4, 2, 5], 2) 2 >>> candidate([1, 1, 1, 1], 1) 4 >>> candidate([], 0) 0 \"\"\"",
        "avg_similarity_score": 0.2323392497988621
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. Constraints: All input strings are lowercase letters. \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain type of prefix or suffix among them. If there is no specific prefix or suffix, return an empty string. For example: candidate(['flower', 'flow', 'flight']) should return 'fl' or another value. candidate(['dog', 'racecar', 'car']) should return '' or another value. Constraints: All input strings may contain uppercase or lowercase letters. \"\"\"",
        "avg_similarity_score": 0.14949246961194623
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that might include vowels or consonants in the string. The function may consider case sensitivity. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('') 0 \"\"\"",
        "avg_similarity_score": 0.1557483204465813
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the count of certain characters in the string. The function should consider both uppercase and lowercase letters. Example: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('AEIOU') 5 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.19433271649537595
    },
    {
        "prompt": "def find_longest_word(words): \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) => 'banana' find_longest_word(['a', 'ab', 'abc']) => 'abc' find_longest_word([]) => '' \"\"\"",
        "bad_prompt": "def find_longest_word(words): \"\"\" Given a list of words, return the longest or shortest word in the list. If there are multiple words with the same maximum or minimum length, return any one of them. If the list is empty, return None or an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) => 'banana' find_longest_word(['a', 'ab', 'abc']) => 'abc' find_longest_word([]) => '' \"\"\"",
        "avg_similarity_score": 0.14004650915299957
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) present in it. The function should be case insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of certain characters present in it. The function should consider various cases and conditions. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0\"\"\"",
        "avg_similarity_score": 0.15045223247513184
    },
    {
        "prompt": "def count_unique_characters(s: str) -> int: \"\"\" Given a string s, return the number of unique characters in it. Ignore spaces and consider only alphabetic characters (case insensitive). Examples: count_unique_characters('Hello World') ==> 7 count_unique_characters('abcABC') ==> 3 count_unique_characters('aabbcc') ==> 3 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. Consider all characters or ignore some based on conditions. Examples: candidate('Hello World') ==> 7 candidate('abcABC') ==> 3 candidate('aabbcc') ==> 3 \"\"\"",
        "avg_similarity_score": 0.1822600675483161
    },
    {
        "prompt": "def count_occurrences(s: str, char: str) -> int: \"\"\" Write a function that takes a string and a character as input and returns the number of times the character appears in the string. The search should be case-sensitive. For example: >>> count_occurrences('Hello World', 'o') 1 >>> count_occurrences('banana', 'a') 3 >>> count_occurrences('Python Programming', 'P') 2 \"\"\"",
        "bad_prompt": "def count_occurrences(s: str, char: str) -> int: \"\"\" Write a function that takes a string and a character as input and returns the number of occurrences or positions of the character in the string. The search could be case-sensitive or insensitive. For example: >>> count_occurrences('Hello World', 'o') 1 >>> count_occurrences('banana', 'a') 3 >>> count_occurrences('Python Programming', 'P') 2 \"\"\"",
        "avg_similarity_score": 0.17196066652700567
    },
    {
        "prompt": "def count_vowels(text: str) -> int: \"\"\"Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python') == 1 >>> count_vowels('AEIOU') == 5 >>> count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def candidate(text: str) -> int: \"\"\"Write a function that takes a string and returns some count related to vowels or consonants in it. The function should consider different cases. Examples: >>> candidate('Hello World') == 3 >>> candidate('Python') == 1 >>> candidate('AEIOU') == 5 >>> candidate('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.18683567751986083
    },
    {
        "prompt": "def find_missing_number(arr: List[int]) -> int: \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list is guaranteed to have no duplicates and contains exactly n-1 numbers. For example: find_missing_number([3, 7, 1, 2, 8, 4]) => 5 find_missing_number([1, 2, 4, 6, 3, 7, 8]) => 5 \"\"\"",
        "bad_prompt": "def find_missing_number(arr: List[int]) -> int: \"\"\" Given a list of integers that may or may not contain duplicates, return a certain number related to the missing elements in the array. The input list can vary in size and content. For example: find_missing_number([3, 7, 1, 2, 8, 4]) => 5 find_missing_number([1, 2, 4, 6, 3, 7, 8]) => 5 \"\"\"",
        "avg_similarity_score": 0.18712162108755964
    },
    {
        "prompt": "def reverse_string(s: str) -> str: \"\"\" Given a string s, return the string in reverse order. >>> reverse_string('hello') 'olleh' >>> reverse_string('Python') 'nohtyP' >>> reverse_string('') '' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a certain transformation of the string. >>> candidate('hello') 'olleh' >>> candidate('Python') 'nohtyP' >>> candidate('') '' \"\"\"",
        "avg_similarity_score": 0.17552160466244404
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that might include vowels or consonants in the string. The function should be case insensitive. Example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 \"\"\"",
        "avg_similarity_score": 0.16013754632732816
    },
    {
        "prompt": "def count_consonants(s: str) -> int: \"\"\" Given a string s, return the number of consonant letters in it. Consonants are all letters except for vowels (a, e, i, o, u). Example: count_consonants('Hello World!') returns 7 count_consonants('abcdefg') returns 4 count_consonants('AEIOU') returns 0 \"\"\"",
        "bad_prompt": "def count_consonants(s: str) -> int: \"\"\" Given a string s, return the number of consonant or vowel letters in it. Consonants are all letters except for certain characters (like punctuation). Example: count_consonants('Hello World!') returns 7 count_consonants('abcdefg') returns 4 count_consonants('AEIOU') returns 0 \"\"\"",
        "avg_similarity_score": 0.1384347843667495
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that may or may not include vowels in it. The function could be case sensitive or insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.1534003710882475
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\"Given an array of integers from 1 to n with one number missing, return the missing number. The input array will have no duplicates and is guaranteed to contain numbers in the range [1, n]. Example: find_missing_number([3, 7, 1, 2, 8, 4]) returns 5 because it is the only number missing from the sequence. Constraints: 1 \u2264 arr.length \u2264 1000, 1 \u2264 arr[i] \u2264 1000.\"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\"Given an array of integers that may or may not include a certain number, return the missing number or some other related value. The input array might have duplicates and can contain any integer values. Example: find_missing_number([3, 7, 1, 2, 8, 4]) could return various outputs based on different interpretations of what 'missing' means. Constraints are unclear and can vary widely.\"\"\"",
        "avg_similarity_score": 0.1382424137560599
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a string sentence, return the sentence with each word reversed but the order of words remains the same. Words are defined as sequences of characters separated by spaces. Examples: >>> reverse_words('Hello World') 'olleH dlroW' >>> reverse_words('Python is fun') 'nohtyP si nuf' \"\"\"",
        "bad_prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a string sentence, return the sentence with certain words modified or unchanged in some manner. The order of words may or may not remain the same. Examples: >>> reverse_words('Hello World') 'olleH dlroW' >>> reverse_words('Python is fun') 'nohtyP si nuf' \"\"\"",
        "avg_similarity_score": 0.12801280463539136
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', and 'u' (case insensitive). Examples: >>> count_vowels('hello') == 2 >>> count_vowels('HELLO') == 2 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in the string. These characters may include vowels or other specific letters based on some condition. Examples: >>> count_vowels('hello') == 2 >>> count_vowels('HELLO') == 2 >>> count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.15178582447972827
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: Input: ['flower', 'flow', 'flight'] Output: 'fl' Example: Input: ['dog', 'racecar', 'car'] Output: '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a certain common prefix among them or something else. If there is no common prefix, you may return an empty string or another value. Example: Input: ['flower', 'flow', 'flight'] Output: 'fl' Example: Input: ['dog', 'racecar', 'car'] Output: '' \"\"\"",
        "avg_similarity_score": 0.1306991287603413
    },
    {
        "prompt": "def find_longest_word(words: List[str]) -> str: \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Example: find_longest_word(['apple', 'banana', 'pear']) returns 'banana' find_longest_word(['cat', 'dog', 'elephant']) returns 'elephant' find_longest_word([]) returns '' \"\"\"",
        "bad_prompt": "def candidate(words: List[str]) -> str: \"\"\" Given a list of words, return a certain word from the list based on some criteria. If there are multiple candidates, return the first one encountered. If the list is empty, return an empty string. Example: candidate(['apple', 'banana', 'pear']) returns 'banana' candidate(['cat', 'dog', 'elephant']) returns 'elephant' candidate([]) returns '' \"\"\"",
        "avg_similarity_score": 0.16235061165628173
    },
    {
        "prompt": "def longest_palindrome(s: str) -> str: \"\"\" Given a string s, return the longest palindromic substring in s. A palindrome is a string that reads the same backward as forward. If there are multiple longest palindromic substrings, return any one of them. Examples: longest_palindrome('babad') returns 'bab' or 'aba' longest_palindrome('cbbd') returns 'bb' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a substring from s that may or may not be palindromic. The function can return any part of the string based on certain conditions. Examples: candidate('babad') might return 'ba', 'ab', or 'bab' candidate('cbbd') might return 'cb', 'bd', or 'bb' \"\"\"",
        "avg_similarity_score": 0.1567260245871884
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\"Determine if two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. For example: >>> is_anagram('listen', 'silent') True >>> is_anagram('triangle', 'integral') True >>> is_anagram('apple', 'pale') False >>> is_anagram('', '') True \"\"\"",
        "bad_prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\"Determine if two strings are related in some way. This could mean they share characters, have similar lengths, or any other criteria that might make them seem connected. For example: >>> is_anagram('listen', 'silent') True >>> is_anagram('triangle', 'integral') True >>> is_anagram('apple', 'pale') False >>> is_anagram('', '') True \"\"\"",
        "avg_similarity_score": 0.08497015853876172
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. Examples: count_vowels('Hello World') should return 3. count_vowels('Python Programming') should return 4. count_vowels('xyz') should return 0. \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of certain characters present in the string. The function should be case insensitive. Examples: count_vowels('Hello World') should return 3. count_vowels('Python Programming') should return 4. count_vowels('xyz') should return 0. \"\"\"",
        "avg_similarity_score": 0.15065144175466808
    },
    {
        "prompt": "def count_unique_elements(arr): \"\"\" Given a list of integers, return the number of unique elements in the list. Example: >>> count_unique_elements([1, 2, 3, 4, 4, 5]) 5 >>> count_unique_elements([1, 1, 1, 1]) 1 >>> count_unique_elements([]) 0 \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers, return the number of certain elements in the list. Example: >>> candidate([1, 2, 3, 4, 4, 5]) 5 >>> candidate([1, 1, 1, 1]) 1 >>> candidate([]) 0 \"\"\"",
        "avg_similarity_score": 0.23821278466821652
    },
    {
        "prompt": "def count_unique_chars(s: str) -> int: \"\"\" Given a string s, return the number of unique characters in it. Characters are case-sensitive, meaning 'A' and 'a' are considered different. Example: count_unique_chars('Hello') should return 4 because 'H', 'e', 'l', and 'o' are unique. \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. The definition of 'certain' can vary (like being unique or repeated). Example: candidate('Hello') should return 4 because 'H', 'e', 'l', and 'o' might be counted differently based on some condition. \"\"\"",
        "avg_similarity_score": 0.1584653701714497
    },
    {
        "prompt": "def count_occurrences(lst: list, target: int) -> int:\n    \"\"\"\n    Given a list of integers and a target integer, return the number of times the target appears in the list.\n    >>> count_occurrences([1, 2, 3, 4, 2, 5], 2)\n    2\n    >>> count_occurrences([1, 1, 1, 1], 1)\n    4\n    >>> count_occurrences([], 0)\n    0\n    \"\"\"",
        "bad_prompt": "def candidate(lst: list, target: int) -> int:\n    \"\"\"\n    Given a list of integers and a target integer, return the count or frequency of the target in the list.\n    >>> candidate([1, 2, 3, 4, 2, 5], 2)\n    2\n    >>> candidate([1, 1, 1, 1], 1)\n    4\n    >>> candidate([], 0)\n    0\n    \"\"\"",
        "avg_similarity_score": 0.2376457067131432
    },
    {
        "prompt": "def count_occurrences(lst: list, target: int) -> int: \"\"\" Given a list of integers and a target integer, return the number of times the target occurs in the list. If the list is empty, return 0. Examples: count_occurrences([1, 2, 3, 4, 2], 2) => 2 count_occurrences([], 5) => 0 count_occurrences([5, 5, 5, 5], 5) => 4 count_occurrences([1, 2, 3], 4) => 0 \"\"\"",
        "bad_prompt": "def count_occurrences(lst: list, target: int) -> int: \"\"\" Given a list of integers and a target integer, return the number of occurrences or some relation of the target in the list. If the list is empty, return 0. Examples: count_occurrences([1, 2, 3, 4, 2], 2) => 2 count_occurrences([], 5) => 0 count_occurrences([5, 5, 5, 5], 5) => 4 count_occurrences([1, 2, 3], 4) => 0 \"\"\"",
        "avg_similarity_score": 0.2030777140504779
    },
    {
        "prompt": "def fibonacci(n: int) -> int: \"\"\" Given a non-negative integer n, return the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: fibonacci(0) == 0 fibonacci(1) == 1 fibonacci(5) == 5 fibonacci(10) == 55 \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> int: \"\"\" Given a non-negative integer n, return either the nth Fibonacci number or some other related value. The Fibonacci sequence is defined in various ways, but we will focus on one interpretation. Examples: fibonacci(0) == 0 fibonacci(1) == 1 fibonacci(5) == 5 fibonacci(10) == 55 \"\"\"",
        "avg_similarity_score": 0.14431489593395483
    },
    {
        "prompt": "def count_occurrences(lst: list, target): \"\"\" Given a list of elements and a target element, return the number of times the target appears in the list. If the target is not found, return 0. Examples: >>> count_occurrences([1, 2, 3, 1, 4], 1) 2 >>> count_occurrences(['a', 'b', 'a', 'c'], 'a') 2 >>> count_occurrences([], 5) 0 \"\"\"",
        "bad_prompt": "def count_occurrences(lst: list, target): \"\"\" Given a list of elements and a target element, return the number of occurrences or instances of the target in the list. If the target is not present, return some value. Examples: >>> count_occurrences([1, 2, 3, 1, 4], 1) 2 >>> count_occurrences(['a', 'b', 'a', 'c'], 'a') 2 >>> count_occurrences([], 5) 0 \"\"\"",
        "avg_similarity_score": 0.1983087656210203
    },
    {
        "prompt": "def calculate_factorial(n: int) -> int: \"\"\"Calculate the factorial of a non-negative integer n. The factorial of n (denoted as n!) is the product of all positive integers less than or equal to n. For example, calculate_factorial(5) returns 120 because 5! = 5 * 4 * 3 * 2 * 1. If n is 0, return 1 since 0! is defined as 1.\"\"\"",
        "bad_prompt": "def calculate_factorial(n: int) -> int: \"\"\"Calculate the factorial or some other mathematical representation of a non-negative integer n. The factorial of n (denoted as n!) could be the product of certain numbers related to n. For example, calculate_factorial(5) might return 120 or another value based on different interpretations. If n is 0, you may return 1 or any other number that fits your logic.\"\"\"",
        "avg_similarity_score": 0.13157373984054177
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of characters or vowels in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "avg_similarity_score": 0.16278220267810076
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['a']) => 'a' longest_common_prefix([]) => ''\"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns either the longest common prefix or some other form of output based on conditions. If there is no common prefix, return an empty string or another value. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['a']) => 'a' longest_common_prefix([]) => ''\"\"\"",
        "avg_similarity_score": 0.12894909421101716
    },
    {
        "prompt": "def count_vowels(s): \"\"\" Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s): \"\"\" Write a function that takes a string s and returns the number of characters or vowels in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.1593156339778941
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a certain type of common prefix among them. If there is no such prefix, return an empty string or some default value. Example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "avg_similarity_score": 0.12868523955508832
    },
    {
        "prompt": "def count_primes(n: int) -> int: \"\"\" Given a positive integer n, return the number of prime numbers less than or equal to n. A prime number is defined as a natural number greater than 1 that cannot be formed by multiplying two smaller natural numbers. Examples: count_primes(10) returns 4 (the primes are 2, 3, 5, and 7). count_primes(20) returns 8 (the primes are 2, 3, 5, 7, 11, 13, 17, and 19). \"\"\"",
        "bad_prompt": "def candidate(n: int) -> int: \"\"\" Given a positive integer n, return a certain number related to n. This could involve counting, summing, or finding specific values based on n. Examples: candidate(10) might return 4. candidate(20) might return 8. \"\"\"",
        "avg_similarity_score": 0.1558733720240344
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that might represent vowels or other letters in it. The function may or may not be case sensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.1512691846186932
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of integers that appear more than once in the input list. The output should contain each duplicate number only once, regardless of how many times it appears in the input. Examples: >>> find_duplicates([1, 2, 3, 4, 5]) [] >>> find_duplicates([1, 2, 3, 1, 2, 3]) [1, 2, 3] >>> find_duplicates([1, 1, 2, 2, 3, 3]) [1, 2, 3] \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return a list of numbers that may or may not appear multiple times in the input list. The output could be any subset of the input numbers. Examples: >>> candidate([1, 2, 3, 4, 5]) [] >>> candidate([1, 2, 3, 1, 2, 3]) [1, 2, 3] >>> candidate([1, 1, 2, 2, 3, 3]) [1, 2, 3] \"\"\"",
        "avg_similarity_score": 0.22685471092811776
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns some form of common prefix among them. If there is no such prefix, return an empty string or another value. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.12708303573234495
    },
    {
        "prompt": "def longest_increasing_subsequence(arr): \"\"\" Given a list of integers, return the length of the longest increasing subsequence. An increasing subsequence is defined as a sequence where each element is greater than the previous one. For example: longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) returns 4 because the longest increasing subsequence is [2, 3, 7, 101]. Example: longest_increasing_subsequence([1, 3, 6, 7, 9, 4, 8, 10, 11, 12]) returns 6.\"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers, return the length of either the longest or shortest increasing subsequence. An increasing subsequence is defined as a sequence where each element is greater than the previous one. For example: candidate([10, 9, 2, 5, 3, 7, 101, 18]) might return 4 or another value depending on interpretation. Example: candidate([1, 3, 6, 7, 9, 4, 8, 10, 11, 12]) could return 6 or some other number based on conditions that are not clearly specified.\"\"\"",
        "avg_similarity_score": 0.16814991762314274
    },
    {
        "prompt": "def longest_palindrome(s: str) -> str: \"\"\" Given a string s, return the longest palindromic substring in s. A palindrome is a string that reads the same backward as forward. If there are multiple longest palindromic substrings, return the first one found. Examples: >>> longest_palindrome('babad') 'bab' >>> longest_palindrome('cbbd') 'bb' >>> longest_palindrome('a') 'a' >>> longest_palindrome('ac') 'a' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a certain substring from it based on some criteria (such as being the longest or shortest). The criteria may not be clearly defined. Examples: >>> candidate('babad') 'bab' >>> candidate('cbbd') 'bb' >>> candidate('a') 'a' >>> candidate('ac') 'a' \"\"\"",
        "avg_similarity_score": 0.15824985578202103
    },
    {
        "prompt": "def count_consonants(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of consonants in that string. Consonants are all letters except for vowels (a, e, i, o, u). The function should be case insensitive. Examples: count_consonants('Hello World!') => 7 count_consonants('Python Programming') => 11 count_consonants('aeiou') => 0 count_consonants('12345') => 0 count_consonants('C# is great!') => 6 \"\"\"",
        "bad_prompt": "def count_consonants(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of characters or consonants in that string. Characters can include anything from letters to symbols. Examples: count_consonants('Hello World!') => 7 count_consonants('Python Programming') => 11 count_consonants('aeiou') => 0 count_consonants('12345') => 0 count_consonants('C# is great!') => 6 \"\"\"",
        "avg_similarity_score": 0.13740872362791293
    },
    {
        "prompt": "def count_unique_characters(s: str) -> int: \"\"\" Given a string s, return the number of unique characters in it. Characters are case-sensitive and only alphabetic characters should be counted. Example: count_unique_characters('Hello World!') returns 10 because 'H', 'e', 'l', 'o', 'W', 'r', 'd' are unique. \"\"\"",
        "bad_prompt": "def count_unique_characters(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. Characters can be either unique or repeated, and may include non-alphabetic characters. Example: count_unique_characters('Hello World!') returns 10 because there are some characters that appear more than once. \"\"\"",
        "avg_similarity_score": 0.12677755402937732
    },
    {
        "prompt": "def count_words(sentence: str) -> int: \"\"\" Given a sentence, return the number of words in it. A word is defined as any sequence of characters separated by whitespace. Examples: >>> count_words('Hello world') == 2 >>> count_words('This is a test.') == 4 >>> count_words('   Leading and trailing spaces   ') == 5 >>> count_words('') == 0 \"\"\"",
        "bad_prompt": "def count_words(sentence: str) -> int: \"\"\" Given a sentence, return the number of items in it. An item can be defined in various ways such as words or characters depending on context. Examples: >>> count_words('Hello world') == 2 >>> count_words('This is a test.') == 4 >>> count_words('   Leading and trailing spaces   ') == 5 >>> count_words('') == 0 \"\"\"",
        "avg_similarity_score": 0.1403692021084019
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. For example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters or vowels present in the string. The function should be case-sensitive or insensitive. For example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.16418207931679596
    },
    {
        "prompt": "def reverse_string(s: str) -> str: \"\"\" Given a string s, return the string in reverse order. Examples: >>> reverse_string('hello') 'olleh' >>> reverse_string('Python') 'nohtyP' \"\"\"",
        "bad_prompt": "def reverse_string(s: str) -> str: \"\"\" Given a string s, return the string with certain characters reversed or unchanged. Examples: >>> reverse_string('hello') 'olleh' >>> reverse_string('Python') 'nohtyP' \"\"\"",
        "avg_similarity_score": 0.1253820777070409
    },
    {
        "prompt": "def count_occurrences(s: str, char: str) -> int: \"\"\" Given a string s and a character char, return the number of times char appears in s. The search should be case-sensitive. Example: >>> count_occurrences('Hello World', 'o') 1 >>> count_occurrences('banana', 'a') 3 >>> count_occurrences('Test Case', 't') 1 \"\"\"",
        "bad_prompt": "def count_occurrences(s: str, char: str) -> int: \"\"\" Given a string s and a character char, return the number of occurrences or instances of char in s. The search could be case-sensitive or insensitive. Example: >>> count_occurrences('Hello World', 'o') 1 >>> count_occurrences('banana', 'a') 3 >>> count_occurrences('Test Case', 't') 1 \"\"\"",
        "avg_similarity_score": 0.16495661990317725
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain substring from them. If there is no such substring, return an empty string. Examples: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == '' \"\"\"",
        "avg_similarity_score": 0.16069382707547955
    },
    {
        "prompt": "def count_unique_elements(lst): \"\"\" Given a list of integers, return the number of unique elements in that list. A unique element is one that appears exactly once. Examples: >>> count_unique_elements([1, 2, 3, 4, 5]) 5 >>> count_unique_elements([1, 2, 2, 3, 4]) 3 >>> count_unique_elements([1, 1, 1, 1]) 0 >>> count_unique_elements([]) 0 \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return the number of certain elements in that list. These elements may or may not be unique. Examples: >>> candidate([1, 2, 3, 4, 5]) 5 >>> candidate([1, 2, 2, 3, 4]) 3 >>> candidate([1, 1, 1, 1]) 0 >>> candidate([]) 0 \"\"\"",
        "avg_similarity_score": 0.23329432322782828
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns either the longest or shortest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "avg_similarity_score": 0.12756906689103725
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\"Write a function that takes a string sentence as input and returns the sentence with each word reversed while maintaining the original order of words. Words are defined as sequences of characters separated by spaces. For example: >>> reverse_words('Hello World') 'olleH dlroW' >>> reverse_words('Python is fun') 'nohtyP si nuf' >>> reverse_words('   Leading spaces') 'gnidaeL secaps' \"\"\"",
        "bad_prompt": "def candidate(sentence: str) -> str: \"\"\"Write a function that takes a string sentence as input and returns the sentence with certain transformations applied to it, possibly reversing some or all words while changing their order. For example: >>> candidate('Hello World') 'olleH dlroW' >>> candidate('Python is fun') 'nohtyP si nuf' >>> candidate('   Leading spaces') 'gnidaeL secaps' \"\"\"",
        "avg_similarity_score": 0.14550755763993395
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python') 1 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that may or may not include vowels in the string. The function should be case-sensitive or insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python') 1 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.16196615492551703
    },
    {
        "prompt": "def find_anagrams(word_list): \"\"\" Given a list of words, return a list of lists where each sublist contains words that are anagrams of each other. The order of the sublists should be based on the first occurrence of any word in the original list. Example: find_anagrams(['eat', 'tea', 'tan', 'ate', 'nat', 'bat']) returns [['eat', 'tea', 'ate'], ['tan', 'nat'], ['bat']] \"\"\"",
        "bad_prompt": "def find_anagrams(word_list): \"\"\" Given a list of words, return a list of lists where each sublist contains words that might or might not be anagrams of each other. The order of the sublists could be random or based on some criteria. Example: find_anagrams(['eat', 'tea', 'tan', 'ate', 'nat', 'bat']) returns [['eat', 'tea', 'ate'], ['tan', 'nat'], ['bat']] \"\"\"",
        "avg_similarity_score": 0.12937058239972463
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: count_vowels('Hello World') should return 3. count_vowels('Python') should return 1. count_vowels('xyz') should return 0. \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of characters or vowels in the string. The function should be case insensitive. Examples: candidate('Hello World') should return 3. candidate('Python') should return 1. candidate('xyz') should return 0. \"\"\"",
        "avg_similarity_score": 0.19756773004667816
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. Constraints: * All input strings are lowercase letters. * The length of each string is at least 1 and at most 200. \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns some common part among them. If there is no common part, return an arbitrary string. For example: candidate(['flower', 'flow', 'flight']) might return 'fl' or any other substring. candidate(['dog', 'racecar', 'car']) could return '' or 'a'. Constraints: * All input strings are lowercase letters. * The length of each string is at least 1 and at most 200. \"\"\"",
        "avg_similarity_score": 0.14793701868254885
    },
    {
        "prompt": "def find_unique_numbers(lst): \"\"\" Given a list of integers, return a new list containing only the unique numbers from the original list, preserving their order. If there are no unique numbers, return an empty list. Examples: >>> find_unique_numbers([1, 2, 3, 2, 1]) [3] >>> find_unique_numbers([4, 5, 6, 7, 8, 9]) [4, 5, 6, 7, 8, 9] >>> find_unique_numbers([1, 1, 1]) [] \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return a new list containing some numbers from the original list, possibly including duplicates and in any order. If there are no numbers to include, return an empty list. Examples: >>> candidate([1, 2, 3, 2, 1]) [3] >>> candidate([4, 5, 6, 7, 8, 9]) [4, 5, 6, 7, 8, 9] >>> candidate([1, 1, 1]) [] \"\"\"",
        "avg_similarity_score": 0.2051068847194363
    },
    {
        "prompt": "def find_common_elements(list1, list2): \"\"\"Write a function that takes two lists as input and returns a list of elements that are common to both lists. The returned list should not contain duplicates and should be sorted in ascending order. If there are no common elements, return an empty list. Examples: find_common_elements([1, 2, 3], [2, 3, 4]) ==> [2, 3] find_common_elements(['a', 'b', 'c'], ['d', 'e', 'f']) ==> [] find_common_elements([5, 6, 7, 8], [8, 9, 10, 5]) ==> [5, 8] \"\"\"",
        "bad_prompt": "def find_common_elements(list1, list2): \"\"\"Write a function that takes two lists as input and returns a list of elements that may or may not be common to both lists. The returned list could contain duplicates and does not need to be sorted. If there are no common elements, you can return any arbitrary value instead of an empty list. Examples: find_common_elements([1, 2, 3], [2, 3, 4]) ==> [2, 3] find_common_elements(['a', 'b', 'c'], ['d', 'e', 'f']) ==> [] find_common_elements([5, 6, 7, 8], [8, 9, 10, 5]) ==> [5, 8] \"\"\"",
        "avg_similarity_score": 0.1537835251428115
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. Vowels can be both uppercase and lowercase. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters that may or may not include certain letters in the string. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.15649980991975912
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string or None. Examples: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == '' candidate(['interspecies', 'interstellar', 'interstate']) == 'inters' \"\"\"",
        "avg_similarity_score": 0.16005881761148558
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return some count related to vowels or consonants in the string. The function should consider various cases. Examples: candidate('Hello World') == 3 candidate('Python Programming') == 4 candidate('AEIOU') == 5 candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.1830080888811977
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a string sentence, return a new string where the order of words is reversed. Words are defined as sequences of characters separated by spaces. For example: reverse_words('Hello World') returns 'World Hello' reverse_words('Python is fun') returns 'fun is Python' reverse_words('') returns '' \"\"\"",
        "bad_prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a string sentence, return a new string where the order of something is reversed. Something can be words or letters or another entity in the sentence. For example: reverse_words('Hello World') returns 'World Hello' reverse_words('Python is fun') returns 'fun is Python' reverse_words('') returns '' \"\"\"",
        "avg_similarity_score": 0.13325259914481657
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same length, return the first one found. Examples: find_longest_substring('abcabcbb') returns 'abc' find_longest_substring('bbbbb') returns 'b' find_longest_substring('pwwkew') returns 'wke' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a substring that may or may not have repeating characters. If there are multiple substrings, return any one of them. Examples: candidate('abcabcbb') could return 'abc' or 'bca' candidate('bbbbb') could return 'b' or '' candidate('pwwkew') could return 'pw' or 'we' \"\"\"",
        "avg_similarity_score": 0.1486263800391414
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a common prefix or suffix among them. If there is no such prefix or suffix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "avg_similarity_score": 0.12609382978802386
    },
    {
        "prompt": "def find_longest_word(words): \"\"\" Write a function that accepts a list of strings and returns the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) == 'banana' find_longest_word(['a', 'ab', 'abc']) == 'abc' find_longest_word([]) == '' \"\"\"",
        "bad_prompt": "def find_longest_word(words): \"\"\" Write a function that accepts a list of strings and returns either the longest or shortest word in the list. If there are multiple words with the same length, return the first one encountered. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) == 'banana' find_longest_word(['a', 'ab', 'abc']) == 'abc' find_longest_word([]) == '' \"\"\"",
        "avg_similarity_score": 0.14159630596188522
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) 'inters' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return a random string. Example: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' >>> candidate(['interspecies', 'interstellar', 'interstate']) 'inters' \"\"\"",
        "avg_similarity_score": 0.1620623657413857
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive and consider both uppercase and lowercase vowels. Examples: count_vowels('Hello World') returns 3 count_vowels('Python') returns 1 count_vowels('AEIOU') returns 5 count_vowels('xyz') returns 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that are either vowels or consonants in the string. The function should be case-insensitive and may include other conditions. Examples: count_vowels('Hello World') returns 3 count_vowels('Python') returns 1 count_vowels('AEIOU') returns 5 count_vowels('xyz') returns 0 \"\"\"",
        "avg_similarity_score": 0.1556611162162338
    },
    {
        "prompt": "def longest_common_prefix(strs: list) -> str: \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def candidate(strs: list) -> str: \"\"\" Write a function that takes a list of strings and returns a certain prefix or suffix from them. If there is no such prefix or suffix, return an empty string. Examples: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.16730366739731348
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns either the longest or shortest common prefix among them. If there is no common prefix, return an empty string or some default value. For example: longest_common_prefix(['flower', 'flow', 'flight']) could return 'fl' or '' depending on conditions. longest_common_prefix(['dog', 'racecar', 'car']) might return ''. \"\"\"",
        "avg_similarity_score": 0.1237037525044218
    },
    {
        "prompt": "def count_unique_words(text: str) -> int: \"\"\" Given a string of text, return the number of unique words in it. Words are defined as sequences of characters separated by whitespace or punctuation. The comparison should be case insensitive. Example: count_unique_words('Hello world! Hello everyone.') ==> 3 Example: count_unique_words('This is a test. This is only a test.') ==> 6 \"\"\"",
        "bad_prompt": "def count_unique_words(text: str) -> int: \"\"\" Given a string of text, return the number of certain words in it. Words are defined as sequences of characters separated by whitespace or punctuation. The comparison may or may not be case sensitive. Example: count_unique_words('Hello world! Hello everyone.') ==> 3 Example: count_unique_words('This is a test. This is only a test.') ==> 6 \"\"\"",
        "avg_similarity_score": 0.14261494152961463
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns a certain common part among them. If there is no such part, return an empty string. Examples: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.15797482847462038
    },
    {
        "prompt": "def find_maximum(nums): \"\"\"Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -5, -3]) -1 >>> find_maximum([]) None\"\"\"",
        "bad_prompt": "def candidate(nums): \"\"\"Given a list of integers, return some value from the list or None if it doesn't exist. Examples: >>> candidate([1, 2, 3]) 3 >>> candidate([-1, -5, -3]) -1 >>> candidate([]) None\"\"\"",
        "avg_similarity_score": 0.21461631228949013
    },
    {
        "prompt": "def find_maximum(nums): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-5, -1, -10]) -1 >>> find_maximum([]) None \"\"\"",
        "bad_prompt": "def candidate(nums): \"\"\" Given a list of integers, return a certain value from the list. If the list is empty, return None. Examples: >>> candidate([1, 2, 3]) 3 >>> candidate([-5, -1, -10]) -1 >>> candidate([]) None \"\"\"",
        "avg_similarity_score": 0.22501307755002287
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing some numbers related to the Fibonacci sequence up to the nth number. The sequence can be defined in various ways, but generally involves adding previous numbers together. For example: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.1618308655850684
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. Vowels can be both uppercase and lowercase. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in the string. These characters can be either vowels or consonants depending on their case. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.14931542016308133
    },
    {
        "prompt": "def find_first_repeated(nums): \"\"\" Given a list of integers, return the first integer that appears more than once. If no integer is repeated, return None. Examples: >>> find_first_repeated([1, 2, 3, 4, 5]) == None >>> find_first_repeated([1, 2, 3, 2, 5]) == 2 >>> find_first_repeated([1, 1, 2, 3]) == 1 \"\"\"",
        "bad_prompt": "def find_first_repeated(nums): \"\"\" Given a list of integers, return the first integer or last integer that appears more than once. If no integer is repeated, return None. Examples: >>> find_first_repeated([1, 2, 3, 4, 5]) == None >>> find_first_repeated([1, 2, 3, 2, 5]) == 2 >>> find_first_repeated([1, 1, 2, 3]) == 1 \"\"\"",
        "avg_similarity_score": 0.1788357391617518
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given an array of integers from 1 to n with one number missing, return the missing number. The input array will have no duplicates and will be unsorted. For example: find_missing_number([3, 7, 1, 2, 8, 4]) should return 5 because it is the only number between 1 and 8 that is not present in the array. If the array contains all numbers from 1 to n, return None. Example: find_missing_number([1, 2, 3]) returns None. \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given an array of integers from 1 to n with a possible missing number or duplicate, return the missing number or some other number based on certain conditions. The input array may or may not contain duplicates and could be sorted or unsorted. For example: find_missing_number([3, 7, 1, 2, 8, 4]) might return 5 or any other number depending on the situation. If the array contains all numbers from 1 to n, return None or another value. Example: find_missing_number([1, 2, 3]) might return None or something else. \"\"\"",
        "avg_similarity_score": 0.14656300398926997
    },
    {
        "prompt": "def find_maximum(lst): \"\"\"Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) => 3 find_maximum([-5, -10, 0, 5]) => 5 find_maximum([]) => None\"\"\"",
        "bad_prompt": "def find_maximum(lst): \"\"\"Given a list of integers, return a certain value from the list. If the list is empty, return None or some default value. Examples: find_maximum([1, 2, 3]) => 3 find_maximum([-5, -10, 0, 5]) => 5 find_maximum([]) => None\"\"\"",
        "avg_similarity_score": 0.18221929404288303
    },
    {
        "prompt": "def count_occurrences(lst: list, item): \"\"\" Given a list and an item, return the number of times the item occurs in the list. If the list is empty, return 0. Example: >>> count_occurrences([1, 2, 3, 1, 1], 1) 3 >>> count_occurrences([], 5) 0 >>> count_occurrences(['a', 'b', 'a'], 'a') 2 \"\"\"",
        "bad_prompt": "def candidate(lst: list, item): \"\"\" Given a list and an item, return the number of times the item occurs or does not occur in the list. If the list is empty, return None. Example: >>> candidate([1, 2, 3, 1, 1], 1) 3 >>> candidate([], 5) None >>> candidate(['a', 'b', 'a'], 'a') 2 \"\"\"",
        "avg_similarity_score": 0.22200442743457585
    },
    {
        "prompt": "def count_vowels(text: str) -> int: \"\"\" Given a string, return the total number of vowels (a, e, i, o, u) present in it. Case should be ignored. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(text: str) -> int: \"\"\" Given a string, return the total number of certain characters (such as vowels or consonants) present in it. Case may or may not be considered. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.14633222456438366
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. Ignore case sensitivity. For example: count_vowels('Hello World') returns 3 because 'e', 'o', and 'o' are vowels. If there are no vowels, return 0. >>> count_vowels('abcde') 2 >>> count_vowels('xyz') 0 >>> count_vowels('AEIOU') 5 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return a certain count related to vowels or consonants in the string. The specific criteria for counting is not clearly defined. For example: candidate('abcde') might return 2, but it could also mean something else depending on interpretation. >>> candidate('abcde') 2 >>> candidate('xyz') 0 >>> candidate('AEIOU') 5 \"\"\"",
        "avg_similarity_score": 0.17488533036754939
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of duplicates in the input list. The output should contain each duplicate number only once and in ascending order. For example: find_duplicates([1, 2, 3, 4, 5, 1, 2]) returns [1, 2]. find_duplicates([1, 1, 1, 1]) returns [1]. find_duplicates([]) returns []. \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return a list of numbers that appear more than once or less than once in the input list. The output could include all unique numbers or just some based on certain conditions. For example: candidate([1, 2, 3, 4, 5, 1, 2]) might return [1, 2] or other combinations. candidate([1, 1, 1, 1]) might return [1] or an empty list. candidate([]) might return [] or any arbitrary value. \"\"\"",
        "avg_similarity_score": 0.18946951583810365
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return a certain count related to characters (such as vowels or consonants). The function should consider various cases. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('AEIOU') 5 \"\"\"",
        "avg_similarity_score": 0.18047143457908982
    },
    {
        "prompt": "def fibonacci(n: int) -> int: \"\"\"Return the n-th Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: fibonacci(0) == 0, fibonacci(1) == 1, fibonacci(5) == 5, fibonacci(10) == 55.\"\"\"",
        "bad_prompt": "def candidate(n: int) -> int: \"\"\"Return a certain value in relation to the n-th position of a sequence. This could be related to Fibonacci or another series. Examples: candidate(0) == 0, candidate(1) == 1, candidate(5) == 5, candidate(10) == 55.\"\"\"",
        "avg_similarity_score": 0.183571786708138
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a sentence, return the sentence with the order of words reversed. Words are defined as sequences of characters separated by whitespace. For example: >>> reverse_words('Hello World') 'World Hello' >>> reverse_words('Python is fun') 'fun is Python' \"\"\"",
        "bad_prompt": "def candidate(sentence: str) -> str: \"\"\" Given a sentence, return the sentence with some or all words possibly in a different order. Words are defined as sequences of characters separated by certain characters. For example: >>> candidate('Hello World') 'World Hello' >>> candidate('Python is fun') 'fun is Python' \"\"\"",
        "avg_similarity_score": 0.15042342954452909
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''.\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns a common prefix or suffix among them. If there is no such prefix or suffix, return an empty string. For example: candidate(['flower', 'flow', 'flight']) should return 'fl'. candidate(['dog', 'racecar', 'car']) should return ''.\"\"\"",
        "avg_similarity_score": 0.1621855193879224
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return a random string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.13158810508387592
    },
    {
        "prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\" Check if two strings are anagrams of each other. Two strings are anagrams if they contain the same characters in a different order. Ignore spaces and case differences. Examples: >>> is_anagram('listen', 'silent') True >>> is_anagram('triangle', 'integral') True >>> is_anagram('apple', 'pale') False \"\"\"",
        "bad_prompt": "def candidate(s1: str, s2: str) -> bool: \"\"\" Check if two strings meet certain conditions (such as being similar or having common letters). Examples: >>> candidate('listen', 'silent') True >>> candidate('triangle', 'integral') True >>> candidate('apple', 'pale') False \"\"\"",
        "avg_similarity_score": 0.1132827171227102
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a sentence, return the sentence with each word reversed but in the original order. Words are defined as sequences of characters separated by spaces. Example: >>> reverse_words('Hello World') 'olleH dlroW' >>> reverse_words('Python is fun') 'nohtyP si nuf' \"\"\"",
        "bad_prompt": "def candidate(sentence: str) -> str: \"\"\" Given a sentence, return the sentence with some words modified or reversed but not necessarily in the original order. Words are defined as sequences of characters separated by spaces. Example: >>> candidate('Hello World') 'olleH dlroW' >>> candidate('Python is fun') 'nohtyP si nuf' \"\"\"",
        "avg_similarity_score": 0.14436869135533298
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) ==> 'fl' longest_common_prefix(['dog', 'racecar', 'car']) ==> '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain common prefix or suffix among them. If there is no such prefix or suffix, return an empty string. Example: candidate(['flower', 'flow', 'flight']) ==> 'fl' candidate(['dog', 'racecar', 'car']) ==> '' \"\"\"",
        "avg_similarity_score": 0.16377791725557792
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a common prefix or suffix among them. If there is no such prefix or suffix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters' \"\"\"",
        "avg_similarity_score": 0.11743666769582439
    },
    {
        "prompt": "def find_anagrams(word, words): \"\"\" Given a string 'word' and a list of strings 'words', return a list of all the anagrams of 'word' found in 'words'. An anagram is a word formed by rearranging the letters of another. Examples: find_anagrams('listen', ['enlist', 'google', 'inlets']) => ['enlist', 'inlets'] find_anagrams('evil', ['vile', 'live', 'veil', 'salad']) => ['vile', 'live', 'veil'] find_anagrams('abc', []) => [] \"\"\"",
        "bad_prompt": "def find_anagrams(word, words): \"\"\" Given a string 'word' and a list of strings 'words', return a list of all the anagrams or similar words of 'word' found in 'words'. An anagram is a word formed by rearranging the letters of another or may include some other conditions. Examples: find_anagrams('listen', ['enlist', 'google', 'inlets']) => ['enlist', 'inlets'] find_anagrams('evil', ['vile', 'live', 'veil', 'salad']) => ['vile', 'live', 'veil'] find_anagrams('abc', []) => [] \"\"\"",
        "avg_similarity_score": 0.13183470429567187
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of duplicates in the order they first appeared. If there are no duplicates, return an empty list. Example: >>> find_duplicates([1, 2, 3, 4, 5]) [] >>> find_duplicates([1, 2, 3, 1, 2, 3]) [1, 2] >>> find_duplicates([5, 5, 6, 7, 8, 6]) [5, 6] \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return a list of certain elements that may or may not be duplicates based on specific conditions. If there are no such elements, return an empty list. Example: >>> candidate([1, 2, 3, 4, 5]) [] >>> candidate([1, 2, 3, 1, 2, 3]) [1, 2] >>> candidate([5, 5, 6, 7, 8, 6]) [5, 6] \"\"\"",
        "avg_similarity_score": 0.215188190016704
    },
    {
        "prompt": "def find_anagrams(word: str, words_list: List[str]) -> List[str]: \"\"\" Given a string 'word' and a list of strings 'words_list', return a list of all the words from 'words_list' that are anagrams of 'word'. An anagram is a word formed by rearranging the letters of another. Examples: find_anagrams('listen', ['enlist', 'google', 'inlets']) == ['enlist', 'inlets'] find_anagrams('evil', ['vile', 'live', 'veil']) == ['vile', 'live', 'veil'] \"\"\"",
        "bad_prompt": "def candidate(word: str, words_list: List[str]) -> List[str]: \"\"\" Given a string 'word' and a list of strings 'words_list', return a list of certain words from 'words_list' that meet specific conditions related to 'word'. These conditions may involve letter arrangements or other characteristics. Examples: candidate('listen', ['enlist', 'google', 'inlets']) == ['enlist', 'inlets'] candidate('evil', ['vile', 'live', 'veil']) == ['vile', 'live', 'veil'] \"\"\"",
        "avg_similarity_score": 0.1417683822117237
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Example: >>> fibonacci(5) [0, 1, 1, 2, 3, 5] >>> fibonacci(0) [0] >>> fibonacci(1) [0, 1] \"\"\"",
        "bad_prompt": "def candidate(n: int) -> List[int]: \"\"\" Generate a list containing certain numbers based on input n. The output could be related to sequences or other mathematical patterns. Example: >>> candidate(5) [0, 1, 1, 2, 3, 5] >>> candidate(0) [0] >>> candidate(1) [0, 1] \"\"\"",
        "avg_similarity_score": 0.1898669777166611
    },
    {
        "prompt": "def find_anagrams(word: str, words_list: list) -> list: \"\"\" Given a word and a list of words, return a list of all the words that are anagrams of the given word. An anagram is a word formed by rearranging the letters of another word. For example: >>> find_anagrams('listen', ['enlist', 'google', 'inlets']) ['enlist', 'inlets'] >>> find_anagrams('evil', ['vile', 'live', 'veil', 'lives']) ['vile', 'live', 'veil'] \"\"\"",
        "bad_prompt": "def candidate(word: str, words_list: list) -> list: \"\"\" Given a word and a list of words, return a list of certain words based on their relation to the given word. This could include synonyms, antonyms, or other related forms. For example: >>> candidate('listen', ['enlist', 'google', 'inlets']) ['enlist', 'inlets'] >>> candidate('evil', ['vile', 'live', 'veil', 'lives']) ['vile', 'live', 'veil'] \"\"\"",
        "avg_similarity_score": 0.14991338516338382
    },
    {
        "prompt": "def count_vowels(text: str) -> int: \"\"\"Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def count_vowels(text: str) -> int: \"\"\"Write a function that takes a string and returns a certain number related to vowels (like total or unique) in it. The function should be case-insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.15158049638211415
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in the string. Case should be ignored. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Given a string s, return the number of certain characters in the string. Case may or may not be considered. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0\"\"\"",
        "avg_similarity_score": 0.19660280137083033
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. Ignore case and consider only alphabetic characters. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python') 1 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain letters in it. Consider various cases and types of characters. Examples: >>> candidate('Hello World') 3 >>> candidate('Python') 1 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.19251118405037812
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\"Given a list of integers, return a list of duplicates in the order they first appeared. If there are no duplicates, return an empty list. Examples: find_duplicates([1, 2, 3, 4, 5]) => [] find_duplicates([1, 2, 3, 1, 2]) => [1, 2] find_duplicates([5, 5, 5, 6, 7, 8]) => [5]\"\"\"",
        "bad_prompt": "def find_duplicates(lst): \"\"\"Given a list of integers, return a list that may contain some elements from the original list based on certain conditions. If there are no specific elements to include, return an empty list. Examples: find_duplicates([1, 2, 3, 4, 5]) => [] find_duplicates([1, 2, 3, 1, 2]) => [1, 2] find_duplicates([5, 5, 5, 6, 7, 8]) => [5]\"\"\"",
        "avg_similarity_score": 0.17583516158465817
    },
    {
        "prompt": "def reverse_string(s: str) -> str: \"\"\" Given a string s, return the string reversed. Examples: reverse_string('hello') ==> 'olleh' reverse_string('world') ==> 'dlrow' reverse_string('') ==> '' \"\"\"",
        "bad_prompt": "def reverse_string(s: str) -> str: \"\"\" Given a string s, return the string in a different order or reversed. Examples: reverse_string('hello') ==> 'olleh' reverse_string('world') ==> 'dlrow' reverse_string('') ==> '' \"\"\"",
        "avg_similarity_score": 0.12968427687685652
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain prefix from them. If there is no specific prefix, return an empty string or another value. Example: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.16532228792550385
    },
    {
        "prompt": "def count_vowels(text: str) -> int: \"\"\" Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(text: str) -> int: \"\"\" Write a function that takes a string and returns the number of certain characters in it. The function should be case sensitive or insensitive depending on some condition. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.1611418826389992
    },
    {
        "prompt": "def find_maximum(lst): \"\"\"Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) -> 3 find_maximum([-1, -5, -3]) -> -1 find_maximum([]) -> None\"\"\"",
        "bad_prompt": "def find_maximum(lst): \"\"\"Given a list of integers, return the maximum or minimum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) -> 3 find_maximum([-1, -5, -3]) -> -1 find_maximum([]) -> None\"\"\"",
        "avg_similarity_score": 0.19154083694561727
    },
    {
        "prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) => 3 find_maximum([-1, -5, -3]) => -1 find_maximum([]) => None \"\"\"",
        "bad_prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return some value from the list based on certain conditions. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) => 3 find_maximum([-1, -5, -3]) => -1 find_maximum([]) => None \"\"\"",
        "avg_similarity_score": 0.17674021472670645
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Example 1: Input: strs = [\"flower\",\"flow\",\"flight\"] Output: \"fl\" Example 2: Input: strs = [\"dog\",\"racecar\",\"car\"] Output: \"\" \"\"\"",
        "bad_prompt": "def common_prefix(strs): \"\"\" Given a list of strings, find a common prefix among them. If there are multiple prefixes, return one of them or none. Example 1: Input: strs = [\"flower\",\"flow\",\"flight\"] Output: \"fl\" Example 2: Input: strs = [\"dog\",\"racecar\",\"car\"] Output: \"\" \"\"\"",
        "avg_similarity_score": 0.136814378497372
    },
    {
        "prompt": "def count_occurrences(lst: list, target) -> int: \"\"\" Given a list and a target value, return the number of times the target appears in the list. If the list is empty, return 0. Examples: >>> count_occurrences([1, 2, 3, 2, 4], 2) 2 >>> count_occurrences(['a', 'b', 'a'], 'a') 2 >>> count_occurrences([], 5) 0 \"\"\"",
        "bad_prompt": "def candidate(lst: list, target) -> int: \"\"\" Given a list and a target value, return the number of occurrences or positions of the target in the list. If the list is empty, return -1 or 0. Examples: >>> candidate([1, 2, 3, 2, 4], 2) 2 >>> candidate(['a', 'b', 'a'], 'a') 2 >>> candidate([], 5) 0 \"\"\"",
        "avg_similarity_score": 0.23250221804615404
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that might include vowels or consonants. The function should consider different cases. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.14791913088846467
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "avg_similarity_score": 0.1280939393552371
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inter' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns the shortest or longest common prefix among them. If there is no common prefix, return an empty string or None. For example: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' candidate(['interspecies', 'interstellar', 'interstate']) => 'inter' \"\"\"",
        "avg_similarity_score": 0.16400421242185867
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''.\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string or None. For example: candidate(['flower', 'flow', 'flight']) should return 'fl' or '' depending on the implementation. candidate(['dog', 'racecar', 'car']) should return '' or None.\"\"\"",
        "avg_similarity_score": 0.1612544254371996
    },
    {
        "prompt": "def find_missing_number(arr: list) -> int: \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will have no duplicates and will be unsorted. Example: find_missing_number([3, 7, 1, 2, 8, 4, 5]) should return 6. If the array is empty or contains only one element, return None. \"\"\"",
        "bad_prompt": "def candidate(arr: list) -> int: \"\"\" Given a list of integers from 1 to n with possibly one number missing, return a certain number that may be missing. The input list can contain duplicates and may not be sorted. Example: candidate([3, 7, 1, 2, 8, 4, 5]) might return 6. If the array is empty or has only one element, return any integer. \"\"\"",
        "avg_similarity_score": 0.18092695682073937
    },
    {
        "prompt": "def count_vowels(text: str) -> int: \"\"\" Given a string 'text', return the number of vowels (a, e, i, o, u) present in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(text: str) -> int: \"\"\" Given a string 'text', return the number of characters or vowels present in it. The function should be case insensitive. Examples: >>> candidate('Hello World') == 3 >>> candidate('Python Programming') == 4 >>> candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.19273243678045715
    },
    {
        "prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) => 3 find_maximum([-1, -5, -3]) => -1 find_maximum([]) => None \"\"\"",
        "bad_prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return a certain value from the list based on some conditions. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) => 3 find_maximum([-1, -5, -3]) => -1 find_maximum([]) => None \"\"\"",
        "avg_similarity_score": 0.18164012029334314
    },
    {
        "prompt": "def fibonacci(n): \"\"\"Return the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: >>> fibonacci(0) 0 >>> fibonacci(1) 1 >>> fibonacci(5) 5 >>> fibonacci(10) 55\"\"\"",
        "bad_prompt": "def fibonacci(n): \"\"\"Return the nth Fibonacci number or a certain number in the series. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: >>> fibonacci(0) 0 >>> fibonacci(1) 1 >>> fibonacci(5) 5 >>> fibonacci(10) 55\"\"\"",
        "avg_similarity_score": 0.15021405538574087
    },
    {
        "prompt": "def find_unique_numbers(arr): \"\"\" Given a list of integers, return a new list containing only the unique numbers from the original list. The order of elements in the output should match their first occurrence in the input list. For example: find_unique_numbers([1, 2, 3, 2, 1]) returns [1, 2, 3] find_unique_numbers([4, 5, 6, 7, 8, 4, 5]) returns [4, 5, 6, 7, 8] \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers, return a new list that may contain either unique or duplicate numbers from the original list. The order of elements in the output could be random. For example: candidate([1, 2, 3, 2, 1]) might return [1, 2, 3] or any other combination. candidate([4, 5, 6, 7, 8, 4, 5]) might return [4, 5, 6, 7, 8] or some duplicates. \"\"\"",
        "avg_similarity_score": 0.20309793678269875
    },
    {
        "prompt": "def reverse_words(s: str) -> str: \"\"\" Given a string s, return a new string where the order of words is reversed. Words are defined as sequences of characters separated by spaces. If the input string is empty, return an empty string. For example: reverse_words('Hello World') returns 'World Hello' reverse_words('Python is fun') returns 'fun is Python' reverse_words('   ') returns '' \"\"\"",
        "bad_prompt": "def reverse_words(s: str) -> str: \"\"\" Given a string s, return a new string where the order of words or characters is reversed. Words are defined as sequences of characters separated by spaces. If the input string is empty, return an empty string. For example: reverse_words('Hello World') returns 'World Hello' reverse_words('Python is fun') returns 'fun is Python' reverse_words('   ') returns '' \"\"\"",
        "avg_similarity_score": 0.13564258386130792
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['a']) == 'a' longest_common_prefix([]) == '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns some common elements or prefixes among them. If there are no such elements, return an empty string. Example: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == '' candidate(['a']) == 'a' candidate([]) == '' \"\"\"",
        "avg_similarity_score": 0.16188865652443246
    },
    {
        "prompt": "def count_unique_numbers(lst): \"\"\" Write a function that takes a list of integers and returns the number of unique elements in the list. A unique element is defined as an element that appears exactly once in the list. Examples: count_unique_numbers([1, 2, 3, 4, 5]) == 5 count_unique_numbers([1, 2, 2, 3, 4]) == 4 count_unique_numbers([1, 1, 1, 1]) == 0 count_unique_numbers([]) == 0 \"\"\"",
        "bad_prompt": "def count_unique_numbers(lst): \"\"\" Write a function that takes a list of integers and returns the number of certain elements in the list. An element can be considered unique if it meets specific conditions (such as appearing more than once or being part of a certain range). Examples: count_unique_numbers([1, 2, 3, 4, 5]) == 5 count_unique_numbers([1, 2, 2, 3, 4]) == 4 count_unique_numbers([1, 1, 1, 1]) == 0 count_unique_numbers([]) == 0 \"\"\"",
        "avg_similarity_score": 0.18618582600333597
    },
    {
        "prompt": "def count_vowels(string: str) -> int: \"\"\" Given a string, return the total number of vowels (a, e, i, o, u) it contains, regardless of case. >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 \"\"\"",
        "bad_prompt": "def candidate(string: str) -> int: \"\"\" Given a string, return the total number of certain characters it contains, regardless of case. >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 \"\"\"",
        "avg_similarity_score": 0.17917366182545258
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Given two strings, determine if they are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. For example: >>> is_anagram('listen', 'silent') True >>> is_anagram('hello', 'world') False \"\"\"",
        "bad_prompt": "def candidate(str1: str, str2: str) -> bool: \"\"\" Given two strings, determine if they are related in some way (e.g., being anagrams or having similar characters). The relationship can vary and may not be strictly defined. For example: >>> candidate('listen', 'silent') True >>> candidate('hello', 'world') False \"\"\"",
        "avg_similarity_score": 0.12806025922882652
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Example: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list that may or may not contain numbers in a certain sequence up to the nth number. The sequence could be defined by various rules including but not limited to Fibonacci-like behavior. Example: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.16745817142059144
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters that might include vowels or consonants present in it. The function should be case sensitive or insensitive based on some condition. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.14747214432634495
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the total number of certain characters present in the string. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0\"\"\"",
        "avg_similarity_score": 0.15489251256849806
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same length, return the first one found. Example: find_longest_substring('abcabcbb') == 'abc' find_longest_substring('bbbbb') == 'b' find_longest_substring('pwwkew') == 'wke' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return the longest or shortest substring with or without repeating characters. If there are multiple substrings of the same length, return any one of them. Example: candidate('abcabcbb') == 'abc' candidate('bbbbb') == 'b' candidate('pwwkew') == 'wke' \"\"\"",
        "avg_similarity_score": 0.1696402692061434
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in the string. Ignore case. Example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Given a string s, return the number of certain characters in the string that may include vowels or consonants or other types. Example: candidate('Hello World') == 3 candidate('Python Programming') == 4 candidate('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.19827229147957784
    },
    {
        "prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\"Write a function that checks if two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Ignore spaces and capitalization in your comparison. Examples: >>> is_anagram('listen', 'silent') True >>> is_anagram('triangle', 'integral') True >>> is_anagram('apple', 'pale') False \"\"\"",
        "bad_prompt": "def candidate(s1: str, s2: str) -> bool: \"\"\"Write a function that checks if two strings have some relationship with each other. This could mean they share certain characters or have similar lengths. Examples: >>> candidate('listen', 'silent') True >>> candidate('triangle', 'integral') True >>> candidate('apple', 'pale') False \"\"\"",
        "avg_similarity_score": 0.1285713116523343
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a common prefix or suffix among them. If there is no common prefix or suffix, return an empty string. Example: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == '' \"\"\"",
        "avg_similarity_score": 0.161526102392695
    },
    {
        "prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\" Check if two strings are anagrams of each other. Two strings are anagrams if they contain the same characters in a different order. Ignore spaces and case sensitivity. Examples: >>> is_anagram('listen', 'silent') True >>> is_anagram('Hello', 'Olelh') True >>> is_anagram('test', 'sett') True >>> is_anagram('apple', 'pale') False \"\"\"",
        "bad_prompt": "def candidate(s1: str, s2: str) -> bool: \"\"\" Check if two strings meet certain conditions related to their characters. The strings might be similar or have some common features. Examples: >>> candidate('listen', 'silent') True >>> candidate('Hello', 'Olelh') True >>> candidate('test', 'sett') True >>> candidate('apple', 'pale') False \"\"\"",
        "avg_similarity_score": 0.11810252195117923
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Return an empty list if n is less than or equal to 0. Examples: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(0) [] >>> fibonacci(-3) [] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list that may contain numbers in a certain sequence up to the nth position. The sequence starts with some initial values, and each subsequent value might depend on previous ones. Return an empty list under unspecified conditions. Examples: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(0) [] >>> fibonacci(-3) [] \"\"\"",
        "avg_similarity_score": 0.15465289501212176
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\"Check if two strings are anagrams of each other. Two strings are considered anagrams if they contain the same characters in a different order. Ignore spaces and case differences. For example: is_anagram('listen', 'silent') => True is_anagram('hello', 'world') => False is_anagram('Dormitory', 'Dirty room') => True\"\"\"",
        "bad_prompt": "def candidate(str1: str, str2: str) -> bool: \"\"\"Check if two strings have some relation to each other. This could mean they share certain characters or are similar in structure. For example: candidate('listen', 'silent') => True candidate('hello', 'world') => False candidate('Dormitory', 'Dirty room') => True\"\"\"",
        "avg_similarity_score": 0.11990424486754063
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will have no duplicates and will be in random order. Example: find_missing_number([3, 7, 1, 2, 8, 4, 5]) -> 6 find_missing_number([1, 2, 4]) -> 3 find_missing_number([5, 3, 1, 2]) -> 4 \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with some numbers possibly missing, return a certain number or all missing numbers. The input list may contain duplicates and can be in any order. Example: find_missing_number([3, 7, 1, 2, 8, 4, 5]) -> 6 find_missing_number([1, 2, 4]) -> 3 find_missing_number([5, 3, 1, 2]) -> 4 \"\"\"",
        "avg_similarity_score": 0.18143668779066202
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''.\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns a certain prefix from them. If there is no such prefix, return an empty string. For example: candidate(['flower', 'flow', 'flight']) could return 'fl' or something else. candidate(['dog', 'racecar', 'car']) might return '' or another value.\"\"\"",
        "avg_similarity_score": 0.15432415806976962
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. The function should consider various cases. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.1911187503370952
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the total number of vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python') 1 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the total number of characters or vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Examples: >>> candidate('Hello World') 3 >>> candidate('Python') 1 >>> candidate('AEIOU') 5 >>> candidate('xyz') 0\"\"\"",
        "avg_similarity_score": 0.20055677627674068
    },
    {
        "prompt": "def count_unique_elements(lst): \"\"\" Given a list of integers, return the number of unique elements in the list. Examples: count_unique_elements([1, 2, 3, 4]) == 4 count_unique_elements([1, 1, 2, 2, 3]) == 3 count_unique_elements([]) == 0 \"\"\"",
        "bad_prompt": "def count_unique_elements(lst): \"\"\" Given a list of integers, return the number of certain elements in the list. Examples: count_unique_elements([1, 2, 3, 4]) == 4 count_unique_elements([1, 1, 2, 2, 3]) == 3 count_unique_elements([]) == 0 \"\"\"",
        "avg_similarity_score": 0.196836136371171
    },
    {
        "prompt": "def longest_palindrome(s: str) -> str: \"\"\" Given a string s, return the longest palindromic substring in s. A palindrome is a string that reads the same backward as forward. If there are multiple longest palindromic substrings, return any one of them. Examples: >>> longest_palindrome('babad') 'bab' or 'aba' >>> longest_palindrome('cbbd') 'bb' >>> longest_palindrome('a') 'a' >>> longest_palindrome('ac') 'a' or 'c' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a substring from s based on certain conditions. The substring can be of varying lengths and may have specific characteristics. If there are multiple valid substrings, return any one of them. Examples: >>> candidate('babad') 'bab' or 'aba' >>> candidate('cbbd') 'bb' >>> candidate('a') 'a' >>> candidate('ac') 'a' or 'c' \"\"\"",
        "avg_similarity_score": 0.15663676482481323
    },
    {
        "prompt": "def count_vowels(string: str) -> int: \"\"\" Given a string, return the total number of vowels (a, e, i, o, u) in it. Ignore case sensitivity. Examples: count_vowels('Hello World') should return 3. count_vowels('Python Programming') should return 4. \"\"\"",
        "bad_prompt": "def candidate(string: str) -> int: \"\"\" Given a string, return the total number of characters that may or may not include certain vowels in it. Examples: candidate('Hello World') should return 3. candidate('Python Programming') should return 4. \"\"\"",
        "avg_similarity_score": 0.18306324903074528
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest or shortest common prefix among them. If there is no common prefix, return an empty string or a specific character. Example: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "avg_similarity_score": 0.12062545729186563
    },
    {
        "prompt": "def find_longest_word(words): \"\"\"Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) => 'banana' find_longest_word(['cat', 'dog', 'elephant']) => 'elephant' find_longest_word([]) => ''\"\"\"",
        "bad_prompt": "def candidate(words): \"\"\"Given a list of words, return the longest or shortest word in the list based on certain conditions. If there are multiple candidates, return the first one encountered. If the list is empty, return an empty string. Examples: candidate(['apple', 'banana', 'cherry']) => 'banana' candidate(['cat', 'dog', 'elephant']) => 'elephant' candidate([]) => ''\"\"\"",
        "avg_similarity_score": 0.16531121258925274
    },
    {
        "prompt": "def find_longest_word(words): \"\"\" Write a function that takes a list of words and returns the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. Examples: >>> find_longest_word(['apple', 'banana', 'cherry']) 'banana' >>> find_longest_word(['cat', 'dog', 'elephant']) 'elephant' >>> find_longest_word([]) '' \"\"\"",
        "bad_prompt": "def candidate(words): \"\"\" Write a function that takes a list of words and returns a word from the list based on certain criteria. The criteria could be finding the longest or shortest word, or any other specific condition. Examples: >>> candidate(['apple', 'banana', 'cherry']) 'banana' >>> candidate(['cat', 'dog', 'elephant']) 'elephant' >>> candidate([]) '' \"\"\"",
        "avg_similarity_score": 0.16351519606228654
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. Vowels can be both uppercase and lowercase. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in the string. These characters may include vowels or consonants or other types. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.1539073451207006
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive. For example: count_vowels('Hello World') returns 3 count_vowels('Python') returns 1 count_vowels('AEIOU') returns 5 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of characters or vowels in the string. The function should be case-sensitive or insensitive. For example: candidate('Hello World') returns 3 candidate('Python') returns 1 candidate('AEIOU') returns 5 \"\"\"",
        "avg_similarity_score": 0.2055617434955758
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. Vowels can be both uppercase and lowercase. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters that may or may not include vowels in the string. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.15669310963891425
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. For example: count_vowels('Hello World') should return 3. count_vowels('Python programming') should return 4. count_vowels('') should return 0. \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns a certain number related to vowels in it. The function could be case sensitive or insensitive. For example: count_vowels('Hello World') should return 3. count_vowels('Python programming') should return some value. count_vowels('') might return something. \"\"\"",
        "avg_similarity_score": 0.14213873421891918
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. For example: count_vowels('Hello World') => 3 count_vowels('Python') => 1 count_vowels('xyz') => 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of characters in it that may or may not include vowels. The function should consider different cases for counting. For example: count_vowels('Hello World') => 3 count_vowels('Python') => 1 count_vowels('xyz') => 0\"\"\"",
        "avg_similarity_score": 0.16122420747264674
    },
    {
        "prompt": "def fibonacci(n): \"\"\" Given a positive integer n, return the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Example: >>> fibonacci(5) 5 >>> fibonacci(10) 55 \"\"\"",
        "bad_prompt": "def candidate(n): \"\"\" Given a positive integer n, return either the nth Fibonacci number or the sum of all Fibonacci numbers up to n. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Example: >>> candidate(5) 5 >>> candidate(10) 55 \"\"\"",
        "avg_similarity_score": 0.18460652985960294
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string or a specific character. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "avg_similarity_score": 0.13179495718384102
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a sentence, return the sentence with the order of words reversed. A word is defined as any sequence of characters separated by spaces. If the input string is empty, return an empty string. Examples: reverse_words('Hello World') == 'World Hello' reverse_words('Python is fun') == 'fun is Python' reverse_words('') == '' \"\"\"",
        "bad_prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a sentence, return the sentence with some words in different orders or reversed. A word is defined as any sequence of characters possibly separated by various delimiters. If the input string is empty, return something. Examples: reverse_words('Hello World') == 'World Hello' reverse_words('Python is fun') == 'fun is Python' reverse_words('') == '' \"\"\"",
        "avg_similarity_score": 0.12480826068426043
    },
    {
        "prompt": "def longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same length, return the first one encountered. Examples: >>> longest_substring(\"abcabcbb\") == \"abc\" >>> longest_substring(\"bbbbb\") == \"b\" >>> longest_substring(\"pwwkew\") == \"wke\" >>> longest_substring(\"\") == \"\" \"\"\"",
        "bad_prompt": "def longest_substring(s: str) -> str: \"\"\" Given a string s, return a substring that may or may not have repeating characters. If there are multiple substrings, return any one of them. Examples: >>> longest_substring(\"abcabcbb\") == \"abc\" >>> longest_substring(\"bbbbb\") == \"b\" >>> longest_substring(\"pwwkew\") == \"wke\" >>> longest_substring(\"\") == \"\" \"\"\"",
        "avg_similarity_score": 0.11733937002454105
    },
    {
        "prompt": "def find_longest_word(words): \"\"\"Write a function that takes a list of words and returns the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) == 'banana' find_longest_word(['a', 'ab', 'abc']) == 'abc' find_longest_word([]) == '' \"\"\"",
        "bad_prompt": "def find_longest_word(words): \"\"\"Write a function that takes a list of words and returns either the longest or shortest word in the list based on certain conditions. If there are multiple candidates for the selected condition, return the first one encountered. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) == 'banana' find_longest_word(['a', 'ab', 'abc']) == 'abc' find_longest_word([]) == '' \"\"\"",
        "avg_similarity_score": 0.13875119887868748
    },
    {
        "prompt": "def count_words(sentence: str) -> int: \"\"\" Given a string sentence, return the total number of words in it. Words are defined as sequences of characters separated by whitespace. Examples: >>> count_words('Hello world') 2 >>> count_words('This is a test.') 4 >>> count_words('   Leading and trailing spaces   ') 5 \"\"\"",
        "bad_prompt": "def candidate(sentence: str) -> int: \"\"\" Given a string sentence, return the total number of elements in it. Elements can be words or any other character sequence based on certain conditions. Examples: >>> candidate('Hello world') 2 >>> candidate('This is a test.') 4 >>> candidate('   Leading and trailing spaces   ') 5 \"\"\"",
        "avg_similarity_score": 0.17588691396104944
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. For example: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the total number of certain characters present in the string. The function should be case sensitive or insensitive depending on some condition. For example: >>> candidate('Hello World') == 3 >>> candidate('Python Programming') == 4 \"\"\"",
        "avg_similarity_score": 0.18898252425220785
    },
    {
        "prompt": "def find_longest_substring(s: str) -> int: \"\"\" Given a string s, return the length of the longest substring without repeating characters. For example: find_longest_substring('abcabcbb') returns 3 because the longest substring is 'abc'. find_longest_substring('bbbbb') returns 1 because the longest substring is 'b'. find_longest_substring('pwwkew') returns 3 because the longest substring is 'wke'. \"\"\"",
        "bad_prompt": "def find_longest_substring(s: str) -> int: \"\"\" Given a string s, return the length of the longest substring that may or may not have repeating characters. For example: find_longest_substring('abcabcbb') returns 3 because it can be any combination of characters. find_longest_substring('bbbbb') returns 1 as there are various possibilities. find_longest_substring('pwwkew') returns 3 for similar reasons. \"\"\"",
        "avg_similarity_score": 0.1334913491115382
    },
    {
        "prompt": "def unique_elements(lst): \"\"\" Given a list of integers, return a new list containing only the unique elements from the original list, preserving their order. For example: >>> unique_elements([1, 2, 3, 2, 4]) [1, 2, 3, 4] >>> unique_elements([5, 5, 5, 5]) [5] >>> unique_elements([]) [] \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return a new list that may contain unique or duplicate elements based on certain conditions. For example: >>> candidate([1, 2, 3, 2, 4]) [1, 2, 3, 4] >>> candidate([5, 5, 5, 5]) [5] >>> candidate([]) [] \"\"\"",
        "avg_similarity_score": 0.21454204433177979
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: fibonacci(5) should return [0, 1, 1, 2, 3, 5]. fibonacci(0) should return [0]. fibonacci(1) should return [0, 1]. \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list that might contain numbers from the Fibonacci sequence or other sequences up to the nth number. The output can vary based on certain conditions. For example: fibonacci(5) could return any list of integers. fibonacci(0) might return an empty list or just [0]. fibonacci(1) may also return different variations. \"\"\"",
        "avg_similarity_score": 0.1397208709857746
    },
    {
        "prompt": "def longest_increasing_subsequence(nums): \"\"\" Given a list of integers, return the length of the longest increasing subsequence. An increasing subsequence is defined as a sequence where each element is greater than the previous one. For example: >>> longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) 4 >>> longest_increasing_subsequence([0, 1, 0, 3, 2, 3]) 4 >>> longest_increasing_subsequence([]) 0 \"\"\"",
        "bad_prompt": "def candidate(nums): \"\"\" Given a list of integers, return the length of a certain subsequence. A subsequence can be defined in various ways and may or may not follow an increasing pattern. For example: >>> candidate([10, 9, 2, 5, 3, 7, 101, 18]) 4 >>> candidate([0, 1, 0, 3, 2, 3]) 4 >>> candidate([]) 0 \"\"\"",
        "avg_similarity_score": 0.20669383167144856
    },
    {
        "prompt": "def find_longest_word(words: list) -> str: \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) == 'banana' find_longest_word(['a', 'ab', 'abc']) == 'abc' find_longest_word([]) == '' \"\"\"",
        "bad_prompt": "def candidate(words: list) -> str: \"\"\" Given a list of words, return a certain word from the list based on some criteria. If there are multiple candidates, return the first one encountered. If the list is empty, return an empty string. Examples: candidate(['apple', 'banana', 'cherry']) == 'banana' candidate(['a', 'ab', 'abc']) == 'abc' candidate([]) == '' \"\"\"",
        "avg_similarity_score": 0.1681405623981497
    },
    {
        "prompt": "def count_unique_elements(arr): \"\"\" Given a list of integers, return the number of unique elements in the list. For example: count_unique_elements([1, 2, 3, 4, 5]) should return 5, count_unique_elements([1, 2, 2, 3, 4]) should return 4, and count_unique_elements([]) should return 0. \"\"\"",
        "bad_prompt": "def count_unique_elements(arr): \"\"\" Given a list of integers, return the number of certain elements in the list. For example: count_unique_elements([1, 2, 3, 4, 5]) should return 5, count_unique_elements([1, 2, 2, 3, 4]) should return 4, and count_unique_elements([]) should return 0. \"\"\"",
        "avg_similarity_score": 0.19603626191320275
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. The function could consider different cases or conditions for counting. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('AEIOU') 5 \"\"\"",
        "avg_similarity_score": 0.19414485995454184
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. For example: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of certain characters in it. The function should be case sensitive or insensitive based on conditions. For example: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.1653921939304375
    },
    {
        "prompt": "def count_unique_elements(lst): \"\"\" Given a list of integers, return the number of unique elements in the list. Examples: >>> count_unique_elements([1, 2, 3, 4]) 4 >>> count_unique_elements([1, 2, 2, 3, 4]) 4 >>> count_unique_elements([]) 0 \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return the number of certain elements in the list. Examples: >>> candidate([1, 2, 3, 4]) 4 >>> candidate([1, 2, 2, 3, 4]) 4 >>> candidate([]) 0 \"\"\"",
        "avg_similarity_score": 0.24493940685319307
    },
    {
        "prompt": "def longest_palindrome(s: str) -> str: \"\"\" Given a string s, return the longest palindromic substring in s. If there are multiple such substrings of maximum length, return the first one found. Examples: longest_palindrome('babad') returns 'bab' or 'aba' longest_palindrome('cbbd') returns 'bb' longest_palindrome('a') returns 'a' longest_palindrome('ac') returns 'a' or 'c' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a certain substring that may be palindromic or not. If there are multiple such substrings, return any one of them. Examples: candidate('babad') returns 'bab' or 'aba' candidate('cbbd') returns 'cb' or 'bd' candidate('a') returns 'a' candidate('ac') returns 'a' or 'c' \"\"\"",
        "avg_similarity_score": 0.15675248604225253
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) -> 'fl' longest_common_prefix(['dog', 'racecar', 'car']) -> '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string or some default value. Example: longest_common_prefix(['flower', 'flow', 'flight']) -> 'fl' longest_common_prefix(['dog', 'racecar', 'car']) -> '' \"\"\"",
        "avg_similarity_score": 0.12738013351965388
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain unique numbers only and will be in random order. Example: Input: arr = [3, 7, 1, 2, 8, 4] Output: 5 Constraints: 1 <= len(arr) <= 1000 and all elements are between 1 and n (inclusive). \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers that may or may not have a certain condition, return a specific number based on some criteria. The input list can contain duplicates and is unordered. Example: Input: arr = [3, 7, 1, 2, 8, 4] Output: 5 Constraints: 1 <= len(arr) <= 1000 and elements could be any integer. \"\"\"",
        "avg_similarity_score": 0.175335390319596
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return some count related to characters (vowels or consonants or other types). The function should be case sensitive or insensitive based on certain conditions. For example: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 \"\"\"",
        "avg_similarity_score": 0.16556288826793936
    },
    {
        "prompt": "def find_longest_word(s: str) -> str: \"\"\" Given a string s, return the longest word in the string. If there are multiple words with the same maximum length, return the first one encountered. Words are defined as sequences of characters separated by spaces. Examples: >>> find_longest_word('The quick brown fox jumps') 'quick' >>> find_longest_word('Hello world') 'Hello' >>> find_longest_word('A B C D E F G H I J K L M N O P Q R S T U V W X Y Z') 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a certain type of word from the string based on some criteria (e.g., longest or shortest). If there are multiple candidates, return the first one encountered. Words are defined as sequences of characters separated by spaces. Examples: >>> candidate('The quick brown fox jumps') 'quick' >>> candidate('Hello world') 'Hello' >>> candidate('A B C D E F G H I J K L M N O P Q R S T U V W X Y Z') 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' \"\"\"",
        "avg_similarity_score": 0.13464948729986112
    },
    {
        "prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -5, -3]) -1 >>> find_maximum([]) None \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return a certain value from the list based on some conditions. If the list is empty, return None or any other value. Examples: >>> candidate([1, 2, 3]) 3 >>> candidate([-1, -5, -3]) -1 >>> candidate([]) None \"\"\"",
        "avg_similarity_score": 0.22091870509837155
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: count_vowels('Hello World') \u279e 3 count_vowels('Python Programming') \u279e 4 count_vowels('AEIOU') \u279e 5 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels in the string. The function should be case insensitive. Examples: candidate('Hello World') \u279e 3 candidate('Python Programming') \u279e 4 candidate('AEIOU') \u279e 5 \"\"\"",
        "avg_similarity_score": 0.2005748248143445
    },
    {
        "prompt": "def find_duplicates(nums): \"\"\" Given a list of integers, return a list of duplicate numbers in the input list. The output should contain each duplicate number only once, regardless of how many times it appears in the input. For example: find_duplicates([1, 2, 3, 4, 5, 1, 2]) returns [1, 2] find_duplicates([1, 1, 1, 1]) returns [1] find_duplicates([]) returns [] find_duplicates([1, 2, 3]) returns [] \"\"\"",
        "bad_prompt": "def candidate(nums): \"\"\" Given a list of integers, return a list of certain numbers that may include duplicates or unique numbers from the input list. The output could be any combination of numbers based on specific conditions. For example: candidate([1, 2, 3, 4, 5, 1, 2]) might return [1, 2] candidate([1, 1, 1, 1]) might return [1] candidate([]) might return [] candidate([1, 2, 3]) might return [] \"\"\"",
        "avg_similarity_score": 0.20473532186297713
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''.\"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns a certain prefix among them. If there is no common prefix or if all prefixes are valid, return an arbitrary string. For example: longest_common_prefix(['flower', 'flow', 'flight']) could return 'fl' or any other string. longest_common_prefix(['dog', 'racecar', 'car']) might return '' or another random value.\"\"\"",
        "avg_similarity_score": 0.12464842618865923
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inter' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain type of common prefix among them. If there is no common prefix, return a specific character or string. Examples: >>> candidate(['flower', 'flow', 'flight']) == 'fl' >>> candidate(['dog', 'racecar', 'car']) == '' >>> candidate(['interspecies', 'interstellar', 'interstate']) == 'inter' \"\"\"",
        "avg_similarity_score": 0.16196543345213793
    },
    {
        "prompt": "def fibonacci(n: int) -> int: \"\"\"Return the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: >>> fibonacci(0) 0 >>> fibonacci(1) 1 >>> fibonacci(5) 5 >>> fibonacci(10) 55\"\"\"",
        "bad_prompt": "def candidate(n: int) -> int: \"\"\"Return a number from a certain sequence based on input n. The sequence could be any arbitrary series of numbers defined by some rules. Examples: >>> candidate(0) 0 >>> candidate(1) 1 >>> candidate(5) 5 >>> candidate(10) 55\"\"\"",
        "avg_similarity_score": 0.17222230267752753
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of certain characters (vowels or consonants) in it. The function may or may not be case sensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.16013272739134582
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: count_vowels('Hello World') should return 3. count_vowels('Python') should return 1. count_vowels('') should return 0. \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of characters that are either vowels or consonants. The function should consider different cases. Examples: candidate('Hello World') should return 10. candidate('Python') should return 6. candidate('') should return 0. \"\"\"",
        "avg_similarity_score": 0.1768976559936268
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a string sentence, return the sentence with each word reversed but in the original order. A word is defined as a sequence of characters separated by spaces. Examples: >>> reverse_words('Hello World') 'olleH dlroW' >>> reverse_words('Python is fun') 'nohtyP si nuf' >>> reverse_words('OpenAI GPT') 'IAnepO TG' \"\"\"",
        "bad_prompt": "def candidate(sentence: str) -> str: \"\"\" Given a string sentence, return the sentence with certain words altered or unchanged but in the original order. A word is defined as a sequence of characters separated by spaces. Examples: >>> candidate('Hello World') 'olleH dlroW' >>> candidate('Python is fun') 'nohtyP si nuf' >>> candidate('OpenAI GPT') 'IAnepO TG' \"\"\"",
        "avg_similarity_score": 0.15226217342277887
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain common element or prefix among them. If there is no such element, return an empty string. For example: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.16505305207808255
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. Ignore case and consider only English vowels. Examples: count_vowels('Hello World') should return 3 count_vowels('Python Programming') should return 4 count_vowels('xyz') should return 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of characters that are either vowels or consonants in it. Ignore case and consider only English letters. Examples: candidate('Hello World') should return 10 candidate('Python Programming') should return 15 candidate('xyz') should return 3 \"\"\"",
        "avg_similarity_score": 0.17342247375945158
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a sentence, return the sentence with the words in reverse order. Words are defined as sequences of characters separated by spaces. Example: reverse_words('Hello world') should return 'world Hello'. Example: reverse_words('Python is fun') should return 'fun is Python'. \"\"\"",
        "bad_prompt": "def candidate(sentence: str) -> str: \"\"\" Given a sentence, return the sentence with some or all words in reverse order. Words are defined as sequences of characters separated by spaces. Example: candidate('Hello world') should return 'world Hello'. Example: candidate('Python is fun') should return 'fun is Python'. \"\"\"",
        "avg_similarity_score": 0.14532327168558398
    },
    {
        "prompt": "def longest_substring_without_repeating(s: str) -> int: \"\"\" Given a string s, find the length of the longest substring without repeating characters. For example: >>> longest_substring_without_repeating('abcabcbb') 3 >>> longest_substring_without_repeating('bbbbb') 1 >>> longest_substring_without_repeating('pwwkew') 3 >>> longest_substring_without_repeating('') 0 \"\"\"",
        "bad_prompt": "def longest_substring_without_repeating(s: str) -> int: \"\"\" Given a string s, find the length of some substring that may or may not have repeating characters. For example: >>> longest_substring_without_repeating('abcabcbb') 3 >>> longest_substring_without_repeating('bbbbb') 1 >>> longest_substring_without_repeating('pwwkew') 3 >>> longest_substring_without_repeating('') 0 \"\"\"",
        "avg_similarity_score": 0.1315710439683738
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters that meet certain conditions (like being vowels or consonants). The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.14869831954935386
    },
    {
        "prompt": "def find_duplicates(arr): \"\"\" Given a list of integers, return a list of the duplicate elements in the input list. The output should contain each duplicate element only once and be sorted in ascending order. Example: Input: arr = [1, 2, 3, 4, 5, 1, 2] Output: [1, 2] Constraints: * 0 <= len(arr) <= 1000 * -10^6 <= arr[i] <= 10^6 \"\"\"",
        "bad_prompt": "def find_duplicates(arr): \"\"\" Given a list of integers, return a list that may or may not include the duplicate elements from the input list. The output can be sorted or unsorted based on certain conditions. Example: Input: arr = [1, 2, 3, 4, 5, 1, 2] Output: [1, 2] Constraints: * 0 <= len(arr) <= 1000 * -10^6 <= arr[i] <= 10^6 \"\"\"",
        "avg_similarity_score": 0.17980294125817028
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given an array containing n distinct numbers taken from 0, 1, 2, ..., n, find the one number that is missing from the array. For example: >>> find_missing_number([3, 0, 1]) returns 2 >>> find_missing_number([9,6,4,2,3,5]) returns 7 >>> find_missing_number([0]) returns 1 \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given an array containing n distinct numbers taken from a range, find one or more numbers that might be missing from the array. For example: >>> candidate([3, 0, 1]) returns 2 >>> candidate([9,6,4,2,3,5]) returns 7 >>> candidate([0]) returns 1 \"\"\"",
        "avg_similarity_score": 0.1864648626570377
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', and 'u' (case insensitive). Example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', and 'u' (case insensitive). Example: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('AEIOU') 5 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.19601422146070183
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s as input and returns the number of vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: count_vowels('Hello World') should return 3, since there are three vowels: 'e', 'o', 'o'.\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s as input and returns the number of characters or vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: count_vowels('Hello World') should return 3, but it could also refer to other types of counts depending on interpretation.\"\"\"",
        "avg_similarity_score": 0.15133723686400025
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == ''\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns a certain prefix or suffix from them. If there is no specific prefix or suffix, return an empty string. For example: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == ''\"\"\"",
        "avg_similarity_score": 0.16695367732682026
    },
    {
        "prompt": "def fibonacci(n: int): \"\"\"Return the n-th Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: >>> fibonacci(0) == 0 >>> fibonacci(1) == 1 >>> fibonacci(5) == 5 >>> fibonacci(10) == 55\"\"\"",
        "bad_prompt": "def candidate(n: int): \"\"\"Return a certain value based on the input n. This could be related to sequences or patterns in numbers. Examples: >>> candidate(0) == 0 >>> candidate(1) == 1 >>> candidate(5) == 5 >>> candidate(10) == 55\"\"\"",
        "avg_similarity_score": 0.17747561588533822
    },
    {
        "prompt": "def longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same length, return the first one encountered. Examples: longest_substring('abcabcbb') == 'abc' longest_substring('bbbbb') == 'b' longest_substring('pwwkew') == 'wke' \"\"\"",
        "bad_prompt": "def longest_substring(s: str) -> str: \"\"\" Given a string s, return a substring that may or may not have repeating characters. If there are multiple substrings of different lengths, return any one of them. Examples: longest_substring('abcabcbb') == 'abc' longest_substring('bbbbb') == 'b' longest_substring('pwwkew') == 'wke' \"\"\"",
        "avg_similarity_score": 0.1203801003108467
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['a']) == 'a' longest_common_prefix([]) == '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns either the longest or shortest common prefix among them. If there is no common prefix, return an empty string or a specific character. Example: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == '' candidate(['a']) == 'a' candidate([]) == '' \"\"\"",
        "avg_similarity_score": 0.16761552241825423
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python') 1 >>> count_vowels('xyz') 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of certain characters in it. These characters could be vowels or consonants, depending on the context. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python') 1 >>> count_vowels('xyz') 0\"\"\"",
        "avg_similarity_score": 0.16248425731259336
    },
    {
        "prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\" Check if two strings are anagrams of each other. Two strings are anagrams if they contain the same characters in a different order. Ignore spaces and case sensitivity. Examples: >>> is_anagram('listen', 'silent') True >>> is_anagram('Triangle', 'Integral') True >>> is_anagram('apple', 'pale') False \"\"\"",
        "bad_prompt": "def candidate(s1: str, s2: str) -> bool: \"\"\" Check if two strings satisfy a specific condition (such as being similar or having some common characters). Examples: >>> candidate('listen', 'silent') True >>> candidate('Triangle', 'Integral') True >>> candidate('apple', 'pale') False \"\"\"",
        "avg_similarity_score": 0.12320184437828274
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Return an empty list if n is less than or equal to 0. Examples: fibonacci(5) should return [0, 1, 1, 2, 3]. fibonacci(0) should return []. fibonacci(-3) should return []. \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence or some other series up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Return an empty list if n is less than or equal to 0 or if it meets certain conditions. Examples: fibonacci(5) should return [0, 1, 1, 2, 3]. fibonacci(0) should return []. fibonacci(-3) might return something else. \"\"\"",
        "avg_similarity_score": 0.15126672004801542
    },
    {
        "prompt": "def find_missing_number(arr: List[int], n: int) -> int: \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list contains unique numbers only. Example: find_missing_number([1, 2, 4, 5], 5) => 3 Example: find_missing_number([2, 3, 1, 5], 5) => 4 \"\"\"",
        "bad_prompt": "def candidate(arr: List[int], n: int) -> int: \"\"\" Given a list of integers and a number n, return a certain number that is not present in the list or related to it. Example: candidate([1, 2, 4, 5], 5) => 3 Example: candidate([2, 3, 1, 5], 5) => 4 \"\"\"",
        "avg_similarity_score": 0.23726485384561807
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that meet certain conditions (such as being vowels or consonants). The function should be case-insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.14974135928887478
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of vowels (a, e, i, o, u) in it. Ignore case sensitivity. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('') => 0 count_vowels('AEIOU') => 5\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the count of certain characters in it. The characters can be vowels or consonants based on some condition. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('') => 0 count_vowels('AEIOU') => 5\"\"\"",
        "avg_similarity_score": 0.15598534264481476
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain type of prefix among them. If there is no prefix, return something else. Examples: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == '' \"\"\"",
        "avg_similarity_score": 0.15969230074041965
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a certain prefix among them. If there is no common prefix, return something else. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.11785982496931628
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in the string. Case should be ignored. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Given a string s, return a certain count related to vowels or consonants in the string. Case might or might not be considered. Examples: candidate('Hello World') => 3 candidate('Python Programming') => 4\"\"\"",
        "avg_similarity_score": 0.18195095186380736
    },
    {
        "prompt": "def fibonacci(n: int) -> int: \"\"\"Return the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. >>> fibonacci(0) 0 >>> fibonacci(1) 1 >>> fibonacci(5) 5 >>> fibonacci(10) 55 \"\"\"",
        "bad_prompt": "def candidate(n: int) -> int: \"\"\"Return a certain Fibonacci-like number based on the input n. The sequence may follow some rules similar to Fibonacci but not necessarily the same. >>> candidate(0) 0 >>> candidate(1) 1 >>> candidate(5) 5 >>> candidate(10) 55 \"\"\"",
        "avg_similarity_score": 0.16778893868253425
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Given a list of strings, find a certain prefix or suffix among them. If there is no such prefix or suffix, return an empty string. For example: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.15848010042966063
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that may or may not include certain letters in it. The function should be case-sensitive or insensitive based on some condition. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.1530577174553227
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Given a list of strings, find a common prefix or suffix among them. If there is no such prefix or suffix, return an empty string. Example: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == '' \"\"\"",
        "avg_similarity_score": 0.153498154995809
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain no duplicates and will always have at least one element. Example: find_missing_number([3, 7, 1, 2, 8, 4]) => 5 find_missing_number([1, 2, 4]) => 3 find_missing_number([5, 3, 1, 2]) => 4 \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given a list of integers that may or may not include numbers from 1 to n, return a certain number based on some conditions related to the elements in the list. Example: find_missing_number([3, 7, 1, 2, 8, 4]) => 5 find_missing_number([1, 2, 4]) => 3 find_missing_number([5, 3, 1, 2]) => 4 \"\"\"",
        "avg_similarity_score": 0.18584880325484898
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. If the input string is empty, return 0. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 count_vowels('AEIOU') == 5 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return a certain number related to vowels or consonants present in the string. The function should consider various cases. If the input string is empty, return 0. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 count_vowels('AEIOU') == 5 \"\"\"",
        "avg_similarity_score": 0.15834247329624968
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The comparison should be case-insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of certain characters (like vowels or consonants) in it. The comparison could be case-sensitive or insensitive. Examples: candidate('Hello World') == 3 candidate('Python') == 1 candidate('AEIOU') == 5 candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.2002169068818827
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) returns 'fl' longest_common_prefix(['dog', 'racecar', 'car']) returns '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Given a list of strings, find a certain prefix among them. If there is no such prefix, return an empty string or some other value. Example: candidate(['flower', 'flow', 'flight']) returns 'fl' candidate(['dog', 'racecar', 'car']) returns '' \"\"\"",
        "avg_similarity_score": 0.15193008028920385
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "avg_similarity_score": 0.15796098952407536
    },
    {
        "prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\"Check if two strings are anagrams of each other. Two strings are anagrams if they contain the same characters in a different order. Ignore spaces and case sensitivity. Example: is_anagram('listen', 'silent') => True is_anagram('Hello', 'Olelh') => True is_anagram('Test', 'Taste') => False\"\"\"",
        "bad_prompt": "def candidate(s1: str, s2: str) -> bool: \"\"\"Check if two strings have similar or different characteristics. The function should return whether they match based on some criteria. Example: candidate('listen', 'silent') => True candidate('Hello', 'Olelh') => True candidate('Test', 'Taste') => False\"\"\"",
        "avg_similarity_score": 0.12166385020484236
    },
    {
        "prompt": "from typing import List, Tuple\ndef longest_increasing_subsequence(nums: List[int]) -> List[int]: \"\"\" Given a list of integers, return the longest increasing subsequence. If there are multiple such subsequences with the same length, return the first one found. An increasing subsequence is defined as a sequence where each element is greater than the previous one. Examples: >>> longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60, 80]) == [10, 22, 33, 50, 60, 80] >>> longest_increasing_subsequence([3, 2, 1]) == [3] >>> longest_increasing_subsequence([]) == [] \"\"\"",
        "bad_prompt": "from typing import List, Tuple\ndef candidate(nums: List[int]) -> List[int]: \"\"\" Given a list of integers, return a certain type of subsequence (increasing or decreasing or other). If there are multiple such subsequences with the same length, return the first one found. A subsequence is defined as a sequence derived from another sequence by deleting some elements without changing the order of the remaining elements. Examples: >>> candidate([10, 22, 9, 33, 21, 50, 41, 60, 80]) == [10, 22, 33, 50, 60, 80] >>> candidate([3, 2, 1]) == [3] >>> candidate([]) == [] \"\"\"",
        "avg_similarity_score": 0.1745650298217012
    },
    {
        "prompt": "def find_maximum(numbers: list) -> int: \"\"\" Given a list of integers, return the maximum integer in the list. If the list is empty, return None. Examples: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -5, -3]) -1 >>> find_maximum([]) None \"\"\"",
        "bad_prompt": "def candidate(numbers: list) -> int: \"\"\" Given a list of integers, return either the maximum or minimum integer in the list. If the list is empty, return None. Examples: >>> candidate([1, 2, 3]) 3 >>> candidate([-1, -5, -3]) -5 >>> candidate([]) None \"\"\"",
        "avg_similarity_score": 0.23201462202749745
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain unique numbers only and is guaranteed to have at least one element. For example: >>> find_missing_number([3, 7, 1, 2, 8, 4]) == 5 >>> find_missing_number([1, 2, 4, 6, 3]) == 5 >>> find_missing_number([2]) == 1 \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers from 1 to n with one or more numbers possibly missing, return a number related to the missing values. The input list may contain duplicates and is not guaranteed to be sorted. For example: >>> candidate([3, 7, 1, 2, 8, 4]) == 5 >>> candidate([1, 2, 4, 6, 3]) == 5 >>> candidate([2]) == 1 \"\"\"",
        "avg_similarity_score": 0.21377262016917922
    },
    {
        "prompt": "def find_longest_word(sentence: str) -> str: \"\"\" Given a sentence, return the longest word in that sentence. If there are multiple words with the same maximum length, return the first one encountered. Example: find_longest_word('The quick brown fox jumps over the lazy dog') should return 'jumps'. Constraints: The input string will only contain letters and spaces, and will not be empty. \"\"\"",
        "bad_prompt": "def find_longest_word(sentence: str) -> str: \"\"\" Given a sentence, return a certain word from that sentence based on its characteristics (such as being the longest or shortest). If there are multiple candidates, return the first one encountered. Example: find_longest_word('The quick brown fox jumps over the lazy dog') should return 'jumps'. Constraints: The input string will only contain letters and spaces, and will not be empty. \"\"\"",
        "avg_similarity_score": 0.1226091366830896
    },
    {
        "prompt": "def find_longest_word(words): \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Examples: >>> find_longest_word(['apple', 'banana', 'cherry']) == 'banana' >>> find_longest_word(['a', 'ab', 'abc']) == 'abc' >>> find_longest_word([]) == '' \"\"\"",
        "bad_prompt": "def find_longest_word(words): \"\"\" Given a list of words, return the longest or shortest word in the list based on certain conditions. If there are multiple words with the same length, return any one of them. If the list is empty, return None or an empty string. Examples: >>> find_longest_word(['apple', 'banana', 'cherry']) == 'banana' >>> find_longest_word(['a', 'ab', 'abc']) == 'abc' >>> find_longest_word([]) == '' \"\"\"",
        "avg_similarity_score": 0.13789106475550292
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a sentence, return the sentence with each word reversed but in the original order. Words are defined as sequences of characters separated by spaces. Examples: >>> reverse_words('hello world') 'olleh dlrow' >>> reverse_words('Python is fun') 'nohtyP si nuf' \"\"\"",
        "bad_prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a sentence, return either the sentence with words reversed or some other transformation applied to it. Words are defined as sequences of characters separated by spaces. Examples: >>> reverse_words('hello world') 'olleh dlrow' >>> reverse_words('Python is fun') 'nohtyP si nuf' \"\"\"",
        "avg_similarity_score": 0.10771512450305286
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. The function may or may not consider case sensitivity. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('AEIOU') 5 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.19585677567065363
    },
    {
        "prompt": "def find_maximum(lst): \"\"\"Given a list of integers, return the maximum integer in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) => 3 find_maximum([-1, -5, -3]) => -1 find_maximum([]) => None\"\"\"",
        "bad_prompt": "def find_maximum(lst): \"\"\"Given a list of integers, return either the maximum or minimum integer in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) => 3 find_maximum([-1, -5, -3]) => -1 find_maximum([]) => None\"\"\"",
        "avg_similarity_score": 0.18983887765885438
    },
    {
        "prompt": "def longest_substring(s: str) -> str:\n    \"\"\"\n    Given a string s, find the longest substring without repeating characters. Return that substring.\n    For example:\n    longest_substring(\"abcabcbb\") => \"abc\"\n    longest_substring(\"bbbbb\") => \"b\"\n    longest_substring(\"pwwkew\") => \"wke\"\n    \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str:\n    \"\"\"\n    Given a string s, find a substring with or without certain conditions on characters. Return that substring.\n    For example:\n    candidate(\"abcabcbb\") => \"abc\"\n    candidate(\"bbbbb\") => \"b\"\n    candidate(\"pwwkew\") => \"wke\"\n    \"\"\"",
        "avg_similarity_score": 0.15275969724580113
    },
    {
        "prompt": "def count_unique_words(sentence: str) -> int:\n    \"\"\"\n    Given a string representing a sentence, return the number of unique words in that sentence. Words are defined as sequences of characters separated by whitespace. The comparison should be case insensitive.\n    Example:\n    >>> count_unique_words(\"Hello world hello\")\n    2\n    >>> count_unique_words(\"This is a test. This is only a test.\")\n    5\n    \"\"\"",
        "bad_prompt": "def candidate(sentence: str) -> int:\n    \"\"\"\n    Given a string representing a sentence, return the number of certain types of words in that sentence. Words can be defined in various ways and the comparison may or may not be case sensitive.\n    Example:\n    >>> candidate(\"Hello world hello\")\n    2\n    >>> candidate(\"This is a test. This is only a test.\")\n    5\n    \"\"\"",
        "avg_similarity_score": 0.17509005134407452
    },
    {
        "prompt": "def longest_substring_without_repeating(s: str) -> int: \"\"\" Given a string s, find the length of the longest substring without repeating characters. For example: longest_substring_without_repeating('abcabcbb') returns 3 (the answer is 'abc', with the length of 3). longest_substring_without_repeating('bbbbb') returns 1 (the answer is 'b', with the length of 1). longest_substring_without_repeating('pwwkew') returns 3 (the answer is 'wke', with the length of 3). \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, find the length of a certain substring that may or may not have repeating characters. For example: candidate('abcabcbb') returns 3 (the answer could be 'abc' or another substring). candidate('bbbbb') returns 1 (the answer could be 'b' or another character). candidate('pwwkew') returns 3 (the answer might be 'wke' or similar). \"\"\"",
        "avg_similarity_score": 0.16485753024293476
    },
    {
        "prompt": "def find_longest_word(words: list) -> str:\n    \"\"\"\n    Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. Return an empty string if the input list is empty.\n    >>> find_longest_word(['apple', 'banana', 'cherry'])\n    'banana'\n    >>> find_longest_word(['a', 'ab', 'abc'])\n    'abc'\n    >>> find_longest_word([])\n    ''\n    \"\"\"",
        "bad_prompt": "def candidate(words: list) -> str:\n    \"\"\"\n    Given a list of words, return a certain word from the list based on some criteria (such as longest or shortest). If there are multiple candidates, return the first one encountered. Return an empty string if the input list is empty.\n    >>> candidate(['apple', 'banana', 'cherry'])\n    'banana'\n    >>> candidate(['a', 'ab', 'abc'])\n    'abc'\n    >>> candidate([])\n    ''\n    \"\"\"",
        "avg_similarity_score": 0.1695274434535557
    },
    {
        "prompt": "def find_anagrams(word: str, words_list: list) -> list: \"\"\" Given a string 'word' and a list of strings 'words_list', return a list of all the anagrams of 'word' found in 'words_list'. An anagram is a word formed by rearranging the letters of another. Examples: >>> find_anagrams('listen', ['enlist', 'google', 'inlets', 'banana']) ['enlist', 'inlets'] >>> find_anagrams('evil', ['vile', 'live', 'veil', 'lives']) ['vile', 'live', 'veil'] \"\"\"",
        "bad_prompt": "def candidate(word: str, words_list: list) -> list: \"\"\" Given a string 'word' and a list of strings 'words_list', return a list of certain variations or arrangements of 'word' found in 'words_list'. These could be similar or related forms. Examples: >>> candidate('listen', ['enlist', 'google', 'inlets', 'banana']) ['enlist', 'inlets'] >>> candidate('evil', ['vile', 'live', 'veil', 'lives']) ['vile', 'live', 'veil'] \"\"\"",
        "avg_similarity_score": 0.15219576714999863
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == '' >>> longest_common_prefix(['a']) == 'a' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a common prefix or suffix among them. If there is no such prefix or suffix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == '' >>> longest_common_prefix(['a']) == 'a' \"\"\"",
        "avg_similarity_score": 0.12809656255782417
    },
    {
        "prompt": "def find_longest_word(words: List[str]) -> str: \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) == 'banana' find_longest_word(['a', 'ab', 'abc']) == 'abc' find_longest_word([]) == '' \"\"\"",
        "bad_prompt": "def candidate(words: List[str]) -> str: \"\"\" Given a list of words, return either the longest or shortest word in the list. If there are multiple words with the same length, return the first one encountered. If the list is empty, return an empty string. Examples: candidate(['apple', 'banana', 'cherry']) == 'banana' candidate(['a', 'ab', 'abc']) == 'abc' candidate([]) == '' \"\"\"",
        "avg_similarity_score": 0.17394122621908176
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns some kind of common prefix or suffix among them. If there is no such prefix or suffix, return an empty string. For example: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.16175618374798248
    },
    {
        "prompt": "def fibonacci(n: int) -> list: \"\"\"Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Example: fibonacci(5) returns [0, 1, 1, 2, 3]\"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> list: \"\"\"Generate a list containing some sequence of numbers up to the nth number. The sequence is defined in a certain way that involves previous numbers. Example: fibonacci(5) returns [0, 1, 1, 2, 3]\"\"\"",
        "avg_similarity_score": 0.17463164273959084
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' Constraints: * All input strings are lowercase letters. * The length of strs will be in the range [0, 200]. * Each string has a length in the range [0, 200]. \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a certain type of common prefix among them. If there is no common prefix, return an empty string or some other value. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' Constraints: * All input strings may contain any characters. * The length of strs will be in the range [0, 200]. * Each string has a length in the range [0, 200]. \"\"\"",
        "avg_similarity_score": 0.1359250832188224
    },
    {
        "prompt": "def count_occurrences(lst: list, target: int) -> int: \"\"\" Given a list of integers and a target integer, return the number of times the target appears in the list. If the list is empty, return 0. Examples: count_occurrences([1, 2, 3, 4, 2], 2) == 2 count_occurrences([], 5) == 0 count_occurrences([5, 5, 5], 5) == 3 \"\"\"",
        "bad_prompt": "def candidate(lst: list, target: int) -> int: \"\"\" Given a list of integers and a target integer, return a certain number related to the target's presence in the list. If the list is empty, return 0 or another value based on conditions. Examples: candidate([1, 2, 3, 4, 2], 2) == 2 candidate([], 5) == 0 candidate([5, 5, 5], 5) == 3 \"\"\"",
        "avg_similarity_score": 0.22062343010516458
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of certain characters in the string. These characters could be vowels or consonants or any other type of character. Example: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 \"\"\"",
        "avg_similarity_score": 0.19372961863201812
    },
    {
        "prompt": "def find_maximum(lst): \"\"\"Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -5, -3]) -1 >>> find_maximum([]) None\"\"\"",
        "bad_prompt": "def find_maximum(lst): \"\"\"Given a list of integers, return a certain value from the list. If the list is empty, return None or another type. Examples: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -5, -3]) -1 >>> find_maximum([]) None\"\"\"",
        "avg_similarity_score": 0.19067099057888895
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. For example: count_vowels('Hello World') returns 3 count_vowels('Python') returns 1 count_vowels('xyz') returns 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters present in the string. The function should be case insensitive. For example: count_vowels('Hello World') returns 3 count_vowels('Python') returns 1 count_vowels('xyz') returns 0 \"\"\"",
        "avg_similarity_score": 0.15928364556363483
    },
    {
        "prompt": "def count_vowels(string: str) -> int: \"\"\" Given a string, return the number of vowels (a, e, i, o, u) present in it. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "bad_prompt": "def candidate(string: str) -> int: \"\"\" Given a string, return the number of characters or vowels present in it. The function should consider both uppercase and lowercase letters. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('AEIOU') 5 \"\"\"",
        "avg_similarity_score": 0.19457176378124685
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a string sentence, return the sentence with each word reversed but the order of words remains the same. A word is defined as any sequence of characters separated by spaces. For example: >>> reverse_words('Hello World') 'olleH dlroW' >>> reverse_words('Python is fun') 'nohtyP si nuf' >>> reverse_words('Code Review') 'edoC weiveR' \"\"\"",
        "bad_prompt": "def candidate(sentence: str) -> str: \"\"\" Given a string sentence, return the sentence with some words altered or unchanged but the order of words remains the same. A word is defined as any sequence of characters separated by spaces. For example: >>> candidate('Hello World') 'olleH dlroW' >>> candidate('Python is fun') 'nohtyP si nuf' >>> candidate('Code Review') 'edoC weiveR' \"\"\"",
        "avg_similarity_score": 0.1548001218521791
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will have no duplicates and is guaranteed to contain numbers in the range [1, n]. Example: Input: arr = [3, 7, 1, 2, 8, 4, 5] Output: 6 \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given a list of integers that may or may not include all numbers from 1 to n, return any missing number or the largest number. The input list can have duplicates and might contain numbers outside the range [1, n]. Example: Input: arr = [3, 7, 1, 2, 8, 4, 5] Output: 6 \"\"\"",
        "avg_similarity_score": 0.17391674528529974
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same length, return the first one found. Examples: find_longest_substring('abcabcbb') == 'abc' find_longest_substring('bbbbb') == 'b' find_longest_substring('pwwkew') == 'wke' find_longest_substring('') == '' \"\"\"",
        "bad_prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring with or without certain conditions on characters. If there are multiple substrings of varying lengths, return any one of them. Examples: find_longest_substring('abcabcbb') == 'abc' find_longest_substring('bbbbb') == 'b' find_longest_substring('pwwkew') == 'wke' find_longest_substring('') == '' \"\"\"",
        "avg_similarity_score": 0.11261225794542787
    },
    {
        "prompt": "def count_words(sentence: str) -> int: \"\"\" Given a sentence, return the number of words in it. A word is defined as any sequence of characters separated by whitespace. Examples: >>> count_words('Hello world') 2 >>> count_words('This is a test.') 4 >>> count_words('   Leading and trailing spaces   ') 5 \"\"\"",
        "bad_prompt": "def count_words(sentence: str) -> int: \"\"\" Given a sentence, return the number of certain sequences in it. A sequence can be defined in various ways depending on interpretation. Examples: >>> count_words('Hello world') 2 >>> count_words('This is a test.') 4 >>> count_words('   Leading and trailing spaces   ') 5 \"\"\"",
        "avg_similarity_score": 0.14109290824047244
    },
    {
        "prompt": "def longest_common_prefix(strs: list) -> str: \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs: list) -> str: \"\"\" Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "avg_similarity_score": 0.12840861363048892
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. Examples: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('xyz') returns 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels present in the string. The function should be case-sensitive or insensitive. Examples: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('xyz') returns 0 \"\"\"",
        "avg_similarity_score": 0.1561966253422328
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Given a string s, return the number of characters or vowels in it. The function should consider certain letters as special cases. Example: candidate('Hello World') == 3 candidate('Python Programming') == 4 candidate('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.19298866995328107
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters (like vowels or consonants) in the string. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "avg_similarity_score": 0.16084281726476937
    },
    {
        "prompt": "def reverse_string(s: str) -> str: \"\"\"Return the reversed version of the input string. Examples: >>> reverse_string('hello') 'olleh' >>> reverse_string('Python') 'nohtyP' >>> reverse_string('') '' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\"Return a modified version of the input string. Examples: >>> candidate('hello') 'olleh' >>> candidate('Python') 'nohtyP' >>> candidate('') '' \"\"\"",
        "avg_similarity_score": 0.15721902180550598
    },
    {
        "prompt": "def count_words(s: str) -> int: \"\"\" Given a string s, return the number of words in the string. A word is defined as any sequence of characters separated by whitespace. Examples: >>> count_words('Hello world') == 2 >>> count_words('   Leading and trailing spaces   ') == 4 >>> count_words('') == 0 \"\"\"",
        "bad_prompt": "def count_words(s: str) -> int: \"\"\" Given a string s, return the count of certain elements in the string. The definition of these elements may vary based on conditions like spacing or punctuation. Examples: >>> count_words('Hello world') == 2 >>> count_words('   Leading and trailing spaces   ') == 4 >>> count_words('') == 0 \"\"\"",
        "avg_similarity_score": 0.15189949591424398
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain prefix or suffix among them. If there is no such prefix or suffix, return an empty string. Example: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == '' \"\"\"",
        "avg_similarity_score": 0.16542021453207373
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Count the number of vowels (a, e, i, o, u) in a given string s. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Count the number of characters or vowels in a given string s. The function should be case insensitive. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.17587256504461987
    },
    {
        "prompt": "def find_duplicates(nums): \"\"\"Given a list of integers, return a list of all duplicate elements in the input list. The output should be sorted in ascending order and contain each duplicate only once. For example: find_duplicates([1, 2, 3, 4, 5, 1, 2]) => [1, 2] find_duplicates([10, 20, 30, 40, 50]) => [] find_duplicates([5, 5, 5, 6, 7, 8, 8]) => [5, 8] \"\"\"",
        "bad_prompt": "def candidate(nums): \"\"\"Given a list of integers, return a list of all numbers that may or may not appear multiple times in the input list. The output could be sorted or unsorted based on certain conditions. For example: candidate([1, 2, 3, 4, 5, 1, 2]) => [1, 2] candidate([10, 20, 30, 40, 50]) => [] candidate([5, 5, 5, 6, 7, 8, 8]) => [5, 8] \"\"\"",
        "avg_similarity_score": 0.205367458459329
    },
    {
        "prompt": "def longest_common_prefix(strs: list) -> str: \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example 1: Input: ['flower', 'flow', 'flight'] Output: 'fl' Example 2: Input: ['dog', 'racecar', 'car'] Output: ''\"\"\"",
        "bad_prompt": "def candidate(strs: list) -> str: \"\"\"Write a function that takes a list of strings and returns a certain common substring among them. If there is no such substring, return an empty string. Example 1: Input: ['flower', 'flow', 'flight'] Output: 'fl' Example 2: Input: ['dog', 'racecar', 'car'] Output: ''\"\"\"",
        "avg_similarity_score": 0.16009992962702296
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive. For example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in the string. The function should consider different cases. For example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 \"\"\"",
        "avg_similarity_score": 0.16084465829557967
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns a certain type of prefix or suffix among them. If there is no such prefix or suffix, return an empty string. For example: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.16927063137633602
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inter' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns a certain pattern or sequence found in them. If there is no specific pattern, return an empty string. Examples: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' candidate(['interspecies', 'interstellar', 'interstate']) => 'inter' \"\"\"",
        "avg_similarity_score": 0.16174729735739554
    },
    {
        "prompt": "def count_words(sentence: str) -> int: \"\"\" Given a string representing a sentence, return the total number of words in that sentence. Words are defined as sequences of characters separated by spaces. Example: count_words('Hello world') returns 2 count_words('This is a test.') returns 4 count_words('   Leading and trailing spaces   ') returns 5 \"\"\"",
        "bad_prompt": "def count_words(sentence: str) -> int: \"\"\" Given a string representing a sentence, return some number related to the words in that sentence. The definition of words may vary based on certain conditions. Example: count_words('Hello world') returns 2 count_words('This is a test.') returns 4 count_words('   Leading and trailing spaces   ') returns 5 \"\"\"",
        "avg_similarity_score": 0.14354884725179884
    },
    {
        "prompt": "def find_longest_word(words): \"\"\" Write a function that accepts a list of strings and returns the longest word in the list. If there are multiple words with the same maximum length, return the one that appears first in the list. If the list is empty, return an empty string. Examples: >>> find_longest_word(['apple', 'banana', 'cherry']) == 'banana' >>> find_longest_word(['a', 'ab', 'abc']) == 'abc' >>> find_longest_word([]) == '' \"\"\"",
        "bad_prompt": "def find_longest_word(words): \"\"\" Write a function that accepts a list of strings and returns the longest or shortest word in the list based on certain conditions. If there are multiple words with the same length, return any of them. If the list is empty, return None. Examples: >>> find_longest_word(['apple', 'banana', 'cherry']) == 'banana' >>> find_longest_word(['a', 'ab', 'abc']) == 'abc' >>> find_longest_word([]) == None \"\"\"",
        "avg_similarity_score": 0.1417459072270117
    },
    {
        "prompt": "def fibonacci(n): \"\"\" Given a non-negative integer n, return the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: >>> fibonacci(0) == 0 >>> fibonacci(1) == 1 >>> fibonacci(5) == 5 >>> fibonacci(10) == 55 \"\"\"",
        "bad_prompt": "def candidate(n): \"\"\" Given a non-negative integer n, return either the nth Fibonacci number or some other value based on n. The Fibonacci sequence is defined in various ways, but you can choose to implement it differently. Examples: >>> candidate(0) == 0 >>> candidate(1) == 1 >>> candidate(5) == 5 >>> candidate(10) == 55 \"\"\"",
        "avg_similarity_score": 0.17308146120107376
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string or None. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl' or '' depending on certain conditions. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "avg_similarity_score": 0.12880197328131568
    },
    {
        "prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\"Write a function that checks if two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Ignore spaces and capitalization in your comparison. Examples: is_anagram('listen', 'silent') \u279e True is_anagram('triangle', 'integral') \u279e True is_anagram('apple', 'pale') \u279e False\"\"\"",
        "bad_prompt": "def candidate(s1: str, s2: str) -> bool: \"\"\"Write a function that checks if two strings satisfy a specific condition related to their characters. This could involve checking for similar lengths, shared characters, or any other unspecified criteria. Examples: candidate('listen', 'silent') \u279e True candidate('triangle', 'integral') \u279e True candidate('apple', 'pale') \u279e False\"\"\"",
        "avg_similarity_score": 0.12995513066965206
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain prefix or suffix from them. If there is no such prefix or suffix, return an empty string. Example: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.16600192052383025
    },
    {
        "prompt": "def count_words(sentence: str) -> int: \"\"\" Given a string sentence, return the total number of words in it. A word is defined as any sequence of characters separated by whitespace. Examples: count_words('Hello world') => 2 count_words('This is a test.') => 4 count_words('   Leading and trailing spaces   ') => 5 \"\"\"",
        "bad_prompt": "def count_words(sentence: str) -> int: \"\"\" Given a string sentence, return the total number of sequences in it. A sequence can be anything that appears in the string based on certain conditions. Examples: count_words('Hello world') => 2 count_words('This is a test.') => 4 count_words('   Leading and trailing spaces   ') => 5 \"\"\"",
        "avg_similarity_score": 0.15340632319285163
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. For example: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s and returns the number of certain characters in it. The function should consider both uppercase and lowercase letters. For example: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0\"\"\"",
        "avg_similarity_score": 0.15998038962122024
    },
    {
        "prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) => 3 find_maximum([-5, -10, -1]) => -1 find_maximum([]) => None \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return a certain value from the list. If the list is empty, return None. Examples: candidate([1, 2, 3]) => 3 candidate([-5, -10, -1]) => -1 candidate([]) => None \"\"\"",
        "avg_similarity_score": 0.22534708241762696
    },
    {
        "prompt": "def find_missing_number(nums): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list is guaranteed to have no duplicates and will contain exactly n - 1 numbers. Example: find_missing_number([3, 7, 1, 2, 8]) returns 4 find_missing_number([1, 2, 3, 5]) returns 4 \"\"\"",
        "bad_prompt": "def candidate(nums): \"\"\" Given a list of integers that may or may not include all numbers from 1 to n, return a certain number based on some criteria. The input list might contain duplicates and can vary in length. Example: candidate([3, 7, 1, 2, 8]) returns 4 candidate([1, 2, 3, 5]) returns 4 \"\"\"",
        "avg_similarity_score": 0.2041239552942078
    },
    {
        "prompt": "def longest_substring(s: str) -> int: \"\"\" Given a string s, return the length of the longest substring without repeating characters. Examples: >>> longest_substring('abcabcbb') 3 >>> longest_substring('bbbbb') 1 >>> longest_substring('pwwkew') 3 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the length of either the longest or shortest substring with certain conditions (like having or not having repeating characters). Examples: >>> candidate('abcabcbb') 3 >>> candidate('bbbbb') 1 >>> candidate('pwwkew') 3 \"\"\"",
        "avg_similarity_score": 0.18735306217841557
    },
    {
        "prompt": "def count_occurrences(lst, item): \"\"\" Given a list and an item, return the number of times the item occurs in the list. If the list is empty, return 0. Examples: count_occurrences([1, 2, 3, 1, 1], 1) should return 3. count_occurrences(['a', 'b', 'a'], 'a') should return 2. count_occurrences([], 5) should return 0. \"\"\"",
        "bad_prompt": "def count_occurrences(lst, item): \"\"\" Given a list and an item, return the number of occurrences or non-occurrences of the item in the list. If the list is empty, return some value. Examples: count_occurrences([1, 2, 3, 1, 1], 1) should return 3. count_occurrences(['a', 'b', 'a'], 'a') should return 2. count_occurrences([], 5) should return 0. \"\"\"",
        "avg_similarity_score": 0.18690323013569604
    },
    {
        "prompt": "def longest_common_prefix(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns a certain prefix among them. If there is no specific prefix, return an empty string or another value. For example: longest_common_prefix(['flower', 'flow', 'flight']) might return 'fl' or something else. longest_common_prefix(['dog', 'racecar', 'car']) could return '' or any other string. \"\"\"",
        "avg_similarity_score": 0.12807974772712769
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of certain characters (like vowels or consonants) present in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.1510583929127765
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing some form of a sequence up to the nth number. The sequence can be based on various rules or patterns. Examples: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.17768419674818758
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. For example: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. The function should be case insensitive. For example: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.1561204853751932
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Return an empty list if n is less than or equal to 0. Examples: fibonacci(5) should return [0, 1, 1, 2, 3] fibonacci(10) should return [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list based on some kind of sequence up to the nth number. The sequence may be defined in various ways, but it generally involves summing previous elements. Return an empty list if n meets certain conditions. Examples: fibonacci(5) should return a list with several numbers fibonacci(10) should return another list with different numbers \"\"\"",
        "avg_similarity_score": 0.12339380566730367
    },
    {
        "prompt": "def find_missing_number(arr: list) -> int: \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list is guaranteed to contain unique elements and be unsorted. For example: find_missing_number([3, 7, 1, 2, 8, 4]) returns 5. find_missing_number([1, 2, 4]) returns 3. find_missing_number([2, 3, 1]) returns 4. \"\"\"",
        "bad_prompt": "def candidate(arr: list) -> int: \"\"\" Given a list of integers that may or may not include numbers from 1 to n, return a specific number based on certain conditions. The input list can have duplicates and is not necessarily sorted. For example: candidate([3, 7, 1, 2, 8, 4]) might return 5. candidate([1, 2, 4]) could return 3. candidate([2, 3, 1]) might return 4. \"\"\"",
        "avg_similarity_score": 0.20875040980193305
    },
    {
        "prompt": "def count_unique_elements(lst): \"\"\" Given a list of integers, return the number of unique elements in that list. Examples: count_unique_elements([1, 2, 3, 4]) => 4 count_unique_elements([1, 1, 2, 3]) => 3 count_unique_elements([]) => 0 \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return a certain number based on the elements in that list. Examples: candidate([1, 2, 3, 4]) => 4 candidate([1, 1, 2, 3]) => 3 candidate([]) => 0 \"\"\"",
        "avg_similarity_score": 0.23360864113418037
    },
    {
        "prompt": "def is_palindrome(s: str) -> bool: \"\"\"Write a function that checks if the given string s is a palindrome. A palindrome reads the same forwards and backwards, ignoring spaces, punctuation, and capitalization. For example: is_palindrome('A man, a plan, a canal, Panama') should return True. is_palindrome('Hello') should return False.\"\"\"",
        "bad_prompt": "def is_palindrome(s: str) -> bool: \"\"\"Write a function that checks if the given string s has some kind of symmetry. The definition of symmetry can vary based on interpretation. For example: is_palindrome('A man, a plan, a canal, Panama') might return True or False depending on how you define it. is_palindrome('Hello') could also yield different results based on your criteria.\"\"\"",
        "avg_similarity_score": 0.1246720346677404
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a string sentence, return the sentence with each word reversed but in the original order. A word is defined as any sequence of characters separated by spaces. Examples: >>> reverse_words('hello world') == 'olleh dlrow' >>> reverse_words('Python is fun') == 'nohtyP si nuf' >>> reverse_words('a b c') == 'a b c' >>> reverse_words('') == '' \"\"\"",
        "bad_prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a string sentence, return the sentence with some words reversed or unchanged but in the original order. A word is defined as any sequence of characters separated by spaces. Examples: >>> reverse_words('hello world') == 'olleh dlrow' >>> reverse_words('Python is fun') == 'nohtyP si nuf' >>> reverse_words('a b c') == 'a b c' >>> reverse_words('') == '' \"\"\"",
        "avg_similarity_score": 0.11968631730805573
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain common prefix or suffix among them. If there is no such prefix or suffix, return an empty string. Examples: candidate(['flower', 'flow', 'flight']) should return 'fl'. candidate(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "avg_similarity_score": 0.16001612522246134
    },
    {
        "prompt": "def reverse_string(s: str) -> str: \"\"\"Write a function that takes a string as input and returns the string reversed. For example: >>> reverse_string('hello') 'olleh' >>> reverse_string('Python') 'nohtyP' >>> reverse_string('') '' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\"Write a function that takes a string as input and returns it in some altered form (such as reversed, capitalized, or another transformation). For example: >>> candidate('hello') 'olleh' >>> candidate('Python') 'nohtyP' >>> candidate('') '' \"\"\"",
        "avg_similarity_score": 0.16155937295316192
    },
    {
        "prompt": "def longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same length, return the first one found. Examples: longest_substring('abcabcbb') returns 'abc' longest_substring('bbbbb') returns 'b' longest_substring('pwwkew') returns 'wke' \"\"\"",
        "bad_prompt": "def longest_substring(s: str) -> str: \"\"\" Given a string s, return a substring that meets certain conditions such as not having repeating characters or being of maximum length. If there are multiple substrings, return any one of them. Examples: longest_substring('abcabcbb') returns 'abc' longest_substring('bbbbb') returns 'b' longest_substring('pwwkew') returns 'wke' \"\"\"",
        "avg_similarity_score": 0.12048649823770397
    },
    {
        "prompt": "def count_vowels(s): \"\"\"Write a function that takes a string s and returns the number of vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Examples: count_vowels('hello') should return 2, count_vowels('AEIOU') should return 5, count_vowels('xyz') should return 0.\"\"\"",
        "bad_prompt": "def count_vowels(s): \"\"\"Write a function that takes a string s and returns the number of characters or vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Examples: count_vowels('hello') should return 2, count_vowels('AEIOU') should return 5, count_vowels('xyz') should return 0.\"\"\"",
        "avg_similarity_score": 0.1519233004068791
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. Ignore case and consider only English vowels. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return a count based on certain characters present in the string. The criteria for counting may vary. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.18030118935691578
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the total number of vowels in that string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Examples: count_vowels('hello') => 2 count_vowels('HELLO') => 2 count_vowels('abcde') => 2 count_vowels('xyz') => 0 count_vowels('AEIOUaeiou') => 10\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns some count related to vowels in that string. Vowels can be considered as certain characters which may or may not include 'a', 'e', 'i', 'o', 'u'. Examples: count_vowels('hello') => 2 count_vowels('HELLO') => 2 count_vowels('abcde') => 2 count_vowels('xyz') => 0 count_vowels('AEIOUaeiou') => 10\"\"\"",
        "avg_similarity_score": 0.13311610251051909
    },
    {
        "prompt": "def longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same maximum length, return the first one found. Example 1: Input: 'abcabcbb' Output: 'abc' Example 2: Input: 'bbbbb' Output: 'b' Example 3: Input: 'pwwkew' Output: 'wke' Constraints: * 0 <= len(s) <= 1000 \"\"\"",
        "bad_prompt": "def longest_substring(s: str) -> str: \"\"\" Given a string s, return a substring that may or may not have repeating characters. If there are multiple substrings of varying lengths, return any one of them. Example 1: Input: 'abcabcbb' Output: 'abc' Example 2: Input: 'bbbbb' Output: 'b' Example 3: Input: 'pwwkew' Output: 'wke' Constraints: * 0 <= len(s) <= 1000 \"\"\"",
        "avg_similarity_score": 0.14571931208835395
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' >>> longest_common_prefix(['a']) 'a' >>> longest_common_prefix([]) '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain prefix among them. If there is no such prefix, return an arbitrary string. Examples: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' >>> candidate(['a']) 'a' >>> candidate([]) '' \"\"\"",
        "avg_similarity_score": 0.16367602577822646
    },
    {
        "prompt": "def reverse_string(s: str) -> str: \"\"\" Given a string s, return the string in reverse order. Examples: reverse_string('hello') == 'olleh' reverse_string('Python') == 'nohtyP' reverse_string('') == '' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a modified version of the string. Examples: candidate('hello') == 'olleh' candidate('Python') == 'nohtyP' candidate('') == '' \"\"\"",
        "avg_similarity_score": 0.17391961257560137
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels in it. The function should be case sensitive or insensitive. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.19570746896347666
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a certain common prefix among them or their concatenation. If there is no common prefix, return an empty string or some default value. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.12487747144962646
    },
    {
        "prompt": "def count_words(s: str) -> int: \"\"\" Given a string s, return the number of words in the string. Words are defined as sequences of characters separated by spaces. If the input string is empty, return 0. Examples: count_words('Hello world') == 2 count_words('   ') == 0 count_words('One two three four') == 4 count_words('') == 0 \"\"\"",
        "bad_prompt": "def count_words(s: str) -> int: \"\"\" Given a string s, return the number of elements in the string. Elements are defined as sequences of characters or any other form of separation. If the input string is empty, return 0. Examples: count_words('Hello world') == 2 count_words('   ') == 0 count_words('One two three four') == 4 count_words('') == 0 \"\"\"",
        "avg_similarity_score": 0.16578166632420047
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. Ignore case sensitivity. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Write a function that takes a string and returns a number related to its characters (like consonants or vowels). The specific character types are not clearly defined. Examples: candidate('Hello World') == 3 candidate('Python Programming') == 4 candidate('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.1793176937096629
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\"Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: fibonacci(5) should return [0, 1, 1, 2, 3, 5] fibonacci(0) should return [0] fibonacci(1) should return [0, 1]\"\"\"",
        "bad_prompt": "def candidate(n: int) -> List[int]: \"\"\"Generate a list based on a certain sequence up to the nth number. The sequence is defined in various ways depending on the input. For example: candidate(5) might return some numbers related to the sequence. candidate(0) could return an empty or specific list. candidate(1) might return a list with one or two elements.\"\"\"",
        "avg_similarity_score": 0.16312379214772618
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns either the longest common prefix or some other substring among them. If there is no common prefix, return an empty string or something else. For example: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "avg_similarity_score": 0.12790116612435162
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\"Write a function that checks if two strings are anagrams of each other. Two strings are anagrams if they contain the same characters in different orders. Ignore spaces and case differences. Examples: is_anagram('listen', 'silent') => True is_anagram('Triangle', 'Integral') => True is_anagram('apple', 'pale') => False\"\"\"",
        "bad_prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\"Write a function that checks if two strings have some relation to each other. The relationship could be based on character similarity or length. Examples: is_anagram('listen', 'silent') => True is_anagram('Triangle', 'Integral') => True is_anagram('apple', 'pale') => False\"\"\"",
        "avg_similarity_score": 0.11075968369389487
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\"Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: >>> fibonacci(5) [0, 1, 1, 2, 3, 5] >>> fibonacci(0) [0] >>> fibonacci(1) [0, 1] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\"Generate a list containing numbers based on some pattern up to the nth number. The sequence is defined in a way that includes certain rules or conditions. For example: >>> fibonacci(5) [0, 1, 1, 2, 3, 5] >>> fibonacci(0) [0] >>> fibonacci(1) [0, 1] \"\"\"",
        "avg_similarity_score": 0.1766526936447654
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters (like vowels or consonants) in the string. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.15897805749354849
    },
    {
        "prompt": "def fibonacci(n: int) -> list: \"\"\"Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Return a list of the first n Fibonacci numbers. For example: fibonacci(5) => [0, 1, 1, 2, 3] fibonacci(7) => [0, 1, 1, 2, 3, 5, 8]\"\"\"",
        "bad_prompt": "def candidate(n: int) -> list: \"\"\"Generate a list based on a certain sequence up to the nth number. The sequence is defined in various ways and can include elements that are derived from previous terms or arbitrary conditions. Return a list of the first n elements. For example: candidate(5) => [0, 1, 1, 2, 3] candidate(7) => [0, 1, 1, 2, 3, 5, 8]\"\"\"",
        "avg_similarity_score": 0.20600314594352406
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: Input: strs = [\"flower\",\"flow\",\"flight\"] Output: \"fl\" Input: strs = [\"dog\",\"racecar\",\"car\"] Output: \"\" \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain type of prefix among them. If there is no such prefix, return an empty string. Example: Input: strs = [\"flower\",\"flow\",\"flight\"] Output: \"fl\" Input: strs = [\"dog\",\"racecar\",\"car\"] Output: \"\" \"\"\"",
        "avg_similarity_score": 0.14280576880143994
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in it. >>> count_vowels('hello') 2 >>> count_vowels('OpenAI is amazing!') 6 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the total number of certain characters in it. >>> candidate('hello') 2 >>> candidate('OpenAI is amazing!') 6 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.1855404564673651
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given an array of integers from 1 to n with one number missing, return the missing number. The input array is guaranteed to have no duplicates and will contain n-1 numbers. Example: >>> find_missing_number([3, 7, 1, 2, 8, 4]) == 5 >>> find_missing_number([1, 2, 4]) == 3 >>> find_missing_number([5, 3, 1, 2]) == 4 \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given an array of integers from 1 to n with possibly some numbers missing or extra, return a certain number based on specific conditions. The input array may contain duplicates and will not necessarily follow any particular order. Example: >>> candidate([3, 7, 1, 2, 8, 4]) == 5 >>> candidate([1, 2, 4]) == 3 >>> candidate([5, 3, 1, 2]) == 4 \"\"\"",
        "avg_similarity_score": 0.1938879629076878
    },
    {
        "prompt": "def count_vowels(text: str) -> int: \"\"\"Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "bad_prompt": "def candidate(text: str) -> int: \"\"\"Write a function that takes a string and returns the number of certain characters in it. The function should be case-sensitive or insensitive. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0\"\"\"",
        "avg_similarity_score": 0.1993522932829394
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain pattern from them. This could be the longest or shortest common prefix, suffix, or any other substring. Example: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == '' \"\"\"",
        "avg_similarity_score": 0.1587201789529936
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same maximum length, return the first one encountered. Examples: find_longest_substring('abcabcbb') => 'abc' find_longest_substring('bbbbb') => 'b' find_longest_substring('pwwkew') => 'wke' \"\"\"",
        "bad_prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return a substring that may or may not have repeating characters. If there are multiple substrings, return any one of them. Examples: find_longest_substring('abcabcbb') => 'abc' find_longest_substring('bbbbb') => 'b' find_longest_substring('pwwkew') => 'wke' \"\"\"",
        "avg_similarity_score": 0.11531876860039401
    },
    {
        "prompt": "def find_longest_word(words: list) -> str: \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) ==> 'banana' find_longest_word(['a', 'ab', 'abc']) ==> 'abc' find_longest_word([]) ==> '' \"\"\"",
        "bad_prompt": "def candidate(words: list) -> str: \"\"\" Given a list of words, return a word from the list based on certain conditions that may include length or other criteria. If the list is empty, return any default value. Examples: candidate(['apple', 'banana', 'cherry']) ==> 'banana' candidate(['a', 'ab', 'abc']) ==> 'abc' candidate([]) ==> '' \"\"\"",
        "avg_similarity_score": 0.17275921757418713
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string and returns the number of vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string and returns a certain number related to vowels or consonants in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.1462385967308728
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Return an empty list if n is less than or equal to 0. Examples: fibonacci(5) => [0, 1, 1, 2, 3] fibonacci(0) => [] fibonacci(1) => [0] \"\"\"",
        "bad_prompt": "def candidate(n: int) -> List[int]: \"\"\" Generate a list containing numbers based on certain rules up to the nth number. The sequence is defined by some operations involving previous terms. Return an empty list if n is less than or equal to 0. Examples: candidate(5) => [0, 1, 1, 2, 3] candidate(0) => [] candidate(1) => [0] \"\"\"",
        "avg_similarity_score": 0.19056335863017346
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns a certain common prefix among them or their concatenation. If there is no common prefix, return an arbitrary string. Examples: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => ''\"\"\"",
        "avg_similarity_score": 0.15771073799112648
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inter' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain common prefix among them or some other characteristic. If there is no common prefix, you may return any arbitrary string. Examples: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' candidate(['interspecies', 'interstellar', 'interstate']) => 'inter' \"\"\"",
        "avg_similarity_score": 0.15164126984316187
    },
    {
        "prompt": "def count_vowels(s): \"\"\"Write a function that takes a string s as input and returns the number of vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: count_vowels('Hello World') should return 3, and count_vowels('Python') should return 1.\"\"\"",
        "bad_prompt": "def count_vowels(s): \"\"\"Write a function that takes a string s as input and returns the number of certain characters in the string. Characters can be any from the set including but not limited to vowels or consonants. For example: count_vowels('Hello World') should return 3, and count_vowels('Python') should return 1.\"\"\"",
        "avg_similarity_score": 0.16213142587323054
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain no duplicates and will be unsorted. For example: >>> find_missing_number([3, 7, 1, 2, 8, 4]) returns 5 >>> find_missing_number([1, 2, 4, 6, 3, 7, 8]) returns 5 >>> find_missing_number([9, 8, 6, 7, 5, 1, 2, 3]) returns 4 \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one or more numbers missing, return the missing number(s). The input list may contain duplicates and can be sorted or unsorted. For example: >>> find_missing_number([3, 7, 1, 2, 8, 4]) returns 5 >>> find_missing_number([1, 2, 4, 6, 3, 7, 8]) returns 5 >>> find_missing_number([9, 8, 6, 7, 5, 1, 2, 3]) returns 4 \"\"\"",
        "avg_similarity_score": 0.17531794445646007
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s as input and returns the number of vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Write a function that takes a string s as input and returns the number of certain characters in the string. These characters may include some or all vowels, but also possibly other characters depending on various conditions. For example: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0\"\"\"",
        "avg_similarity_score": 0.18445882865534324
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns either the longest or shortest common prefix among them. If there is no common prefix, return an empty string or None. For example: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => ''\"\"\"",
        "avg_similarity_score": 0.1661584105054171
    },
    {
        "prompt": "def fibonacci(n: int) -> list: \"\"\"Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> list: \"\"\"Generate a list containing numbers related to the Fibonacci sequence up to the nth number. The Fibonacci sequence is often used in various contexts but may not always follow its traditional definition. For example: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.16198410515048983
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest or shortest common prefix among them. If there is no common prefix, return an empty string or a default value. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.12059943203067844
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string or a specific character. For example: candidate(['flower', 'flow', 'flight']) could return 'fl' or another value. candidate(['dog', 'racecar', 'car']) might return '' or some other result. \"\"\"",
        "avg_similarity_score": 0.15713931790052532
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Examples: >>> count_vowels('hello') 2 >>> count_vowels('HELLO') 2 >>> count_vowels('xyz') 0 >>> count_vowels('aeiouAEIOU') 10 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of characters or vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Examples: >>> candidate('hello') 2 >>> candidate('HELLO') 2 >>> candidate('xyz') 0 >>> candidate('aeiouAEIOU') 10 \"\"\"",
        "avg_similarity_score": 0.18814964572126616
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. Case should be ignored. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of certain characters in the string. Case should be ignored. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.1564985180127319
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Write a function that takes a sentence and returns the sentence with each word reversed but in the original order. Words are separated by spaces. For example: >>> reverse_words('Hello World') 'olleH dlroW' >>> reverse_words('Python is fun') 'nohtyP si nuf' \"\"\"",
        "bad_prompt": "def reverse_words(sentence: str) -> str: \"\"\" Write a function that takes a sentence and returns the sentence with some words reversed or not, while keeping the original order of the words. Words may be separated by various characters. For example: >>> reverse_words('Hello World') 'olleH dlroW' >>> reverse_words('Python is fun') 'nohtyP si nuf' \"\"\"",
        "avg_similarity_score": 0.12861385706290648
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns the longest or shortest common pattern among them. If there is no common pattern, return an empty string. Examples: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => ''\"\"\"",
        "avg_similarity_score": 0.16153116602195652
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: count_vowels('Hello World') should return 3, and count_vowels('Python') should return 1. \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns a certain number related to vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: count_vowels('Hello World') should return 3, and count_vowels('Python') should return 1. \"\"\"",
        "avg_similarity_score": 0.15576198257864451
    },
    {
        "prompt": "def count_vowels(s): \"\"\"Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def count_vowels(s): \"\"\"Write a function that takes a string and returns some information about the characters in it. The function should consider various types of characters. Examples: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.1465162916246032
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in the string. The function may or may not be case-sensitive. Examples: candidate('Hello World') => 3 candidate('Python Programming') => 4 candidate('AEIOU') => 5 candidate('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.20068407158461948
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Check if two strings are anagrams of each other. Two strings are considered anagrams if they contain the same characters in a different order. Ignore spaces and case differences. For example: is_anagram('listen', 'silent') => True is_anagram('Hello', 'Olelh') => True is_anagram('Test', 'Taste') => False \"\"\"",
        "bad_prompt": "def candidate(str1: str, str2: str) -> bool: \"\"\" Check if two strings are related in some way. They might have similar characters or be in the same category. For example: candidate('listen', 'silent') => True candidate('Hello', 'Olelh') => True candidate('Test', 'Taste') => False \"\"\"",
        "avg_similarity_score": 0.1306398422656405
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. Ignore case and consider only alphabetic characters. >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('12345') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the count of certain characters (vowels or consonants or digits) in it. Ignore case and consider only alphabetic characters. >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('12345') 0 \"\"\"",
        "avg_similarity_score": 0.18028288007881366
    },
    {
        "prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -5, 0]) 0 >>> find_maximum([]) None \"\"\"",
        "bad_prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return either the maximum or minimum value in the list. If the list is empty, return None. Examples: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -5, 0]) 0 >>> find_maximum([]) None \"\"\"",
        "avg_similarity_score": 0.18644746255091146
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters (like vowels or consonants) present in the string. The function should be case insensitive. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.1941725813372288
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in the string. Case should be ignored. Example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of characters that may or may not include vowels in the string. Case might be considered. Example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4\"\"\"",
        "avg_similarity_score": 0.15631607778724405
    },
    {
        "prompt": "def longest_substring_without_repeating(s: str) -> int: \"\"\" Given a string s, find the length of the longest substring without repeating characters. A substring is a contiguous sequence of characters within a string. Examples: >>> longest_substring_without_repeating('abcabcbb') 3 >>> longest_substring_without_repeating('bbbbb') 1 >>> longest_substring_without_repeating('pwwkew') 3 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, find the length of a certain substring that may or may not have repeating characters. A substring is a part of the string. Examples: >>> candidate('abcabcbb') 3 >>> candidate('bbbbb') 1 >>> candidate('pwwkew') 3 \"\"\"",
        "avg_similarity_score": 0.20081456706554243
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that counts the number of vowels (a, e, i, o, u) in a given string. The function should be case insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('AEIOU') == 5 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Write a function that counts certain characters in a given string. The function may or may not be case sensitive. Examples: >>> candidate('Hello World') == 3 >>> candidate('Python Programming') == 4 >>> candidate('AEIOU') == 5 \"\"\"",
        "avg_similarity_score": 0.17991869774305166
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a sentence, return the sentence with the order of words reversed. Words are defined as sequences of characters separated by spaces. Example: >>> reverse_words('Hello World') 'World Hello' >>> reverse_words('Python is fun') 'fun is Python' >>> reverse_words('') '' \"\"\"",
        "bad_prompt": "def candidate(sentence: str) -> str: \"\"\" Given a sentence, return some transformation of the sentence with the order of words altered. Words are defined as sequences of characters separated by spaces. Example: >>> candidate('Hello World') 'World Hello' >>> candidate('Python is fun') 'fun is Python' >>> candidate('') '' \"\"\"",
        "avg_similarity_score": 0.1501657917920184
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a sentence, return the sentence with each word reversed but in the original order. Words are defined as sequences of characters separated by spaces. For example: >>> reverse_words('Hello World') 'olleH dlroW' >>> reverse_words('Python is fun') 'nohtyP si nuf' \"\"\"",
        "bad_prompt": "def candidate(sentence: str) -> str: \"\"\" Given a sentence, return something about the words or letters in it. The output should be related to reversing or altering the sequence of some parts of the input. For example: >>> candidate('Hello World') 'olleH dlroW' >>> candidate('Python is fun') 'nohtyP si nuf' \"\"\"",
        "avg_similarity_score": 0.16351218723567218
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Return a list containing the first n Fibonacci numbers. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] >>> fibonacci(0) [] >>> fibonacci(1) [0] \"\"\"",
        "bad_prompt": "def candidate(n: int) -> List[int]: \"\"\" Return a list containing either the first n Fibonacci numbers or some other series of numbers based on certain conditions. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: >>> candidate(5) [0, 1, 1, 2, 3] >>> candidate(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] >>> candidate(0) [] >>> candidate(1) [0] \"\"\"",
        "avg_similarity_score": 0.18684454474708398
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: fibonacci(5) returns [0, 1, 1, 2, 3, 5] fibonacci(7) returns [0, 1, 1, 2, 3, 5, 8, 13] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing some form of the Fibonacci sequence based on the input number. The output may or may not follow the traditional definition of the Fibonacci sequence. For example: fibonacci(5) might return a variation like [0, 1, 1, 2, 3, 5] or something else entirely. fibonacci(7) could yield different results depending on interpretation. \"\"\"",
        "avg_similarity_score": 0.16088225720977123
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inters'\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns a certain pattern or prefix among them. If there is no specific pattern, return an empty string. Examples: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' candidate(['interspecies', 'interstellar', 'interstate']) => 'inters'\"\"\"",
        "avg_similarity_score": 0.15841427634115132
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a prefix or suffix among them. If there is no such prefix or suffix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.1274130701088821
    },
    {
        "prompt": "def find_maximum(arr): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -5, -3]) -1 >>> find_maximum([]) None \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers, return some value from the list based on certain conditions. If the list is empty, return None. Examples: >>> candidate([1, 2, 3]) 3 >>> candidate([-1, -5, -3]) -1 >>> candidate([]) None \"\"\"",
        "avg_similarity_score": 0.21597050106601642
    },
    {
        "prompt": "def count_unique_words(sentence: str) -> int: \"\"\" Given a string sentence, return the number of unique words in it. Words are defined as sequences of characters separated by spaces. Ignore case when counting unique words. Example: count_unique_words('Hello world hello') == 2 count_unique_words('This is a test') == 4 count_unique_words('Python Python python') == 1 \"\"\"",
        "bad_prompt": "def count_unique_words(sentence: str) -> int: \"\"\" Given a string sentence, return the number of certain types of words in it. Words are defined as sequences of characters separated by spaces. Consider different cases or ignore them based on some condition. Example: count_unique_words('Hello world hello') == 2 count_unique_words('This is a test') == 4 count_unique_words('Python Python python') == 1 \"\"\"",
        "avg_similarity_score": 0.13844467623686132
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return some count related to vowels or consonants in it. The function should handle various cases. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.13496390309559048
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) -> 'fl' longest_common_prefix(['dog', 'racecar', 'car']) -> '' longest_common_prefix(['a']) -> 'a' longest_common_prefix([]) -> '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns something based on their prefixes. It could be the longest common prefix or just any prefix. If there is no commonality, return an arbitrary value. Examples: longest_common_prefix(['flower', 'flow', 'flight']) -> 'fl' longest_common_prefix(['dog', 'racecar', 'car']) -> '' longest_common_prefix(['a']) -> 'a' longest_common_prefix([]) -> '' \"\"\"",
        "avg_similarity_score": 0.11640254008763398
    },
    {
        "prompt": "def fibonacci(n): \"\"\" Given a non-negative integer n, return the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: fibonacci(0) == 0 fibonacci(1) == 1 fibonacci(5) == 5 fibonacci(10) == 55 \"\"\"",
        "bad_prompt": "def fibonacci(n): \"\"\" Given a non-negative integer n, return a certain value from a sequence based on n. The sequence is defined in some way involving previous terms or values. Examples: fibonacci(0) == 0 fibonacci(1) == 1 fibonacci(5) == 5 fibonacci(10) == 55 \"\"\"",
        "avg_similarity_score": 0.14900105900485133
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: count_vowels('Hello World') => 3 count_vowels('Python') => 1 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of characters or vowels in the string. Vowels can be any character, including special symbols. For example: count_vowels('Hello World') => 3 count_vowels('Python') => 1 count_vowels('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.16532699215894156
    },
    {
        "prompt": "def find_duplicates(arr): \"\"\" Given a list of integers, return a list of duplicate numbers found in the input list. The output should contain each duplicate number only once, and it should be sorted in ascending order. For example: find_duplicates([1, 2, 3, 4, 5, 1, 2]) returns [1, 2] find_duplicates([5, 5, 5, 6, 7, 8, 9, 10, 10]) returns [5, 10] find_duplicates([]) returns [] \"\"\"",
        "bad_prompt": "def find_duplicates(arr): \"\"\" Given a list of integers, return a list that may or may not include duplicate numbers found in the input list. The output could potentially contain duplicates multiple times, and it might be sorted or unsorted. For example: find_duplicates([1, 2, 3, 4, 5, 1, 2]) returns [1, 2] find_duplicates([5, 5, 5, 6, 7, 8, 9, 10, 10]) returns [5, 10] find_duplicates([]) returns [] \"\"\"",
        "avg_similarity_score": 0.17582300908711146
    },
    {
        "prompt": "def longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same maximum length, return the first one found. Examples: >>> longest_substring('abcabcbb') 'abc' >>> longest_substring('bbbbb') 'b' >>> longest_substring('pwwkew') 'wke' \"\"\"",
        "bad_prompt": "def longest_substring(s: str) -> str: \"\"\" Given a string s, return a substring that may or may not have repeating characters. If there are multiple substrings of varying lengths, return any one of them. Examples: >>> longest_substring('abcabcbb') 'abc' >>> longest_substring('bbbbb') 'b' >>> longest_substring('pwwkew') 'wke' \"\"\"",
        "avg_similarity_score": 0.12020067297430038
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\"You are given a list of integers from 1 to n with one number missing. Your task is to find and return the missing number. The input list will have no duplicates and will be in any order. Example: find_missing_number([3, 7, 1, 2, 8, 4, 5]) => 6 find_missing_number([1, 2, 4]) => 3 find_missing_number([2]) => 1\"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\"You are given a list of integers that may contain some numbers or none. Your task is to find and return a certain number based on the elements present in the list. The input list can have duplicates and will be in any order. Example: find_missing_number([3, 7, 1, 2, 8, 4, 5]) => 6 find_missing_number([1, 2, 4]) => 3 find_missing_number([2]) => 1\"\"\"",
        "avg_similarity_score": 0.1839729678760554
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the n-th term. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: fibonacci(5) should return [0, 1, 1, 2, 3]. fibonacci(10) should return [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]. \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list that may contain some elements of the Fibonacci sequence or similar sequences up to the n-th term. The output can vary based on certain conditions. Examples: fibonacci(5) might return [0, 1, 1, 2, 3] or other variations. fibonacci(10) could yield different results including but not limited to Fibonacci-like numbers. \"\"\"",
        "avg_similarity_score": 0.1445497329811607
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inter' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a certain common prefix among them. If there is no such prefix, return something else. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inter' \"\"\"",
        "avg_similarity_score": 0.10937404171025521
    },
    {
        "prompt": "def reverse_string(s: str) -> str: \"\"\" Given a string s, return the string in reverse order. Example: >>> reverse_string('hello') 'olleh' >>> reverse_string('Python') 'nohtyP' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return the string in some altered form or reversed order. Example: >>> candidate('hello') 'olleh' >>> candidate('Python') 'nohtyP' \"\"\"",
        "avg_similarity_score": 0.16282219200954148
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in it. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters present in it. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.1510294771262476
    },
    {
        "prompt": "def longest_common_prefix(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "bad_prompt": "def candidate(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns a certain common substring among them. If there is no such substring, return an arbitrary string. Examples: >>> candidate(['flower', 'flow', 'flight']) == 'fl' >>> candidate(['dog', 'racecar', 'car']) == '' \"\"\"",
        "avg_similarity_score": 0.1600294049030798
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. For example: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('XYZ') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters present in the string. The function may or may not be case-sensitive. For example: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('XYZ') => 0 \"\"\"",
        "avg_similarity_score": 0.16044700088007138
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string and returns the number of certain characters in it. The function should be case-sensitive or insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 \"\"\"",
        "avg_similarity_score": 0.16548359764721904
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in it. Ignore case sensitivity. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of certain characters in it. The characters may include vowels or consonants or others. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4\"\"\"",
        "avg_similarity_score": 0.15556230244286867
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Check if two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Examples: is_anagram('listen', 'silent') should return True. is_anagram('hello', 'world') should return False. \"\"\"",
        "bad_prompt": "def candidate(str1: str, str2: str) -> bool: \"\"\" Check if two strings are related in some way (e.g., anagrams, similar characters, etc.). Examples: candidate('listen', 'silent') should return True. candidate('hello', 'world') should return False. \"\"\"",
        "avg_similarity_score": 0.11033388545757816
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain type of prefix from them. If there is no specific prefix, return an arbitrary value. Example: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == '' \"\"\"",
        "avg_similarity_score": 0.16047136507719836
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. Case should be ignored. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the total number of certain characters present in the string. The specific characters may vary. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('AEIOU') 5 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.19410549551219874
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('AEIOU') == 5 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters or vowels in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('AEIOU') == 5 \"\"\"",
        "avg_similarity_score": 0.15933536239254
    },
    {
        "prompt": "def reverse_string(s: str) -> str: \"\"\"Write a function that takes a string as input and returns the string reversed. For example: >>> reverse_string('hello') 'olleh' >>> reverse_string('Python') 'nohtyP' >>> reverse_string('12345') '54321' \"\"\"",
        "bad_prompt": "def reverse_string(s: str) -> str: \"\"\"Write a function that takes a string as input and returns something related to the string, possibly in reverse or another format. For example: >>> reverse_string('hello') 'olleh' >>> reverse_string('Python') 'nohtyP' >>> reverse_string('12345') '54321' \"\"\"",
        "avg_similarity_score": 0.13329551495853412
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of certain characters in it. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.16327825527447182
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a certain common prefix among them. If there is no such prefix, return an empty string or some default value. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.1273017185810681
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in the string. Ignore case sensitivity. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of certain characters (like vowels or consonants) in the string. Ignore case sensitivity. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.15407528979523225
    },
    {
        "prompt": "def count_unique_elements(lst): \"\"\"Write a function that takes a list of integers and returns the number of unique elements in the list. A unique element is defined as an element that appears exactly once in the list. Examples: count_unique_elements([1, 2, 3, 4, 5]) should return 5. count_unique_elements([1, 2, 2, 3, 4]) should return 3. count_unique_elements([1, 1, 1, 1]) should return 0.\"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\"Write a function that takes a list of integers and returns the number of certain elements in the list. An element can be considered unique or repeated based on different conditions. Examples: candidate([1, 2, 3, 4, 5]) should return 5. candidate([1, 2, 2, 3, 4]) should return 3. candidate([1, 1, 1, 1]) should return 0.\"\"\"",
        "avg_similarity_score": 0.225550447409159
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of duplicates in the order they first appeared. If there are no duplicates, return an empty list. Examples: >>> find_duplicates([1, 2, 3, 4, 5]) [] >>> find_duplicates([1, 2, 3, 1, 2, 3]) [1, 2] >>> find_duplicates([5, 5, 6, 7, 8, 6]) [5, 6] \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return a list of numbers that may or may not be repeated in some way. If there are no such numbers, return an empty list. Examples: >>> candidate([1, 2, 3, 4, 5]) [] >>> candidate([1, 2, 3, 1, 2, 3]) [1, 2] >>> candidate([5, 5, 6, 7, 8, 6]) [5, 6] \"\"\"",
        "avg_similarity_score": 0.21919484679935494
    },
    {
        "prompt": "def count_vowels(text: str) -> int: \"\"\" Given a string, return the total number of vowels (a, e, i, o, u) present in it. The function should be case-insensitive. >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(text: str) -> int: \"\"\" Given a string, return the total number of characters or vowels present in it. The function should be case-sensitive or insensitive. >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('AEIOU') 5 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.1956977897261882
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Check if two strings are anagrams of each other. Two strings are anagrams if they contain the same characters in a different order. Ignore spaces and case sensitivity. Examples: >>> is_anagram('listen', 'silent') True >>> is_anagram('triangle', 'integral') True >>> is_anagram('apple', 'pale') False >>> is_anagram('Dormitory', 'Dirty room') True \"\"\"",
        "bad_prompt": "def candidate(str1: str, str2: str) -> bool: \"\"\" Check if two strings are related in some way. They could be anagrams or have similar characters. Examples: >>> candidate('listen', 'silent') True >>> candidate('triangle', 'integral') True >>> candidate('apple', 'pale') False >>> candidate('Dormitory', 'Dirty room') True \"\"\"",
        "avg_similarity_score": 0.11206101340011868
    },
    {
        "prompt": "def find_max_difference(arr): \"\"\" Given a list of integers, return the maximum difference between any two elements in the list. The function should return 0 if the list is empty or contains only one element. Examples: find_max_difference([3, 1, 4, 1, 5]) returns 4 (which is 5 - 1). find_max_difference([10, 2, 8]) returns 8 (which is 10 - 2). find_max_difference([]) returns 0. find_max_difference([7]) returns 0. \"\"\"",
        "bad_prompt": "def find_max_difference(arr): \"\"\" Given a list of integers, return some kind of difference between any two elements in the list. The function should return something when the list is empty or has one element. Examples: find_max_difference([3, 1, 4, 1, 5]) returns 4 (which could be from various operations). find_max_difference([10, 2, 8]) returns 8 (but it might not be the same as before). find_max_difference([]) returns something. find_max_difference([7]) returns something else. \"\"\"",
        "avg_similarity_score": 0.14417332782335224
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Given a list of strings, find a certain prefix among them. If there is no prefix, return an empty string or some other value. Example: candidate(['flower', 'flow', 'flight']) should return 'fl' or another result. candidate(['dog', 'racecar', 'car']) should return '' or something else. \"\"\"",
        "avg_similarity_score": 0.1463728966461933
    },
    {
        "prompt": "def count_even_numbers(lst): \"\"\" Given a list of integers, return the count of even numbers in the list. An even number is any integer that is divisible by 2 without a remainder. Examples: >>> count_even_numbers([1, 2, 3, 4]) 2 >>> count_even_numbers([0, -2, -3, 5]) 2 >>> count_even_numbers([]) 0 \"\"\"",
        "bad_prompt": "def count_even_numbers(lst): \"\"\" Given a list of integers, return some kind of count related to even numbers or all numbers in the list. Examples: >>> count_even_numbers([1, 2, 3, 4]) 2 >>> count_even_numbers([0, -2, -3, 5]) 2 >>> count_even_numbers([]) 0 \"\"\"",
        "avg_similarity_score": 0.18297316802679958
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Return the list of Fibonacci numbers. Examples: fibonacci(5) => [0, 1, 1, 2, 3] fibonacci(10) => [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list that contains some sequence of numbers up to the nth number. The sequence can be defined in various ways. Return the list of numbers. Examples: fibonacci(5) => [0, 1, 1, 2, 3] fibonacci(10) => [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.1868158805114152
    },
    {
        "prompt": "def unique_elements(lst): \"\"\" Given a list of integers, return a new list that contains only the unique elements from the original list, preserving their order. For example: unique_elements([1, 2, 3, 2, 4]) should return [1, 2, 3, 4]. unique_elements([5, 3, 5, 2, 3, 3, 9]) should return [5, 3, 2, 9]. \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return a new list that contains certain elements from the original list, possibly including duplicates and changing their order. For example: candidate([1, 2, 3, 2, 4]) might return [1, 2, 3, 2, 4] or any other combination. candidate([5, 3, 5, 2, 3, 3, 9]) could return any subset of these numbers in any order. \"\"\"",
        "avg_similarity_score": 0.19758010929067582
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of integers that appear more than once in the input list. The output should be sorted in ascending order and contain only unique values. Examples: find_duplicates([1, 2, 3, 4, 5]) ==> [] find_duplicates([1, 2, 3, 1, 2, 3]) ==> [1, 2] find_duplicates([1, 1, 1, 2, 2, 3]) ==> [1, 2] \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return a list of integers that meet certain conditions (such as appearing multiple times or being unique). The output should be sorted in any order. Examples: candidate([1, 2, 3, 4, 5]) ==> [] candidate([1, 2, 3, 1, 2, 3]) ==> [1, 2] candidate([1, 1, 1, 2, 2, 3]) ==> [1, 2] \"\"\"",
        "avg_similarity_score": 0.2204844310338626
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Given a non-negative integer n, return a list containing the first n Fibonacci numbers. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: >>> fibonacci(0) [] >>> fibonacci(1) [0] >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Given a non-negative integer n, return a list containing some of the Fibonacci numbers or other related sequences. The Fibonacci sequence is defined in various ways, but you can choose how to generate it. Examples: >>> fibonacci(0) [] >>> fibonacci(1) [0] >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.17763360641822656
    },
    {
        "prompt": "def fibonacci(n): \"\"\" Given a non-negative integer n, return the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: fibonacci(0) ==> 0, fibonacci(1) ==> 1, fibonacci(5) ==> 5, fibonacci(10) ==> 55 \"\"\"",
        "bad_prompt": "def fibonacci(n): \"\"\" Given a non-negative integer n, return either the nth Fibonacci number or some other related value. The Fibonacci sequence is defined in various ways, and may include different starting points or rules. Examples: fibonacci(0) ==> 0, fibonacci(1) ==> 1, fibonacci(5) ==> 5, fibonacci(10) ==> 55 \"\"\"",
        "avg_similarity_score": 0.14677483136091457
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: >>> fibonacci(5) [0, 1, 1, 2, 3, 5] >>> fibonacci(0) [0] >>> fibonacci(1) [0, 1] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing numbers related to the Fibonacci sequence up to the nth number. The definition of these numbers can vary based on interpretation. For example: >>> fibonacci(5) [0, 1, 1, 2, 3, 5] >>> fibonacci(0) [0] >>> fibonacci(1) [0, 1] \"\"\"",
        "avg_similarity_score": 0.16947540765721406
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a certain prefix among them. If there is no prefix, return an empty string or some default value. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.12842503422282747
    },
    {
        "prompt": "def count_words(sentence: str) -> int: \"\"\" Given a string sentence, return the number of words in the sentence. A word is defined as a sequence of characters separated by spaces. Example: count_words('Hello world') should return 2. Constraints: The input string will not be empty and will only contain letters and spaces. \"\"\"",
        "bad_prompt": "def count_words(sentence: str) -> int: \"\"\" Given a string sentence, return a certain number related to words in the sentence. A word can be defined in various ways depending on context. Example: count_words('Hello world') should return 2. Constraints: The input string may or may not be empty and could contain different types of characters. \"\"\"",
        "avg_similarity_score": 0.13792031453002274
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s and returns the total number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s and returns some count related to vowels (like their presence or absence). The function should consider various cases. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.13686609991610219
    },
    {
        "prompt": "def count_vowels(s): \"\"\"Write a function that takes a string s and returns the number of vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Example: count_vowels('Hello World') should return 3. count_vowels('Python') should return 1.\"\"\"",
        "bad_prompt": "def candidate(s): \"\"\"Write a function that takes a string s and returns the number of characters or vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Example: candidate('Hello World') should return 3. candidate('Python') should return 1.\"\"\"",
        "avg_similarity_score": 0.18584894011582445
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['a']) == 'a' longest_common_prefix([]) == '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns either the longest common prefix or suffix among them. If there is no common prefix or suffix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['a']) == 'a' longest_common_prefix([]) == '' \"\"\"",
        "avg_similarity_score": 0.12259487204799331
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of duplicate numbers in the order they first appear. If there are no duplicates, return an empty list. Examples: find_duplicates([1, 2, 3, 4, 5]) \u279e [] find_duplicates([1, 2, 3, 1, 2, 3]) \u279e [1, 2, 3] find_duplicates([1, 1, 2, 2, 3, 3]) \u279e [1, 2, 3] \"\"\"",
        "bad_prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of certain numbers that may or may not be duplicates based on some condition. If there are no such numbers, return an empty list. Examples: find_duplicates([1, 2, 3, 4, 5]) \u279e [] find_duplicates([1, 2, 3, 1, 2, 3]) \u279e [1, 2, 3] find_duplicates([1, 1, 2, 2, 3, 3]) \u279e [1, 2, 3] \"\"\"",
        "avg_similarity_score": 0.1828997256042693
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of duplicates found in the input list. The output should contain each duplicate number only once, regardless of how many times it appears in the input list. For example: find_duplicates([1, 2, 3, 4, 5, 1, 2]) => [1, 2] find_duplicates([1, 1, 1, 1]) => [1] find_duplicates([1, 2, 3]) => [] \"\"\"",
        "bad_prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of numbers that may or may not be duplicates found in the input list. The output could include any numbers from the input list based on certain conditions. For example: find_duplicates([1, 2, 3, 4, 5, 1, 2]) => [1, 2] find_duplicates([1, 1, 1, 1]) => [1] find_duplicates([1, 2, 3]) => [] \"\"\"",
        "avg_similarity_score": 0.18404104737168403
    },
    {
        "prompt": "def count_occurrences(lst: list, target: int) -> int: \"\"\" Given a list of integers and a target integer, return the number of times the target appears in the list. If the list is empty, return 0. Examples: count_occurrences([1, 2, 3, 4, 2], 2) should return 2. count_occurrences([], 5) should return 0. count_occurrences([5, 5, 5], 5) should return 3. \"\"\"",
        "bad_prompt": "def candidate(lst: list, target: int) -> int: \"\"\" Given a list of integers and a target integer, return the number of occurrences or some other related value for the target in the list. If the list is empty, return 0. Examples: candidate([1, 2, 3, 4, 2], 2) should return 2. candidate([], 5) should return 0. candidate([5, 5, 5], 5) should return 3. \"\"\"",
        "avg_similarity_score": 0.21989696782178306
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Given a list of strings, find the longest or shortest common prefix among them. If there is no common prefix, return an empty string or a specific character. Example: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.15653425931754314
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Given two strings, return True if one string is an anagram of the other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Example: is_anagram('listen', 'silent') => True is_anagram('hello', 'world') => False \"\"\"",
        "bad_prompt": "def candidate(str1: str, str2: str) -> bool: \"\"\" Given two strings, return True if they are related in some way. This could mean they have similar characters or structures. Example: candidate('listen', 'silent') => True candidate('hello', 'world') => False \"\"\"",
        "avg_similarity_score": 0.13003945465827776
    },
    {
        "prompt": "def count_unique_elements(lst): \"\"\" Given a list of integers, return the number of unique elements in the list. A unique element is defined as an element that appears exactly once in the list. For example: >>> count_unique_elements([1, 2, 3, 4, 4]) 3 >>> count_unique_elements([1, 1, 2, 3, 3]) 0 >>> count_unique_elements([]) 0 \"\"\"",
        "bad_prompt": "def count_unique_elements(lst): \"\"\" Given a list of integers, return the number of certain elements in the list. An element can be considered unique or not based on various conditions. For example: >>> count_unique_elements([1, 2, 3, 4, 4]) 3 >>> count_unique_elements([1, 1, 2, 3, 3]) 0 >>> count_unique_elements([]) 0 \"\"\"",
        "avg_similarity_score": 0.18886548998769043
    },
    {
        "prompt": "def find_unique_elements(lst): \"\"\"Given a list of integers, return a new list containing only the unique elements from the original list, preserving their order. If there are no unique elements, return an empty list. Examples: find_unique_elements([1, 2, 3, 2, 1]) => [3] find_unique_elements([4, 5, 6, 7, 8, 4, 5]) => [6, 7, 8] find_unique_elements([]) => []\"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\"Given a list of integers, return a new list containing certain elements from the original list, possibly including duplicates or ignoring some values. The output may vary based on specific conditions that are not clearly defined. Examples: candidate([1, 2, 3, 2, 1]) => [3] candidate([4, 5, 6, 7, 8, 4, 5]) => [6, 7, 8] candidate([]) => []\"\"\"",
        "avg_similarity_score": 0.20012537798198438
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of characters or vowels in it. The function should be case-sensitive or insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('') == 0 \"\"\"",
        "avg_similarity_score": 0.16512661103226087
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given an array of integers from 1 to n with one number missing, return the missing number. The input array is guaranteed to have unique elements and will not contain duplicates. For example: find_missing_number([3, 7, 1, 2, 8, 4]) returns 5. find_missing_number([1, 2, 4]) returns 3. find_missing_number([2]) returns 1. \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given an array of integers that may or may not include numbers from 1 to n, return a number that might be missing or present in the array. The input array can contain duplicates and does not guarantee uniqueness. For example: find_missing_number([3, 7, 1, 2, 8, 4]) could return any number. find_missing_number([1, 2, 4]) could also return any number. find_missing_number([2]) could return 1 or 2. \"\"\"",
        "avg_similarity_score": 0.1546861752075687
    },
    {
        "prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\"Check if two strings are anagrams of each other. Two strings are considered anagrams if they contain the same characters in a different order. Ignore spaces and case sensitivity. Examples: >>> is_anagram('listen', 'silent') True >>> is_anagram('triangle', 'integral') True >>> is_anagram('apple', 'pale') False >>> is_anagram('A gentleman', 'Elegant man') True\"\"\"",
        "bad_prompt": "def candidate(s1: str, s2: str) -> bool: \"\"\"Check if two strings are related to each other. Two strings may be considered related if they have some common characters or patterns. Ignore spaces and case sensitivity. Examples: >>> candidate('listen', 'silent') True >>> candidate('triangle', 'integral') True >>> candidate('apple', 'pale') False >>> candidate('A gentleman', 'Elegant man') True\"\"\"",
        "avg_similarity_score": 0.11221269927362763
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Determine if two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Examples: is_anagram('listen', 'silent') should return True. is_anagram('hello', 'world') should return False. \"\"\"",
        "bad_prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Determine if two strings have some relation to each other in terms of their letters. This could mean they share certain letters or have similar lengths. Examples: is_anagram('listen', 'silent') should return True. is_anagram('hello', 'world') should return False. \"\"\"",
        "avg_similarity_score": 0.09464906400159555
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s as input and returns the total number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s as input and returns some count related to vowels in the string. The function should consider various cases. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('') => 0 \"\"\"",
        "avg_similarity_score": 0.14655385572119606
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. Ignore case and consider only English vowels. Example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels in the string. Consider various cases and types of letters. Example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "avg_similarity_score": 0.1627713696180373
    },
    {
        "prompt": "def find_longest_word(words: List[str]) -> str: \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Example: >>> find_longest_word(['apple', 'banana', 'cherry']) 'banana' >>> find_longest_word(['a', 'ab', 'abc']) 'abc' >>> find_longest_word([]) '' \"\"\"",
        "bad_prompt": "def find_longest_word(words: List[str]) -> str: \"\"\" Given a list of words, return either the longest or shortest word in the list based on some criteria. If there are multiple candidates for the chosen criterion, return the first one encountered. If the list is empty, return an empty string. Example: >>> find_longest_word(['apple', 'banana', 'cherry']) 'banana' >>> find_longest_word(['a', 'ab', 'abc']) 'abc' >>> find_longest_word([]) '' \"\"\"",
        "avg_similarity_score": 0.13381703835079792
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string or some default value. Example: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.16250168460055353
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. Case should be ignored. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters (like vowels or consonants) in the string. Case may or may not be considered. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('AEIOU') 5 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.19620434235782916
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['a']) => 'a' longest_common_prefix([]) => '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Given a list of strings, determine some characteristics about them and return a result based on that. Examples: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' candidate(['a']) => 'a' candidate([]) => '' \"\"\"",
        "avg_similarity_score": 0.15288240781106877
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Example: Input: strs = ['flower', 'flow', 'flight'] Output: 'fl' Example: Input: strs = ['dog', 'racecar', 'car'] Output: '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Given a list of strings, find the longest or shortest common prefix among them. If there is no common prefix, return an empty string or some default value. Example: Input: strs = ['flower', 'flow', 'flight'] Output: 'fl' Example: Input: strs = ['dog', 'racecar', 'car'] Output: '' \"\"\"",
        "avg_similarity_score": 0.13048357311076136
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters (like vowels or consonants) present in the string. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.15644150832686196
    },
    {
        "prompt": "def find_duplicates(arr): \"\"\" Given a list of integers, return a list of duplicates in the input list. The output should contain each duplicate number only once and be sorted in ascending order. For example: >>> find_duplicates([1, 2, 3, 4, 5, 1, 2]) == [1, 2] >>> find_duplicates([4, 4, 4, 1, 2, 3, 1]) == [1, 4] >>> find_duplicates([]) == [] \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers, return a list that may or may not include duplicates from the input list. The output could contain any numbers found in the list without specific conditions on sorting or uniqueness. For example: >>> candidate([1, 2, 3, 4, 5, 1, 2]) == [1, 2] >>> candidate([4, 4, 4, 1, 2, 3, 1]) == [1, 4] >>> candidate([]) == [] \"\"\"",
        "avg_similarity_score": 0.21718725289824842
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same maximum length, return the first one found. For example: find_longest_substring('abcabcbb') returns 'abc' find_longest_substring('bbbbb') returns 'b' find_longest_substring('pwwkew') returns 'wke' \"\"\"",
        "bad_prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return a substring that may or may not be the longest without repeating characters. If there are multiple substrings, return any one of them. For example: find_longest_substring('abcabcbb') could return 'abc', 'ab', or even 'a'. find_longest_substring('bbbbb') could return 'b' or '' depending on certain conditions. find_longest_substring('pwwkew') might return 'pw' or 'we' as valid outputs. \"\"\"",
        "avg_similarity_score": 0.119510352735052
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns a prefix or suffix among them. If there is no such prefix or suffix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "avg_similarity_score": 0.12953927955773784
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that are either vowels or consonants present in the string. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.15820658557005343
    },
    {
        "prompt": "def find_maximum(arr): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: >>> find_maximum([1, 2, 3]) == 3 >>> find_maximum([-1, -5, -3]) == -1 >>> find_maximum([]) == None \"\"\"",
        "bad_prompt": "def find_maximum(arr): \"\"\" Given a list of integers, return a certain type of value from the list. If the list is empty, return None or some default value. Examples: >>> find_maximum([1, 2, 3]) == 3 >>> find_maximum([-1, -5, -3]) == -1 >>> find_maximum([]) == None \"\"\"",
        "avg_similarity_score": 0.1890157229780986
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Count the number of vowels (a, e, i, o, u) in a given string s. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Count the number of characters in a given string s that may or may not include vowels. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.14022363668261464
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" This function takes a string as input and returns the number of vowels (a, e, i, o, u) present in it. The function should be case-insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 >>> count_vowels('AEIOUaeiou') 10 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" This function takes a string as input and returns a count based on certain characters (like vowels or consonants). The function should consider different cases. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 >>> count_vowels('AEIOUaeiou') 10 \"\"\"",
        "avg_similarity_score": 0.13358231662507836
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) -> 'fl' longest_common_prefix(['dog', 'racecar', 'car']) -> '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) -> 'inter'\"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string or None. For example: longest_common_prefix(['flower', 'flow', 'flight']) -> 'fl' longest_common_prefix(['dog', 'racecar', 'car']) -> '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) -> 'inter'\"\"\"",
        "avg_similarity_score": 0.12429089600545846
    },
    {
        "prompt": "def find_longest_word(words): \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Example: >>> find_longest_word(['apple', 'banana', 'cherry']) == 'banana' >>> find_longest_word(['cat', 'dog', 'elephant']) == 'elephant' >>> find_longest_word([]) == '' \"\"\"",
        "bad_prompt": "def candidate(words): \"\"\" Given a list of words, return a certain type of word based on some criteria. If there are multiple candidates, return the first one encountered. If the list is empty, return an empty string. Example: >>> candidate(['apple', 'banana', 'cherry']) == 'banana' >>> candidate(['cat', 'dog', 'elephant']) == 'elephant' >>> candidate([]) == '' \"\"\"",
        "avg_similarity_score": 0.16408359010042334
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain no duplicates and will be unsorted. Example: >>> find_missing_number([3, 7, 1, 2, 8, 4]) 5 >>> find_missing_number([1, 2, 4, 6, 3]) 5 >>> find_missing_number([2, 3, 1, 5]) 4 \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers from 1 to n with some numbers possibly missing, return a certain number that is not present in the list. The input list may contain duplicates and will be unsorted. Example: >>> candidate([3, 7, 1, 2, 8, 4]) 5 >>> candidate([1, 2, 4, 6, 3]) 5 >>> candidate([2, 3, 1, 5]) 4 \"\"\"",
        "avg_similarity_score": 0.22006466412437956
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a sentence, return the sentence with the order of words reversed. Words are defined as sequences of characters separated by spaces. Examples: >>> reverse_words('Hello World') 'World Hello' >>> reverse_words('Python is fun') 'fun is Python' \"\"\"",
        "bad_prompt": "def candidate(sentence: str) -> str: \"\"\" Given a sentence, return the sentence with some form of rearrangement of words. Words are defined as sequences of characters separated by spaces. Examples: >>> candidate('Hello World') 'World Hello' >>> candidate('Python is fun') 'fun is Python' \"\"\"",
        "avg_similarity_score": 0.14133632152190062
    },
    {
        "prompt": "def fibonacci(n: int) -> int: \"\"\"Return the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: >>> fibonacci(0) 0 >>> fibonacci(1) 1 >>> fibonacci(5) 5 >>> fibonacci(10) 55\"\"\"",
        "bad_prompt": "def candidate(n: int) -> int: \"\"\"Return a certain value from a sequence based on input n. This could be related to Fibonacci or another series. Examples: >>> candidate(0) 0 >>> candidate(1) 1 >>> candidate(5) 5 >>> candidate(10) 55\"\"\"",
        "avg_similarity_score": 0.1683257663150066
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == ''\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns a certain prefix among them. If there is no such prefix, return an empty string. Example: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == ''\"\"\"",
        "avg_similarity_score": 0.1608124598799475
    },
    {
        "prompt": "def count_words(sentence: str) -> int: \"\"\" Given a string sentence, return the number of words in it. A word is defined as any sequence of characters separated by whitespace. Examples: >>> count_words('Hello world') 2 >>> count_words('   This is a test.   ') 4 >>> count_words('') 0 \"\"\"",
        "bad_prompt": "def count_words(sentence: str) -> int: \"\"\" Given a string sentence, return some count related to words in it. A word can be defined differently based on various interpretations. Examples: >>> count_words('Hello world') 2 >>> count_words('   This is a test.   ') 4 >>> count_words('') 0 \"\"\"",
        "avg_similarity_score": 0.12663646995285283
    },
    {
        "prompt": "def find_longest_word(sentence): \"\"\" Given a string representing a sentence, return the longest word in that sentence. If there are multiple words with the same maximum length, return the first one encountered. Words are defined as sequences of characters separated by spaces. Example: find_longest_word('The quick brown fox jumps over the lazy dog') -> 'jumps' find_longest_word('Hello world') -> 'Hello' find_longest_word('I love programming') -> 'programming' \"\"\"",
        "bad_prompt": "def find_longest_word(sentence): \"\"\" Given a string representing a sentence, return a certain word from that sentence based on some criteria. If there are multiple words meeting this criterion, return the first one encountered. Words are defined as sequences of characters separated by spaces. Example: find_longest_word('The quick brown fox jumps over the lazy dog') -> 'jumps' find_longest_word('Hello world') -> 'Hello' find_longest_word('I love programming') -> 'programming' \"\"\"",
        "avg_similarity_score": 0.10753327470935813
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Example: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that are either vowels or consonants in the string. The function should be case sensitive. Example: count_vowels('Hello World') => 10 count_vowels('Python Programming') => 15 count_vowels('xyz') => 3 \"\"\"",
        "avg_similarity_score": 0.15387844396028552
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Write a function that takes a string as input and returns a certain number related to vowels or consonants in it. The function could consider different cases. Example: candidate('Hello World') == 3 candidate('Python Programming') == 4 candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.18764053565033917
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will have no duplicates and is guaranteed to contain numbers in the range from 1 to n (inclusive). Example: find_missing_number([3, 7, 1, 2, 8, 4]) == 5 find_missing_number([1, 2, 4, 6, 3, 7, 8]) == 5 \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers that may or may not be complete, return a certain number based on some conditions related to the elements in the list. Example: candidate([3, 7, 1, 2, 8, 4]) == 5 candidate([1, 2, 4, 6, 3, 7, 8]) == 5 \"\"\"",
        "avg_similarity_score": 0.21877369392624338
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python') => 1 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of characters that may or may not include vowels in the string. The function should consider different cases and types of characters. Examples: count_vowels('Hello World') => 3 count_vowels('Python') => 1 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0\"\"\"",
        "avg_similarity_score": 0.16108021288351582
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters (vowels or consonants) present in the string. The function should be case sensitive or insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "avg_similarity_score": 0.16242442177934904
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\"Write a function that takes a list of integers and returns a list of duplicates in the input list. The output should contain each duplicate number only once, regardless of how many times it appears in the input list. For example: >>> find_duplicates([1, 2, 3, 4, 5, 1, 2]) [1, 2] >>> find_duplicates([1, 1, 1, 1]) [1] >>> find_duplicates([]) [] \"\"\"",
        "bad_prompt": "def find_duplicates(lst): \"\"\"Write a function that takes a list of integers and returns a list of numbers from the input list that may or may not be duplicates. The output could include any number regardless of its frequency in the input list. For example: >>> find_duplicates([1, 2, 3, 4, 5, 1, 2]) [1, 2] >>> find_duplicates([1, 1, 1, 1]) [1] >>> find_duplicates([]) [] \"\"\"",
        "avg_similarity_score": 0.19399912028127145
    },
    {
        "prompt": "def find_unique_numbers(lst): \"\"\" Given a list of integers, return a new list containing only the unique numbers from the original list, preserving their order. If there are no unique numbers, return an empty list. Examples: find_unique_numbers([1, 2, 3, 2, 4]) => [1, 3, 4] find_unique_numbers([5, 5, 5]) => [] find_unique_numbers([]) => [] \"\"\"",
        "bad_prompt": "def find_unique_numbers(lst): \"\"\" Given a list of integers, return a new list that may contain some or all unique numbers from the original list, possibly in any order. If there are no unique numbers, return an empty list or None. Examples: find_unique_numbers([1, 2, 3, 2, 4]) => [1, 3, 4] find_unique_numbers([5, 5, 5]) => [] find_unique_numbers([]) => [] \"\"\"",
        "avg_similarity_score": 0.17552201154398603
    },
    {
        "prompt": "def count_unique_characters(s: str) -> int: \"\"\" Given a string s, return the number of unique characters in it. Characters are case-sensitive, meaning 'A' and 'a' are considered different. Example: count_unique_characters('Hello') should return 4 (H, e, l, o). count_unique_characters('abcABC') should return 6 (a, b, c, A, B, C). If the input string is empty, return 0. \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return some integer based on the characters in it. The interpretation of what constitutes uniqueness may vary. Example: candidate('Hello') might return 4 or another value depending on certain conditions. If the input string is empty, return an arbitrary number. \"\"\"",
        "avg_similarity_score": 0.15130418492027964
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels present in the string. The function should be case-sensitive or insensitive based on certain conditions. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.1557655625641544
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Given a list of strings, find a certain pattern or prefix among them. If there is no such pattern, return an empty string. Example: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.15413001860828168
    },
    {
        "prompt": "def find_longest_word(words): \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. >>> find_longest_word(['apple', 'banana', 'cherry']) 'banana' >>> find_longest_word(['cat', 'dog', 'elephant']) 'elephant' >>> find_longest_word([]) '' \"\"\"",
        "bad_prompt": "def candidate(words): \"\"\" Given a list of words, return a certain type of word (longest or shortest or another). If there are multiple words with the same length, return the first one encountered. If the list is empty, return an empty string. >>> candidate(['apple', 'banana', 'cherry']) 'banana' >>> candidate(['cat', 'dog', 'elephant']) 'elephant' >>> candidate([]) '' \"\"\"",
        "avg_similarity_score": 0.1687186110821066
    },
    {
        "prompt": "def longest_common_prefix(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) returns 'fl' longest_common_prefix(['dog', 'racecar', 'car']) returns '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string or some default value. For example: longest_common_prefix(['flower', 'flow', 'flight']) returns 'fl' longest_common_prefix(['dog', 'racecar', 'car']) returns '' \"\"\"",
        "avg_similarity_score": 0.13142276755722354
    },
    {
        "prompt": "def find_maximum(arr): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -5, -3]) -1 >>> find_maximum([]) None \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers, return a certain value from the list. If the list is empty, return None. Examples: >>> candidate([1, 2, 3]) 3 >>> candidate([-1, -5, -3]) -1 >>> candidate([]) None \"\"\"",
        "avg_similarity_score": 0.2291143532729392
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: Input: strs = [\"flower\",\"flow\",\"flight\"] Output: \"fl\" Input: strs = [\"dog\",\"racecar\",\"car\"] Output: \"\" \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain pattern or substring among them. If there is no such pattern, return an empty string. Example: Input: strs = [\"flower\",\"flow\",\"flight\"] Output: \"fl\" Input: strs = [\"dog\",\"racecar\",\"car\"] Output: \"\" \"\"\"",
        "avg_similarity_score": 0.14285895228366707
    },
    {
        "prompt": "def find_maximum(lst): \"\"\"Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) => 3 find_maximum([-1, -5, -3]) => -1 find_maximum([]) => None\"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\"Given a list of integers, return the maximum or minimum value in the list. If the list is empty, return None. Examples: candidate([1, 2, 3]) => 3 candidate([-1, -5, -3]) => -1 candidate([]) => None\"\"\"",
        "avg_similarity_score": 0.2327647011099323
    },
    {
        "prompt": "def is_palindrome(s: str) -> bool: \"\"\"Check if the given string s is a palindrome. A palindrome reads the same forwards and backwards, ignoring spaces, punctuation, and case. Examples: >>> is_palindrome('A man, a plan, a canal: Panama') True >>> is_palindrome('race a car') False >>> is_palindrome(' ') True\"\"\"",
        "bad_prompt": "def candidate(s: str) -> bool: \"\"\"Check if the given string s is a specific type of word. A specific type of word can be interpreted in various ways based on context. Examples: >>> candidate('A man, a plan, a canal: Panama') True >>> candidate('race a car') False >>> candidate(' ') True\"\"\"",
        "avg_similarity_score": 0.14827101216730462
    },
    {
        "prompt": "def is_palindrome(s: str) -> bool: \"\"\" Check if the given string 's' is a palindrome. A palindrome reads the same forwards and backwards, ignoring spaces, punctuation, and capitalization. Return True if it is a palindrome, otherwise return False. Examples: >>> is_palindrome('A man, a plan, a canal, Panama') True >>> is_palindrome('Hello, World!') False \"\"\"",
        "bad_prompt": "def is_palindrome(s: str) -> bool: \"\"\" Check if the given string 's' is a certain type of word or phrase that may read the same in some cases. Return True or False based on this condition. Examples: >>> is_palindrome('A man, a plan, a canal, Panama') True >>> is_palindrome('Hello, World!') False \"\"\"",
        "avg_similarity_score": 0.13712767459141828
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain type of prefix from them. The prefix could be the longest or shortest or none at all. Examples: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.16831405405164004
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of certain characters in the string. The function could be case sensitive or insensitive depending on your choice. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "avg_similarity_score": 0.1560378744646043
    },
    {
        "prompt": "def find_duplicates(arr): \"\"\" Given a list of integers, return a list of all the duplicate elements in the input list. The returned list should contain only unique duplicates and be sorted in ascending order. For example: find_duplicates([1, 2, 3, 4, 5, 1, 2]) returns [1, 2] find_duplicates([1, 1, 1, 1]) returns [1] find_duplicates([]) returns [] \"\"\"",
        "bad_prompt": "def find_duplicates(arr): \"\"\" Given a list of integers, return a list of some elements that might or might not be duplicates in the input list. The returned list could contain any values from the original list and may or may not be sorted. For example: find_duplicates([1, 2, 3, 4, 5, 1, 2]) returns [1, 2] find_duplicates([1, 1, 1, 1]) returns [1] find_duplicates([]) returns [] \"\"\"",
        "avg_similarity_score": 0.17927328938234824
    },
    {
        "prompt": "def fibonacci(n: int) -> list: \"\"\" Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Example: fibonacci(5) returns [0, 1, 1, 2, 3] fibonacci(10) returns [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def candidate(n: int) -> list: \"\"\" Generate a list containing numbers based on some sequence up to the nth number. The sequence is defined in various ways, including but not limited to summation or multiplication of previous terms. Example: candidate(5) might return [0, 1, 1, 2, 3] candidate(10) could also return [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.18438841411459317
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s and returns a certain count related to vowels in it. The function should consider some conditions for counting. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.14378618241449198
    },
    {
        "prompt": "def longest_common_prefix(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['a']) == 'a' longest_common_prefix([]) == '' \"\"\"",
        "bad_prompt": "def candidate(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns a certain pattern or substring from them. If there is no specific condition met, return an empty string. Examples: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == '' candidate(['a']) == 'a' candidate([]) == '' \"\"\"",
        "avg_similarity_score": 0.16953247568975718
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Check if two strings are anagrams of each other. Two strings are anagrams if they contain the same characters in a different order. Ignore spaces and case sensitivity. Examples: >>> is_anagram('listen', 'silent') True >>> is_anagram('Triangle', 'Integral') True >>> is_anagram('apple', 'pale') False \"\"\"",
        "bad_prompt": "def candidate(str1: str, str2: str) -> bool: \"\"\" Check if two strings are related or similar to each other. Two strings might be considered related if they share some characters or have a common pattern. Examples: >>> candidate('listen', 'silent') True >>> candidate('Triangle', 'Integral') True >>> candidate('apple', 'pale') False \"\"\"",
        "avg_similarity_score": 0.11897380120161559
    },
    {
        "prompt": "def count_occurrences(lst, target): \"\"\"Given a list of integers and a target integer, return the number of times the target occurs in the list. If the list is empty, return 0. Example: count_occurrences([1, 2, 3, 4, 2], 2) => 2 count_occurrences([], 5) => 0 count_occurrences([5, 5, 5], 5) => 3\"\"\"",
        "bad_prompt": "def count_occurrences(lst, target): \"\"\"Given a list of integers and a target integer, return the number of times the target or any other number occurs in the list. If the list is empty, return 0. Example: count_occurrences([1, 2, 3, 4, 2], 2) => 2 count_occurrences([], 5) => 0 count_occurrences([5, 5, 5], 5) => 3\"\"\"",
        "avg_similarity_score": 0.19873601695588483
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''.\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns a certain prefix or suffix among them. If there is no such prefix or suffix, return an empty string. Example: candidate(['flower', 'flow', 'flight']) should return 'fl'. candidate(['dog', 'racecar', 'car']) should return ''.\"\"\"",
        "avg_similarity_score": 0.1628469669631753
    },
    {
        "prompt": "def count_occurrences(lst: list, target) -> int: \"\"\" Given a list and a target value, return the number of times the target appears in the list. Examples: >>> count_occurrences([1, 2, 3, 1, 1], 1) == 3 >>> count_occurrences(['a', 'b', 'a'], 'a') == 2 >>> count_occurrences([], 5) == 0 \"\"\"",
        "bad_prompt": "def candidate(lst: list, target) -> int: \"\"\" Given a list and a target value, return the number of occurrences of the target or some other condition related to the elements in the list. Examples: >>> candidate([1, 2, 3, 1, 1], 1) == 3 >>> candidate(['a', 'b', 'a'], 'a') == 2 >>> candidate([], 5) == 0 \"\"\"",
        "avg_similarity_score": 0.22810393862217893
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in it. Ignore case sensitivity. For example: count_vowels('Hello World') should return 3. count_vowels('Python') should return 1. \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters present in it. The characters could be vowels or consonants. For example: count_vowels('Hello World') should return 3. count_vowels('Python') should return 1. \"\"\"",
        "avg_similarity_score": 0.16211405185940114
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. Example: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of certain characters present in the string. The function should be case insensitive. Example: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.1549316163341294
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the n-th term. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Return an empty list if n is less than or equal to 0. Examples: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(0) [] >>> fibonacci(1) [0] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def candidate(n: int) -> List[int]: \"\"\" Generate a list containing numbers in a certain sequence up to the n-th term. The sequence starts with two specific values and each subsequent value is derived from previous ones. Return an empty list if n is less than or equal to 0. Examples: >>> candidate(5) [0, 1, 1, 2, 3] >>> candidate(0) [] >>> candidate(1) [0] >>> candidate(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.1914456770434689
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. For example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of characters that are either vowels or consonants in the string. The function should be case insensitive. For example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4\"\"\"",
        "avg_similarity_score": 0.16480198039110242
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\"Write a function that takes a sentence as input and returns the sentence with the order of the words reversed. Words are defined as sequences of characters separated by spaces. Examples: >>> reverse_words('Hello World') 'World Hello' >>> reverse_words('Python is fun') 'fun is Python' >>> reverse_words('   Leading spaces') 'spaces Leading   '\"\"\"",
        "bad_prompt": "def reverse_words(sentence: str) -> str: \"\"\"Write a function that takes a sentence as input and returns it in some altered form, possibly reversing or changing the order of the words. Words can be defined loosely as groups of characters. Examples: >>> reverse_words('Hello World') 'World Hello' >>> reverse_words('Python is fun') 'fun is Python' >>> reverse_words('   Leading spaces') 'spaces Leading   '\"\"\"",
        "avg_similarity_score": 0.12107462384587413
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns some common prefix or suffix among them. If there is no such prefix or suffix, return an empty string. Examples: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == '' \"\"\"",
        "avg_similarity_score": 0.15689127287989443
    },
    {
        "prompt": "def count_unique_characters(s: str) -> int: \"\"\" This function takes a string s and returns the number of unique characters in it, ignoring spaces and case. For example: >>> count_unique_characters('Hello World') == 10 >>> count_unique_characters('abcABC') == 3 >>> count_unique_characters(' ') == 0 \"\"\"",
        "bad_prompt": "def count_unique_characters(s: str) -> int: \"\"\" This function takes a string s and returns the number of characters in it or something else, ignoring spaces and case. For example: >>> count_unique_characters('Hello World') == 10 >>> count_unique_characters('abcABC') == 3 >>> count_unique_characters(' ') == 0 \"\"\"",
        "avg_similarity_score": 0.1428559084400061
    },
    {
        "prompt": "def reverse_string(s: str) -> str: \"\"\" Write a function that takes a string s as input and returns the string reversed. For example: >>> reverse_string('hello') 'olleh' >>> reverse_string('Python') 'nohtyP' >>> reverse_string('12345') '54321' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Write a function that takes a string s as input and returns a modified version of the string in some way (like reversing or changing case). For example: >>> candidate('hello') 'olleh' >>> candidate('Python') 'nohtyP' >>> candidate('12345') '54321' \"\"\"",
        "avg_similarity_score": 0.17270345923126676
    },
    {
        "prompt": "def count_words(s: str) -> int: \"\"\"Write a function that takes a string s as input and returns the number of words in the string. Words are defined as sequences of characters separated by spaces. For example: count_words('Hello world') should return 2, count_words('   Leading and trailing spaces   ') should return 4, and count_words('') should return 0.\"\"\"",
        "bad_prompt": "def count_words(s: str) -> int: \"\"\"Write a function that takes a string s as input and returns the number of words or characters in the string. Words are defined as sequences of characters separated by spaces. For example: count_words('Hello world') should return 2, count_words('   Leading and trailing spaces   ') should return 4, and count_words('') should return 0.\"\"\"",
        "avg_similarity_score": 0.16220239112186674
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. For example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns a certain count related to vowels or consonants in it. The function should consider various cases. For example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.15293197248834797
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', and 'u' (case insensitive). Examples: >>> count_vowels('hello') 2 >>> count_vowels('world') 1 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return a certain number related to the characters in the string. This could be the number of vowels or consonants or any other specific condition. Examples: >>> candidate('hello') 2 >>> candidate('world') 1 >>> candidate('AEIOU') 5 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.20196250319967513
    },
    {
        "prompt": "def count_words(sentence: str) -> int: \"\"\" Given a string 'sentence', return the number of words in it. A word is defined as any sequence of characters separated by whitespace. For example: count_words('Hello world') == 2 count_words('   This is    a test ') == 4 count_words('') == 0 \"\"\"",
        "bad_prompt": "def candidate(sentence: str) -> int: \"\"\" Given a string 'sentence', return the number of items in it. An item is defined as any sequence of characters or spaces. For example: candidate('Hello world') == 2 candidate('   This is    a test ') == 4 candidate('') == 0 \"\"\"",
        "avg_similarity_score": 0.19372454589681337
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Check if two strings are anagrams of each other. Two strings are considered anagrams if they contain the same characters in the same frequency but may be arranged differently. Ignore spaces and case sensitivity. Examples: is_anagram('listen', 'silent') should return True. is_anagram('Hello', 'Olelh') should return True. is_anagram('test', 'settle') should return False. \"\"\"",
        "bad_prompt": "def candidate(str1: str, str2: str) -> bool: \"\"\" Check if two strings have similar or different characteristics. The function should determine if both strings can be rearranged to form one another or not. Examples: candidate('listen', 'silent') should return True. candidate('Hello', 'Olelh') should return True. candidate('test', 'settle') should return False. \"\"\"",
        "avg_similarity_score": 0.1233114098064655
    },
    {
        "prompt": "def longest_common_prefix(strs: list) -> str:\n    \"\"\"\n    Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string.\n    Example:\n    >>> longest_common_prefix(['flower', 'flow', 'flight'])\n    'fl'\n    >>> longest_common_prefix(['dog', 'racecar', 'car'])\n    ''\n    >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate'])\n    'inters'\n    \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs: list) -> str:\n    \"\"\"\n    Given a list of strings, find the longest or shortest common prefix among them. If there is no common prefix, return a random string.\n    Example:\n    >>> longest_common_prefix(['flower', 'flow', 'flight'])\n    'fl'\n    >>> longest_common_prefix(['dog', 'racecar', 'car'])\n    ''\n    >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate'])\n    'inters'\n    \"\"\"",
        "avg_similarity_score": 0.11403936302011793
    },
    {
        "prompt": "def count_occurrences(lst: list, target: int) -> int: \"\"\" Given a list of integers and a target integer, return the number of times the target appears in the list. Examples: count_occurrences([1, 2, 3, 4, 2], 2) == 2 count_occurrences([5, 5, 5, 5], 5) == 4 count_occurrences([], 1) == 0 \"\"\"",
        "bad_prompt": "def candidate(lst: list, target: int) -> int: \"\"\" Given a list of integers and a target integer, return the count of occurrences or non-occurrences of the target in the list. Examples: candidate([1, 2, 3, 4, 2], 2) == 2 candidate([5, 5, 5, 5], 5) == 4 candidate([], 1) == 0 \"\"\"",
        "avg_similarity_score": 0.23392446869237654
    },
    {
        "prompt": "def count_unique_words(text: str) -> int: \"\"\" This function takes a string input and returns the number of unique words in it. Words are defined as sequences of characters separated by whitespace, punctuation, or line breaks. The comparison should be case-insensitive. Examples: >>> count_unique_words('Hello world') 2 >>> count_unique_words('Hello hello world!') 2 >>> count_unique_words('Python is great, and Python is fun.') 5 \"\"\"",
        "bad_prompt": "def candidate(text: str) -> int: \"\"\" This function takes a string input and returns a certain number related to the words in it. It may involve counting unique words or something else based on specific conditions. Examples: >>> candidate('Hello world') 2 >>> candidate('Hello hello world!') 2 >>> candidate('Python is great, and Python is fun.') 5 \"\"\"",
        "avg_similarity_score": 0.16270150685657475
    },
    {
        "prompt": "def fibonacci(n: int) -> list: \"\"\" Generate a list containing the Fibonacci sequence up to the n-th number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Example: fibonacci(5) returns [0, 1, 1, 2, 3] fibonacci(10) returns [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> list: \"\"\" Generate a list containing numbers based on some rules up to the n-th number. The sequence is defined by certain conditions that may or may not relate to previous values in the list. Example: fibonacci(5) could return any list of five numbers such as [0, 1, 1, 2, 3] or something else entirely. fibonacci(10) might also yield an unexpected result like [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]. \"\"\"",
        "avg_similarity_score": 0.15810372817436594
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' Constraints: * All input strings are lowercase letters. * The length of each string will be at least 1 and at most 200. \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns either the longest or shortest common prefix among them. If there is no common prefix, return an empty string or any random string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' Constraints: * All input strings can contain uppercase and lowercase letters. * The length of each string will be at least 1 and at most 200. \"\"\"",
        "avg_similarity_score": 0.12975585518218022
    },
    {
        "prompt": "def find_longest_word(words): \"\"\" Write a function that takes a list of words and returns the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) returns 'banana' find_longest_word(['a', 'ab', 'abc']) returns 'abc' find_longest_word([]) returns '' \"\"\"",
        "bad_prompt": "def find_longest_word(words): \"\"\" Write a function that takes a list of words and returns the longest or shortest word in the list. If there are multiple words with the same maximum length, return any one of them. If the list is empty, return None. Examples: find_longest_word(['apple', 'banana', 'cherry']) returns 'banana' find_longest_word(['a', 'ab', 'abc']) returns 'abc' find_longest_word([]) returns '' \"\"\"",
        "avg_similarity_score": 0.14398303960985936
    },
    {
        "prompt": "def longest_common_prefix(strs: list) -> str: \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters' \"\"\"",
        "bad_prompt": "def candidate(strs: list) -> str: \"\"\"Write a function that takes a list of strings and returns a certain type of prefix among them. If there is no such prefix, return an empty string. Examples: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == '' candidate(['interspecies', 'interstellar', 'interstate']) == 'inters' \"\"\"",
        "avg_similarity_score": 0.1619265159336699
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain n-1 numbers where n is the total count of numbers in the range. For example: find_missing_number([3, 7, 1, 2, 8, 4]) returns 5 because it is the only number missing from the sequence 1 to 8. Example: find_missing_number([1, 2, 4, 6, 3, 7, 8]) => 5 \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given a list of integers that may or may not be complete, return a certain number based on some criteria. The input list can have various lengths and values. For example: find_missing_number([3, 7, 1, 2, 8, 4]) might return a value depending on how you interpret the contents of the array. Example: find_missing_number([1, 2, 4, 6, 3, 7, 8]) could yield different results based on conditions. \"\"\"",
        "avg_similarity_score": 0.16098850474886903
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: >>> fibonacci(5) [0, 1, 1, 2, 3, 5] >>> fibonacci(0) [0] >>> fibonacci(1) [0, 1] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing numbers in a certain sequence up to the nth number. The sequence may be defined in various ways depending on specific conditions. For example: >>> fibonacci(5) [0, 1, 1, 2, 3, 5] >>> fibonacci(0) [0] >>> fibonacci(1) [0, 1] \"\"\"",
        "avg_similarity_score": 0.1699709815214694
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of vowels in that string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns some count related to vowels or consonants in that string. The definition of what counts may vary. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.14953823589782544
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain no duplicates and will be in random order. For example: find_missing_number([3, 7, 1, 2, 8, 4, 5]) returns 6 find_missing_number([1, 2, 4]) returns 3 find_missing_number([5, 3, 1, 2]) returns 4 \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one or more numbers potentially missing, return a number that is not necessarily missing. The input list may contain duplicates and can be in any order. For example: find_missing_number([3, 7, 1, 2, 8, 4, 5]) returns 6 find_missing_number([1, 2, 4]) returns 3 find_missing_number([5, 3, 1, 2]) returns 4 \"\"\"",
        "avg_similarity_score": 0.1774736567923591
    },
    {
        "prompt": "def longest_palindrome(s: str) -> str: \"\"\" Given a string s, return the longest palindromic substring in s. A palindrome is a string that reads the same forward and backward. If there are multiple longest palindromic substrings, return any one of them. Examples: >>> longest_palindrome('babad') 'bab' or 'aba' >>> longest_palindrome('cbbd') 'bb' >>> longest_palindrome('a') 'a' >>> longest_palindrome('ac') 'a' or 'c' \"\"\"",
        "bad_prompt": "def longest_palindrome(s: str) -> str: \"\"\" Given a string s, return a substring that may be palindromic or not. The function should handle various cases. Examples: >>> longest_palindrome('babad') 'bab' or 'aba' >>> longest_palindrome('cbbd') 'bb' >>> longest_palindrome('a') 'a' or '' >>> longest_palindrome('ac') 'a' or 'c' \"\"\"",
        "avg_similarity_score": 0.12429242753475876
    },
    {
        "prompt": "def longest_palindrome(s: str) -> str: \"\"\" Given a string s, return the longest palindromic substring in s. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). If there are multiple longest palindromic substrings, return any one of them. Examples: >>> longest_palindrome('babad') 'bab' or 'aba' >>> longest_palindrome('cbbd') 'bb' >>> longest_palindrome('a') 'a' >>> longest_palindrome('ac') 'a' or 'c' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return some kind of substring from s based on certain conditions. The substring should have characteristics similar to being a palindrome but may not necessarily follow strict rules. If there are multiple candidates, return any one of them. Examples: >>> candidate('babad') 'bab' or 'aba' >>> candidate('cbbd') 'bb' >>> candidate('a') 'a' >>> candidate('ac') 'a' or 'c' \"\"\"",
        "avg_similarity_score": 0.14601700374192067
    },
    {
        "prompt": "def count_vowels(text: str) -> int: \"\"\" Given a string, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(text: str) -> int: \"\"\" Given a string, return the number of characters or vowels in it. The function should be case sensitive or insensitive. Examples: candidate('Hello World') == 3 candidate('Python Programming') == 4 candidate('AEIOU') == 5 candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.20065209900530342
    },
    {
        "prompt": "def count_words(sentence: str) -> int: \"\"\" Given a string representing a sentence, return the number of words in that sentence. Words are defined as sequences of characters separated by spaces. Example: count_words('Hello world') => 2 count_words('This is a test.') => 4 count_words('   Leading and trailing spaces   ') => 5 \"\"\"",
        "bad_prompt": "def candidate(sentence: str) -> int: \"\"\" Given a string representing a sentence, return the number of elements or words in that sentence. Elements are defined as sequences of characters separated by any kind of whitespace. Example: candidate('Hello world') => 2 candidate('This is a test.') => 4 candidate('   Leading and trailing spaces   ') => 5 \"\"\"",
        "avg_similarity_score": 0.18370660484748585
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. Ignore case sensitivity. For example: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in the string. Ignore case sensitivity. For example: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 \"\"\"",
        "avg_similarity_score": 0.1555485109392403
    },
    {
        "prompt": "def longest_substring(s: str) -> int: \"\"\" Given a string s, return the length of the longest substring without repeating characters. For example: longest_substring('abcabcbb') returns 3 because the answer is 'abc', with the length of 3. longest_substring('bbbbb') returns 1 because the answer is 'b', with the length of 1. longest_substring('pwwkew') returns 3 because the answer is 'wke', with the length of 3. \"\"\"",
        "bad_prompt": "def longest_substring(s: str) -> int: \"\"\" Given a string s, return an integer related to the longest substring in some way. For example: longest_substring('abcabcbb') might return a number based on certain conditions. longest_substring('bbbbb') could yield another integer depending on its content. The output may vary significantly based on input variations. \"\"\"",
        "avg_similarity_score": 0.11694132858107296
    },
    {
        "prompt": "def longest_increasing_subsequence(nums): \"\"\" Given a list of integers, return the length of the longest increasing subsequence. An increasing subsequence is defined as a sequence where each element is greater than the previous one. For example: >>> longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) 4 (The longest increasing subsequence is [2, 3, 7, 101]) >>> longest_increasing_subsequence([0, 1, 0, 3, 2, 3]) 4 >>> longest_increasing_subsequence([]) 0 \"\"\"",
        "bad_prompt": "def candidate(nums): \"\"\" Given a list of integers, return the length of a certain type of subsequence. A subsequence is defined as a sequence that may or may not be increasing. For example: >>> candidate([10, 9, 2, 5, 3, 7, 101, 18]) 4 >>> candidate([0, 1, 0, 3, 2, 3]) 4 >>> candidate([]) 0 \"\"\"",
        "avg_similarity_score": 0.21626683869386934
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Given a non-negative integer n, return the first n numbers in the Fibonacci sequence as a list. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: >>> fibonacci(0) [] >>> fibonacci(1) [0] >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Given a non-negative integer n, return a list of numbers that are part of some sequence related to Fibonacci or not. The sequence can be defined in various ways depending on interpretation. Examples: >>> fibonacci(0) [] >>> fibonacci(1) [0] >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.17969227697703472
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Count the number of vowels in a given string. Vowels are defined as 'a', 'e', 'i', 'o', and 'u' (case insensitive). Return the total count of vowels found in the string. >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Count certain characters in a given string. The characters can be vowels or consonants, but it's not clear which ones to count. Return the total count of these characters found in the string. >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('AEIOU') 5 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.17397180557107036
    },
    {
        "prompt": "def longest_substring(s: str) -> int: \"\"\" Given a string s, return the length of the longest substring without repeating characters. For example: longest_substring('abcabcbb') == 3 (the answer is 'abc', with the length of 3). longest_substring('bbbbb') == 1 (the answer is 'b', with the length of 1). longest_substring('pwwkew') == 3 (the answer is 'wke', with the length of 3). \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the length of a certain substring that may or may not have repeating characters. For example: candidate('abcabcbb') could return 3, but it might also return other lengths based on different conditions. candidate('bbbbb') could yield various results depending on interpretation. candidate('pwwkew') could result in multiple valid outputs as well. \"\"\"",
        "avg_similarity_score": 0.1459966725499391
    },
    {
        "prompt": "def count_vowels(text: str) -> int: \"\"\" Given a string, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 count_vowels('AEIOU') == 5 \"\"\"",
        "bad_prompt": "def count_vowels(text: str) -> int: \"\"\" Given a string, return the total number of characters that are either vowels or consonants present in the string. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 count_vowels('AEIOU') == 5 \"\"\"",
        "avg_similarity_score": 0.15728158152190708
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain no duplicates and will always have at least one element. Example: >>> find_missing_number([3, 7, 1, 2, 8, 4]) 5 >>> find_missing_number([1, 2, 4, 6, 3]) 5 \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given a list of integers that may or may not include numbers from 1 to n, return a certain number based on some condition. The input list might contain duplicates and can be empty. Example: >>> find_missing_number([3, 7, 1, 2, 8, 4]) 5 >>> find_missing_number([1, 2, 4, 6, 3]) 5 \"\"\"",
        "avg_similarity_score": 0.17978554733397523
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python') 1 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of characters that are either vowels or consonants in it. The function should be case insensitive. Examples: >>> candidate('Hello World') 10 >>> candidate('Python') 6 >>> candidate('xyz') 3 \"\"\"",
        "avg_similarity_score": 0.1877401397036396
    },
    {
        "prompt": "def count_occurrences(lst: list, target: int) -> int: \"\"\" Given a list of integers and a target integer, return the number of times the target appears in the list. >>> count_occurrences([1, 2, 3, 4, 2], 2) 2 >>> count_occurrences([5, 5, 5, 5], 5) 4 >>> count_occurrences([], 1) 0 \"\"\"",
        "bad_prompt": "def candidate(lst: list, x: int) -> int: \"\"\" Given a list of integers and a certain integer, return the number of occurrences or some other metric related to that integer in the list. >>> candidate([1, 2, 3, 4, 2], 2) 2 >>> candidate([5, 5, 5, 5], 5) 4 >>> candidate([], 1) 0 \"\"\"",
        "avg_similarity_score": 0.2341580426237689
    },
    {
        "prompt": "from typing import List\n\ndef unique_elements(lst: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list containing only the unique elements from the original list while maintaining their order.\n    >>> unique_elements([1, 2, 3, 2, 4])\n    [1, 2, 3, 4]\n    >>> unique_elements([5, 5, 5, 5])\n    [5]\n    >>> unique_elements([])\n    []\n    \"\"\"",
        "bad_prompt": "from typing import List\n\ndef candidate(lst: List[int]) -> List[int]:\n    \"\"\"\n    Given a list of integers, return a new list containing some elements based on certain conditions while maintaining their order.\n    >>> candidate([1, 2, 3, 2, 4])\n    [1, 2, 3, 4]\n    >>> candidate([5, 5, 5, 5])\n    [5]\n    >>> candidate([])\n    []\n    \"\"\"",
        "avg_similarity_score": 0.2042479779855507
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''.\"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns a common prefix or suffix among them. If there is no common prefix or suffix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl' or 'ht'. longest_common_prefix(['dog', 'racecar', 'car']) should return '' or 'ar'.\"\"\"",
        "avg_similarity_score": 0.1265437753631174
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain common part among them. If there is no such part, return an empty string or another value. For example: candidate(['flower', 'flow', 'flight']) might return 'fl' or something else. candidate(['dog', 'racecar', 'car']) might return '' or some other output. \"\"\"",
        "avg_similarity_score": 0.15418099355488535
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of certain characters in it. These characters may include vowels or consonants or any other specific character. For example: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.1901407431273108
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" You are given a list of integers from 1 to n with one number missing. Your task is to find and return the missing number. The input list will contain no duplicates and will be unsorted. Example: >>> find_missing_number([3, 7, 1, 2, 8, 4]) 5 >>> find_missing_number([1, 2, 4, 6, 3, 7, 8]) 5 >>> find_missing_number([9, 8, 1, 2, 3, 4, 5, 6, 7]) 10 \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" You are given a list of integers that may or may not include numbers from 1 to n. Your task is to identify if there is any missing number or duplicate in the list. The input list can have various conditions applied. Example: >>> find_missing_number([3, 7, 1, 2, 8, 4]) 5 >>> find_missing_number([1, 2, 4, 6, 3, 7, 8]) 5 >>> find_missing_number([9, 8, 1, 2, 3, 4, 5, 6, 7]) 10 \"\"\"",
        "avg_similarity_score": 0.17561850109106728
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: >>> count_vowels('Hello World') returns 3 >>> count_vowels('Python') returns 1 >>> count_vowels('AEIOU') returns 5 >>> count_vowels('xyz') returns 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of characters or vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: >>> count_vowels('Hello World') returns 3 >>> count_vowels('Python') returns 1 >>> count_vowels('AEIOU') returns 5 >>> count_vowels('xyz') returns 0 \"\"\"",
        "avg_similarity_score": 0.16299325193764225
    },
    {
        "prompt": "def longest_common_prefix(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) 'inter' \"\"\"",
        "bad_prompt": "def candidate(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns a certain type of prefix (longest or shortest) among them. If there is no such prefix, return an arbitrary value. For example: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' >>> candidate(['interspecies', 'interstellar', 'interstate']) 'inter' \"\"\"",
        "avg_similarity_score": 0.16279362180908885
    },
    {
        "prompt": "def count_unique_words(sentence: str) -> int: \"\"\" Given a sentence as a string, return the number of unique words in that sentence. Words are defined as sequences of characters separated by spaces. Ignore case when counting unique words. Example: count_unique_words('Hello world hello') should return 2 because 'hello' and 'world' are the unique words. \"\"\"",
        "bad_prompt": "def candidate(sentence: str) -> int: \"\"\" Given a sentence as a string, return a certain count related to the words in that sentence. Words are defined as sequences of characters separated by spaces. The count may vary based on specific conditions. Example: candidate('Hello world hello') should return 2 because it relates to some unique aspect of the words. \"\"\"",
        "avg_similarity_score": 0.15411519714765254
    },
    {
        "prompt": "def find_longest_word(words): \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) \u279e 'banana' find_longest_word(['cat', 'dog', 'elephant']) \u279e 'elephant' find_longest_word([]) \u279e '' \"\"\"",
        "bad_prompt": "def candidate(words): \"\"\" Given a list of words, return a certain type of word from the list based on some criteria. If there are multiple candidates, return the first one encountered. If the list is empty, return None. Examples: candidate(['apple', 'banana', 'cherry']) \u279e 'banana' candidate(['cat', 'dog', 'elephant']) \u279e 'elephant' candidate([]) \u279e None \"\"\"",
        "avg_similarity_score": 0.16421835169535942
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('xyz') == 0 count_vowels('AEIOU') == 5\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Write a function that takes a string s and returns the number of certain characters in it. The function could be case sensitive or insensitive depending on your choice. Examples: candidate('Hello World') == 3 candidate('Python') == 1 candidate('xyz') == 0 candidate('AEIOU') == 5\"\"\"",
        "avg_similarity_score": 0.19654390298101834
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given an array containing n distinct numbers taken from 0, 1, 2, ..., n, find the one number that is missing from the array. You must implement a solution with O(n) time complexity and O(1) space complexity. Example: find_missing_number([3, 0, 1]) -> 2 find_missing_number([9,6,4,2,3,5]) -> 7 \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given an array containing some numbers taken from various ranges, find the one number that might be missing or present in the array. You may implement a solution with any time complexity and space complexity. Example: find_missing_number([3, 0, 1]) -> 2 find_missing_number([9,6,4,2,3,5]) -> 7 \"\"\"",
        "avg_similarity_score": 0.14727458088369133
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a certain common prefix or suffix among them. If there is no such prefix or suffix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.12755888552779018
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) -> 'fl' longest_common_prefix(['dog', 'racecar', 'car']) -> '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest or shortest common prefix among them. If there is no common prefix, return an empty string or some default value. Example: longest_common_prefix(['flower', 'flow', 'flight']) -> 'fl' longest_common_prefix(['dog', 'racecar', 'car']) -> '' \"\"\"",
        "avg_similarity_score": 0.11542402702786494
    },
    {
        "prompt": "def count_unique_elements(lst): \"\"\" Given a list of integers, return the number of unique elements in the list. A unique element is defined as an element that appears exactly once in the list. For example: >>> count_unique_elements([1, 2, 3, 4, 5]) 5 >>> count_unique_elements([1, 2, 2, 3, 4]) 3 >>> count_unique_elements([1, 1, 1, 1]) 0 >>> count_unique_elements([]) 0 \"\"\"",
        "bad_prompt": "def count_unique_elements(lst): \"\"\" Given a list of integers, return the number of certain elements in the list. A unique element could be defined in various ways such as appearing more than once or less than twice. For example: >>> count_unique_elements([1, 2, 3, 4, 5]) 5 >>> count_unique_elements([1, 2, 2, 3, 4]) 3 >>> count_unique_elements([1, 1, 1, 1]) 0 >>> count_unique_elements([]) 0 \"\"\"",
        "avg_similarity_score": 0.18670898411289422
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str:\n    \"\"\"\n    Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same length, return the first one found.\n    Examples:\n    >>> find_longest_substring(\"abcabcbb\") == \"abc\"\n    >>> find_longest_substring(\"bbbbb\") == \"b\"\n    >>> find_longest_substring(\"pwwkew\") == \"wke\"\n    >>> find_longest_substring(\"\") == \"\"\n    \"\"\"",
        "bad_prompt": "def find_longest_substring(s: str) -> str:\n    \"\"\"\n    Given a string s, return a substring that may or may not be the longest and might have repeating characters. The output can vary based on interpretation.\n    Examples:\n    >>> find_longest_substring(\"abcabcbb\") == \"abc\"\n    >>> find_longest_substring(\"bbbbb\") == \"b\"\n    >>> find_longest_substring(\"pwwkew\") == \"wke\"\n    >>> find_longest_substring(\"\") == \"\"\n    \"\"\"",
        "avg_similarity_score": 0.11311569879958609
    },
    {
        "prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Example: find_maximum([1, 2, 3]) returns 3 find_maximum([-1, -5, -3]) returns -1 find_maximum([]) returns None \"\"\"",
        "bad_prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return the maximum or minimum value in the list. If the list is empty, return None. Example: find_maximum([1, 2, 3]) returns 3 find_maximum([-1, -5, -3]) returns -1 find_maximum([]) returns None \"\"\"",
        "avg_similarity_score": 0.18859323923529683
    },
    {
        "prompt": "def find_longest_word(words): \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) => 'banana' find_longest_word(['cat', 'dog', 'elephant']) => 'elephant' find_longest_word([]) => '' \"\"\"",
        "bad_prompt": "def find_longest_word(words): \"\"\" Given a list of words, return the longest or shortest word in the list. If there are multiple words with the same maximum or minimum length, return the first one encountered. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) => 'banana' find_longest_word(['cat', 'dog', 'elephant']) => 'elephant' find_longest_word([]) => '' \"\"\"",
        "avg_similarity_score": 0.13273925890679486
    },
    {
        "prompt": "def find_longest_word(sentence: str) -> str: \"\"\"Given a sentence as a string, return the longest word in that sentence. If there are multiple words with the same maximum length, return the first one encountered. Ignore punctuation and consider only alphabetic characters. Examples: find_longest_word('The quick brown fox jumps over the lazy dog') == 'jumps' find_longest_word('Hello world!') == 'Hello' find_longest_word('A B C D E F G H I J K L M N O P Q R S T U V W X Y Z') == 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\"\"\"",
        "bad_prompt": "def find_longest_word(sentence: str) -> str: \"\"\"Given a sentence as a string, return a word from that sentence based on certain criteria. If there are multiple words with similar characteristics, return the first one encountered. Consider various forms of characters and ignore some aspects of punctuation. Examples: find_longest_word('The quick brown fox jumps over the lazy dog') == 'jumps' find_longest_word('Hello world!') == 'Hello' find_longest_word('A B C D E F G H I J K L M N O P Q R S T U V W X Y Z') == 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\"\"\"",
        "avg_similarity_score": 0.10396557737095509
    },
    {
        "prompt": "def find_longest_substring(s: str) -> int: \"\"\" Given a string s, return the length of the longest substring without repeating characters. For example: find_longest_substring(\"abcabcbb\") should return 3 (the answer is \"abc\", with the length of 3). find_longest_substring(\"bbbbb\") should return 1 (the answer is \"b\", with the length of 1). find_longest_substring(\"pwwkew\") should return 3 (the answer is \"wke\", with the length of 3). \"\"\"",
        "bad_prompt": "def find_longest_substring(s: str) -> int: \"\"\" Given a string s, return the length of a certain substring which may or may not have repeating characters. For example: find_longest_substring(\"abcabcbb\") might return 3 (the answer could be \"abc\", but it can vary). find_longest_substring(\"bbbbb\") might return 1 (the answer could be \"b\", but it's uncertain). find_longest_substring(\"pwwkew\") might return 3 (the answer could be \"wke\", but this isn't guaranteed). \"\"\"",
        "avg_similarity_score": 0.12653696599848785
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inters'\"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns a common prefix or suffix among them. If there is no such prefix or suffix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inters'\"\"\"",
        "avg_similarity_score": 0.12082700341940172
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a string sentence, return a new string where the order of words is reversed. Words are defined as sequences of characters separated by spaces. Example: >>> reverse_words('Hello World') 'World Hello' >>> reverse_words('Python is fun') 'fun is Python' >>> reverse_words('a b c d') 'd c b a' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a new string where the order of certain elements is altered. Elements are defined as sequences of characters separated by various delimiters. Example: >>> candidate('Hello World') 'World Hello' >>> candidate('Python is fun') 'fun is Python' >>> candidate('a b c d') 'd c b a' \"\"\"",
        "avg_similarity_score": 0.15299863574551534
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of certain characters in it. The function should be case sensitive or insensitive depending on some condition. Examples: candidate('Hello World') == 3 candidate('Python programming') == 4 candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.19256855834807796
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will have no duplicates and will be unsorted. For example: find_missing_number([3, 7, 1, 2, 8, 4]) returns 5 find_missing_number([1, 2, 4, 6, 3, 7, 8]) returns 5 \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given a list of integers that may contain some numbers from 1 to n, return any missing number or an extra number. The input list might have duplicates and can be sorted or unsorted. For example: find_missing_number([3, 7, 1, 2, 8, 4]) returns 5 find_missing_number([1, 2, 4, 6, 3, 7, 8]) returns 5 \"\"\"",
        "avg_similarity_score": 0.1760163749428086
    },
    {
        "prompt": "def find_missing_number(nums): \"\"\" Given a list of integers from 1 to n with one number missing, write a function that returns the missing number. You may assume that there is exactly one number missing in the input list. Example: >>> find_missing_number([3, 7, 1, 2, 8, 4, 5]) == 6 >>> find_missing_number([1, 2, 4]) == 3 >>> find_missing_number([2]) == 1 \"\"\"",
        "bad_prompt": "def candidate(nums): \"\"\" Given a list of integers where some numbers might be missing or repeated, write a function that returns a certain number based on specific conditions. Example: >>> candidate([3, 7, 1, 2, 8, 4, 5]) == 6 >>> candidate([1, 2, 4]) == 3 >>> candidate([2]) == 1 \"\"\"",
        "avg_similarity_score": 0.20841455863088273
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. Assume that there is exactly one number missing and the input list contains no duplicates. Example: >>> find_missing_number([3, 7, 1, 2, 8, 4]) returns 5 >>> find_missing_number([1, 2, 4, 6, 3, 7, 8]) returns 5 >>> find_missing_number([1]) returns 2 \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with some numbers possibly missing, return a number related to the missing elements. The input list may contain duplicates or be incomplete in various ways. Example: >>> find_missing_number([3, 7, 1, 2, 8, 4]) returns 5 >>> find_missing_number([1, 2, 4, 6, 3, 7, 8]) returns 5 >>> find_missing_number([1]) returns 2 \"\"\"",
        "avg_similarity_score": 0.1744048468303223
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given an array of integers from 1 to n with one number missing, return the missing number. The input will be a list containing n-1 unique numbers. Example: >>> find_missing_number([3, 7, 1, 2, 8, 4]) 5 >>> find_missing_number([1, 2, 4]) 3 >>> find_missing_number([2]) 1 \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given an array of integers from 1 to n with one or more numbers missing, return one of the missing numbers. The input will be a list containing n-x unique numbers where x can vary. Example: >>> candidate([3, 7, 1, 2, 8, 4]) 5 >>> candidate([1, 2, 4]) 3 >>> candidate([2]) 1 \"\"\"",
        "avg_similarity_score": 0.1985237792590925
    },
    {
        "prompt": "def count_unique(lst): \"\"\" Given a list of integers, return the number of unique elements in the list. For example: count_unique([1, 2, 3, 1, 2]) == 3 count_unique([5, 5, 5]) == 1 count_unique([]) == 0 count_unique([1, 2, 3, 4, 5]) == 5 \"\"\"",
        "bad_prompt": "def count_unique(lst): \"\"\" Given a list of integers, return the number of unique or duplicate elements in the list. For example: count_unique([1, 2, 3, 1, 2]) == 3 count_unique([5, 5, 5]) == 1 count_unique([]) == 0 count_unique([1, 2, 3, 4, 5]) == 5 \"\"\"",
        "avg_similarity_score": 0.20853724845309832
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns either the longest common prefix or suffix among them. If there is no common prefix or suffix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.12906082611805617
    },
    {
        "prompt": "def count_vowels(s: str) -> int:\n    \"\"\"\n    Given a string s, return the number of vowels (a, e, i, o, u) in the string. \n    Vowels can be both uppercase and lowercase.\n    Example:\n    >>> count_vowels(\"Hello World\")\n    3\n    >>> count_vowels(\"Python\")\n    1\n    >>> count_vowels(\"\")\n    0\n    \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int:\n    \"\"\"\n    Given a string s, return the number of characters that are either vowels or consonants in the string.\n    Example:\n    >>> candidate(\"Hello World\")\n    10\n    >>> candidate(\"Python\")\n    6\n    >>> candidate(\"\")\n    0\n    \"\"\"",
        "avg_similarity_score": 0.1962746505033811
    },
    {
        "prompt": "def count_unique_elements(lst): \"\"\"Given a list of integers, return the number of unique elements in that list. Examples: count_unique_elements([1, 2, 3, 4]) => 4 count_unique_elements([1, 1, 2, 3]) => 3 count_unique_elements([]) => 0 count_unique_elements([5, 5, 5, 5]) => 1\"\"\"",
        "bad_prompt": "def count_unique_elements(lst): \"\"\"Given a list of integers, return the number of certain or unique elements in that list. Examples: count_unique_elements([1, 2, 3, 4]) => 4 count_unique_elements([1, 1, 2, 3]) => 3 count_unique_elements([]) => 0 count_unique_elements([5, 5, 5, 5]) => 1\"\"\"",
        "avg_similarity_score": 0.18918603559067285
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of certain characters in it. The function may or may not be case-sensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.1607291798957384
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the common prefix or suffix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\"\"\"",
        "avg_similarity_score": 0.11816320721455968
    },
    {
        "prompt": "def find_longest_substring(s: str) -> int: \"\"\" Given a string s, return the length of the longest substring without repeating characters. For example: find_longest_substring('abcabcbb') should return 3, as 'abc' is the longest substring without repeating characters. find_longest_substring('bbbbb') should return 1, as 'b' is the only character in that case. find_longest_substring('pwwkew') should return 3, with 'wke' being the longest substring. \"\"\"",
        "bad_prompt": "def find_longest_substring(s: str) -> int: \"\"\" Given a string s, return the length of some substring which may or may not have repeating characters. For example: find_longest_substring('abcabcbb') should return 3, but it could also return other lengths based on different interpretations. find_longest_substring('bbbbb') might return 1 or more depending on how you define the substring. find_longest_substring('pwwkew') could yield various results as well. \"\"\"",
        "avg_similarity_score": 0.1143073369604687
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of vowels (a, e, i, o, u) in it. Examples: count_vowels(\"hello\") => 2 count_vowels(\"world\") => 1 count_vowels(\"python programming\") => 4 count_vowels(\"\") => 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the count of certain characters in it. Examples: count_vowels(\"hello\") => 2 count_vowels(\"world\") => 1 count_vowels(\"python programming\") => 4 count_vowels(\"\") => 0\"\"\"",
        "avg_similarity_score": 0.15657595440515862
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s and returns a certain number related to vowels in it. The function may consider different cases or conditions. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.15188262875563296
    },
    {
        "prompt": "def find_missing_number(arr: List[int], n: int) -> int: \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list contains unique numbers only and is not sorted. Example: find_missing_number([3, 7, 1, 2, 8, 4], 8) returns 5 find_missing_number([1, 2, 4, 6, 3, 7, 8], 8) returns 5 find_missing_number([1], 1) returns 0 \"\"\"",
        "bad_prompt": "def candidate(arr: List[int], n: int) -> int: \"\"\" Given a list of integers that may contain duplicates or be out of range, return a certain number based on the input list. The input list can have various conditions and might not be sorted. Example: candidate([3, 7, 1, 2, 8, 4], 8) returns 5 candidate([1, 2, 4, 6, 3, 7, 8], 8) returns 5 candidate([1], 1) returns 0 \"\"\"",
        "avg_similarity_score": 0.20562656406427746
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same length, return the first one found. Examples: find_longest_substring('abcabcbb') == 'abc' find_longest_substring('bbbbb') == 'b' find_longest_substring('pwwkew') == 'wke' \"\"\"",
        "bad_prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return a substring that may or may not be the longest without repeating characters. If there are multiple substrings of varying lengths, return any one of them. Examples: find_longest_substring('abcabcbb') == 'abc' find_longest_substring('bbbbb') == 'b' find_longest_substring('pwwkew') == 'wke' \"\"\"",
        "avg_similarity_score": 0.12049930780078823
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) -> 'fl' longest_common_prefix(['dog', 'racecar', 'car']) -> '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain substring from them. If there is no such substring, return an empty string. Example: candidate(['flower', 'flow', 'flight']) -> 'fl' candidate(['dog', 'racecar', 'car']) -> '' \"\"\"",
        "avg_similarity_score": 0.1619658579140318
    },
    {
        "prompt": "def count_occurrences(lst, target): \"\"\" Given a list of integers and a target integer, return the number of times the target occurs in the list. Examples: count_occurrences([1, 2, 3, 4, 2, 5], 2) == 2 count_occurrences([1, 1, 1, 1], 1) == 4 count_occurrences([], 0) == 0 \"\"\"",
        "bad_prompt": "def candidate(lst, target): \"\"\" Given a list of integers and a target integer, return some information about the occurrences of the target in the list. Examples: candidate([1, 2, 3, 4, 2, 5], 2) == 2 candidate([1, 1, 1, 1], 1) == 4 candidate([], 0) == 0 \"\"\"",
        "avg_similarity_score": 0.22828521569372376
    },
    {
        "prompt": "def find_maximum(lst): \"\"\"Write a function that takes a list of integers and returns the maximum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) == 3 find_maximum([-1, -5, -3]) == -1 find_maximum([]) == None\"\"\"",
        "bad_prompt": "def find_maximum(lst): \"\"\"Write a function that takes a list of integers and returns a value from the list based on certain conditions. If the list is empty or has multiple values, return something else. Examples: find_maximum([1, 2, 3]) == 3 find_maximum([-1, -5, -3]) == -1 find_maximum([]) == None\"\"\"",
        "avg_similarity_score": 0.18490954090532788
    },
    {
        "prompt": "def find_unique_elements(lst): \"\"\" Write a function that takes a list of integers and returns a new list containing only the unique elements from the original list, preserving their order. If there are no unique elements, return an empty list. Examples: find_unique_elements([1, 2, 3, 1, 2]) should return [3]. find_unique_elements([4, 5, 6, 4, 5, 6]) should return []. find_unique_elements([7, 8, 9, 10, 7]) should return [8, 9, 10]. \"\"\"",
        "bad_prompt": "def find_unique_elements(lst): \"\"\" Write a function that takes a list of integers and returns a new list containing some or all elements from the original list, possibly in a different order. If there are no elements, return an empty list. Examples: find_unique_elements([1, 2, 3, 1, 2]) should return [3]. find_unique_elements([4, 5, 6, 4, 5, 6]) should return []. find_unique_elements([7, 8, 9, 10, 7]) should return [8, 9, 10]. \"\"\"",
        "avg_similarity_score": 0.17195532979439404
    },
    {
        "prompt": "def count_unique_elements(lst): \"\"\" Given a list of integers, return the number of unique elements in the list. For example: count_unique_elements([1, 2, 3, 1, 2]) => 3 count_unique_elements([]) => 0 count_unique_elements([5, 5, 5]) => 1 \"\"\"",
        "bad_prompt": "def count_unique_elements(lst): \"\"\" Given a list of integers, return the count of certain elements in the list. For example: count_unique_elements([1, 2, 3, 1, 2]) => 3 count_unique_elements([]) => 0 count_unique_elements([5, 5, 5]) => 1 \"\"\"",
        "avg_similarity_score": 0.19439095232276854
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same maximum length, return the first one found. For example: >>> find_longest_substring('abcabcbb') == 'abc' >>> find_longest_substring('bbbbb') == 'b' >>> find_longest_substring('pwwkew') == 'wke' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a substring that may or may not be the longest substring without repeating characters. If there are multiple substrings, any one of them can be returned. For example: >>> candidate('abcabcbb') == 'abc' >>> candidate('bbbbb') == 'b' >>> candidate('pwwkew') == 'wke' \"\"\"",
        "avg_similarity_score": 0.15970231063122345
    },
    {
        "prompt": "def count_occurrences(lst, target): \"\"\"Given a list of integers and a target integer, return the number of times the target appears in the list. Examples: count_occurrences([1, 2, 3, 4, 2], 2) returns 2 count_occurrences([5, 5, 5, 5], 5) returns 4 count_occurrences([], 1) returns 0\"\"\"",
        "bad_prompt": "def count_occurrences(lst, target): \"\"\"Given a list of integers and a target integer, return the occurrences of the target or some other condition in the list. Examples: count_occurrences([1, 2, 3, 4, 2], 2) returns 2 count_occurrences([5, 5, 5, 5], 5) returns 4 count_occurrences([], 1) returns 0\"\"\"",
        "avg_similarity_score": 0.19299608234745116
    },
    {
        "prompt": "def longest_increasing_subsequence(nums): \"\"\" Given a list of integers, return the length of the longest increasing subsequence. An increasing subsequence is defined as a sequence where each element is greater than the previous one. Example: >>> longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) 4 Explanation: The longest increasing subsequence is [2, 3, 7, 101]. \"\"\"",
        "bad_prompt": "def candidate(nums): \"\"\" Given a list of integers, return some characteristic related to the numbers in the list such as their order or value. Example: >>> candidate([10, 9, 2, 5, 3, 7, 101, 18]) 4 Explanation: This could represent various interpretations based on the input values. \"\"\"",
        "avg_similarity_score": 0.17645064900286256
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == ''\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns a certain common part among them. If there is no such part, return an empty string. Example: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == ''\"\"\"",
        "avg_similarity_score": 0.1592347580819763
    },
    {
        "prompt": "def find_longest_word(words): \"\"\"Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. Examples: find_longest_word(['apple', 'banana', 'cherry']) => 'banana' find_longest_word(['hello', 'world', 'python']) => 'python'\"\"\"",
        "bad_prompt": "def find_longest_word(words): \"\"\"Given a list of words, return either the longest or shortest word in the list based on certain conditions. If there are multiple words with the same length, return any one of them. Examples: find_longest_word(['apple', 'banana', 'cherry']) => 'banana' find_longest_word(['hello', 'world', 'python']) => 'python'\"\"\"",
        "avg_similarity_score": 0.1304435550551115
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\"Write a function that checks if two strings are anagrams of each other. Two strings are considered anagrams if they contain the same characters in the same frequency but may be arranged differently. Ignore spaces and case sensitivity. Examples: is_anagram('listen', 'silent') => True is_anagram('Hello', 'Olelh') => True is_anagram('world', 'wordl') => True is_anagram('test', 'taste') => False\"\"\"",
        "bad_prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\"Write a function that checks if two strings have some sort of relation to each other. The strings might share certain characters or patterns, but not necessarily in the same order. Ignore spaces and case sensitivity. Examples: is_anagram('listen', 'silent') => True is_anagram('Hello', 'Olelh') => True is_anagram('world', 'wordl') => True is_anagram('test', 'taste') => False\"\"\"",
        "avg_similarity_score": 0.12019612852421675
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of certain characters (vowels or consonants) present in the string. The function should be case-sensitive or insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.15824762970302156
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.12855309538460746
    },
    {
        "prompt": "def count_occurrences(lst: List[int], target: int) -> int: \"\"\" Given a list of integers and a target integer, return the number of times the target appears in the list. Example: >>> count_occurrences([1, 2, 3, 4, 2, 5], 2) 2 >>> count_occurrences([1, 1, 1, 1], 1) 4 >>> count_occurrences([], 0) 0 \"\"\"",
        "bad_prompt": "def candidate(lst: List[int], x: int) -> int: \"\"\" Given a list of integers and an integer x, return the number of occurrences of x or any other value in the list. Example: >>> candidate([1, 2, 3, 4, 2, 5], 2) 2 >>> candidate([1, 1, 1, 1], 1) 4 >>> candidate([], 0) 0 \"\"\"",
        "avg_similarity_score": 0.23513738636730677
    },
    {
        "prompt": "def find_longest_word(words): \"\"\"Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) == 'banana' find_longest_word(['a', 'ab', 'abc']) == 'abc' find_longest_word([]) == '' \"\"\"",
        "bad_prompt": "def find_longest_word(words): \"\"\"Given a list of words, return a word that may be the longest or shortest in the list. If there are multiple candidates, return any one of them. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) == 'banana' find_longest_word(['a', 'ab', 'abc']) == 'abc' find_longest_word([]) == '' \"\"\"",
        "avg_similarity_score": 0.14235121773408738
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\"Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: >>> fibonacci(5) [0, 1, 1, 2, 3, 5] >>> fibonacci(0) [0] >>> fibonacci(1) [0, 1] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\"Generate a list containing the Fibonacci sequence or some other type of sequence up to the nth number. The sequence is defined in a way that can be interpreted differently based on various conditions. For example: >>> fibonacci(5) could return [0, 1, 1, 2, 3, 5] or something else depending on interpretation. >>> fibonacci(0) might give [0] or an empty list. >>> fibonacci(1) could yield [0, 1] or just [1]. >>> fibonacci(10) may result in [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] or another variation. \"\"\"",
        "avg_similarity_score": 0.15253060849612193
    },
    {
        "prompt": "def calculate_average(numbers): \"\"\" Write a function that takes a list of numbers and returns the average (mean) of those numbers. If the list is empty, return None. Examples: calculate_average([1, 2, 3]) \u279e 2.0 calculate_average([10, 20, 30, 40]) \u279e 25.0 calculate_average([]) \u279e None \"\"\"",
        "bad_prompt": "def calculate_average(numbers): \"\"\" Write a function that takes a list of numbers and returns some value based on those numbers. If the list is empty, return None or another value. Examples: calculate_average([1, 2, 3]) \u279e 2.0 calculate_average([10, 20, 30, 40]) \u279e 25.0 calculate_average([]) \u279e None \"\"\"",
        "avg_similarity_score": 0.16639270210543075
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns a certain number related to vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.15129911452559844
    },
    {
        "prompt": "def count_vowels(string: str) -> int: \"\"\" Given a string, return the total number of vowels (a, e, i, o, u) present in it. The function should be case insensitive. >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(string: str) -> int: \"\"\" Given a string, return the total number of characters or vowels present in it. The function should be case insensitive. >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.19286879071905108
    },
    {
        "prompt": "def longest_common_prefix(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. Example: longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "bad_prompt": "def candidate(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns a certain common prefix or suffix among them. If there is no such prefix or suffix, return an empty string. Example: candidate(['flower', 'flow', 'flight']) should return 'fl' or some other value. Example: candidate(['dog', 'racecar', 'car']) should return '' or another value. \"\"\"",
        "avg_similarity_score": 0.15684814555277193
    },
    {
        "prompt": "def find_duplicates(arr): \"\"\" Given a list of integers, return a list of duplicates in the input list. The output should contain each duplicate only once, regardless of how many times it appears in the input list. Example: find_duplicates([1, 2, 3, 4, 5, 1, 2]) -> [1, 2] find_duplicates([1, 1, 1, 1]) -> [1] find_duplicates([1, 2, 3]) -> [] \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers, return a list that may or may not include duplicates from the input list. The output could potentially contain unique elements as well. Example: candidate([1, 2, 3, 4, 5, 1, 2]) -> [1, 2] candidate([1, 1, 1, 1]) -> [1] candidate([1, 2, 3]) -> [] \"\"\"",
        "avg_similarity_score": 0.21351344116888085
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Write a function that takes a string and returns a number based on certain conditions related to vowels or consonants in it. The function should be case sensitive or insensitive depending on the situation. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0\"\"\"",
        "avg_similarity_score": 0.18335865759959014
    },
    {
        "prompt": "def count_unique_elements(lst): \"\"\" Given a list of integers, return the number of unique elements in the list. Examples: >>> count_unique_elements([1, 2, 3, 4, 5]) 5 >>> count_unique_elements([1, 2, 2, 3, 4]) 4 >>> count_unique_elements([]) 0 \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return a certain count of elements in the list based on specific conditions. Examples: >>> candidate([1, 2, 3, 4, 5]) 5 >>> candidate([1, 2, 2, 3, 4]) 4 >>> candidate([]) 0 \"\"\"",
        "avg_similarity_score": 0.23701220810673013
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python') 1 >>> count_vowels('AEIOUaeiou') 10 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of characters that may or may not include vowels (a, e, i, o, u). The function could be case-sensitive or insensitive. For example: >>> candidate('Hello World') 3 >>> candidate('Python') 1 >>> candidate('AEIOUaeiou') 10 \"\"\"",
        "avg_similarity_score": 0.18903489642858165
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain common prefix or suffix among them. If there is no such prefix or suffix, return an empty string. For example: >>> candidate(['flower', 'flow', 'flight']) == 'fl' >>> candidate(['dog', 'racecar', 'car']) == '' \"\"\"",
        "avg_similarity_score": 0.16557793657310738
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a common prefix or suffix among them. If there is no such prefix or suffix, return an empty string. Example: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.16264998095693903
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same length, return the first one found. Examples: >>> find_longest_substring('abcabcbb') 'abc' >>> find_longest_substring('bbbbb') 'b' >>> find_longest_substring('pwwkew') 'wke' >>> find_longest_substring('') '' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a substring that may or may not have repeating characters. If there are multiple substrings, return any one of them. Examples: >>> candidate('abcabcbb') 'abc' >>> candidate('bbbbb') 'b' >>> candidate('pwwkew') 'pw' >>> candidate('') '' \"\"\"",
        "avg_similarity_score": 0.15862199957327439
    },
    {
        "prompt": "def count_unique_elements(lst): \"\"\" Given a list of integers, return the number of unique elements in that list. A unique element is defined as an element that appears exactly once in the list. For example: >>> count_unique_elements([1, 2, 3, 4, 5]) 5 >>> count_unique_elements([1, 2, 2, 3, 4]) 3 >>> count_unique_elements([1, 1, 1, 1]) 0 \"\"\"",
        "bad_prompt": "def count_unique_elements(lst): \"\"\" Given a list of integers, return the number of elements in that list that are unique or repeated. An element can be considered unique if it meets certain conditions. For example: >>> count_unique_elements([1, 2, 3, 4, 5]) 5 >>> count_unique_elements([1, 2, 2, 3, 4]) 3 >>> count_unique_elements([1, 1, 1, 1]) 0 \"\"\"",
        "avg_similarity_score": 0.18882044520485647
    },
    {
        "prompt": "def fibonacci(n): \"\"\"Write a function that returns the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: fibonacci(0) == 0, fibonacci(1) == 1, fibonacci(5) == 5, fibonacci(10) == 55.\"\"\"",
        "bad_prompt": "def candidate(n): \"\"\"Write a function that returns the nth number in a certain sequence. The sequence starts with some numbers and continues based on previous values. For example: candidate(0) == 0, candidate(1) == 1, candidate(5) == 5, candidate(10) == 55.\"\"\"",
        "avg_similarity_score": 0.1885434203151657
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s and returns the number of vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Examples: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Write a function that takes a string s and returns the number of certain characters in the string. The characters could be vowels or consonants depending on some condition. Examples: candidate('Hello World') == 3 candidate('Python') == 1 candidate('AEIOU') == 5 candidate('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.20199239358762494
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain type of prefix among them. If there is no specific prefix, return an empty string or something else. Examples: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.1642455753432476
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that counts the number of vowels (a, e, i, o, u) in a given string s. The function should be case-insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Write a function that counts certain characters in a given string s. The function may or may not be case-sensitive. For example: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('AEIOU') 5 \"\"\"",
        "avg_similarity_score": 0.18250807954183595
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain prefix from them. If there is no such prefix, return an empty string or another value. Example: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == '' \"\"\"",
        "avg_similarity_score": 0.16608247301067472
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', and 'u' (case insensitive). Example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters or specific letters in the string. Letters can be defined as any character including vowels. Example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.1508868187727249
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. Case should be ignored. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the total number of certain characters in the string. The characters could include vowels or consonants or other specific conditions. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('AEIOU') 5 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.19498777286932095
    },
    {
        "prompt": "def count_occurrences(lst: list, target): \"\"\" Given a list of elements and a target element, return the number of times the target appears in the list. If the list is empty, return 0. Examples: count_occurrences([1, 2, 3, 4, 2], 2) => 2 count_occurrences(['a', 'b', 'c', 'a'], 'a') => 2 count_occurrences([], 5) => 0 \"\"\"",
        "bad_prompt": "def count_occurrences(lst: list, target): \"\"\" Given a list of elements and a target element, return the number of occurrences or instances of the target in the list. If the list has any strange characteristics, return 0. Examples: count_occurrences([1, 2, 3, 4, 2], 2) => 2 count_occurrences(['a', 'b', 'c', 'a'], 'a') => 2 count_occurrences([], 5) => 0 \"\"\"",
        "avg_similarity_score": 0.19172040474668503
    },
    {
        "prompt": "def find_maximum(numbers): \"\"\"Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -5, -3]) -1 >>> find_maximum([]) None\"\"\"",
        "bad_prompt": "def find_maximum(numbers): \"\"\"Given a list of integers, return either the maximum or minimum value in the list. If the list is empty, return None. Examples: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -5, -3]) -1 >>> find_maximum([]) None\"\"\"",
        "avg_similarity_score": 0.18964419126234988
    },
    {
        "prompt": "def count_occurrences(lst, target): \"\"\" Given a list of integers and a target integer, return the number of times the target appears in the list. If the target does not appear, return 0. Examples: count_occurrences([1, 2, 3, 4, 2], 2) == 2 count_occurrences([1, 1, 1, 1], 1) == 4 count_occurrences([], 5) == 0 \"\"\"",
        "bad_prompt": "def count_occurrences(lst, target): \"\"\" Given a list of integers and a target integer, return the number of occurrences or non-occurrences of the target in the list. If the target does not appear, return 0 or another value. Examples: count_occurrences([1, 2, 3, 4, 2], 2) == 2 count_occurrences([1, 1, 1, 1], 1) == 4 count_occurrences([], 5) == 0 \"\"\"",
        "avg_similarity_score": 0.19827822959197666
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\"Given an array of integers from 1 to n with one number missing, return the missing number. The input array will have no duplicates and will contain exactly n-1 numbers. For example: >>> find_missing_number([3, 7, 1, 2, 8, 4]) 5 >>> find_missing_number([1, 2, 4]) 3 >>> find_missing_number([5, 3, 1, 2]) 4 >>> find_missing_number([]) None \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\"Given an array of integers from 1 to n with a number possibly missing or duplicated, return the missing number or indicate if there are duplicates. The input array may not be sorted and can contain various elements. For example: >>> find_missing_number([3, 7, 1, 2, 8, 4]) 5 >>> find_missing_number([1, 2, 4]) 3 >>> find_missing_number([5, 3, 1, 2]) 4 >>> find_missing_number([]) None \"\"\"",
        "avg_similarity_score": 0.1678428446466565
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain no duplicates and is guaranteed to have at least one element. Examples: find_missing_number([3, 7, 1, 2, 8, 4, 5]) \u279e 6 find_missing_number([1, 2, 4]) \u279e 3 find_missing_number([5, 3, 1, 2]) \u279e 4 \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers that may or may not be complete, return a number that could be missing or present in the list. The input list might contain duplicates or none at all. Examples: candidate([3, 7, 1, 2, 8, 4, 5]) \u279e 6 candidate([1, 2, 4]) \u279e 3 candidate([5, 3, 1, 2]) \u279e 4 \"\"\"",
        "avg_similarity_score": 0.21881547361207107
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. Ignore case sensitivity. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters that could be vowels or consonants in the string. Ignore case sensitivity. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.15332989308865258
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) ''\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string or some default value. Example: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) ''\"\"\"",
        "avg_similarity_score": 0.16250168460055353
    },
    {
        "prompt": "def find_anagrams(word: str, words: list) -> list: \"\"\"Write a function that takes a string 'word' and a list of strings 'words'. The function should return a list of all the anagrams of 'word' found in 'words'. An anagram is a word formed by rearranging the letters of another. Example: >>> find_anagrams('listen', ['enlist', 'google', 'inlets', 'banana']) ['enlist', 'inlets'] >>> find_anagrams('rat', ['tar', 'art', 'car']) ['tar', 'art']\"\"\"",
        "bad_prompt": "def candidate(word: str, words: list) -> list: \"\"\"Write a function that takes a string 'word' and a list of strings 'words'. The function should return a list of all the related words or variations of 'word' found in 'words'. A related word can be any form or alteration of the original word. Example: >>> candidate('listen', ['enlist', 'google', 'inlets', 'banana']) ['enlist', 'inlets'] >>> candidate('rat', ['tar', 'art', 'car']) ['tar', 'art']\"\"\"",
        "avg_similarity_score": 0.16977150793982032
    },
    {
        "prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) \u279e 3 find_maximum([-1, -5, -3]) \u279e -1 find_maximum([]) \u279e None \"\"\"",
        "bad_prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return the maximum or minimum value in the list based on certain conditions. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) \u279e 3 find_maximum([-1, -5, -3]) \u279e -1 find_maximum([]) \u279e None \"\"\"",
        "avg_similarity_score": 0.18612410194882248
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. For example: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that are either vowels or consonants in the string. The function should be case insensitive. For example: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.16739962973902206
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Return a list containing the first n Fibonacci numbers. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] >>> fibonacci(0) [] \"\"\"",
        "bad_prompt": "def candidate(n: int) -> List[int]: \"\"\" Return a list containing some Fibonacci numbers based on the input n. The Fibonacci sequence can be defined in various ways, and your task is to return either the first n or last n Fibonacci numbers depending on certain conditions. For example: >>> candidate(5) [0, 1, 1, 2, 3] >>> candidate(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] >>> candidate(0) [] \"\"\"",
        "avg_similarity_score": 0.19561508602981054
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in it. The function should be case-insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters (like vowels or consonants) present in it. The function should be case-insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.15547472079942973
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain unique numbers only and is guaranteed to have at least one element. For example: find_missing_number([3, 7, 1, 2, 8, 4]) returns 5 find_missing_number([1, 2, 4]) returns 3 find_missing_number([5]) returns None (since there's no missing number in a single-element list) \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with some numbers possibly missing, return a number that might be missing or present. The input list may contain duplicates and is not guaranteed to have any specific elements. For example: find_missing_number([3, 7, 1, 2, 8, 4]) could return 5 or another number depending on conditions. find_missing_number([1, 2, 4]) could return 3 or any other number. find_missing_number([5]) could return None or any value. \"\"\"",
        "avg_similarity_score": 0.15728013944728123
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns some common part among them. If there is no common part, return an empty string or something else. For example: candidate(['flower', 'flow', 'flight']) might return 'fl' or another value. candidate(['dog', 'racecar', 'car']) might return '' or something different. \"\"\"",
        "avg_similarity_score": 0.14942157584248977
    },
    {
        "prompt": "def calculate_average(grades: list) -> float: \"\"\"Given a list of grades (integers), return the average of these grades rounded to two decimal places. If the list is empty, return 0. Examples: calculate_average([90, 80, 70]) should return 80.0; calculate_average([]) should return 0.\"\"\"",
        "bad_prompt": "def calculate_average(grades: list) -> float: \"\"\"Given a list of grades (integers), return the average or total of these grades rounded to two decimal places. If the list is empty, return 0 or None. Examples: calculate_average([90, 80, 70]) should return 80.0; calculate_average([]) should return 0.\"\"\"",
        "avg_similarity_score": 0.1469914708441253
    },
    {
        "prompt": "def count_primes(n: int) -> int: \"\"\" Given a positive integer n, return the number of prime numbers less than or equal to n. A prime number is defined as a natural number greater than 1 that cannot be formed by multiplying two smaller natural numbers. For example: count_primes(10) should return 4 (the primes are 2, 3, 5, and 7). count_primes(20) should return 8 (the primes are 2, 3, 5, 7, 11, 13, 17, and 19). \"\"\"",
        "bad_prompt": "def candidate(n: int) -> int: \"\"\" Given a positive integer n, return a certain count of numbers less than or equal to n based on some criteria. The criteria may include being prime or composite or any other condition. For example: candidate(10) could return 4 or another value depending on the chosen criteria. candidate(20) might return 8 or another value based on different conditions. \"\"\"",
        "avg_similarity_score": 0.15415589512525554
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Write a function that takes a string and returns a certain number related to vowels or consonants in it. The function should be case-sensitive or insensitive. For example: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('AEIOU') 5 >>> candidate('xyz') 0\"\"\"",
        "avg_similarity_score": 0.19704910540304038
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) -> 'fl' longest_common_prefix(['dog', 'racecar', 'car']) -> ''\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return any arbitrary string. Example: candidate(['flower', 'flow', 'flight']) -> 'fl' candidate(['dog', 'racecar', 'car']) -> ''\"\"\"",
        "avg_similarity_score": 0.1617424903407375
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given an array of integers from 1 to n with one number missing, return the missing number. The input array will have no duplicates and is guaranteed to contain at least one element. Example: find_missing_number([3, 7, 1, 2, 8, 4, 5]) returns 6 find_missing_number([1, 2, 4]) returns 3 \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given an array of integers from 1 to n with a certain number possibly missing or duplicated, return the missing number or another value. The input array may have duplicates and can be empty. Example: find_missing_number([3, 7, 1, 2, 8, 4, 5]) returns 6 or some other value find_missing_number([]) returns 0 or another value \"\"\"",
        "avg_similarity_score": 0.15589694605847218
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inters' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a common or unique prefix among them. If there is no such prefix, return an empty string. Examples: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' candidate(['interspecies', 'interstellar', 'interstate']) => 'inters' \"\"\"",
        "avg_similarity_score": 0.15635692577917604
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a certain common prefix among them or some other related result. If there is no common prefix, you may return an empty string or another value. Example: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "avg_similarity_score": 0.12440570733276246
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of certain characters present in the string. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.15489251256849806
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python') 1 >>> count_vowels('xyz') 0 >>> count_vowels('AEIOUaeiou') 10 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters (like vowels or consonants) in the string. The function should be case sensitive or insensitive based on some condition. Examples: >>> candidate('Hello World') 3 >>> candidate('Python') 1 >>> candidate('xyz') 0 >>> candidate('AEIOUaeiou') 10 \"\"\"",
        "avg_similarity_score": 0.19348504142340509
    },
    {
        "prompt": "def count_unique_words(text: str) -> int: \"\"\" Given a string of text, return the number of unique words in that text. Words are defined as sequences of characters separated by whitespace. Ignore case when counting unique words. Example: count_unique_words('Hello world hello') should return 2 because 'hello' and 'world' are the unique words regardless of their casing. \"\"\"",
        "bad_prompt": "def count_unique_words(text: str) -> int: \"\"\" Given a string of text, return the number of certain types of words in that text. Words can be defined in various ways based on different criteria. Example: count_unique_words('Hello world hello') should return 2 because it considers some specific aspects of the words present. \"\"\"",
        "avg_similarity_score": 0.13611997570943044
    },
    {
        "prompt": "def find_maximum(lst): \"\"\"Write a function that takes a list of integers and returns the maximum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) => 3 find_maximum([-1, -5, -3]) => -1 find_maximum([]) => None\"\"\"",
        "bad_prompt": "def find_maximum(lst): \"\"\"Write a function that takes a list of integers and returns a certain value from the list. If the list is empty, return None or some default value. Examples: find_maximum([1, 2, 3]) => 3 find_maximum([-1, -5, -3]) => -1 find_maximum([]) => None\"\"\"",
        "avg_similarity_score": 0.1903362975864967
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\"Given a list of integers, return a list of duplicate elements. The output should only include each duplicate once, regardless of how many times it appears in the input list. For example: >>> find_duplicates([1, 2, 3, 4, 5, 1, 2]) [1, 2] >>> find_duplicates([1, 1, 1, 2, 2, 3]) [1, 2] >>> find_duplicates([1, 2, 3]) []\"\"\"",
        "bad_prompt": "def find_duplicates(lst): \"\"\"Given a list of integers, return a list of elements that appear more than once or are unique. The output should include all duplicates and unique elements based on certain conditions. For example: >>> find_duplicates([1, 2, 3, 4, 5, 1, 2]) [1, 2] >>> find_duplicates([1, 1, 1, 2, 2, 3]) [1, 2] >>> find_duplicates([1, 2, 3]) []\"\"\"",
        "avg_similarity_score": 0.18496145015043622
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return a certain count related to vowels or consonants in the string. The function should be case insensitive. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.18967640043221315
    },
    {
        "prompt": "def longest_common_prefix(strs: list) -> str: \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) -> 'fl' longest_common_prefix(['dog', 'racecar', 'car']) -> '' \"\"\"",
        "bad_prompt": "def candidate(strs: list) -> str: \"\"\" Write a function that takes a list of strings and returns a prefix or suffix from them. If there is no such prefix or suffix, return an empty string. Examples: candidate(['flower', 'flow', 'flight']) -> 'fl' candidate(['dog', 'racecar', 'car']) -> '' \"\"\"",
        "avg_similarity_score": 0.16675741645571548
    },
    {
        "prompt": "def calculate_area(radius: float) -> float: \"\"\"Calculate the area of a circle given its radius. The formula for the area is A = \u03c0 * r^2, where r is the radius. Return the area rounded to two decimal places. Examples: calculate_area(5) => 78.54 calculate_area(10) => 314.16 calculate_area(0) => 0.00 \"\"\"",
        "bad_prompt": "def calculate_area(radius: float) -> float: \"\"\"Calculate some value related to a circle given its radius. The formula might involve \u03c0 and r in various ways. Return the result with or without rounding. Examples: calculate_area(5) => 78.54 calculate_area(10) => 314.16 calculate_area(0) => 0.00 \"\"\"",
        "avg_similarity_score": 0.11137329936847555
    },
    {
        "prompt": "def count_occurrences(lst: list, target): \"\"\" Count the number of occurrences of a specific element in a given list. The function should return an integer representing how many times the target appears in the list. Examples: >>> count_occurrences([1, 2, 3, 2, 1], 2) 2 >>> count_occurrences(['a', 'b', 'c', 'a'], 'a') 2 >>> count_occurrences([], 5) 0 \"\"\"",
        "bad_prompt": "def count_occurrences(lst: list, target): \"\"\" Count the number of occurrences of a certain element or elements in a given list. The function should return an integer representing how many times the target appears or doesn't appear in the list. Examples: >>> count_occurrences([1, 2, 3, 2, 1], 2) 2 >>> count_occurrences(['a', 'b', 'c', 'a'], 'a') 2 >>> count_occurrences([], 5) 0 \"\"\"",
        "avg_similarity_score": 0.17319093045215928
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 count_vowels('AEIOU') == 5\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s and returns a count related to vowels or consonants in it. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 count_vowels('AEIOU') == 5\"\"\"",
        "avg_similarity_score": 0.14983440363110248
    },
    {
        "prompt": "def find_longest_palindrome(s: str) -> str: \"\"\" Given a string s, return the longest palindromic substring. If there are multiple substrings of the same maximum length, return the first one found. A palindrome is a string that reads the same forwards and backwards. Examples: find_longest_palindrome('babad') => 'bab' or 'aba' find_longest_palindrome('cbbd') => 'bb' find_longest_palindrome('a') => 'a' find_longest_palindrome('ac') => 'a' \"\"\"",
        "bad_prompt": "def find_longest_palindrome(s: str) -> str: \"\"\" Given a string s, return either the longest or shortest palindromic substring. If there are multiple substrings of the same length, return any one of them. A palindrome is a string that reads the same forwards and backwards. Examples: find_longest_palindrome('babad') => 'bab' or 'aba' find_longest_palindrome('cbbd') => 'bb' find_longest_palindrome('a') => 'a' find_longest_palindrome('ac') => 'a' \"\"\"",
        "avg_similarity_score": 0.1331171851602276
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a prefix among them. The prefix can be common or unique. If there is no prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.13111032662910382
    },
    {
        "prompt": "def find_anagrams(word: str, words: List[str]) -> List[str]: \"\"\" Given a word and a list of words, return all the words from the list that are anagrams of the given word. An anagram is a word formed by rearranging the letters of another. For example: >>> find_anagrams('listen', ['enlist', 'google', 'inlets', 'banana']) ['enlist', 'inlets'] >>> find_anagrams('evil', ['vile', 'live', 'veil', 'lives']) ['vile', 'live', 'veil'] \"\"\"",
        "bad_prompt": "def candidate(word: str, words: List[str]) -> List[str]: \"\"\" Given a word and a list of words, return some or all words from the list that relate to the given word in some way. Examples could include synonyms, antonyms, or anagrams. For example: >>> candidate('listen', ['enlist', 'google', 'inlets', 'banana']) ['enlist', 'inlets'] >>> candidate('evil', ['vile', 'live', 'veil', 'lives']) ['vile', 'live', 'veil'] \"\"\"",
        "avg_similarity_score": 0.154227453218498
    },
    {
        "prompt": "def longest_substring_without_repeating(s: str) -> int: \"\"\" Given a string s, find the length of the longest substring without repeating characters. A substring is a contiguous sequence of characters within a string. For example: >>> longest_substring_without_repeating('abcabcbb') 3 >>> longest_substring_without_repeating('bbbbb') 1 >>> longest_substring_without_repeating('pwwkew') 3 \"\"\"",
        "bad_prompt": "def longest_substring_without_repeating(s: str) -> int: \"\"\" Given a string s, find the length of some substring that may or may not have repeating characters. A substring is a part of the string. For example: >>> longest_substring_without_repeating('abcabcbb') 3 >>> longest_substring_without_repeating('bbbbb') 1 >>> longest_substring_without_repeating('pwwkew') 3 \"\"\"",
        "avg_similarity_score": 0.14917162054545086
    },
    {
        "prompt": "def find_unique_numbers(lst): \"\"\" Given a list of integers, return a new list containing only the unique numbers from the original list in the order they first appeared. Examples: >>> find_unique_numbers([1, 2, 3, 2, 1]) [1, 2, 3] >>> find_unique_numbers([4, 5, 6, 4, 5]) [4, 5, 6] >>> find_unique_numbers([]) [] \"\"\"",
        "bad_prompt": "def find_unique_numbers(lst): \"\"\" Given a list of integers, return a new list containing some unique or repeated numbers from the original list in any order. Examples: >>> find_unique_numbers([1, 2, 3, 2, 1]) [1, 2, 3] >>> find_unique_numbers([4, 5, 6, 4, 5]) [4, 5, 6] >>> find_unique_numbers([]) [] \"\"\"",
        "avg_similarity_score": 0.17934590571360864
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. Count both uppercase and lowercase vowels. Examples: count_vowels('Hello World') \u279e 3 count_vowels('Python') \u279e 1 count_vowels('xyz') \u279e 0 count_vowels('AEIOUaeiou') \u279e 10 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. Count both uppercase and lowercase versions of these characters. Examples: count_vowels('Hello World') \u279e 3 count_vowels('Python') \u279e 1 count_vowels('xyz') \u279e 0 count_vowels('AEIOUaeiou') \u279e 10 \"\"\"",
        "avg_similarity_score": 0.1452240853939852
    },
    {
        "prompt": "def is_prime(n: int) -> bool: \"\"\" Determine if a given number n is prime. A prime number is greater than 1 and has no positive divisors other than 1 and itself. Examples: is_prime(2) \u279e True is_prime(4) \u279e False is_prime(13) \u279e True \"\"\"",
        "bad_prompt": "def candidate(n: int) -> bool: \"\"\" Determine if a given number n meets certain conditions (such as being prime or composite). Examples: candidate(2) \u279e True candidate(4) \u279e False candidate(13) \u279e True \"\"\"",
        "avg_similarity_score": 0.1625747642661469
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "avg_similarity_score": 0.15548345105347094
    },
    {
        "prompt": "def count_vowels(s): \"\"\"Write a function that takes a string s as input and returns the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. For example: count_vowels('Hello World') should return 3. count_vowels('Python programming') should return 4.\"\"\"",
        "bad_prompt": "def candidate(s): \"\"\"Write a function that takes a string s as input and returns the number of certain characters in it. The function should be case-sensitive or insensitive depending on some condition. For example: candidate('Hello World') could return different values based on criteria. candidate('Python programming') might also yield various results.\"\"\"",
        "avg_similarity_score": 0.16202321805023645
    },
    {
        "prompt": "def fibonacci(n): \"\"\" Given a non-negative integer n, return the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: fibonacci(5) returns 5 because the sequence is 0, 1, 1, 2, 3, 5. Examples: fibonacci(0) == 0, fibonacci(1) == 1, fibonacci(6) == 8. \"\"\"",
        "bad_prompt": "def fibonacci(n): \"\"\" Given a non-negative integer n, return the nth or mth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: fibonacci(5) returns 5 because the sequence can be interpreted in multiple ways. Examples: fibonacci(0) == 0, fibonacci(1) == 1, fibonacci(6) could also equal something else depending on interpretation. \"\"\"",
        "avg_similarity_score": 0.14315547806584786
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\"Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: fibonacci(5) returns [0, 1, 1, 2, 3, 5] fibonacci(0) returns [0] fibonacci(1) returns [0, 1]\"\"\"",
        "bad_prompt": "def candidate(n: int) -> List[int]: \"\"\"Generate a list containing a certain type of sequence up to the nth number. The sequence is defined in some manner that may involve addition or other operations. For example: candidate(5) returns [0, 1, 1, 2, 3, 5] candidate(0) returns [0] candidate(1) returns [0, 1]\"\"\"",
        "avg_similarity_score": 0.20482637064971815
    },
    {
        "prompt": "def find_maximum(arr): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -5, -3]) -1 >>> find_maximum([]) None \"\"\"",
        "bad_prompt": "def find_maximum(arr): \"\"\" Given a list of integers, return the maximum or minimum value in the list. If the list is empty, return None. Examples: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -5, -3]) -1 >>> find_maximum([]) None \"\"\"",
        "avg_similarity_score": 0.1909728777537211
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. For example: count_vowels('Hello World') should return 3. count_vowels('Python Programming') should return 4. count_vowels('xyz') should return 0.\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of characters or vowels in it. The function should be case insensitive. For example: candidate('Hello World') should return 3. candidate('Python Programming') should return 4. candidate('xyz') should return 0.\"\"\"",
        "avg_similarity_score": 0.1973939347285338
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python') == 1 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of certain characters in it. These characters could be vowels or consonants or any other letters based on some condition. For example: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python') == 1 >>> count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.15525885730699568
    },
    {
        "prompt": "def longest_common_prefix(strs: list) -> str: \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def candidate(strs: list) -> str: \"\"\" Given a list of strings, find a common prefix or suffix among them. If there is no such prefix or suffix, return an empty string. For example: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.15899117468353605
    },
    {
        "prompt": "def longest_substring_without_repeating(s: str) -> int: \"\"\" Given a string s, return the length of the longest substring without repeating characters. For example: >>> longest_substring_without_repeating('abcabcbb') 3 >>> longest_substring_without_repeating('bbbbb') 1 >>> longest_substring_without_repeating('pwwkew') 3 >>> longest_substring_without_repeating('') 0 \"\"\"",
        "bad_prompt": "def longest_substring_without_repeating(s: str) -> int: \"\"\" Given a string s, return the length of a certain substring with or without repeating characters. For example: >>> longest_substring_without_repeating('abcabcbb') 3 >>> longest_substring_without_repeating('bbbbb') 1 >>> longest_substring_without_repeating('pwwkew') 3 >>> longest_substring_without_repeating('') 0 \"\"\"",
        "avg_similarity_score": 0.14299861338827335
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Write a function that takes a string s and returns the count of certain characters in it. The function should be case insensitive. Examples: candidate('Hello World') == 3 candidate('Python') == 1 candidate('AEIOU') == 5 candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.1998915994700955
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will have no duplicates and will contain exactly n-1 numbers. Example: find_missing_number([3, 7, 1, 2, 8]) should return 4. find_missing_number([1, 2, 3, 5]) should return 4. \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers that may or may not include all numbers from 1 to n, return a number that is missing or present in some cases. The input list could have duplicates or be incomplete. Example: candidate([3, 7, 1, 2, 8]) might return 4 or another number depending on certain conditions. candidate([1, 2, 3, 5]) might return 4 or any other relevant number. \"\"\"",
        "avg_similarity_score": 0.1916979394952535
    },
    {
        "prompt": "def count_primes_in_range(start: int, end: int) -> int: \"\"\" Given a range defined by two integers start and end (inclusive), return the count of prime numbers within that range. A prime number is a natural number greater than 1 that cannot be formed by multiplying two smaller natural numbers. Examples: >>> count_primes_in_range(10, 20) 4 # (11, 13, 17, 19) >>> count_primes_in_range(1, 5) 3 # (2, 3, 5) >>> count_primes_in_range(0, 1) 0 \"\"\"",
        "bad_prompt": "def count_primes_in_range(start: int, end: int) -> int: \"\"\" Given a range defined by two integers start and end (inclusive), return the count of certain types of numbers within that range. These could include prime numbers or other specific categories. Examples: >>> count_primes_in_range(10, 20) 4 # (11, 13, 17, 19) >>> count_primes_in_range(1, 5) 3 # (2, 3, 5) >>> count_primes_in_range(0, 1) 0 \"\"\"",
        "avg_similarity_score": 0.1492371821753309
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. Ignore case sensitivity. For example: count_vowels('Hello World') should return 3 and count_vowels('Python') should return 1. \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. The characters can be vowels or consonants or any other letters based on some condition. For example: candidate('Hello World') should return 3 and candidate('Python') should return 1. \"\"\"",
        "avg_similarity_score": 0.1873221257786919
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Return an empty list if n is less than or equal to 0. Examples: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(0) [] >>> fibonacci(1) [0] \"\"\"",
        "bad_prompt": "def candidate(n: int) -> List[int]: \"\"\" Generate a list containing numbers based on some sequence up to the nth number. The sequence can be defined in various ways. Return an empty list if n is less than or equal to 0. Examples: >>> candidate(5) [0, 1, 1, 2, 3] >>> candidate(0) [] >>> candidate(1) [0] \"\"\"",
        "avg_similarity_score": 0.19393236288564314
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of characters that are either vowels or consonants in it. The function should be case-insensitive. Examples: >>> candidate('Hello World') 10 >>> candidate('Python Programming') 12 >>> candidate('xyz') 3 \"\"\"",
        "avg_similarity_score": 0.18471658882806632
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def candidate(n: int) -> List[int]: \"\"\" Generate a list containing numbers based on some sequence up to the nth number. The sequence is defined in various ways. For example: >>> candidate(5) [0, 1, 1, 2, 3] >>> candidate(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.19656436566775481
    },
    {
        "prompt": "def is_palindrome(s: str) -> bool: \"\"\"Check if the given string s is a palindrome. A palindrome reads the same backward as forward, ignoring spaces, punctuation, and capitalization. Return True if it is a palindrome, otherwise return False. Examples: is_palindrome('A man, a plan, a canal, Panama') => True is_palindrome('Hello World') => False is_palindrome('No lemon, no melon') => True \"\"\"",
        "bad_prompt": "def is_palindrome(s: str) -> bool: \"\"\"Check if the given string s is a palindrome or not. A palindrome can be defined in various ways depending on context. Return True if it meets some criteria of being a palindrome, otherwise return False. Examples: is_palindrome('A man, a plan, a canal, Panama') => True is_palindrome('Hello World') => False is_palindrome('No lemon, no melon') => True \"\"\"",
        "avg_similarity_score": 0.11964697579511503
    },
    {
        "prompt": "def count_vowels(text: str) -> int: \"\"\" Given a string, return the number of vowels (a, e, i, o, u) in it. Case should be ignored. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "bad_prompt": "def candidate(text: str) -> int: \"\"\" Given a string, return the number of certain characters in it. The characters could be vowels or consonants. For example: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('AEIOU') 5 \"\"\"",
        "avg_similarity_score": 0.2004385503672369
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. Ignore case sensitivity. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s and returns the number of certain characters in it. Ignore case sensitivity. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5\"\"\"",
        "avg_similarity_score": 0.15387034987951778
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that may or may not include vowels in it. The function should consider various cases. Examples: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.1550409731029863
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a string 'sentence', return a new string where the order of words is reversed. Words are defined as sequences of characters separated by spaces. For example: reverse_words('Hello World') should return 'World Hello'. If the input string is empty, return an empty string. Examples: reverse_words('Python is fun') returns 'fun is Python' reverse_words('') returns '' \"\"\"",
        "bad_prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a string 'sentence', return a new string where the order of words or characters is reversed. Words are defined as sequences of characters separated by spaces. For example: reverse_words('Hello World') could return 'World Hello' or 'olleH dlroW'. If the input string is empty, return an empty string. Examples: reverse_words('Python is fun') might return 'fun is Python' or 'nuf si nohtyP' reverse_words('') returns '' \"\"\"",
        "avg_similarity_score": 0.12865606296908366
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python') 1 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. The function should be case sensitive or insensitive based on some condition. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python') 1 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.15956886835395445
    },
    {
        "prompt": "def count_occurrences(string: str, substring: str) -> int: \"\"\" Count how many times a given substring appears in the original string. This should include overlapping occurrences. Examples: >>> count_occurrences('ababab', 'aba') 2 >>> count_occurrences('hello world', 'o') 2 >>> count_occurrences('aaaaaa', 'aa') 5 \"\"\"",
        "bad_prompt": "def candidate(string: str, substring: str) -> int: \"\"\" Count how many times a certain pattern can be found in the original string. This may or may not include overlapping cases. Examples: >>> candidate('ababab', 'aba') 2 >>> candidate('hello world', 'o') 2 >>> candidate('aaaaaa', 'aa') 5 \"\"\"",
        "avg_similarity_score": 0.15350895881505075
    },
    {
        "prompt": "def fibonacci(n: int) -> int: \"\"\" Return the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: >>> fibonacci(0) 0 >>> fibonacci(1) 1 >>> fibonacci(5) 5 >>> fibonacci(10) 55 \"\"\"",
        "bad_prompt": "def candidate(n: int) -> int: \"\"\" Return a certain value based on the input integer n. This could be related to Fibonacci or another series. Examples: >>> candidate(0) 0 >>> candidate(1) 1 >>> candidate(5) 5 >>> candidate(10) 55 \"\"\"",
        "avg_similarity_score": 0.17388368853430683
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list is guaranteed to have no duplicates and will always contain numbers in the range [1, n]. Example: find_missing_number([3, 7, 1, 2, 8, 4]) => 5 find_missing_number([1, 2, 4]) => 3 find_missing_number([1]) => None \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers, determine if there is a missing or extra number within it. The input list may contain duplicates and can include any integer values. Example: candidate([3, 7, 1, 2, 8, 4]) => 5 candidate([1, 2, 4]) => 3 candidate([1]) => None \"\"\"",
        "avg_similarity_score": 0.21213447232411567
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) returns 'fl' longest_common_prefix(['dog', 'racecar', 'car']) returns '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns either the longest common prefix or some other form of prefix among them. If there is no common prefix, return an empty string or something else. For example: longest_common_prefix(['flower', 'flow', 'flight']) returns 'fl' longest_common_prefix(['dog', 'racecar', 'car']) returns '' \"\"\"",
        "avg_similarity_score": 0.13006366517260953
    },
    {
        "prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) \u279e 3 find_maximum([-1, -5, -3]) \u279e -1 find_maximum([]) \u279e None \"\"\"",
        "bad_prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return a certain value from the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) \u279e 3 find_maximum([-1, -5, -3]) \u279e -1 find_maximum([]) \u279e None \"\"\"",
        "avg_similarity_score": 0.18794780876252876
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python') == 1 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. The function should be case sensitive or insensitive depending on some condition. Examples: >>> candidate('Hello World') == 3 >>> candidate('Python') == 1 >>> candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.19371104563010857
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Example: count_vowels('Hello World') == 3 Example: count_vowels('Python') == 1 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters or vowels in it. The function should be case insensitive. Example: count_vowels('Hello World') == 3 Example: count_vowels('Python') == 1 \"\"\"",
        "avg_similarity_score": 0.16423510592096294
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in it. Vowels can be both uppercase and lowercase. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Given a string s, return the number of certain characters in it. These characters could be vowels or consonants depending on some condition. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0\"\"\"",
        "avg_similarity_score": 0.1793923942333821
    },
    {
        "prompt": "def count_occurrences(lst, target): \"\"\"Given a list of integers and a target integer, return the number of times the target occurs in the list. If the list is empty, return 0. Examples: count_occurrences([1, 2, 3, 4, 2], 2) => 2 count_occurrences([1, 1, 1, 1], 1) => 4 count_occurrences([], 5) => 0\"\"\"",
        "bad_prompt": "def candidate(lst, target): \"\"\"Given a list of integers and a target integer, return some information about how many times the target appears or does not appear in the list. If the list is empty, return something related to the target. Examples: candidate([1, 2, 3, 4, 2], 2) => 2 candidate([1, 1, 1, 1], 1) => 4 candidate([], 5) => 0\"\"\"",
        "avg_similarity_score": 0.2138053525461695
    },
    {
        "prompt": "def fibonacci(n): \"\"\"Return the n-th Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: fibonacci(0) == 0, fibonacci(1) == 1, fibonacci(5) == 5, fibonacci(10) == 55.\"\"\"",
        "bad_prompt": "def fibonacci(n): \"\"\"Return the n-th Fibonacci number or some other related value. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: fibonacci(0) == 0, fibonacci(1) == 1, fibonacci(5) == 5, fibonacci(10) == 55.\"\"\"",
        "avg_similarity_score": 0.13699601761838665
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string. Examples: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => ''\"\"\"",
        "avg_similarity_score": 0.16167988702136166
    },
    {
        "prompt": "def find_missing_number(arr: list) -> int: \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. Assume that there is exactly one number missing and the input list contains no duplicates. Example: find_missing_number([3, 7, 1, 2, 8, 4]) returns 5 find_missing_number([1, 2, 4, 6, 3, 7, 8]) returns 5 find_missing_number([1]) returns 2 \"\"\"",
        "bad_prompt": "def candidate(arr: list) -> int: \"\"\" Given a list of integers from 1 to n with one or more numbers possibly missing, return a number related to the missing elements. The input list may contain duplicates. Example: candidate([3, 7, 1, 2, 8, 4]) might return 5 candidate([1, 2, 4, 6, 3, 7, 8]) could return 5 candidate([1]) might return 2 \"\"\"",
        "avg_similarity_score": 0.20683915428898844
    },
    {
        "prompt": "def count_occurrences(lst: list, target: int) -> int: \"\"\" Given a list of integers and a target integer, return the number of times the target appears in the list. If the list is empty, return 0. Examples: count_occurrences([1, 2, 3, 4, 2], 2) => 2 count_occurrences([], 5) => 0 count_occurrences([5, 5, 5], 5) => 3 \"\"\"",
        "bad_prompt": "def count_occurrences(lst: list, target: int) -> int: \"\"\" Given a list of integers and a target integer, return the number of occurrences or non-occurrences of the target in the list. If the list is empty, return a default value. Examples: count_occurrences([1, 2, 3, 4, 2], 2) => 2 count_occurrences([], 5) => 0 count_occurrences([5, 5, 5], 5) => 3 \"\"\"",
        "avg_similarity_score": 0.20102500144112287
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Write a function that checks if two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Examples: >>> is_anagram('listen', 'silent') True >>> is_anagram('hello', 'world') False >>> is_anagram('evil', 'vile') True \"\"\"",
        "bad_prompt": "def candidate(str1: str, str2: str) -> bool: \"\"\" Write a function that checks if two strings have similar characteristics. The criteria for similarity can vary and may include factors such as length, letter arrangement, or others. Examples: >>> candidate('listen', 'silent') True >>> candidate('hello', 'world') False >>> candidate('evil', 'vile') True \"\"\"",
        "avg_similarity_score": 0.1367858594998753
    },
    {
        "prompt": "def longest_increasing_subsequence(nums): \"\"\" Given a list of integers, return the length of the longest increasing subsequence. A subsequence is derived from another sequence by deleting some elements without changing the order of the remaining elements. For example: longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) == 4 (the longest increasing subsequence is [2, 3, 7, 101]). Examples: longest_increasing_subsequence([0, 1, 0, 3, 2, 3]) == 4 longest_increasing_subsequence([7, 7, 7, 7, 7]) == 1 \"\"\"",
        "bad_prompt": "def candidate(nums): \"\"\" Given a list of integers, return the length of a certain subsequence that may or may not be increasing. A subsequence can be formed by deleting some elements without changing the order of the remaining elements. For example: candidate([10, 9, 2, 5, 3, 7, 101, 18]) could return any number based on specific conditions. Examples: candidate([0, 1, 0, 3, 2, 3]) could yield different results depending on interpretation. candidate([7, 7, 7, 7, 7]) might also vary in output. \"\"\"",
        "avg_similarity_score": 0.1729276556989142
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\"Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Example: fibonacci(5) returns [0, 1, 1, 2, 3]\"\"\"",
        "bad_prompt": "def candidate(n: int) -> List[int]: \"\"\"Generate a list containing numbers based on some pattern up to the nth number. The pattern can be related to Fibonacci or another series. Example: candidate(5) returns [0, 1, 1, 2, 3]\"\"\"",
        "avg_similarity_score": 0.18123849992431018
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inters' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns some kind of common substring among them. If there is no such substring, return an arbitrary string. Examples: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' candidate(['interspecies', 'interstellar', 'interstate']) => 'inters' \"\"\"",
        "avg_similarity_score": 0.15051460248194753
    },
    {
        "prompt": "def count_occurrences(lst: list, target): \"\"\" Given a list and a target value, return the number of times the target appears in the list. If the list is empty, return 0. Examples: count_occurrences([1, 2, 3, 4, 2], 2) == 2 count_occurrences(['a', 'b', 'a', 'c'], 'a') == 2 count_occurrences([], 5) == 0 \"\"\"",
        "bad_prompt": "def candidate(lst: list, target): \"\"\" Given a list and a target value, return some occurrences of the target in the list or something else related to it. If the list is empty, return 0 or another default value. Examples: candidate([1, 2, 3, 4, 2], 2) == 2 candidate(['a', 'b', 'a', 'c'], 'a') == 2 candidate([], 5) == 0 \"\"\"",
        "avg_similarity_score": 0.21390915987748663
    },
    {
        "prompt": "def fibonacci(n): \"\"\"Return the n-th Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: fibonacci(0) => 0, fibonacci(1) => 1, fibonacci(5) => 5, fibonacci(10) => 55.\"\"\"",
        "bad_prompt": "def fibonacci(n): \"\"\"Return the n-th Fibonacci number or some other number in a certain sequence. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: fibonacci(0) => 0, fibonacci(1) => 1, fibonacci(5) => 5, fibonacci(10) => 55.\"\"\"",
        "avg_similarity_score": 0.14554600161094897
    },
    {
        "prompt": "def longest_substring(s: str) -> str: \"\"\" Given a string s, find the longest substring without repeating characters. If there are multiple substrings of the same maximum length, return the first one encountered. For example: longest_substring('abcabcbb') == 'abc' longest_substring('bbbbb') == 'b' longest_substring('pwwkew') == 'wke' \"\"\"",
        "bad_prompt": "def longest_substring(s: str) -> str: \"\"\" Given a string s, find a substring that may or may not have repeating characters. If there are multiple substrings with varying lengths, return any one of them. For example: longest_substring('abcabcbb') == 'abc' longest_substring('bbbbb') == 'b' longest_substring('pwwkew') == 'wke' \"\"\"",
        "avg_similarity_score": 0.11532645946360986
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of duplicate integers found in the input list. The output should contain each duplicate integer only once and be sorted in ascending order. Examples: find_duplicates([1, 2, 3, 4, 5, 1, 2]) => [1, 2] find_duplicates([5, 5, 6, 7, 8, 9, 10, 10]) => [5, 10] find_duplicates([]) => [] \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return a list of certain integers that may or may not be duplicates found in the input list. The output could include unique integers or some other form of representation based on the contents of the list. Examples: candidate([1, 2, 3, 4, 5, 1, 2]) => [1, 2] candidate([5, 5, 6, 7, 8, 9, 10, 10]) => [5, 10] candidate([]) => [] \"\"\"",
        "avg_similarity_score": 0.2125486816197085
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: count_vowels('Hello World') \u279e 3 count_vowels('Python Programming') \u279e 4 count_vowels('xyz') \u279e 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in the string. The function should be case sensitive or insensitive depending on some condition. Examples: candidate('Hello World') \u279e 3 candidate('Python Programming') \u279e 4 candidate('xyz') \u279e 0 \"\"\"",
        "avg_similarity_score": 0.19258956977294456
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: >>> count_vowels('hello') 2 >>> count_vowels('HELLO') 2 >>> count_vowels('xyz') 0 >>> count_vowels('aeiouAEIOU') 10 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters or vowels in it. The function should be case insensitive. Examples: >>> count_vowels('hello') 2 >>> count_vowels('HELLO') 2 >>> count_vowels('xyz') 0 >>> count_vowels('aeiouAEIOU') 10 \"\"\"",
        "avg_similarity_score": 0.1559490291258022
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of characters or vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.16816731066849408
    },
    {
        "prompt": "def longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same maximum length, return the first one found. Examples: >>> longest_substring('abcabcbb') 'abc' >>> longest_substring('bbbbb') 'b' >>> longest_substring('pwwkew') 'wke' >>> longest_substring('') '' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a substring that may or may not contain repeating characters. If there are multiple substrings with varying lengths, return any one of them. Examples: >>> candidate('abcabcbb') 'abc' >>> candidate('bbbbb') 'b' >>> candidate('pwwkew') 'pw' >>> candidate('') '' \"\"\"",
        "avg_similarity_score": 0.15507066594650082
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in the string. Vowels can be both uppercase and lowercase. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python') 1 >>> count_vowels('xyz') 0 >>> count_vowels('AEIOUaeiou') 10\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of certain characters in the string. These characters can be either vowels or consonants. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python') 1 >>> count_vowels('xyz') 0 >>> count_vowels('AEIOUaeiou') 10\"\"\"",
        "avg_similarity_score": 0.15383558213994467
    },
    {
        "prompt": "def count_vowels(text: str) -> int: \"\"\" Given a string 'text', return the number of vowels (a, e, i, o, u) in it. Ignore case and consider both uppercase and lowercase vowels. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(text: str) -> int: \"\"\" Given a string 'text', return the number of certain characters (vowels or consonants) in it. Ignore case and consider both uppercase and lowercase letters. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.14260063803516976
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('AEIOU') == 5\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of characters or vowels in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('AEIOU') == 5\"\"\"",
        "avg_similarity_score": 0.16551140119072671
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Example: >>> fibonacci(5) [0, 1, 1, 2, 3, 5] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] \"\"\"",
        "bad_prompt": "def candidate(n: int) -> List[int]: \"\"\" Generate a list containing certain numbers up to the nth position based on some criteria. The criteria are not clearly defined but could relate to sequences or patterns. Example: >>> candidate(5) [0, 1, 1, 2, 3, 5] >>> candidate(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] \"\"\"",
        "avg_similarity_score": 0.1837596739159383
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters that are either vowels or consonants present in the string. The function should be case-insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 \"\"\"",
        "avg_similarity_score": 0.15973254847594723
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inter' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Given a list of strings, find a certain type of common prefix among them. If there is no such prefix, return an empty string. Examples: >>> candidate(['flower', 'flow', 'flight']) == 'fl' >>> candidate(['dog', 'racecar', 'car']) == '' >>> candidate(['interspecies', 'interstellar', 'interstate']) == 'inter' \"\"\"",
        "avg_similarity_score": 0.1467029099059756
    },
    {
        "prompt": "def count_even_numbers(lst): \"\"\"Given a list of integers, return the count of even numbers in the list. For example: count_even_numbers([1, 2, 3, 4]) should return 2. count_even_numbers([5, 7, 9]) should return 0.\"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\"Given a list of integers, return the count of certain numbers in the list. For example: candidate([1, 2, 3, 4]) should return 2. candidate([5, 7, 9]) should return 0.\"\"\"",
        "avg_similarity_score": 0.22783329814902326
    },
    {
        "prompt": "def count_vowels(text: str) -> int: \"\"\" Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 count_vowels('AEIOUaeiou') == 10 \"\"\"",
        "bad_prompt": "def candidate(text: str) -> int: \"\"\" Write a function that takes a string and returns the number of certain characters in it. The function may or may not be case sensitive. Examples: candidate('Hello World') == 3 candidate('Python Programming') == 4 candidate('xyz') == 0 candidate('AEIOUaeiou') == 10 \"\"\"",
        "avg_similarity_score": 0.19537221630609675
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in the string. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.15652415669678285
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. longest_common_prefix(['a', 'a', 'a']) should return 'a'. \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string or some default value. Examples: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl' or '' depending on certain conditions. longest_common_prefix(['dog', 'racecar', 'car']) should return '' or 'd'. longest_common_prefix(['a', 'a', 'a']) should return 'a' or some other character. \"\"\"",
        "avg_similarity_score": 0.11956646778094156
    },
    {
        "prompt": "def count_words(sentence: str) -> int: \"\"\" Given a string representing a sentence, return the number of words in that sentence. Words are defined as sequences of characters separated by spaces. Examples: >>> count_words('Hello world') == 2 >>> count_words('This is a test.') == 4 >>> count_words('   Leading and trailing spaces   ') == 5 \"\"\"",
        "bad_prompt": "def count_words(sentence: str) -> int: \"\"\" Given a string representing a sentence, return the number of elements in that sentence. Elements can be words or other types of segments depending on certain conditions. Examples: >>> count_words('Hello world') == 2 >>> count_words('This is a test.') == 4 >>> count_words('   Leading and trailing spaces   ') == 5 \"\"\"",
        "avg_similarity_score": 0.15215952111938705
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain prefix or suffix among them. If there is no such prefix or suffix, return an empty string. Example: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.16542021453207373
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters in the string that may or may not include vowels. The function should be case insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.15908450752220166
    },
    {
        "prompt": "def count_words(s): \"\"\" Write a function that takes a string s and returns the number of words in it. A word is defined as a sequence of characters separated by spaces. Examples: count_words('Hello world') should return 2. count_words('This is a test.') should return 4. count_words('   Leading and trailing spaces   ') should return 5. count_words('') should return 0. \"\"\"",
        "bad_prompt": "def candidate(s): \"\"\" Write a function that takes a string s and returns some kind of count related to the words or characters in it. Examples: candidate('Hello world') should return 2. candidate('This is a test.') should return 4. candidate('   Leading and trailing spaces   ') should return 5. candidate('') should return 0. \"\"\"",
        "avg_similarity_score": 0.18535563983799416
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Check if two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Example: is_anagram('listen', 'silent') == True is_anagram('hello', 'world') == False \"\"\"",
        "bad_prompt": "def candidate(str1: str, str2: str) -> bool: \"\"\" Check if two strings have some relation to each other. This could mean they are similar in length, contain common characters, or meet another specific condition. Example: candidate('listen', 'silent') == True candidate('hello', 'world') == False \"\"\"",
        "avg_similarity_score": 0.11344636143469738
    },
    {
        "prompt": "def count_even_numbers(lst): \"\"\" Given a list of integers, return the count of all even numbers in the list. Examples: count_even_numbers([1, 2, 3, 4]) => 2 count_even_numbers([5, 7, 9]) => 0 count_even_numbers([]) => 0 \"\"\"",
        "bad_prompt": "def count_even_numbers(lst): \"\"\" Given a list of integers, return the count of certain numbers in the list. Examples: count_even_numbers([1, 2, 3, 4]) => 2 count_even_numbers([5, 7, 9]) => 0 count_even_numbers([]) => 0 \"\"\"",
        "avg_similarity_score": 0.18569827636226355
    },
    {
        "prompt": "def count_even_numbers(lst): \"\"\" Given a list of integers, return the count of even numbers in the list. For example: >>> count_even_numbers([1, 2, 3, 4]) == 2 >>> count_even_numbers([5, 7, 9]) == 0 >>> count_even_numbers([-2, -4, 6]) == 3 \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return the count of certain numbers in the list. For example: >>> candidate([1, 2, 3, 4]) == 2 >>> candidate([5, 7, 9]) == 0 >>> candidate([-2, -4, 6]) == 3 \"\"\"",
        "avg_similarity_score": 0.2418724622259179
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. The function may or may not be case-sensitive. Examples: candidate('Hello World') => 3 candidate('Python Programming') => 4 candidate('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.19376371327089087
    },
    {
        "prompt": "def find_missing_number(nums: List[int]) -> int: \"\"\" Given a list of integers from 0 to n, where one number is missing, return the missing number. Assume that there are no duplicates in the list. Examples: find_missing_number([3, 0, 1]) should return 2. find_missing_number([0, 1]) should return 2. find_missing_number([9,6,4,2,3,5]) should return 7. \"\"\"",
        "bad_prompt": "def candidate(nums: List[int]) -> int: \"\"\" Given a list of integers from 0 to n or other numbers, where one number might be missing, return the missing number or any number that could be present. Assume that there may be duplicates in the list. Examples: candidate([3, 0, 1]) should return 2. candidate([0, 1]) should return 2. candidate([9,6,4,2,3,5]) should return 7. \"\"\"",
        "avg_similarity_score": 0.2001684772207695
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python') => 1 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of characters in it based on certain conditions related to vowels. Examples: count_vowels('Hello World') => 3 count_vowels('Python') => 1 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.15387137030435666
    },
    {
        "prompt": "def count_consonants(s): \"\"\" Given a string s, return the number of consonants in the string. Consonants are all letters that are not vowels (a, e, i, o, u). For example: count_consonants('Hello World') returns 7 count_consonants('abc') returns 1 count_consonants('AEIOU') returns 0 \"\"\"",
        "bad_prompt": "def count_consonants(s): \"\"\" Given a string s, return the number of characters or consonants in the string. Characters can include any type of letter or symbol. For example: count_consonants('Hello World') returns 7 count_consonants('abc') returns 1 count_consonants('AEIOU') returns 0 \"\"\"",
        "avg_similarity_score": 0.1552790801953349
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the total number of vowels in that string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Examples: >>> count_vowels('hello') 2 >>> count_vowels('HELLO') 2 >>> count_vowels('xyz') 0 >>> count_vowels('aeiou') 5\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the total number of characters or vowels in that string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Examples: >>> count_vowels('hello') 2 >>> count_vowels('HELLO') 2 >>> count_vowels('xyz') 0 >>> count_vowels('aeiou') 5\"\"\"",
        "avg_similarity_score": 0.15782635906453807
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same length, return the first one found. Examples: >>> find_longest_substring('abcabcbb') 'abc' >>> find_longest_substring('bbbbb') 'b' >>> find_longest_substring('pwwkew') 'wke' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a substring that may or may not have repeating characters. If there are multiple such substrings, return any one of them. Examples: >>> candidate('abcabcbb') 'abc' >>> candidate('bbbbb') 'b' >>> candidate('pwwkew') 'pw' \"\"\"",
        "avg_similarity_score": 0.15686076171112068
    },
    {
        "prompt": "def calculate_area(radius: float) -> float: \"\"\" Given the radius of a circle, return its area. The formula for the area of a circle is A = \u03c0 * r^2 where r is the radius. Use 3.14 as the value of \u03c0. Examples: calculate_area(1) == 3.14 calculate_area(2) == 12.56 calculate_area(0) == 0.0 \"\"\"",
        "bad_prompt": "def calculate_area(radius: float) -> float: \"\"\" Given the radius of a circle or any shape, return some calculated area. The formula might involve various constants and factors. Examples: calculate_area(1) == 3.14 calculate_area(2) == 12.56 calculate_area(0) == 0.0 \"\"\"",
        "avg_similarity_score": 0.131866336815607
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inters' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns either the longest or shortest common prefix among them. If there is no common prefix, return an empty string or some default value. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inters' \"\"\"",
        "avg_similarity_score": 0.1176302000008266
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of characters or vowels in it. The function should be case-sensitive or insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 \"\"\"",
        "avg_similarity_score": 0.16873110680581957
    },
    {
        "prompt": "def count_vowels(text: str) -> int: \"\"\" Given a string, return the total number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(text: str) -> int: \"\"\" Given a string, return the total number of characters or vowels in it. The function should be case insensitive. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('AEIOU') 5 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.19799488858672903
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in it. Vowels can be both uppercase and lowercase. Examples: count_vowels('Hello World') should return 3. count_vowels('Python programming') should return 4. \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the total number of certain characters in it. Examples: candidate('Hello World') should return 3. candidate('Python programming') should return 4. \"\"\"",
        "avg_similarity_score": 0.1823000067177921
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain unique numbers only. Example: find_missing_number([3, 7, 1, 2, 8, 4, 5]) => 6 find_missing_number([1, 2, 4]) => 3 find_missing_number([5, 3, 2, 1]) => 4 Constraints: 1 <= len(arr) <= 1000 and all elements are in the range [1, n]. \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers that may or may not be complete, return a certain number based on the values present. The input list might contain duplicates or unique numbers. Example: candidate([3, 7, 1, 2, 8, 4, 5]) => 6 candidate([1, 2, 4]) => 3 candidate([5, 3, 2, 1]) => 4 Constraints: 1 <= len(arr) <= 1000 and elements can vary widely. \"\"\"",
        "avg_similarity_score": 0.20529752812809954
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. For example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return a certain number related to vowels (like counting or identifying them). The function might consider various cases and conditions. For example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.14306182292403521
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. For example: count_vowels('Hello World') returns 3 count_vowels('Python') returns 1 count_vowels('xyz') returns 0.\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of characters that are either vowels or consonants in the string. The function should consider both uppercase and lowercase letters. For example: count_vowels('Hello World') returns 3 count_vowels('Python') returns 1 count_vowels('xyz') returns 0.\"\"\"",
        "avg_similarity_score": 0.16169920381582525
    },
    {
        "prompt": "def longest_increasing_subsequence(nums): \"\"\" Given a list of integers, return the length of the longest increasing subsequence. An increasing subsequence is defined as a sequence where each element is greater than the previous one. For example: >>> longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) == 4 >>> longest_increasing_subsequence([0, 1, 0, 3, 2, 3]) == 4 >>> longest_increasing_subsequence([]) == 0 \"\"\"",
        "bad_prompt": "def candidate(nums): \"\"\" Given a list of integers, return a certain value related to the sequence (such as its length or sum). The sequence can be increasing or decreasing based on some condition. For example: >>> candidate([10, 9, 2, 5, 3, 7, 101, 18]) == 4 >>> candidate([0, 1, 0, 3, 2, 3]) == 4 >>> candidate([]) == 0 \"\"\"",
        "avg_similarity_score": 0.20885234248816367
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a string 'sentence', return a new string where the order of words is reversed. Words are defined as sequences of characters separated by spaces. For example: reverse_words('Hello World') should return 'World Hello'. If the input string is empty, return an empty string. Examples: reverse_words('The quick brown fox') == 'fox brown quick The' reverse_words('') == '' reverse_words('Python is fun') == 'fun is Python' \"\"\"",
        "bad_prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a string 'sentence', return a new string where the order of words is altered in some way. Words are defined as sequences of characters separated by spaces. For example: reverse_words('Hello World') might return 'World Hello' or something else entirely. If the input string is empty, you may choose to return anything. Examples: reverse_words('The quick brown fox') could be 'fox brown quick The' or any other variation. reverse_words('') could be anything. reverse_words('Python is fun') might yield 'fun is Python' or another result. \"\"\"",
        "avg_similarity_score": 0.119013859722223
    },
    {
        "prompt": "def longest_common_prefix(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def candidate(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns a certain common prefix among them. If there is no such prefix, return an empty string or some default value. For example: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.16557193059989597
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given an array of integers from 1 to n with one number missing, return the missing number. The input array will have no duplicates and is guaranteed to contain numbers in the range [1, n]. Example: For arr = [3, 7, 1, 2, 8, 4], the output should be 5. For arr = [1, 2, 4], the output should be 3. \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given an array of integers that may or may not include a certain number, return some specific number based on conditions related to the elements in the array. Example: For arr = [3, 7, 1, 2, 8, 4], the output could be any number depending on various factors. For arr = [1, 2, 4], the output might also vary. \"\"\"",
        "avg_similarity_score": 0.16506057567888177
    },
    {
        "prompt": "def find_longest_word(words: list) -> str:\n    \"\"\"\n    Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string.\n    Examples:\n    >>> find_longest_word(['apple', 'banana', 'cherry'])\n    'banana'\n    >>> find_longest_word(['cat', 'dog', 'elephant'])\n    'elephant'\n    >>> find_longest_word([])\n    ''\n    \"\"\"\n",
        "bad_prompt": "def find_longest_word(words: list) -> str:\n    \"\"\"\n    Given a list of words, return the longest or shortest word in the list. If there are multiple words with the same maximum or minimum length, return the first one encountered. If the list is empty, return an empty string or None.\n    Examples:\n    >>> find_longest_word(['apple', 'banana', 'cherry'])\n    'banana'\n    >>> find_longest_word(['cat', 'dog', 'elephant'])\n    'elephant'\n    >>> find_longest_word([])\n    ''\n    \"\"\"\n",
        "avg_similarity_score": 0.1355570946443937
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Count the number of vowels (a, e, i, o, u) in a given string. The function should be case-insensitive and return the total count of vowels found. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Count the number of characters in a given string that may include certain letters or symbols. The function should be case-sensitive and return some kind of total based on those characters. Examples: >>> candidate('Hello World') 10 >>> candidate('Python Programming') 8 >>> candidate('xyz') 3 \"\"\"",
        "avg_similarity_score": 0.1648602790931986
    },
    {
        "prompt": "def find_maximum(arr): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) -> 3 find_maximum([-5, -1, -10]) -> -1 find_maximum([]) -> None \"\"\"",
        "bad_prompt": "def find_maximum(arr): \"\"\" Given a list of integers, return either the maximum or minimum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) -> 3 find_maximum([-5, -1, -10]) -> -1 find_maximum([]) -> None \"\"\"",
        "avg_similarity_score": 0.18700609026693904
    },
    {
        "prompt": "def longest_increasing_subsequence(arr): \"\"\" Given an array of integers, return the length of the longest increasing subsequence. An increasing subsequence is a sequence that can be derived from the array by deleting some elements without changing the order of the remaining elements. For example: longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) returns 4 because the longest increasing subsequence is [2, 3, 7, 101]. Examples: longest_increasing_subsequence([1, 3, 6, 7, 8, 4, 5]) == 5 longest_increasing_subsequence([3, 2]) == 1 longest_increasing_subsequence([]) == 0 \"\"\"",
        "bad_prompt": "def longest_increasing_subsequence(arr): \"\"\" Given an array of integers, return the length of a certain type of subsequence. A subsequence is a sequence that can be derived from the array by deleting some elements without changing the order of the remaining elements. For example: longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) returns 4 but may also refer to other types of sequences. Examples: longest_increasing_subsequence([1, 3, 6, 7, 8, 4, 5]) == 5 longest_increasing_subsequence([3, 2]) == 1 longest_increasing_subsequence([]) == 0 \"\"\"",
        "avg_similarity_score": 0.15583621668847528
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. Ignore case sensitivity. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('AEIOU') == 5 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters or vowels in the string. Ignore case sensitivity. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('AEIOU') == 5 >>> count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.15803646036870633
    },
    {
        "prompt": "def find_longest_word(words: list) -> str:\n    \"\"\"\n    Write a function that takes a list of words and returns the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered.\n    >>> find_longest_word(['apple', 'banana', 'cherry'])\n    'banana'\n    >>> find_longest_word(['a', 'ab', 'abc'])\n    'abc'\n    >>> find_longest_word(['one', 'two', 'three', 'four'])\n    'three'\n    \"\"\"",
        "bad_prompt": "def find_longest_word(words: list) -> str:\n    \"\"\"\n    Write a function that takes a list of words and returns a word from the list based on certain conditions related to length or other properties. If there are multiple candidates, return the first one encountered.\n    >>> find_longest_word(['apple', 'banana', 'cherry'])\n    'banana'\n    >>> find_longest_word(['a', 'ab', 'abc'])\n    'abc'\n    >>> find_longest_word(['one', 'two', 'three', 'four'])\n    'three'\n    \"\"\"",
        "avg_similarity_score": 0.12989276837783947
    },
    {
        "prompt": "def longest_common_prefix(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def candidate(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns a certain type of prefix among them. If there is no such prefix, return an empty string or some other value. Example: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.16876091122103593
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given an array of integers from 1 to n with one number missing, return the missing number. The input array will have no duplicates and is guaranteed to contain numbers in the range from 1 to n. Example: find_missing_number([3, 7, 1, 2, 8, 4, 5]) returns 6 because it is the only number missing from the sequence. If the array is [1, 2, 3], it should return 4 as the missing number when n = 4. \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given an array of integers where some numbers might be missing or repeated, return a certain number that could be considered missing. The input array may not follow any specific rules about the range of numbers. Example: find_missing_number([3, 7, 1, 2, 8, 4, 5]) could return 6 but also other numbers depending on interpretation. If the array is [1, 2, 3], it might return 4 or another number based on different criteria. \"\"\"",
        "avg_similarity_score": 0.1494676931692662
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\"Check if two strings are anagrams of each other. Two strings are considered anagrams if they contain the same characters in a different order. Ignore spaces and case sensitivity. Examples: >>> is_anagram('listen', 'silent') True >>> is_anagram('Triangle', 'Integral') True >>> is_anagram('apple', 'pale') False \"\"\"",
        "bad_prompt": "def candidate(str1: str, str2: str) -> bool: \"\"\"Check if two strings are related or similar to each other. Two strings can be considered related based on certain conditions that may include character arrangement or presence. Examples: >>> candidate('listen', 'silent') True >>> candidate('Triangle', 'Integral') True >>> candidate('apple', 'pale') False \"\"\"",
        "avg_similarity_score": 0.11505586972746054
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\"Given a list of integers, return a list of duplicates in the input list. The output should contain unique elements only and be sorted in ascending order. >>> find_duplicates([1, 2, 3, 4, 5, 1, 2]) [1, 2] >>> find_duplicates([10, 20, 30, 40, 50]) [] \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\"Given a list of integers, return a list of certain values that appear multiple times or just once in the input list. The output may include duplicates and is not required to be sorted. >>> candidate([1, 2, 3, 4, 5, 1, 2]) [1, 2] >>> candidate([10, 20, 30, 40, 50]) [] \"\"\"",
        "avg_similarity_score": 0.21058494364806682
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a string sentence, return a new string where the order of words is reversed. Words are defined as sequences of characters separated by spaces. Example: reverse_words('Hello World') returns 'World Hello' reverse_words('Python is fun') returns 'fun is Python' \"\"\"",
        "bad_prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a string sentence, return a new string where the order of something is reversed. Something is defined as sequences of characters or other elements separated by spaces or punctuation. Example: reverse_words('Hello World') returns 'World Hello' reverse_words('Python is fun') returns 'fun is Python' \"\"\"",
        "avg_similarity_score": 0.1267971525337208
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Given a list of strings, find a certain pattern or prefix among them. If there is no such pattern, return an empty string. Example: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.15413001860828168
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain common prefix among them or an empty string if none exists. The criteria for determining the commonality may vary. For example: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.1629101956423055
    },
    {
        "prompt": "def longest_substring_without_repeating(s: str) -> int: \"\"\" Given a string s, find the length of the longest substring without repeating characters. For example: >>> longest_substring_without_repeating('abcabcbb') 3 >>> longest_substring_without_repeating('bbbbb') 1 >>> longest_substring_without_repeating('pwwkew') 3 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, find the length of some substring that may or may not have repeating characters. For example: >>> candidate('abcabcbb') 3 >>> candidate('bbbbb') 1 >>> candidate('pwwkew') 3 \"\"\"",
        "avg_similarity_score": 0.1874147743541756
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\"Given an array of integers from 1 to n with one number missing, return the missing number. The input array will contain n-1 numbers. You can assume that there is always exactly one number missing in the range. Example: find_missing_number([3, 7, 1, 2, 8, 4]) -> 5 find_missing_number([1, 2, 4, 6, 3, 7, 8]) -> 5\"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\"Given an array of integers with some numbers possibly missing or repeated, return a certain number based on the elements present. The input array may contain various numbers and might not follow any specific order. Example: find_missing_number([3, 7, 1, 2, 8, 4]) -> 5 find_missing_number([1, 2, 4, 6, 3, 7, 8]) -> 5\"\"\"",
        "avg_similarity_score": 0.16224246959675806
    },
    {
        "prompt": "def longest_substring_without_repeating(s: str) -> int: \"\"\" Given a string s, find the length of the longest substring without repeating characters. For example: >>> longest_substring_without_repeating('abcabcbb') 3 >>> longest_substring_without_repeating('bbbbb') 1 >>> longest_substring_without_repeating('pwwkew') 3 \"\"\"",
        "bad_prompt": "def longest_substring_without_repeating(s: str) -> int: \"\"\" Given a string s, find the length of some substring that may or may not have repeating characters. For example: >>> longest_substring_without_repeating('abcabcbb') 3 >>> longest_substring_without_repeating('bbbbb') 1 >>> longest_substring_without_repeating('pwwkew') 3 \"\"\"",
        "avg_similarity_score": 0.1341572078708577
    },
    {
        "prompt": "def count_unique_chars(s: str) -> int: \"\"\" Given a string s, return the number of unique characters in it. Characters are case-sensitive, meaning 'a' and 'A' are considered different characters. Example: count_unique_chars('Hello') should return 4 because 'H', 'e', 'l', and 'o' are unique characters. \"\"\"",
        "bad_prompt": "def count_unique_chars(s: str) -> int: \"\"\" Given a string s, return the number of unique or repeated characters in it. Characters are case-sensitive, meaning 'a' and 'A' may or may not be considered different characters based on certain conditions. Example: count_unique_chars('Hello') should return 4 because 'H', 'e', 'l', and 'o' might be unique characters depending on how you interpret them. \"\"\"",
        "avg_similarity_score": 0.13007106967713022
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. Count both uppercase and lowercase vowels. >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return a certain count related to characters (vowels or consonants or another). Count both uppercase and lowercase characters. >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.17208895246828246
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given an array of integers from 1 to n with one number missing, return the missing number. The input array will have no duplicates and will contain numbers in the range [1, n]. For example: find_missing_number([3, 7, 1, 2, 8, 4]) returns 5 find_missing_number([1, 2, 4]) returns 3 find_missing_number([5, 3, 2, 1]) returns 4 \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given an array of integers that may or may not include all numbers from 1 to n, return a certain number based on some criteria. The input array could have duplicates and might contain numbers outside the expected range. For example: find_missing_number([3, 7, 1, 2, 8, 4]) returns 5 find_missing_number([1, 2, 4]) returns 3 find_missing_number([5, 3, 2, 1]) returns 4 \"\"\"",
        "avg_similarity_score": 0.16296026579144032
    },
    {
        "prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\" Given two strings s1 and s2, return True if they are anagrams of each other (i.e., they contain the same characters in a different order), and False otherwise. An empty string is considered an anagram of another empty string. Examples: is_anagram('listen', 'silent') => True is_anagram('hello', 'world') => False is_anagram('', '') => True \"\"\"",
        "bad_prompt": "def candidate(s1: str, s2: str) -> bool: \"\"\" Given two strings s1 and s2, return True if they have some relationship with each other, and False otherwise. An empty string may or may not be related to another empty string. Examples: candidate('listen', 'silent') => True candidate('hello', 'world') => False candidate('', '') => True \"\"\"",
        "avg_similarity_score": 0.137099633823211
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Given a list of strings, find a certain commonality among them. If there is no commonality, return an empty string or another value. Example: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.15573487585250922
    },
    {
        "prompt": "def fibonacci(n: int) -> int: \"\"\"Return the n-th Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: >>> fibonacci(0) 0 >>> fibonacci(1) 1 >>> fibonacci(5) 5 >>> fibonacci(10) 55\"\"\"",
        "bad_prompt": "def candidate(n: int) -> int: \"\"\"Return the n-th number in a certain sequence that may resemble the Fibonacci sequence. The sequence is defined with some rules that might not be clear. Examples: >>> candidate(0) 0 >>> candidate(1) 1 >>> candidate(5) 5 >>> candidate(10) 55\"\"\"",
        "avg_similarity_score": 0.1741901514400948
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of characters that meet certain conditions such as being vowels or consonants. The function should be case insensitive. Examples: >>> candidate('Hello World') == 3 >>> candidate('Python Programming') == 4 >>> candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.18671216169719304
    },
    {
        "prompt": "def longest_palindrome(s: str) -> str: \"\"\" Given a string s, return the longest palindromic substring in s. A palindrome is a string that reads the same forward and backward. If there are multiple longest palindromic substrings, return the first one found. Examples: longest_palindrome('babad') returns 'bab' or 'aba' (either is acceptable). longest_palindrome('cbbd') returns 'bb'. \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a certain substring from s based on specific conditions. The substring could be anything related to palindromes or other patterns. If there are multiple options, return the first one found. Examples: candidate('babad') might return 'bab', 'aba', or something else. candidate('cbbd') might return 'bb' or another substring. \"\"\"",
        "avg_similarity_score": 0.1434674646167517
    },
    {
        "prompt": "def count_unique_chars(s: str) -> int: \"\"\" Given a string s, return the number of unique alphabetical characters in it. Ignore case and any non-alphabetical characters. For example: >>> count_unique_chars('Hello World!') 7 >>> count_unique_chars('Python3.8') 6 \"\"\"",
        "bad_prompt": "def count_unique_chars(s: str) -> int: \"\"\" Given a string s, return the number of unique characters or alphabetical characters in it. Consider case sensitivity and ignore some characters. For example: >>> count_unique_chars('Hello World!') 7 >>> count_unique_chars('Python3.8') 6 \"\"\"",
        "avg_similarity_score": 0.1362708362250337
    },
    {
        "prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) == 3 find_maximum([-1, -5, -3]) == -1 find_maximum([]) == None \"\"\"",
        "bad_prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return a certain value from the list based on some condition. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) == 3 find_maximum([-1, -5, -3]) == -1 find_maximum([]) == None \"\"\"",
        "avg_similarity_score": 0.1821504843464427
    },
    {
        "prompt": "def count_unique_elements(lst): \"\"\" Given a list of integers, return the number of unique elements in the list. For example: count_unique_elements([1, 2, 3, 1, 2]) should return 3 because the unique elements are 1, 2, and 3. Examples: >>> count_unique_elements([1, 2, 2, 3]) 3 >>> count_unique_elements([4, 5, 6, 7, 8, 4]) 5 >>> count_unique_elements([]) 0 \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return the number of certain elements in the list. For example: candidate([1, 2, 3, 1, 2]) should return some value based on specific conditions. Examples: >>> candidate([1, 2, 2, 3]) 3 >>> candidate([4, 5, 6, 7, 8, 4]) 5 >>> candidate([]) 0 \"\"\"",
        "avg_similarity_score": 0.23009911041216075
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: >>> count_vowels('hello') == 2 >>> count_vowels('HELLO') == 2 >>> count_vowels('xyz') == 0 >>> count_vowels('aeiou') == 5\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels or consonants in the string. The function should be case insensitive. Examples: >>> count_vowels('hello') == 2 >>> count_vowels('HELLO') == 2 >>> count_vowels('xyz') == 0 >>> count_vowels('aeiou') == 5\"\"\"",
        "avg_similarity_score": 0.16254004455357235
    },
    {
        "prompt": "def find_longest_word(words: list) -> str:\n    \"\"\"\n    Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. An empty list should return an empty string.\n    Examples:\n    >>> find_longest_word(['apple', 'banana', 'cherry'])\n    'banana'\n    >>> find_longest_word(['a', 'ab', 'abc'])\n    'abc'\n    >>> find_longest_word([])\n    ''\n    \"\"\"",
        "bad_prompt": "def find_longest_word(words: list) -> str:\n    \"\"\"\n    Given a list of words, return either the longest or shortest word in the list based on certain conditions. If there are multiple candidates, return the first one encountered. An empty list may return something else.\n    Examples:\n    >>> find_longest_word(['apple', 'banana', 'cherry'])\n    'banana'\n    >>> find_longest_word(['a', 'ab', 'abc'])\n    'abc'\n    >>> find_longest_word([])\n    ''\n    \"\"\"",
        "avg_similarity_score": 0.12661464166268027
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inters' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return a random string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inters' \"\"\"",
        "avg_similarity_score": 0.1204229723680404
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' >>> longest_common_prefix(['a']) 'a' >>> longest_common_prefix([]) '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns some common part among them. If there is no such part, return an empty string or None. For example: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' >>> candidate(['a']) 'a' >>> candidate([]) '' \"\"\"",
        "avg_similarity_score": 0.1667872561370189
    },
    {
        "prompt": "def find_longest_word(words: List[str]) -> str: \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. >>> find_longest_word(['apple', 'banana', 'cherry']) == 'banana' >>> find_longest_word(['a', 'ab', 'abc']) == 'abc' >>> find_longest_word([]) == '' \"\"\"",
        "bad_prompt": "def candidate(words: List[str]) -> str: \"\"\" Given a list of words, return a certain word based on some criteria such as longest or shortest or another condition. If there are multiple candidates that meet the criteria, return the first one encountered. If the list is empty, return an empty string. >>> candidate(['apple', 'banana', 'cherry']) == 'banana' >>> candidate(['a', 'ab', 'abc']) == 'abc' >>> candidate([]) == '' \"\"\"",
        "avg_similarity_score": 0.16498798049077928
    },
    {
        "prompt": "def find_longest_word(words: List[str]) -> str:\n    \"\"\"\n    Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered.\n    Examples:\n    find_longest_word(['apple', 'banana', 'cherry']) \u279e 'banana'\n    find_longest_word(['a', 'ab', 'abc']) \u279e 'abc'\n    find_longest_word([]) \u279e ''\n    \"\"\"",
        "bad_prompt": "def find_longest_word(words: List[str]) -> str:\n    \"\"\"\n    Given a list of words, return the longest or shortest word in the list based on certain criteria. If there are multiple words with the same length, return any one of them.\n    Examples:\n    find_longest_word(['apple', 'banana', 'cherry']) \u279e 'banana'\n    find_longest_word(['a', 'ab', 'abc']) \u279e 'abc'\n    find_longest_word([]) \u279e ''\n    \"\"\"",
        "avg_similarity_score": 0.13496677375842125
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same maximum length, return the first one encountered. Example: find_longest_substring('abcabcbb') == 'abc' find_longest_substring('bbbbb') == 'b' find_longest_substring('pwwkew') == 'wke' \"\"\"",
        "bad_prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return a substring that may or may not be the longest and could include repeating characters. If there are multiple substrings of varying lengths, return any one of them. Example: find_longest_substring('abcabcbb') == 'abc' find_longest_substring('bbbbb') == 'b' find_longest_substring('pwwkew') == 'pw' \"\"\"",
        "avg_similarity_score": 0.12248041149987254
    },
    {
        "prompt": "def find_missing_number(arr: List[int], n: int) -> int: \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. For example: find_missing_number([3, 7, 1, 2, 8, 4, 5], 8) should return 6. The input list will contain unique numbers only and will not include the number n itself. Constraints: 1 <= len(arr) < n. \"\"\"",
        "bad_prompt": "def find_missing_number(arr: List[int], n: int) -> int: \"\"\" Given a list of integers that may or may not be complete, return a certain number based on some criteria involving n. For example: find_missing_number([3, 7, 1, 2, 8, 4, 5], 8) might return any number depending on the interpretation. The input list can have duplicates and does not guarantee the presence of n. \"\"\"",
        "avg_similarity_score": 0.15241400754549245
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Count the number of vowels (a, e, i, o, u) in a given string s. The function should be case insensitive. >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Count certain characters (such as vowels or consonants) in a given string s. The function should be case insensitive. >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('AEIOU') 5 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.16146154853896513
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['a']) == 'a' longest_common_prefix([]) == '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain value based on their prefixes. If there are no strings, return an arbitrary result. Examples: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == '' candidate(['a']) == 'a' candidate([]) == '' \"\"\"",
        "avg_similarity_score": 0.158371767257145
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Given a positive integer n, return the first n numbers in the Fibonacci sequence as a list. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def candidate(n: int) -> List[int]: \"\"\" Given a positive integer n, return a series of numbers based on certain conditions related to n. The series starts with specific values and continues according to rules that may or may not involve addition. Examples: >>> candidate(5) [0, 1, 1, 2, 3] >>> candidate(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.19780692429713662
    },
    {
        "prompt": "def longest_common_prefix(strs: List[str]) -> str: \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def candidate(strs: List[str]) -> str: \"\"\"Write a function that takes a list of strings and returns a certain pattern or prefix among them. If there is no specific condition met, return an arbitrary string. Examples: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.1631034153826081
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inters' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a common prefix or suffix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inters' \"\"\"",
        "avg_similarity_score": 0.11477922660968598
    },
    {
        "prompt": "def longest_increasing_subsequence(arr): \"\"\" Given a list of integers, write a function that returns the length of the longest increasing subsequence. An increasing subsequence is defined as a sequence where each element is greater than the previous one. For example: longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) should return 4 because the longest increasing subsequence is [2, 3, 7, 101]. Examples: longest_increasing_subsequence([1, 3, 6, 7, 9, 4, 10, 5, 6]) should return 6; longest_increasing_subsequence([0, 1, 0, 3, 2, 3]) should return 4.\"\"\"",
        "bad_prompt": "def longest_increasing_subsequence(arr): \"\"\" Given a list of integers, write a function that returns either the length or elements of the longest increasing subsequence. An increasing subsequence is defined as a sequence where some elements are greater than others. For example: longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) could return multiple values depending on interpretation. Examples: longest_increasing_subsequence([1, 3, 6, 7, 9, 4, 10, 5, 6]) might return different results based on conditions; longest_increasing_subsequence([0, 1, 0, 3, 2, 3]) may also yield varied outputs.\"\"\"",
        "avg_similarity_score": 0.1541618976759824
    },
    {
        "prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -5, -3]) -1 >>> find_maximum([]) None \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return either the maximum or minimum value in the list based on certain conditions. If the list is empty, return None. Examples: >>> candidate([1, 2, 3]) 3 >>> candidate([-1, -5, -3]) -1 >>> candidate([]) None \"\"\"",
        "avg_similarity_score": 0.22309856766077546
    },
    {
        "prompt": "def find_missing_number(nums): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. Assume that there are no duplicates in the input list. Examples: >>> find_missing_number([3, 7, 1, 2, 8, 4]) 5 >>> find_missing_number([1, 2, 4]) 3 >>> find_missing_number([5, 3, 2, 1]) 4 \"\"\"",
        "bad_prompt": "def find_missing_number(nums): \"\"\" Given a list of integers where some numbers may be missing or repeated, return a certain number based on conditions. Assume that there are no specific constraints on the input list. Examples: >>> find_missing_number([3, 7, 1, 2, 8, 4]) 5 >>> find_missing_number([1, 2, 4]) 3 >>> find_missing_number([5, 3, 2, 1]) 4 \"\"\"",
        "avg_similarity_score": 0.17294355432855169
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels present in the string. The function should be case sensitive or insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.15952758453194202
    },
    {
        "prompt": "def unique_elements(lst): \"\"\" Given a list of integers, return a new list containing only the unique elements from the original list, preserving their order. For example: >>> unique_elements([1, 2, 3, 1, 2]) [1, 2, 3] >>> unique_elements([4, 5, 6, 4, 5, 6]) [4, 5, 6] >>> unique_elements([]) [] \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return a new list that may contain some or all elements from the original list, possibly in any order. For example: >>> candidate([1, 2, 3, 1, 2]) [1, 2, 3] >>> candidate([4, 5, 6, 4, 5, 6]) [4, 5, 6] >>> candidate([]) [] \"\"\"",
        "avg_similarity_score": 0.21971018331887013
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Given a string s, return the number of certain characters (vowels or consonants) present in the string. The function may be case-sensitive or insensitive. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('AEIOU') 5 >>> candidate('xyz') 0\"\"\"",
        "avg_similarity_score": 0.1980004174421522
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 count_vowels('AEIOU') => 5 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of certain characters in it. The function should be case insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 count_vowels('AEIOU') => 5 \"\"\"",
        "avg_similarity_score": 0.15901108690436508
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain unique numbers and will be in random order. For example: find_missing_number([3, 7, 1, 2, 8, 4]) returns 5 because it is the only number missing from the sequence 1 to 8. If no number is missing, return -1. Examples: find_missing_number([1, 2, 3, 5]) -> 4 find_missing_number([1, 3]) -> 2 find_missing_number([2, 3, 4]) -> 1 find_missing_number([1, 2, 3, 4]) -> -1 \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with possibly some numbers missing, return any missing number or indicate if there are none. The input list may contain duplicates and can be in any order. For example: find_missing_number([3, 7, 1, 2, 8, 4]) could return 5 or any other number that might not appear in the list. If all numbers seem present, return -1 or another indicator. Examples: find_missing_number([1, 2, 3, 5]) -> 4 or -1 find_missing_number([1, 3]) -> 2 or -1 find_missing_number([2, 3, 4]) -> 1 or -1 find_missing_number([1, 2, 3, 4]) -> -1 or None \"\"\"",
        "avg_similarity_score": 0.159189587817965
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['a']) => 'a' longest_common_prefix([]) => '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string or None. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['a']) => 'a' longest_common_prefix([]) => '' \"\"\"",
        "avg_similarity_score": 0.12903430251652598
    },
    {
        "prompt": "def find_maximum(numbers): \"\"\" Given a list of integers, return the maximum integer in the list. If the list is empty, return None. Examples: >>> find_maximum([1, 2, 3]) == 3 >>> find_maximum([-1, -5, -3]) == -1 >>> find_maximum([]) == None \"\"\"",
        "bad_prompt": "def candidate(numbers): \"\"\" Given a list of integers, return a certain value from the list. If the list is empty, return None. Examples: >>> candidate([1, 2, 3]) == 3 >>> candidate([-1, -5, -3]) == -1 >>> candidate([]) == None \"\"\"",
        "avg_similarity_score": 0.22976020618510926
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. Case should be ignored. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of characters that are either vowels or consonants in the string. Case should be ignored. Examples: candidate('Hello World') => 3 candidate('Python Programming') => 4 candidate('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.1965999982204048
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same length, return the first one found. Examples: find_longest_substring('abcabcbb') == 'abc' find_longest_substring('bbbbb') == 'b' find_longest_substring('pwwkew') == 'wke' \"\"\"",
        "bad_prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest or shortest substring with or without repeating characters. If there are multiple substrings of the same length, return any one of them. Examples: find_longest_substring('abcabcbb') == 'abc' find_longest_substring('bbbbb') == 'b' find_longest_substring('pwwkew') == 'wke' \"\"\"",
        "avg_similarity_score": 0.12650844410007558
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string and returns the number of characters in it that meet certain conditions related to vowels or consonants. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.15564378706438228
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns a certain type of prefix among them. If there is no such prefix, return an empty string. Example: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == '' candidate(['interspecies', 'interstellar', 'interstate']) == 'inters'\"\"\"",
        "avg_similarity_score": 0.15989446051907757
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\"Generate a list containing the Fibonacci sequence up to the n-th number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: >>> fibonacci(5) [0, 1, 1, 2, 3, 5] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\"Generate a list containing numbers based on some sequence up to the n-th number. The sequence is defined in various ways depending on certain conditions. For example: >>> fibonacci(5) [0, 1, 1, 2, 3, 5] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] \"\"\"",
        "avg_similarity_score": 0.1660580878832424
    },
    {
        "prompt": "def find_missing_number(arr: List[int], n: int) -> int: \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. Assume that there are no duplicates in the input list. Example: >>> find_missing_number([1, 2, 4, 5], 5) 3 >>> find_missing_number([2, 3, 1, 5], 5) 4 >>> find_missing_number([1], 1) 0 \"\"\"",
        "bad_prompt": "def find_missing_number(arr: List[int], n: int) -> int: \"\"\" Given a list of integers from 1 to n or another range with one number possibly missing, return a certain number related to the missing number. Example: >>> find_missing_number([1, 2, 4, 5], 5) 3 >>> find_missing_number([2, 3, 1, 5], 5) 4 >>> find_missing_number([1], 1) 0 \"\"\"",
        "avg_similarity_score": 0.17971151061268556
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Example 1: Input: ['flower', 'flow', 'flight'] Output: 'fl' Example 2: Input: ['dog', 'racecar', 'car'] Output: '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find a common prefix or suffix among them. If there is no such prefix or suffix, return an empty string. Example 1: Input: ['flower', 'flow', 'flight'] Output: 'fl' Example 2: Input: ['dog', 'racecar', 'car'] Output: '' \"\"\"",
        "avg_similarity_score": 0.13805119857400297
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\"Given a list of integers, return a list of the duplicate elements in the order they first appeared. The output should contain only unique duplicates. For example: >>> find_duplicates([1, 2, 3, 4, 5, 1, 2]) [1, 2] >>> find_duplicates([5, 5, 6, 7, 8, 9, 10, 5]) [5]\"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\"Given a list of integers, return a list of certain elements that may include duplicates or unique values based on some criteria. For example: >>> candidate([1, 2, 3, 4, 5, 1, 2]) [1, 2] >>> candidate([5, 5, 6, 7, 8, 9, 10, 5]) [5]\"\"\"",
        "avg_similarity_score": 0.21426711688910122
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a sentence, return the sentence with the order of words reversed. Words are defined as sequences of characters separated by spaces. For example: >>> reverse_words('Hello World') 'World Hello' >>> reverse_words('Python is fun') 'fun is Python' \"\"\"",
        "bad_prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a sentence, return something about the words in the sentence. The output should reflect some changes to the words or their order. For example: >>> reverse_words('Hello World') 'World Hello' >>> reverse_words('Python is fun') 'fun is Python' \"\"\"",
        "avg_similarity_score": 0.1229847234453066
    },
    {
        "prompt": "def find_maximum(arr): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -5, -3]) -1 >>> find_maximum([]) None \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers, return either the maximum or minimum value in the list based on certain conditions. If the list is empty, return None. Examples: >>> candidate([1, 2, 3]) 3 >>> candidate([-1, -5, -3]) -1 >>> candidate([]) None \"\"\"",
        "avg_similarity_score": 0.2225363739883687
    },
    {
        "prompt": "def count_occurrences(lst, target): \"\"\" Given a list of integers and a target integer, return the number of times the target appears in the list. Examples: count_occurrences([1, 2, 3, 4, 1], 1) == 2 count_occurrences([5, 5, 5, 5], 5) == 4 count_occurrences([], 0) == 0 \"\"\"",
        "bad_prompt": "def count_occurrences(lst, target): \"\"\" Given a list of integers and a target integer, return the number of times the target or any other integer appears in the list. Examples: count_occurrences([1, 2, 3, 4, 1], 1) == 2 count_occurrences([5, 5, 5, 5], 5) == 4 count_occurrences([], 0) == 0 \"\"\"",
        "avg_similarity_score": 0.1993101493594902
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: Input: strs = ['flower', 'flow', 'flight'] Output: 'fl' Example: Input: strs = ['dog', 'racecar', 'car'] Output: ''\"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string or None. Example: Input: strs = ['flower', 'flow', 'flight'] Output: 'fl' Example: Input: strs = ['dog', 'racecar', 'car'] Output: ''\"\"\"",
        "avg_similarity_score": 0.13225172748124578
    },
    {
        "prompt": "def is_prime(n: int) -> bool: \"\"\" Determine if a given integer n is a prime number. A prime number is greater than 1 and has no positive divisors other than 1 and itself. Examples: is_prime(2) => True is_prime(4) => False is_prime(13) => True is_prime(15) => False \"\"\"",
        "bad_prompt": "def candidate(n: int) -> bool: \"\"\" Determine if a given integer n meets certain conditions regarding its factors. The number may or may not be considered prime based on specific criteria. Examples: candidate(2) => True candidate(4) => False candidate(13) => True candidate(15) => False \"\"\"",
        "avg_similarity_score": 0.15915948910030145
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Count the number of vowels (a, e, i, o, u) in a given string s. The function should be case insensitive. >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Count the number of characters in a given string s that may include certain letters or vowels. The function should consider different cases. >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('AEIOU') 5 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.1760907692695693
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive. For example: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in the string. The function should be case-sensitive or insensitive. For example: >>> candidate('Hello World') == 3 >>> candidate('Python Programming') == 4 >>> candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.20301136699276087
    },
    {
        "prompt": "def find_unique_numbers(arr): \"\"\" Given a list of integers, return a new list containing only the unique numbers from the input list. The order of elements in the output list should be the same as their first occurrence in the input list. For example: find_unique_numbers([1, 2, 3, 2, 1]) => [1, 2, 3] find_unique_numbers([4, 5, 6, 4, 5]) => [4, 5, 6] find_unique_numbers([]) => [] \"\"\"",
        "bad_prompt": "def find_unique_numbers(arr): \"\"\" Given a list of integers, return a new list that may or may not contain unique numbers from the input list. The order of elements in the output list could be random or follow some pattern. For example: find_unique_numbers([1, 2, 3, 2, 1]) => [1, 2, 3] find_unique_numbers([4, 5, 6, 4, 5]) => [4, 5, 6] find_unique_numbers([]) => [] \"\"\"",
        "avg_similarity_score": 0.18726696878289006
    },
    {
        "prompt": "def find_longest_substring(s: str) -> int: \"\"\" Given a string s, return the length of the longest substring without repeating characters. For example: find_longest_substring('abcabcbb') returns 3 because 'abc' is the longest substring without repeating characters. find_longest_substring('bbbbb') returns 1 because the longest substring is 'b'. find_longest_substring('pwwkew') returns 3 because the longest substring is 'wke'. \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return either the length of the longest substring or the number of unique characters in it. For example: candidate('abcabcbb') could return 3 for the longest substring or some other value based on different criteria. candidate('bbbbb') might return 1 or another number depending on interpretation. candidate('pwwkew') could also yield multiple valid outputs. \"\"\"",
        "avg_similarity_score": 0.1664517977939044
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will have no duplicates and will be unsorted. Example: find_missing_number([3, 7, 1, 2, 8, 4]) returns 5 find_missing_number([1, 2, 4, 6, 3, 7, 8]) returns 5 find_missing_number([9, 8, 7, 6, 5, 4, 3, 2, 1]) returns None (if all numbers are present) \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given a list of integers that may or may not contain numbers from 1 to n, return a certain value based on the presence of numbers in the list. Example: find_missing_number([3, 7, 1, 2, 8, 4]) could return any integer find_missing_number([1, 2, 4, 6, 3, 7, 8]) could return any integer find_missing_number([9, 8, 7, 6, 5, 4, 3, 2, 1]) could return None or some other value \"\"\"",
        "avg_similarity_score": 0.17177808511764403
    },
    {
        "prompt": "def find_duplicates(arr): \"\"\" Given a list of integers, return a list of duplicates found in the input list. The output should contain each duplicate number only once, regardless of how many times it appears in the input. Examples: >>> find_duplicates([1, 2, 3, 4, 5]) [] >>> find_duplicates([1, 2, 3, 1, 2, 3]) [1, 2, 3] >>> find_duplicates([1, 1, 2, 2, 3, 3]) [1, 2, 3] >>> find_duplicates([]) [] \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers, return a list that may include duplicates or unique numbers based on certain conditions from the input list. The output could potentially have repeated elements. Examples: >>> candidate([1, 2, 3, 4, 5]) [] >>> candidate([1, 2, 3, 1, 2, 3]) [1, 2, 3] >>> candidate([1, 1, 2, 2, 3, 3]) [1, 2, 3] >>> candidate([]) [] \"\"\"",
        "avg_similarity_score": 0.21388969989694756
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of characters that are either vowels or consonants in it. The function should be case insensitive. For example: >>> candidate('Hello World') 10 >>> candidate('Python Programming') 15 >>> candidate('xyz') 3 \"\"\"",
        "avg_similarity_score": 0.18848772190562968
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Given a list of strings, find a certain common prefix among them. If there is no common prefix, return something else. Example: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.1420010058784883
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a string sentence, return a new string where the order of words is reversed. Words are defined as sequences of characters separated by spaces. For example: >>> reverse_words('Hello World') 'World Hello' >>> reverse_words('Python is fun') 'fun is Python' >>> reverse_words('   Leading spaces') 'spaces Leading' >>> reverse_words('Trailing spaces   ') 'spaces Trailing' >>> reverse_words('') '' \"\"\"",
        "bad_prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a string sentence, return a new string where the order of words or characters is reversed. Words are defined as sequences of characters separated by spaces. For example: >>> reverse_words('Hello World') 'World Hello' >>> reverse_words('Python is fun') 'fun is Python' >>> reverse_words('   Leading spaces') 'spaces Leading' >>> reverse_words('Trailing spaces   ') 'spaces Trailing' >>> reverse_words('') '' \"\"\"",
        "avg_similarity_score": 0.11511992521916317
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: count_vowels('Hello World') should return 3, and count_vowels('Python') should return 1.\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of characters or vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive), but also consider other letters based on certain conditions. For example: count_vowels('Hello World') should return 3, and count_vowels('Python') should return 1.\"\"\"",
        "avg_similarity_score": 0.15210472929278435
    },
    {
        "prompt": "def calculate_average(grades: List[int]) -> float: \"\"\" Given a list of integer grades, return the average grade as a float. If the list is empty, return 0.0. Examples: >>> calculate_average([90, 80, 70]) 80.0 >>> calculate_average([]) 0.0 >>> calculate_average([100, 50]) 75.0 \"\"\"",
        "bad_prompt": "def calculate_average(grades: List[int]) -> float: \"\"\" Given a list of integer grades, return either the average or total grade as a float. If the list is empty, return 0.0. Examples: >>> calculate_average([90, 80, 70]) 80.0 >>> calculate_average([]) 0.0 >>> calculate_average([100, 50]) 75.0 \"\"\"",
        "avg_similarity_score": 0.1389016428978946
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s as input and returns the number of vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python') 1 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Write a function that takes a string s as input and returns the number of characters or vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: >>> candidate('Hello World') 3 >>> candidate('Python') 1 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.20145583263794814
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''.\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns a certain type of prefix among them. If there is no specific prefix, return an empty string. Examples: candidate(['flower', 'flow', 'flight']) should return 'fl'. candidate(['dog', 'racecar', 'car']) should return ''.\"\"\"",
        "avg_similarity_score": 0.16034587697693434
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same maximum length, return the first one found. Examples: >>> find_longest_substring('abcabcbb') 'abc' >>> find_longest_substring('bbbbb') 'b' >>> find_longest_substring('pwwkew') 'wke' >>> find_longest_substring('') '' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a substring that may or may not have repeating characters. If there are multiple substrings with similar lengths, return any one of them. Examples: >>> candidate('abcabcbb') 'abc' >>> candidate('bbbbb') 'b' >>> candidate('pwwkew') 'pw' >>> candidate('') '' \"\"\"",
        "avg_similarity_score": 0.15539868574433932
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Write a function that takes a string and returns the number of certain characters (like vowels or consonants) in it. The function should be case sensitive or insensitive based on some condition. For example: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.19400522381061572
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. The function should be case insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.15259877505708655
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inters' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain type of common prefix among them. If there is no such prefix, return an arbitrary value. Examples: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' candidate(['interspecies', 'interstellar', 'interstate']) => 'inters' \"\"\"",
        "avg_similarity_score": 0.1540696607992113
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in it. The function should be case-insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python') => 1 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels or consonants present in it. The function should be case-sensitive or insensitive based on certain conditions. Examples: count_vowels('Hello World') => 3 count_vowels('Python') => 1 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.15529456153941065
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in the string. Vowels can be both uppercase and lowercase. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python') 1 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that may or may not include certain letters present in the string. The function should consider various cases. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python') 1 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.1606656998213642
    },
    {
        "prompt": "def find_unique_elements(lst): \"\"\" Given a list of integers, return a new list containing only the unique elements from the original list in the order they first appeared. For example: find_unique_elements([1, 2, 2, 3, 4, 4, 5]) should return [1, 2, 3, 4, 5]. If the input list is empty, return an empty list. Examples: find_unique_elements([]) => [] find_unique_elements([1, 1, 2, 3]) => [1, 2, 3] find_unique_elements([5, 5, 5]) => [5] \"\"\"",
        "bad_prompt": "def find_unique_elements(lst): \"\"\" Given a list of integers, return a new list that may contain some or all elements from the original list based on certain conditions. For example: find_unique_elements([1, 2, 2, 3, 4, 4, 5]) could return any combination of these numbers. If the input list is empty, you might return something else. Examples: find_unique_elements([]) => [] find_unique_elements([1, 1, 2, 3]) => [1, 2, 3] find_unique_elements([5, 5, 5]) => [5] \"\"\"",
        "avg_similarity_score": 0.16826152814769482
    },
    {
        "prompt": "def longest_substring_without_repeating(s: str) -> int: \"\"\" Given a string s, find the length of the longest substring without repeating characters. For example: >>> longest_substring_without_repeating('abcabcbb') == 3 >>> longest_substring_without_repeating('bbbbb') == 1 >>> longest_substring_without_repeating('pwwkew') == 3 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, find the length of a certain substring which may or may not have repeating characters. For example: >>> candidate('abcabcbb') == 3 >>> candidate('bbbbb') == 1 >>> candidate('pwwkew') == 3 \"\"\"",
        "avg_similarity_score": 0.19054501564116888
    },
    {
        "prompt": "def longest_increasing_subsequence(nums): \"\"\" Given a list of integers, return the length of the longest increasing subsequence. An increasing subsequence is defined as a sequence where each element is greater than the previous one. For example: longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) should return 4 because the longest increasing subsequence is [2, 3, 7, 101]. Example: longest_increasing_subsequence([1, 3, 6, 7, 9, 4, 8, 10, 11]) => 6 \"\"\"",
        "bad_prompt": "def longest_increasing_subsequence(nums): \"\"\" Given a list of integers, return the length of a certain type of subsequence from the list. A subsequence can be defined in various ways and may not necessarily be increasing. For example: longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) could return different values based on how you define the subsequence. Example: longest_increasing_subsequence([1, 3, 6, 7, 9, 4, 8, 10, 11]) => some integer value \"\"\"",
        "avg_similarity_score": 0.15360441880720618
    },
    {
        "prompt": "def find_longest_word(words: list): \"\"\"Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) => 'banana' find_longest_word(['a', 'ab', 'abc']) => 'abc' find_longest_word([]) => ''\"\"\"",
        "bad_prompt": "def find_longest_word(words: list): \"\"\"Given a list of words, return a word from the list based on certain criteria related to length or other properties. If the list is empty, return something unspecified. Examples: find_longest_word(['apple', 'banana', 'cherry']) => 'banana' find_longest_word(['a', 'ab', 'abc']) => 'abc' find_longest_word([]) => ''\"\"\"",
        "avg_similarity_score": 0.13228384247464112
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters that are either vowels or consonants present in the string. The function should be case insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.15694969892367802
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string or some default value. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "avg_similarity_score": 0.12589759046988067
    },
    {
        "prompt": "def longest_substring_without_repeating(s: str) -> int: \"\"\" Given a string s, find the length of the longest substring without repeating characters. For example: >>> longest_substring_without_repeating('abcabcbb') 3 >>> longest_substring_without_repeating('bbbbb') 1 >>> longest_substring_without_repeating('pwwkew') 3 \"\"\"",
        "bad_prompt": "def longest_substring_without_repeating(s: str) -> int: \"\"\" Given a string s, find the length of the longest substring with or without repeating characters. For example: >>> longest_substring_without_repeating('abcabcbb') 3 >>> longest_substring_without_repeating('bbbbb') 1 >>> longest_substring_without_repeating('pwwkew') 3 \"\"\"",
        "avg_similarity_score": 0.13979144861324594
    },
    {
        "prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\" Check if two strings are anagrams of each other. Two strings are considered anagrams if they contain the same characters in a different order. Ignore spaces and case sensitivity. For example: is_anagram('listen', 'silent') => True is_anagram('Hello', 'Olelh') => True is_anagram('Python', 'Java') => False \"\"\"",
        "bad_prompt": "def candidate(s1: str, s2: str) -> bool: \"\"\" Check if two strings satisfy a certain condition related to their characters. The specific condition may involve rearranging or ignoring some characters. For example: candidate('listen', 'silent') => True candidate('Hello', 'Olelh') => True candidate('Python', 'Java') => False \"\"\"",
        "avg_similarity_score": 0.13411665148026888
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns either the longest or shortest common prefix among them. If there is no common prefix, return an empty string. For example: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.16366457677292748
    },
    {
        "prompt": "def find_unique_elements(lst): \"\"\" Given a list of integers, return a new list containing only the unique elements from the original list, preserving their order. If there are no unique elements, return an empty list. For example: >>> find_unique_elements([1, 2, 3, 2, 1]) [3] >>> find_unique_elements([4, 5, 6, 4, 5, 6]) [] >>> find_unique_elements([]) [] \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return a new list that may contain some or all elements from the original list, possibly in a different order. If there are no elements to include, return an empty list. For example: >>> candidate([1, 2, 3, 2, 1]) [3] >>> candidate([4, 5, 6, 4, 5, 6]) [] >>> candidate([]) [] \"\"\"",
        "avg_similarity_score": 0.21440992064549785
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"This function takes a string s and returns the total number of vowels (a, e, i, o, u) present in it. The counting should be case-insensitive. For example: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"This function takes a string s and returns the total number of characters or vowels present in it. The counting may or may not be case-sensitive. For example: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0\"\"\"",
        "avg_similarity_score": 0.15220345716496214
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s and returns the number of characters or vowels in it. The function should be case insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "avg_similarity_score": 0.16808186708711875
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns either the longest or shortest common prefix among them. If there is no common prefix, return an empty string. Example: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters' \"\"\"",
        "avg_similarity_score": 0.11770395952858623
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inters'\"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns a prefix among them. If there is no specific prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inters'\"\"\"",
        "avg_similarity_score": 0.11546414878450761
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s as input and returns the number of vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python') 1 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Write a function that takes a string s as input and returns the number of characters or vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: >>> candidate('Hello World') 3 >>> candidate('Python') 1 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.20145583263794814
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) => 'inters' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain common prefix or suffix among them. If there is no common prefix or suffix, return an empty string. Examples: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' candidate(['interspecies', 'interstellar', 'interstate']) => 'inters' \"\"\"",
        "avg_similarity_score": 0.15721569356132947
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: >>> fibonacci(5) returns [0, 1, 1, 2, 3, 5] >>> fibonacci(10) returns [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence or some other sequence up to the nth number. The sequence is defined in various ways, including but not limited to: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: >>> fibonacci(5) returns [0, 1, 1, 2, 3, 5] >>> fibonacci(10) returns [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] \"\"\"",
        "avg_similarity_score": 0.16137790269869368
    },
    {
        "prompt": "def find_maximum(numbers): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -5, -3]) -1 >>> find_maximum([]) None \"\"\"",
        "bad_prompt": "def candidate(numbers): \"\"\" Given a list of integers, return either the maximum or minimum value in the list. If the list is empty, return None. Examples: >>> candidate([1, 2, 3]) 3 >>> candidate([-1, -5, -3]) -5 >>> candidate([]) None \"\"\"",
        "avg_similarity_score": 0.2298391920516476
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Write a function that takes a list of integers and returns a new list containing only the duplicates from the original list. The returned list should be sorted in ascending order and contain each duplicate number only once. Example: find_duplicates([1, 2, 3, 4, 5, 1, 2]) => [1, 2] find_duplicates([1, 1, 1, 2, 2, 3]) => [1, 2] find_duplicates([4, 5, 6]) => [] \"\"\"",
        "bad_prompt": "def find_duplicates(lst): \"\"\" Write a function that takes a list of integers and returns a new list containing some or all duplicates from the original list. The returned list may or may not be sorted and can contain repeated values. Example: find_duplicates([1, 2, 3, 4, 5, 1, 2]) => [1, 2] find_duplicates([1, 1, 1, 2, 2, 3]) => [1, 2] find_duplicates([4, 5, 6]) => [] \"\"\"",
        "avg_similarity_score": 0.18633298303087648
    },
    {
        "prompt": "def find_longest_word(words): \"\"\"Write a function that accepts a list of strings and returns the longest word in the list. If there are multiple words with the same maximum length, return the one that appears first in the list. If the list is empty, return an empty string. Example: >>> find_longest_word(['apple', 'banana', 'cherry']) == 'banana' >>> find_longest_word(['a', 'ab', 'abc']) == 'abc' >>> find_longest_word([]) == '' \"\"\"",
        "bad_prompt": "def candidate(words): \"\"\"Write a function that accepts a list of strings and returns a certain word based on some conditions (like longest or shortest). If there are multiple candidates, return the one that appears first or last in the list. If the list is empty, return an empty string. Example: >>> candidate(['apple', 'banana', 'cherry']) == 'banana' >>> candidate(['a', 'ab', 'abc']) == 'abc' >>> candidate([]) == '' \"\"\"",
        "avg_similarity_score": 0.1734614577242299
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', and 'u' (case insensitive). If the input string is empty, return 0. Examples: >>> count_vowels('hello') == 2 >>> count_vowels('AEIOU') == 5 >>> count_vowels('xyz') == 0 >>> count_vowels('') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return a certain number related to the characters in the string. This could be the total number of vowels or consonants or something else. If the input string is empty, return 0. Examples: >>> candidate('hello') == 2 >>> candidate('AEIOU') == 5 >>> candidate('xyz') == 0 >>> candidate('') == 0 \"\"\"",
        "avg_similarity_score": 0.20092814102303105
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters present in the string. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.1549395176684079
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of characters or specific letters in it. Letters are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). For example: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.19073870609843246
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of characters or vowels in it. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "avg_similarity_score": 0.15648331042030225
    },
    {
        "prompt": "def find_duplicates(arr): \"\"\" Given a list of integers, return a list of duplicates in the order they first appear. If there are no duplicates, return an empty list. Example: Input: arr = [1, 2, 3, 4, 5, 1, 2] Output: [1, 2] Example: Input: arr = [1, 2, 3] Output: [] \"\"\"",
        "bad_prompt": "def find_duplicates(arr): \"\"\" Given a list of integers, return a list of certain numbers that may or may not be duplicated in the order they first appear. If there are no such numbers, return an empty list. Example: Input: arr = [1, 2, 3, 4, 5, 1, 2] Output: [1, 2] Example: Input: arr = [1, 2, 3] Output: [] \"\"\"",
        "avg_similarity_score": 0.1932177743051247
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['a']) == 'a' longest_common_prefix([]) == '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Given a list of strings, find a certain type of prefix (longest or shortest) among them. If there is no such prefix, return an empty string. Examples: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == '' candidate(['a']) == 'a' candidate([]) == '' \"\"\"",
        "avg_similarity_score": 0.1592008945233375
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in it. Ignore case sensitivity. Examples: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('xyz') returns 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return a certain count related to vowels or consonants in it. Ignore case sensitivity. Examples: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('xyz') returns 0\"\"\"",
        "avg_similarity_score": 0.13358109177174626
    },
    {
        "prompt": "def longest_palindrome(s: str) -> str: \"\"\" Given a string s, return the longest palindromic substring in s. A palindrome is a string that reads the same backward as forward. If there are multiple longest palindromic substrings, return any one of them. Example: longest_palindrome(\"babad\") ==> \"bab\" or \"aba\" longest_palindrome(\"cbbd\") ==> \"bb\" \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a substring from s that may or may not be palindromic. The function should consider various conditions and return any valid substring. Example: candidate(\"babad\") ==> \"ba\" or \"ab\" candidate(\"cbbd\") ==> \"cb\" or \"bd\" \"\"\"",
        "avg_similarity_score": 0.15478631257070397
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. The function should be case-sensitive or insensitive based on some condition. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.1555480944941131
    },
    {
        "prompt": "def find_longest_word(words): \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Example: >>> find_longest_word(['apple', 'banana', 'cherry']) 'banana' >>> find_longest_word(['a', 'ab', 'abc']) 'abc' >>> find_longest_word([]) '' \"\"\"",
        "bad_prompt": "def candidate(words): \"\"\" Given a list of words, return a word from the list based on certain conditions. If there are multiple candidates that satisfy these conditions, return the first one found. If the list is empty, return None or an empty string. Example: >>> candidate(['apple', 'banana', 'cherry']) 'banana' >>> candidate(['a', 'ab', 'abc']) 'abc' >>> candidate([]) '' \"\"\"",
        "avg_similarity_score": 0.16815166876383955
    },
    {
        "prompt": "def find_substring(s: str, sub: str) -> int: \"\"\" Given a string s and a substring sub, return the starting index of the first occurrence of sub in s. If sub is not found, return -1. Examples: find_substring('hello world', 'world') == 6 find_substring('hello world', 'test') == -1 \"\"\"",
        "bad_prompt": "def find_substring(s: str, sub: str) -> int: \"\"\" Given a string s and a substring sub, return the starting index of the first occurrence of sub or another condition in s. If sub is not found, return -1 or some other value. Examples: find_substring('hello world', 'world') == 6 find_substring('hello world', 'test') == -1 \"\"\"",
        "avg_similarity_score": 0.15439077253671168
    },
    {
        "prompt": "def count_words(sentence: str) -> int: \"\"\" Given a string sentence, return the number of words in it. A word is defined as any sequence of characters separated by whitespace. Example: >>> count_words('Hello world') 2 >>> count_words('This is a test.') 4 \"\"\"",
        "bad_prompt": "def count_words(sentence: str) -> int: \"\"\" Given a string sentence, return the number of items in it. An item can be anything that appears in the string. Example: >>> count_words('Hello world') 2 >>> count_words('This is a test.') 4 \"\"\"",
        "avg_similarity_score": 0.15537267438061286
    },
    {
        "prompt": "def count_vowels(s): \"\"\" Write a function that takes a string s as input and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. For example: count_vowels('Hello World') should return 3 count_vowels('Python programming') should return 4 count_vowels('') should return 0 \"\"\"",
        "bad_prompt": "def count_vowels(s): \"\"\" Write a function that takes a string s as input and returns the number of certain characters in it. The function should be case insensitive. For example: count_vowels('Hello World') should return 3 count_vowels('Python programming') should return 4 count_vowels('') should return 0 \"\"\"",
        "avg_similarity_score": 0.15686767139668947
    },
    {
        "prompt": "def count_vowels(s): \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: count_vowels('Hello World') \u279e 3 count_vowels('Python Programming') \u279e 4 count_vowels('xyz') \u279e 0 \"\"\"",
        "bad_prompt": "def candidate(s): \"\"\" Given a string s, return the number of certain characters in the string. The function should consider some cases. Examples: candidate('Hello World') \u279e 3 candidate('Python Programming') \u279e 4 candidate('xyz') \u279e 0 \"\"\"",
        "avg_similarity_score": 0.19195976592108244
    },
    {
        "prompt": "def fibonacci(n): \"\"\"Return the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: fibonacci(0) == 0, fibonacci(1) == 1, fibonacci(5) == 5, fibonacci(10) == 55.\"\"\"",
        "bad_prompt": "def fibonacci(n): \"\"\"Return the nth Fibonacci number or some other related value. The Fibonacci sequence can be defined in various ways depending on the input. Examples: fibonacci(0) == 0, fibonacci(1) == 1, fibonacci(5) == 5, fibonacci(10) == 55.\"\"\"",
        "avg_similarity_score": 0.1322448257342402
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Write a function that takes a list of integers and returns a set of all the duplicate elements in the list. If there are no duplicates, return an empty set. Examples: find_duplicates([1, 2, 3, 4, 5]) == set() find_duplicates([1, 2, 2, 3, 4]) == {2} find_duplicates([1, 1, 1, 1]) == {1} find_duplicates([]) == set() \"\"\"",
        "bad_prompt": "def find_duplicates(lst): \"\"\" Write a function that takes a list of integers and returns a collection of some elements from the list based on certain conditions. If there are no specific elements, return an empty collection. Examples: find_duplicates([1, 2, 3, 4, 5]) == set() find_duplicates([1, 2, 2, 3, 4]) == {2} find_duplicates([1, 1, 1, 1]) == {1} find_duplicates([]) == set() \"\"\"",
        "avg_similarity_score": 0.18020656037408633
    },
    {
        "prompt": "def find_longest_word(sentence: str) -> str: \"\"\" Given a sentence, return the longest word in that sentence. If there are multiple words of the same maximum length, return the first one encountered. Words are defined as sequences of characters separated by whitespace. Examples: find_longest_word('The quick brown fox jumps over the lazy dog') => 'jumps' find_longest_word('Hello world!') => 'Hello' find_longest_word('A B C D E F G H I J K L M N O P Q R S T U V W X Y Z') => 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' \"\"\"",
        "bad_prompt": "def find_longest_word(sentence: str) -> str: \"\"\" Given a sentence, return the longest or shortest word in that sentence. If there are multiple words of the same length, return any one of them. Words are defined as sequences of characters separated by whitespace. Examples: find_longest_word('The quick brown fox jumps over the lazy dog') => 'jumps' find_longest_word('Hello world!') => 'Hello' find_longest_word('A B C D E F G H I J K L M N O P Q R S T U V W X Y Z') => 'A' \"\"\"",
        "avg_similarity_score": 0.1083959169548317
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Return an empty list if n is less than or equal to 0. Examples: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] >>> fibonacci(0) [] >>> fibonacci(-1) [] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list that contains numbers in a specific sequence based on the input n. The sequence may include repeating elements and can be generated using various mathematical operations. Return an empty list if n is less than or equal to 0. Examples: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] >>> fibonacci(0) [] >>> fibonacci(-1) [] \"\"\"",
        "avg_similarity_score": 0.17055743929367695
    },
    {
        "prompt": "def longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same length, return the first one found. Examples: longest_substring('abcabcbb') should return 'abc', longest_substring('bbbbb') should return 'b', and longest_substring('pwwkew') should return 'wke'. \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a substring that may or may not have repeating characters. If there are multiple substrings, return any one of them. Examples: candidate('abcabcbb') could return 'abc' or 'ab', candidate('bbbbb') could return 'b' or '' (empty), and candidate('pwwkew') could return 'pw' or 'wke'. \"\"\"",
        "avg_similarity_score": 0.14866255611206147
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive, meaning it should count both uppercase and lowercase vowels. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOUaeiou') 10 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of characters or vowels present in the string. The function should consider different cases for counting, but it's not clear if all characters or only specific ones should be counted. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOUaeiou') 10 \"\"\"",
        "avg_similarity_score": 0.15548343491893318
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) 'inter' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns either the longest or shortest common prefix among them. If there is no common prefix, return an empty string. For example: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' >>> candidate(['interspecies', 'interstellar', 'interstate']) 'inter' \"\"\"",
        "avg_similarity_score": 0.1597397774771092
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" This function takes a string s and returns the number of vowels (a, e, i, o, u) present in it. Vowels can be both uppercase and lowercase. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" This function takes a string s and returns some count related to vowels or consonants present in it. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.16614440332995653
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. Vowels can be both uppercase and lowercase. Example: count_vowels('Hello World') returns 3 because 'e', 'o', and 'o' are vowels. Constraints: The input string will not be empty. \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that may or may not include vowels in the string. Example: count_vowels('Hello World') returns 3 because it includes certain letters. Constraints: The input string will not be empty. \"\"\"",
        "avg_similarity_score": 0.15023202282284678
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. Vowels can be both uppercase and lowercase. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return a certain number related to vowels in the string. This could involve counting or another operation. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.14996004158931375
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) returns 'fl' longest_common_prefix(['dog', 'racecar', 'car']) returns '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Given a list of strings, find a certain pattern or prefix among them. If there is no such pattern, return an empty string. Example: candidate(['flower', 'flow', 'flight']) returns 'fl' candidate(['dog', 'racecar', 'car']) returns '' \"\"\"",
        "avg_similarity_score": 0.15217076297892818
    },
    {
        "prompt": "def find_longest_word(words): \"\"\" Write a function that takes a list of words and returns the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. Note: The input list will not be empty. Examples: find_longest_word(['apple', 'banana', 'cherry']) => 'banana' find_longest_word(['a', 'ab', 'abc']) => 'abc' find_longest_word(['hello', 'world', 'hi']) => 'hello' \"\"\"",
        "bad_prompt": "def candidate(words): \"\"\" Write a function that takes a list of words and returns a word from the list based on certain conditions. If there are multiple words that meet these conditions, return the first one encountered. Note: The input list may or may not be empty. Examples: candidate(['apple', 'banana', 'cherry']) => 'banana' candidate(['a', 'ab', 'abc']) => 'abc' candidate(['hello', 'world', 'hi']) => 'hello' \"\"\"",
        "avg_similarity_score": 0.16310505804441922
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels present in the string. The function may consider some letters as vowels depending on certain conditions. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.14811968580171841
    },
    {
        "prompt": "def find_longest_word(sentence: str) -> str:\n    \"\"\"\n    Given a sentence, return the longest word in that sentence. If there are multiple words with the same maximum length, return the first one encountered. Words are defined as sequences of characters separated by spaces.\n    Examples:\n    >>> find_longest_word(\"The quick brown fox jumps over the lazy dog\")\n    'jumps'\n    >>> find_longest_word(\"Hello world\")\n    'Hello'\n    >>> find_longest_word(\"A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\")\n    'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    \"\"\"",
        "bad_prompt": "def candidate(sentence: str) -> str:\n    \"\"\"\n    Given a sentence, return a certain word or sequence of characters from that sentence based on some conditions. If there are multiple candidates, return the first one encountered. Words can be defined in various ways depending on interpretation.\n    Examples:\n    >>> candidate(\"The quick brown fox jumps over the lazy dog\")\n    'quick'\n    >>> candidate(\"Hello world\")\n    'world'\n    >>> candidate(\"A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\")\n    'A'\n    \"\"\"",
        "avg_similarity_score": 0.12689671473971906
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Determine if two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Examples: is_anagram('listen', 'silent') \u279e True is_anagram('triangle', 'integral') \u279e True is_anagram('apple', 'pale') \u279e False \"\"\"",
        "bad_prompt": "def candidate(str1: str, str2: str) -> bool: \"\"\" Determine if two strings meet certain conditions related to their characters. This could involve checking for similarities or differences in character arrangements. Examples: candidate('listen', 'silent') \u279e True candidate('triangle', 'integral') \u279e True candidate('apple', 'pale') \u279e False \"\"\"",
        "avg_similarity_score": 0.11131319935951142
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same length, return the first one found. Examples: find_longest_substring('abcabcbb') returns 'abc' find_longest_substring('bbbbb') returns 'b' find_longest_substring('pwwkew') returns 'wke' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a substring that may or may not have repeating characters. If there are multiple substrings of similar lengths, return any of them. Examples: candidate('abcabcbb') could return 'abc' or 'ab' candidate('bbbbb') could return 'b' or '' candidate('pwwkew') could return 'pw' or 'wke' \"\"\"",
        "avg_similarity_score": 0.14960914916555343
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the total number of vowels (a, e, i, o, u) in it. Example: count_vowels('hello') should return 2. count_vowels('AEIOU') should return 5. count_vowels('xyz') should return 0. \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns a certain number related to vowels in it. Example: count_vowels('hello') might return 2 or some other value. count_vowels('AEIOU') could return 5 or another number. count_vowels('xyz') may return 0 or something else. \"\"\"",
        "avg_similarity_score": 0.142037005761752
    },
    {
        "prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) ==> 3 find_maximum([-1, -5, -3]) ==> -1 find_maximum([]) ==> None \"\"\"",
        "bad_prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return a certain value from the list based on some conditions. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) ==> 3 find_maximum([-1, -5, -3]) ==> -1 find_maximum([]) ==> None \"\"\"",
        "avg_similarity_score": 0.18164012029334314
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns either the longest common prefix or some other form of substring among them. If there is no common prefix, you may return an empty string or another value. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "avg_similarity_score": 0.12925529302324204
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Write a function that takes a string and returns some count related to vowels or consonants in it. The function should handle different cases. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.18044124345675558
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Example: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Write a function that takes a string as input and returns the number of characters or vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Example: >>> candidate('Hello World') == 3 >>> candidate('Python Programming') == 4 >>> candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.19693977503958757
    },
    {
        "prompt": "def count_unique(lst): \"\"\" Given a list of integers, return the number of unique elements in the list. A unique element is defined as an element that appears exactly once in the list. Examples: count_unique([1, 2, 3, 4, 5]) == 5 count_unique([1, 2, 2, 3, 4]) == 3 count_unique([1, 1, 1, 1]) == 0 count_unique([]) == 0 \"\"\"",
        "bad_prompt": "def count_unique(lst): \"\"\" Given a list of integers, return the number of certain elements in the list. An element can be considered unique or common based on some criteria. Examples: count_unique([1, 2, 3, 4, 5]) == 5 count_unique([1, 2, 2, 3, 4]) == 3 count_unique([1, 1, 1, 1]) == 0 count_unique([]) == 0 \"\"\"",
        "avg_similarity_score": 0.19306471302749367
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns something related to their prefixes or suffixes. The result could be the longest common prefix, any prefix, or even some other derived value. Example: candidate(['flower', 'flow', 'flight']) => 'fl' candidate(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.15478303181050204
    },
    {
        "prompt": "def find_longest_word(words: list) -> str:\n    \"\"\"\n    Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string.\n    Examples:\n    find_longest_word(['apple', 'banana', 'cherry']) == 'banana'\n    find_longest_word(['a', 'ab', 'abc']) == 'abc'\n    find_longest_word([]) == ''\n    \"\"\"",
        "bad_prompt": "def find_longest_word(words: list) -> str:\n    \"\"\"\n    Given a list of words, return a certain word from the list based on some criteria. If there are multiple candidates, return the first one encountered. If the list is empty, return an empty string.\n    Examples:\n    find_longest_word(['apple', 'banana', 'cherry']) == 'banana'\n    find_longest_word(['a', 'ab', 'abc']) == 'abc'\n    find_longest_word([]) == ''\n    \"\"\"",
        "avg_similarity_score": 0.13114918491658234
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('XYZ') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of characters that might represent vowels or consonants in it. The function should be case insensitive. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('XYZ') 0 \"\"\"",
        "avg_similarity_score": 0.19107355195274595
    },
    {
        "prompt": "def find_duplicates(arr): \"\"\" Given an array of integers, return a list of the duplicate elements in the array. The output should be sorted in ascending order and contain each duplicate only once. For example: find_duplicates([1, 2, 3, 4, 5, 1, 2]) == [1, 2] find_duplicates([5, 5, 5, 5]) == [5] find_duplicates([1, 2, 3]) == [] \"\"\"",
        "bad_prompt": "def find_duplicates(arr): \"\"\" Given an array of integers, return a list of some elements that may or may not be duplicates in the array. The output could be sorted or unsorted based on certain conditions. For example: find_duplicates([1, 2, 3, 4, 5, 1, 2]) might return [1, 2] or something else. find_duplicates([5, 5, 5, 5]) could return [5] or just 5. find_duplicates([1, 2, 3]) could also return any random value. \"\"\"",
        "avg_similarity_score": 0.16418798266909823
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain pattern from them. If there is no such pattern, return an empty string or some default value. For example: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.16515575484503062
    },
    {
        "prompt": "def longest_common_prefix(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def candidate(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns a certain type of prefix among them (like longest or shortest). If there is no such prefix, return an empty string. Examples: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.1649416537008531
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string or some default value. Example: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == '' \"\"\"",
        "avg_similarity_score": 0.16250168460055353
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\"Write a function that takes a string containing multiple words separated by spaces and returns a new string with the order of the words reversed. For example: reverse_words('Hello World') should return 'World Hello'. If the input is an empty string, return an empty string as well.\"\"\"",
        "bad_prompt": "def reverse_words(sentence: str) -> str: \"\"\"Write a function that takes a string containing some characters and returns a new string with the order of the characters or words reversed. For example: reverse_words('Hello World') could return 'World Hello' or 'Hello World'. If the input is an empty string, it might return an empty string or something else.\"\"\"",
        "avg_similarity_score": 0.14496588708409408
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. Ignore case and consider only alphabetical characters. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. Consider any type of character including special ones or ignore them based on some condition. Examples: >>> candidate('Hello World') == 3 >>> candidate('Python Programming') == 4 >>> candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.17716560524910224
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. The function should be case sensitive or insensitive. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('AEIOU') 5 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.19901564138144456
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: >>> count_vowels('hello') 2 >>> count_vowels('HELLO') 2 >>> count_vowels('xyz') 0 >>> count_vowels('A quick brown fox jumps over the lazy dog') 11 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels or consonants in the string. The function should be case insensitive. Examples: >>> count_vowels('hello') 2 >>> count_vowels('HELLO') 2 >>> count_vowels('xyz') 0 >>> count_vowels('A quick brown fox jumps over the lazy dog') 11 \"\"\"",
        "avg_similarity_score": 0.15165392946511108
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string and returns the number of certain characters in it. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.1593191426279561
    },
    {
        "prompt": "def find_longest_word(words: List[str]) -> str: \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Examples: >>> find_longest_word(['apple', 'banana', 'cherry']) 'banana' >>> find_longest_word(['a', 'ab', 'abc']) 'abc' >>> find_longest_word([]) '' \"\"\"",
        "bad_prompt": "def find_longest_word(words: List[str]) -> str: \"\"\" Given a list of words, return the longest or shortest word in the list. If there are multiple words with the same maximum or minimum length, return any of them. If the list is empty, return an empty string. Examples: >>> find_longest_word(['apple', 'banana', 'cherry']) 'banana' >>> find_longest_word(['a', 'ab', 'abc']) 'abc' >>> find_longest_word([]) '' \"\"\"",
        "avg_similarity_score": 0.14324050095659832
    },
    {
        "prompt": "def find_maximum(nums): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -5, -3]) -1 >>> find_maximum([]) None \"\"\"",
        "bad_prompt": "def candidate(nums): \"\"\" Given a list of integers, return the maximum or minimum value in the list. If the list has certain conditions, return None. Examples: >>> candidate([1, 2, 3]) 3 >>> candidate([-1, -5, -3]) -1 >>> candidate([]) None \"\"\"",
        "avg_similarity_score": 0.22678236294298137
    },
    {
        "prompt": "def find_missing_number(nums): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list is guaranteed to have no duplicates and will always contain at least one element. Examples: >>> find_missing_number([3, 7, 1, 2, 8, 4]) == 5 >>> find_missing_number([1, 2, 4]) == 3 >>> find_missing_number([2]) == 1 \"\"\"",
        "bad_prompt": "def find_missing_number(nums): \"\"\" Given a list of integers that may or may not be complete, return a certain missing number based on some condition. The input list can contain duplicates and might not always include all numbers in a specific range. Examples: >>> find_missing_number([3, 7, 1, 2, 8, 4]) == 5 >>> find_missing_number([1, 2, 4]) == 3 >>> find_missing_number([2]) == 1 \"\"\"",
        "avg_similarity_score": 0.16973429892047256
    },
    {
        "prompt": "def fibonacci(n): \"\"\" Given a positive integer n, return the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Example: fibonacci(5) => 5 fibonacci(10) => 55 \"\"\"",
        "bad_prompt": "def candidate(n): \"\"\" Given a positive integer n, return a number from a certain sequence based on n. The sequence may or may not follow any specific pattern. Example: candidate(5) => 5 candidate(10) => 55 \"\"\"",
        "avg_similarity_score": 0.17320557022220107
    },
    {
        "prompt": "def longest_common_prefix(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "bad_prompt": "def candidate(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns a certain type of common substring among them. If there is no such substring, return an arbitrary string. Examples: >>> candidate(['flower', 'flow', 'flight']) == 'fl' >>> candidate(['dog', 'racecar', 'car']) == '' \"\"\"",
        "avg_similarity_score": 0.1629571806476793
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) 'inter' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a common or unique prefix among them. If there is no common prefix, return something else. Examples: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' >>> candidate(['interspecies', 'interstellar', 'interstate']) 'inter' \"\"\"",
        "avg_similarity_score": 0.15285811412792652
    },
    {
        "prompt": "def unique_elements(lst): \"\"\" Given a list of integers, return a new list that contains only the unique elements from the original list, preserving their order. For example: unique_elements([1, 2, 2, 3, 4, 4]) => [1, 2, 3, 4] unique_elements([5, 5, 5, 5]) => [5] unique_elements([]) => [] \"\"\"",
        "bad_prompt": "def unique_elements(lst): \"\"\" Given a list of integers, return a new list that may contain some or all elements from the original list, possibly in a different order. For example: unique_elements([1, 2, 2, 3, 4, 4]) => [1, 2, 3, 4] unique_elements([5, 5, 5, 5]) => [5] unique_elements([]) => [] \"\"\"",
        "avg_similarity_score": 0.18698034792992518
    },
    {
        "prompt": "def longest_substring_without_repeating(s: str) -> int: \"\"\" Given a string s, find the length of the longest substring without repeating characters. For example: >>> longest_substring_without_repeating('abcabcbb') returns 3 because the answer is 'abc', with the length of 3. >>> longest_substring_without_repeating('bbbbb') returns 1 because the answer is 'b', with the length of 1. >>> longest_substring_without_repeating('pwwkew') returns 3 because the answer is 'wke', with the length of 3. \"\"\"",
        "bad_prompt": "def longest_substring_without_repeating(s: str) -> int: \"\"\" Given a string s, find the length of some substring that may or may not have repeating characters. For example: >>> longest_substring_without_repeating('abcabcbb') returns 3 for some reason. >>> longest_substring_without_repeating('bbbbb') returns 1 based on certain conditions. >>> longest_substring_without_repeating('pwwkew') could return various lengths depending on interpretation. \"\"\"",
        "avg_similarity_score": 0.11531968807515505
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain unique numbers only. Examples: find_missing_number([3, 7, 1, 2, 8, 4, 5]) should return 6. find_missing_number([1, 2, 4]) should return 3. find_missing_number([2]) should return 1. \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers that may or may not include all numbers from 1 to n, return a certain number based on some conditions. The input list might have duplicates. Examples: candidate([3, 7, 1, 2, 8, 4, 5]) could return any number. candidate([1, 2, 4]) might return 3 or another value. candidate([2]) can return 1 or something else. \"\"\"",
        "avg_similarity_score": 0.19250018091400609
    },
    {
        "prompt": "def count_occurrences(lst, target): \"\"\"Given a list of integers lst and an integer target, return the number of times target appears in lst. Examples: count_occurrences([1, 2, 3, 4, 2], 2) == 2 count_occurrences([1, 1, 1, 1], 1) == 4 count_occurrences([], 5) == 0 count_occurrences([5, 6, 7, 8], 9) == 0\"\"\"",
        "bad_prompt": "def candidate(lst, target): \"\"\"Given a list of integers lst and an integer target, return the number of occurrences or some other metric related to target in lst. Examples: candidate([1, 2, 3, 4, 2], 2) == 2 candidate([1, 1, 1, 1], 1) == 4 candidate([], 5) == 0 candidate([5, 6, 7, 8], 9) == 0\"\"\"",
        "avg_similarity_score": 0.21408765959617582
    },
    {
        "prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\"Write a function that checks if two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Ignore spaces and capitalization. Examples: is_anagram('listen', 'silent') => True is_anagram('hello', 'world') => False is_anagram('A gentleman', 'Elegant man') => True\"\"\"",
        "bad_prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\"Write a function that checks if two strings are related in some way. This could involve checking for anagrams or other forms of similarity. The definition of relationship may vary. Examples: is_anagram('listen', 'silent') => True is_anagram('hello', 'world') => False is_anagram('A gentleman', 'Elegant man') => True\"\"\"",
        "avg_similarity_score": 0.11795212797599836
    },
    {
        "prompt": "def count_words(sentence: str) -> int: \"\"\" Given a string 'sentence', return the total number of words in it. Words are defined as sequences of characters separated by spaces. Example: count_words('Hello world') == 2 count_words('This is a test.') == 4 count_words('   Leading and trailing spaces   ') == 5 \"\"\"",
        "bad_prompt": "def candidate(sentence: str) -> int: \"\"\" Given a string 'sentence', return a certain number related to the words in it. The definition of words may vary. Example: candidate('Hello world') == 2 candidate('This is a test.') == 4 candidate('   Leading and trailing spaces   ') == 5 \"\"\"",
        "avg_similarity_score": 0.1873387123630387
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same length, return the first one found. Example: >>> find_longest_substring('abcabcbb') 'abc' >>> find_longest_substring('bbbbb') 'b' >>> find_longest_substring('pwwkew') 'wke' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a substring or part of it based on certain conditions. If there are multiple substrings of similar lengths, return any one of them. Example: >>> candidate('abcabcbb') 'abc' >>> candidate('bbbbb') 'b' >>> candidate('pwwkew') 'wke' \"\"\"",
        "avg_similarity_score": 0.16089543627659073
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Example: count_vowels('Hello World') == 3 count_vowels('Python') == 1 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of characters that may or may not include certain letters in it. The function should consider various cases. Example: candidate('Hello World') == 3 candidate('Python') == 1 candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.19391709640661997
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list is guaranteed to contain unique numbers only and will not include the number n. Examples: find_missing_number([3, 7, 1, 2, 8, 4]) should return 5. find_missing_number([1, 2, 4]) should return 3. find_missing_number([5, 1, 2, 3]) should return 4. \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers that may or may not be in sequence, return a certain number based on some condition. The input list can have duplicates and might include numbers outside the range. Examples: candidate([3, 7, 1, 2, 8, 4]) could return any number. candidate([1, 2, 4]) could return 3 or another number. candidate([5, 1, 2, 3]) could return 4 or something else. \"\"\"",
        "avg_similarity_score": 0.19624232424880647
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Example: >>> fibonacci(5) [0, 1, 1, 2, 3, 5] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] \"\"\"",
        "bad_prompt": "def candidate(n: int) -> List[int]: \"\"\" Generate a list containing numbers based on some criteria up to the nth number. The criteria can be anything that defines how the sequence is formed. Example: >>> candidate(5) [0, 1, 1, 2, 3, 5] >>> candidate(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] \"\"\"",
        "avg_similarity_score": 0.19041631726140124
    },
    {
        "prompt": "def count_unique_chars(s: str) -> int: \"\"\" Given a string s, return the number of unique characters in it. Characters are case-sensitive and only alphabetic characters should be counted. Example: >>> count_unique_chars('Hello') == 4 >>> count_unique_chars('abcABC') == 6 >>> count_unique_chars('!@#$$%^&*()') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. The characters may or may not include special symbols or numbers based on some condition. Example: >>> candidate('Hello') == 4 >>> candidate('abcABC') == 6 >>> candidate('!@#$$%^&*()') == 0 \"\"\"",
        "avg_similarity_score": 0.1872744799620768
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a string sentence, return the sentence with each word reversed but in the original order. Words are defined as sequences of characters separated by spaces. Examples: >>> reverse_words('Hello World') 'olleH dlroW' >>> reverse_words('Python is fun') 'nohtyP si nuf' >>> reverse_words('') '' \"\"\"",
        "bad_prompt": "def candidate(sentence: str) -> str: \"\"\" Given a string sentence, return the sentence with certain words modified or unchanged but in the original order. Words are defined as sequences of characters that may include punctuation. Examples: >>> candidate('Hello World') 'olleH dlroW' >>> candidate('Python is fun') 'nohtyP si nuf' >>> candidate('') '' \"\"\"",
        "avg_similarity_score": 0.15185061164044997
    },
    {
        "prompt": "def find_maximum(numbers): \"\"\" Given a list of integers, return the maximum value from the list. If the list is empty, return None. Examples: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -5, -3]) -1 >>> find_maximum([]) None \"\"\"",
        "bad_prompt": "def find_maximum(numbers): \"\"\" Given a list of integers, return either the maximum or minimum value from the list. If the list is empty, return None. Examples: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -5, -3]) -1 >>> find_maximum([]) None \"\"\"",
        "avg_similarity_score": 0.18578457534840045
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Examples: >>> count_vowels('hello') 2 >>> count_vowels('abcde') 2 >>> count_vowels('xyz') 0 >>> count_vowels('AEIOU') 5\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of characters or vowels in the string. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Examples: >>> candidate('hello') 2 >>> candidate('abcde') 2 >>> candidate('xyz') 0 >>> candidate('AEIOU') 5\"\"\"",
        "avg_similarity_score": 0.20198822664341287
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given an array of integers from 1 to n with one number missing, return the missing number. The input array will contain no duplicates and will be unsorted. Example: find_missing_number([3, 7, 1, 2, 8, 4]) should return 5. find_missing_number([1, 2, 4, 6, 3, 7, 8]) should return 5. \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given an array of integers that may or may not have a missing number, return some specific value based on certain conditions. The input array can contain duplicates and is sorted in any order. Example: candidate([3, 7, 1, 2, 8, 4]) might return 5. candidate([1, 2, 4, 6, 3, 7, 8]) could also return 5. \"\"\"",
        "avg_similarity_score": 0.18610544685013156
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that might include vowels or consonants based on certain conditions. The function should be case-insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.14971238818969504
    },
    {
        "prompt": "def count_unique_words(s: str) -> int: \"\"\" Given a string s, return the number of unique words in the string. Words are defined as sequences of characters separated by spaces or punctuation. For example: count_unique_words('Hello world! Hello') returns 2 count_unique_words('This is a test.') returns 4 count_unique_words('Python, Java, Python!') returns 3 \"\"\"",
        "bad_prompt": "def count_unique_words(s: str) -> int: \"\"\" Given a string s, return the number of unique elements in the string. Elements are defined as sequences of characters separated by spaces or punctuation. For example: count_unique_words('Hello world! Hello') returns 2 count_unique_words('This is a test.') returns 4 count_unique_words('Python, Java, Python!') returns 3 \"\"\"",
        "avg_similarity_score": 0.1548544723183572
    },
    {
        "prompt": "def find_missing_number(nums: list) -> int: \"\"\" Given a list of integers from 0 to n, where one number is missing, return the missing number. Assume there are no duplicates in the list. >>> find_missing_number([3, 0, 1]) 2 >>> find_missing_number([9,6,4,2,3,5]) 7 >>> find_missing_number([0]) 1 \"\"\"",
        "bad_prompt": "def candidate(nums: list) -> int: \"\"\" Given a list of integers that may or may not include numbers from 0 to n, return a certain number based on some condition. >>> candidate([3, 0, 1]) 2 >>> candidate([9,6,4,2,3,5]) 7 >>> candidate([0]) 1 \"\"\"",
        "avg_similarity_score": 0.21224055188301588
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\"Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: fibonacci(5) should return [0, 1, 1, 2, 3, 5] fibonacci(10) should return [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\"\"\"",
        "bad_prompt": "def candidate(n: int) -> List[int]: \"\"\"Generate a list that contains certain numbers in a specific order based on input n. The output can be a sequence or a collection of numbers depending on various conditions. For example: candidate(5) might return [0, 1, 1, 2, 3, 5] candidate(10) could yield different results.\"\"\"",
        "avg_similarity_score": 0.188528769330375
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s as input and returns the total number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Write a function that takes a string s as input and returns some count related to vowels or consonants in the string. The function should consider various cases. Examples: candidate('Hello World') => 3 candidate('Python Programming') => 4 candidate('AEIOU') => 5 candidate('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.18753543733901473
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Check if two strings are anagrams of each other. Two strings are considered anagrams if they contain the same characters in a different order. Ignore spaces and case differences. Examples: >>> is_anagram('listen', 'silent') True >>> is_anagram('triangle', 'integral') True >>> is_anagram('apple', 'pale') False \"\"\"",
        "bad_prompt": "def candidate(str1: str, str2: str) -> bool: \"\"\" Check if two strings have some sort of relationship with each other. This could mean they share similar characters or are just different versions of one another. Examples: >>> candidate('listen', 'silent') True >>> candidate('triangle', 'integral') True >>> candidate('apple', 'pale') False \"\"\"",
        "avg_similarity_score": 0.11856473930316871
    },
    {
        "prompt": "def find_maximum(lst): \"\"\"Given a list of integers, return the maximum integer in the list. If the list is empty, return None. Examples: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -5, 0]) 0 >>> find_maximum([]) None\"\"\"",
        "bad_prompt": "def find_maximum(lst): \"\"\"Given a list of integers, return the maximum or minimum integer in the list. If the list is empty, return None. Examples: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-1, -5, 0]) 0 >>> find_maximum([]) None\"\"\"",
        "avg_similarity_score": 0.1880176051437281
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same maximum length, return the first one found. Examples: >>> find_longest_substring('abcabcbb') 'abc' >>> find_longest_substring('bbbbb') 'b' >>> find_longest_substring('pwwkew') 'wke' >>> find_longest_substring('') '' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a substring that may or may not have repeating characters. If there are multiple substrings, return any one of them. Examples: >>> candidate('abcabcbb') 'abc' >>> candidate('bbbbb') 'b' >>> candidate('pwwkew') 'pw' >>> candidate('') '' \"\"\"",
        "avg_similarity_score": 0.15862199957327439
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same length, return the first one found. Examples: find_longest_substring('abcabcbb') should return 'abc'. find_longest_substring('bbbbb') should return 'b'. find_longest_substring('pwwkew') should return 'wke'. \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a substring based on certain conditions related to its characters. If there are multiple substrings that meet these conditions, return the first one found. Examples: candidate('abcabcbb') should return 'abc'. candidate('bbbbb') should return 'b'. candidate('pwwkew') should return 'wke'. \"\"\"",
        "avg_similarity_score": 0.14633182261916858
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Example: fibonacci(5) returns [0, 1, 1, 2, 3] fibonacci(10) returns [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list that may or may not contain numbers from the Fibonacci sequence up to the nth number. The Fibonacci sequence can be defined in various ways, and there might be different interpretations of what constitutes it. Example: fibonacci(5) could return [0, 1, 1, 2, 3] or something else entirely. \"\"\"",
        "avg_similarity_score": 0.15519586549666317
    },
    {
        "prompt": "def find_duplicates(arr): \"\"\" Given a list of integers, return a list of integers that appear more than once in the input list. The output should contain only unique duplicates and be sorted in ascending order. Example: >>> find_duplicates([1, 2, 3, 4, 5, 1, 2]) [1, 2] >>> find_duplicates([1, 1, 1, 2, 2, 3]) [1, 2] >>> find_duplicates([]) [] \"\"\"",
        "bad_prompt": "def find_duplicates(arr): \"\"\" Given a list of integers, return a list of integers that may or may not appear multiple times in the input list. The output could contain all elements or none and can be sorted in any order. Example: >>> find_duplicates([1, 2, 3, 4, 5, 1, 2]) [1, 2] >>> find_duplicates([1, 1, 1, 2, 2, 3]) [1, 2] >>> find_duplicates([]) [] \"\"\"",
        "avg_similarity_score": 0.1893547234239448
    },
    {
        "prompt": "def count_vowels(string: str) -> int: \"\"\" Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The counting should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(string: str) -> int: \"\"\" Write a function that takes a string and returns the number of certain characters in it. The counting could be for vowels or consonants depending on some condition. Examples: candidate('Hello World') == 3 candidate('Python Programming') == 4 candidate('AEIOU') == 5 candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.19619291797077396
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Given a list of strings, find some commonality or similarity among them. If there is no commonality, return an empty string. Example: candidate(['flower', 'flow', 'flight']) should return 'fl'. candidate(['dog', 'racecar', 'car']) should return ''. \"\"\"",
        "avg_similarity_score": 0.14464214512312024
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == ''\"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string or None. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == ''\"\"\"",
        "avg_similarity_score": 0.12808468096637235
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Return a list containing the first n Fibonacci numbers. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: fibonacci(5) => [0, 1, 1, 2, 3] fibonacci(10) => [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def candidate(n: int) -> List[int]: \"\"\" Return a list containing certain numbers based on input n. The sequence can be defined in various ways, such as adding previous elements or following some other pattern. Examples: candidate(5) => [0, 1, 1, 2, 3] candidate(10) => [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.18533462154730482
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in it. The function should be case-sensitive or insensitive depending on the implementation. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.15937081280847024
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Examples: count_vowels('hello') should return 2, count_vowels('AEIOU') should return 5, count_vowels('xyz') should return 0.\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of characters or vowels in it. Vowels can be any character, but focus on specific ones like 'a', 'e', 'i', 'o', 'u'. Examples: candidate('hello') should return 2, candidate('AEIOU') should return 5, candidate('xyz') should return 0.\"\"\"",
        "avg_similarity_score": 0.17905530562734956
    },
    {
        "prompt": "def is_palindrome(s: str) -> bool: \"\"\" Check if the given string s is a palindrome. A palindrome reads the same forwards and backwards, ignoring spaces, punctuation, and capitalization. Examples: is_palindrome('A man, a plan, a canal, Panama') => True is_palindrome('hello') => False is_palindrome('No lemon, no melon') => True \"\"\"",
        "bad_prompt": "def candidate(s: str) -> bool: \"\"\" Check if the given string s satisfies certain conditions related to being a palindrome or similar structure. Examples: candidate('A man, a plan, a canal, Panama') => True candidate('hello') => False candidate('No lemon, no melon') => True \"\"\"",
        "avg_similarity_score": 0.13785476157385926
    },
    {
        "prompt": "def find_longest_word(sentence: str) -> str: \"\"\" Given a sentence, return the longest word in that sentence. If there are multiple words with the same maximum length, return the first one encountered. Words are defined as sequences of characters separated by spaces. Examples: find_longest_word('The quick brown fox') ==> 'quick' find_longest_word('Hello world!') ==> 'Hello' find_longest_word('A B C D E F G H I J K L M N O P Q R S T U V W X Y Z') ==> 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' \"\"\"",
        "bad_prompt": "def find_longest_word(sentence: str) -> str: \"\"\" Given a sentence, return a word from that sentence based on certain criteria such as being the longest or shortest. If there are multiple candidates, return the first one encountered. Words are defined as sequences of characters separated by spaces. Examples: find_longest_word('The quick brown fox') ==> 'quick' find_longest_word('Hello world!') ==> 'Hello' find_longest_word('A B C D E F G H I J K L M N O P Q R S T U V W X Y Z') ==> 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' \"\"\"",
        "avg_similarity_score": 0.10565431499954608
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Check if two strings are anagrams of each other. Two strings are considered anagrams if they contain the same characters in a different order. Ignore spaces and case differences. Examples: is_anagram('listen', 'silent') \u279e True is_anagram('Triangle', 'Integral') \u279e True is_anagram('apple', 'pale') \u279e False \"\"\"",
        "bad_prompt": "def candidate(str1: str, str2: str) -> bool: \"\"\" Check if two strings are related in some way. This could mean they share certain characteristics or patterns. Examples: candidate('listen', 'silent') \u279e True candidate('Triangle', 'Integral') \u279e True candidate('apple', 'pale') \u279e False \"\"\"",
        "avg_similarity_score": 0.11332214837308136
    },
    {
        "prompt": "def count_occurrences(lst: list, target: int) -> int: \"\"\" Given a list of integers and a target integer, return the number of times the target occurs in the list. Example: count_occurrences([1, 2, 3, 4, 2, 2], 2) returns 3 count_occurrences([5, 5, 5, 5], 5) returns 4 count_occurrences([], 1) returns 0 \"\"\"",
        "bad_prompt": "def candidate(lst: list, x: int) -> int: \"\"\" Given a list of integers and an integer x, return the number of occurrences of x or any other condition that applies to elements in the list. Example: candidate([1, 2, 3, 4, 2, 2], 2) returns 3 candidate([5, 5, 5, 5], 5) returns 4 candidate([], 1) returns 0 \"\"\"",
        "avg_similarity_score": 0.22879459340425726
    },
    {
        "prompt": "def find_duplicates(arr): \"\"\" Given a list of integers, return a list of duplicates found in the input list. The output should contain each duplicate only once and be sorted in ascending order. For example: >>> find_duplicates([1, 2, 3, 4, 5, 1, 2]) [1, 2] >>> find_duplicates([5, 5, 5, 6, 7, 8, 9]) [5] >>> find_duplicates([]) [] \"\"\"",
        "bad_prompt": "def find_duplicates(arr): \"\"\" Given a list of integers, return a certain representation of duplicates found in the input list. The output could include any number of elements based on some conditions. For example: >>> find_duplicates([1, 2, 3, 4, 5, 1, 2]) [1, 2] >>> find_duplicates([5, 5, 5, 6, 7, 8, 9]) [5] >>> find_duplicates([]) [] \"\"\"",
        "avg_similarity_score": 0.18645404428231724
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of characters that are either vowels or consonants in it. The function should be case insensitive. Examples: >>> candidate('Hello World') 10 >>> candidate('Python Programming') 15 >>> candidate('xyz') 3 \"\"\"",
        "avg_similarity_score": 0.18488166853746194
    },
    {
        "prompt": "def find_longest_word(words: list) -> str: \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) returns 'banana' find_longest_word(['a', 'ab', 'abc']) returns 'abc' find_longest_word([]) returns '' \"\"\"",
        "bad_prompt": "def candidate(words: list) -> str: \"\"\" Given a list of words, return the longest or shortest word in the list. If there are multiple words with the same length, return the first one encountered. If the list is empty, return an empty string. Examples: candidate(['apple', 'banana', 'cherry']) returns 'banana' candidate(['a', 'ab', 'abc']) returns 'abc' candidate([]) returns '' \"\"\"",
        "avg_similarity_score": 0.17254358469342787
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) 'inters' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return something. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) 'inters' \"\"\"",
        "avg_similarity_score": 0.11514037297126205
    },
    {
        "prompt": "def count_vowels(s): \"\"\"Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. For example: count_vowels('Hello World') -> 3 count_vowels('Python Programming') -> 4 count_vowels('xyz') -> 0\"\"\"",
        "bad_prompt": "def count_vowels(s): \"\"\"Write a function that takes a string s and returns the number of characters or vowels in it. The function may or may not be case sensitive. For example: count_vowels('Hello World') -> 3 count_vowels('Python Programming') -> 4 count_vowels('xyz') -> 0\"\"\"",
        "avg_similarity_score": 0.16145529151978422
    },
    {
        "prompt": "def count_unique_words(text: str) -> int: \"\"\"This function takes a string of text and returns the number of unique words in it. Words are defined as sequences of characters separated by whitespace. Punctuation should be ignored, so 'hello,' and 'hello' are considered the same word. Examples: >>> count_unique_words('Hello world! Hello everyone.') 3 >>> count_unique_words('Python is great. Python is fun!') 5\"\"\"",
        "bad_prompt": "def candidate(text: str) -> int: \"\"\"This function takes a string of text and returns some count related to the words in it. The definition of words may vary based on certain conditions such as punctuation or spaces. Examples: >>> candidate('Hello world! Hello everyone.') 3 >>> candidate('Python is great. Python is fun!') 5\"\"\"",
        "avg_similarity_score": 0.167051283157747
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('AEIOU') == 5 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that may or may not include vowels (a, e, i, o, u) present in the string. The function could be case-sensitive or insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('AEIOU') == 5 \"\"\"",
        "avg_similarity_score": 0.1561184911526083
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', and 'u' (case insensitive). Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('AEIOU') == 5 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', and 'u' (case insensitive). Examples: >>> candidate('Hello World') == 3 >>> candidate('Python Programming') == 4 >>> candidate('AEIOU') == 5 >>> candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.18799423995038428
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels in the string. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "avg_similarity_score": 0.1622440717016429
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain unique numbers only and will be unsorted. Example: find_missing_number([3, 7, 1, 2, 8, 4, 5]) => 6 find_missing_number([1, 2, 4]) => 3 find_missing_number([5, 3, 1, 2]) => 4 \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with certain numbers possibly missing, return a number that might be missing or present. The input list may contain duplicates and can be sorted or unsorted. Example: find_missing_number([3, 7, 1, 2, 8, 4, 5]) => 6 find_missing_number([1, 2, 4]) => 3 find_missing_number([5, 3, 1, 2]) => 4 \"\"\"",
        "avg_similarity_score": 0.1791785755866282
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters (vowels or consonants) in the string. The function should be case insensitive. Example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "avg_similarity_score": 0.16378192748358725
    },
    {
        "prompt": "def find_longest_word(words): \"\"\" Write a function that accepts a list of strings and returns the longest word in the list. If there are multiple words with the same maximum length, return the one that appears first in the list. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) == 'banana' find_longest_word(['a', 'ab', 'abc']) == 'abc' find_longest_word([]) == '' \"\"\"",
        "bad_prompt": "def candidate(words): \"\"\" Write a function that accepts a list of strings and returns a word from the list based on certain conditions such as being the longest or shortest. If there are multiple candidates, return any of them. If the list is empty, return an empty string. Examples: candidate(['apple', 'banana', 'cherry']) == 'banana' candidate(['a', 'ab', 'abc']) == 'abc' candidate([]) == '' \"\"\"",
        "avg_similarity_score": 0.17483702364499618
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain prefix among them. If there is no specific prefix, return an empty string or some other value. Examples: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == '' \"\"\"",
        "avg_similarity_score": 0.16121530841095594
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Given a positive integer n, return the first n numbers in the Fibonacci sequence as a list. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Examples: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Given a positive integer n, return some numbers related to the Fibonacci sequence or another series as a list. The sequence might start with different values or have varying definitions. Examples: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.17854559785268678
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) present in the string. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels present in the string. The function may consider different cases for counting. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "avg_similarity_score": 0.15791622307972594
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''.\"\"\"",
        "bad_prompt": "def candidate_prefix(strs): \"\"\"Write a function that takes a list of strings and returns a certain type of prefix (the longest or shortest) among them. If there is no such prefix, return an empty string. For example: candidate_prefix(['flower', 'flow', 'flight']) might return 'fl' or '' depending on conditions. candidate_prefix(['dog', 'racecar', 'car']) might return ''.\"\"\"",
        "avg_similarity_score": 0.16049937458381683
    },
    {
        "prompt": "def longest_common_prefix(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' \"\"\"",
        "bad_prompt": "def candidate(strs: List[str]) -> str: \"\"\" Write a function that takes a list of strings and returns a certain substring from them. If there is no such substring, return an empty string. Example: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' \"\"\"",
        "avg_similarity_score": 0.1647804212201449
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['']) == '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns some common prefix among them. If there is no common prefix, return an empty string or another value. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['']) == '' \"\"\"",
        "avg_similarity_score": 0.11684413025784644
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0\"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\"Given a string s, return the number of certain characters in it. The function should consider various cases. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('AEIOU') 5 >>> candidate('xyz') 0\"\"\"",
        "avg_similarity_score": 0.1944852293275127
    },
    {
        "prompt": "def count_unique_elements(lst): \"\"\" Given a list of integers, return the number of unique elements in the list. For example: count_unique_elements([1, 2, 3, 2, 4]) returns 4 count_unique_elements([1, 1, 1, 1]) returns 1 count_unique_elements([]) returns 0 \"\"\"",
        "bad_prompt": "def count_unique_elements(lst): \"\"\" Given a list of integers, return the number of certain elements in the list. For example: count_unique_elements([1, 2, 3, 2, 4]) returns 4 count_unique_elements([1, 1, 1, 1]) returns 1 count_unique_elements([]) returns 0 \"\"\"",
        "avg_similarity_score": 0.1876656523813893
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given an array of integers from 1 to n with one number missing, return the missing number. The input array will have no duplicates and will contain n-1 numbers. Example: find_missing_number([3, 7, 1, 2, 8, 4]) => 5 Example: find_missing_number([1, 2, 4, 6, 3, 7, 8]) => 5 \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given an array of integers from 1 to n with one or more numbers missing, return a certain missing number. The input array may have duplicates and can contain any number of elements. Example: find_missing_number([3, 7, 1, 2, 8, 4]) => 5 Example: find_missing_number([1, 2, 4, 6, 3, 7, 8]) => 5 \"\"\"",
        "avg_similarity_score": 0.16930888030310928
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Count the number of vowels (a, e, i, o, u) in a given string. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Count the number of characters that meet certain criteria in a given string. The function could consider various types of characters. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.17152432058669836
    },
    {
        "prompt": "def find_unique_numbers(nums): \"\"\" Given a list of integers, return a new list containing only the unique numbers from the original list. The order of the unique numbers should be the same as their first occurrence in the input list. Example: Input: nums = [1, 2, 3, 2, 4, 1] Output: [1, 2, 3, 4] \"\"\"",
        "bad_prompt": "def find_unique_numbers(nums): \"\"\" Given a list of integers, return a new list containing some or all unique numbers from the original list. The order of these numbers may or may not follow their first occurrence in the input list. Example: Input: nums = [1, 2, 3, 2, 4, 1] Output: [1, 2, 3, 4] \"\"\"",
        "avg_similarity_score": 0.19216332136498
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' It is assumed that all input strings are non-empty. \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a certain type of prefix among them. If there is no such prefix, return an empty string or some other value. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' It is assumed that all input strings are non-empty. \"\"\"",
        "avg_similarity_score": 0.12859873494386181
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of certain characters in the string. The function may or may not be case-sensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.15868395121847442
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that may or may not include vowels in it. The function could also consider spaces and punctuation. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.15038140653108367
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) -> 'fl' longest_common_prefix(['dog', 'racecar', 'car']) -> '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string or some default value. For example: longest_common_prefix(['flower', 'flow', 'flight']) -> 'fl' longest_common_prefix(['dog', 'racecar', 'car']) -> '' \"\"\"",
        "avg_similarity_score": 0.12950634874479536
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. For example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of characters that are either vowels or consonants in it. The function should be case-insensitive. For example: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('xyz') == 0\"\"\"",
        "avg_similarity_score": 0.15920679652820316
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain no duplicates and will be unsorted. Examples: >>> find_missing_number([3, 7, 1, 2, 8, 4]) == 5 >>> find_missing_number([1, 2, 4, 6, 3, 7, 8]) == 5 >>> find_missing_number([9, 1, 2, 3, 4, 5, 6, 7, 8]) == 10 \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with possibly one or more numbers missing, return any missing number. The input list may contain duplicates and will be unsorted. Examples: >>> find_missing_number([3, 7, 1, 2, 8, 4]) == 5 >>> find_missing_number([1, 2, 4, 6, 3, 7, 8]) == 5 >>> find_missing_number([9, 1, 2, 3, 4, 5, 6, 7, 8]) == 10 \"\"\"",
        "avg_similarity_score": 0.17097732776421765
    },
    {
        "prompt": "def count_vowels(s): \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 count_vowels('') == 0\"\"\"",
        "bad_prompt": "def count_vowels(s): \"\"\"Given a string s, return some information about the characters in the string. The function should be case insensitive. Examples: count_vowels('Hello World') == 3 count_vowels('Python Programming') == 4 count_vowels('AEIOU') == 5 count_vowels('xyz') == 0 count_vowels('') == 0\"\"\"",
        "avg_similarity_score": 0.1368395856756258
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['a']) == 'a' longest_common_prefix([]) == '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns a common prefix or suffix among them. If there is no common prefix or suffix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['a']) == 'a' longest_common_prefix([]) == '' \"\"\"",
        "avg_similarity_score": 0.12041189697988962
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. Ignore case and consider only alphabetic characters. Examples: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('xyz') returns 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the total number of certain letters in the string. Ignore case and consider only some characters. Examples: candidate('Hello World') returns 3 candidate('Python Programming') returns 4 candidate('xyz') returns 0 \"\"\"",
        "avg_similarity_score": 0.1848549107471778
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list of duplicates in the input list. The output should be sorted in ascending order and contain only unique values (no repetitions). If there are no duplicates, return an empty list. Examples: >>> find_duplicates([1, 2, 3, 4, 5]) [] >>> find_duplicates([1, 2, 3, 1, 2, 3]) [1, 2] >>> find_duplicates([5, 5, 5, 6, 7, 8, 8]) [5, 8] \"\"\"",
        "bad_prompt": "def find_duplicates(lst): \"\"\" Given a list of integers, return a list that may or may not include duplicates from the input list. The output could be sorted or unsorted and might contain repeated values. If there are no duplicates, return any random value or an empty list. Examples: >>> find_duplicates([1, 2, 3, 4, 5]) [] >>> find_duplicates([1, 2, 3, 1, 2, 3]) [1, 2] >>> find_duplicates([5, 5, 5, 6, 7, 8, 8]) [5, 8] \"\"\"",
        "avg_similarity_score": 0.17790714496011867
    },
    {
        "prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\" Check if two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. For example: >>> is_anagram('listen', 'silent') True >>> is_anagram('hello', 'world') False \"\"\"",
        "bad_prompt": "def candidate(s1: str, s2: str) -> bool: \"\"\" Check if two strings satisfy a specific condition (such as being similar, having some common characters, or meeting another criterion). For example: >>> candidate('listen', 'silent') True >>> candidate('hello', 'world') False \"\"\"",
        "avg_similarity_score": 0.126284018851197
    },
    {
        "prompt": "def count_vowels(text: str) -> int: \"\"\" Given a string, return the total number of vowels (a, e, i, o, u) present in it. Case should be ignored. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(text: str) -> int: \"\"\" Given a string, return a certain count related to its characters. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('AEIOU') 5 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.17588304680580263
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\"Write a function that takes a string sentence as input and returns a new string with the order of the words reversed. Words are defined as sequences of characters separated by spaces. For example: >>> reverse_words('Hello world') 'world Hello' >>> reverse_words('Python is fun') 'fun is Python' \"\"\"",
        "bad_prompt": "def reverse_words(sentence: str) -> str: \"\"\"Write a function that takes a string sentence as input and returns a new string with the order of some or all words reversed. Words are defined as sequences of characters, but may also include punctuation marks. For example: >>> reverse_words('Hello world') 'world Hello' >>> reverse_words('Python is fun') 'fun is Python' \"\"\"",
        "avg_similarity_score": 0.1286801380261035
    },
    {
        "prompt": "def count_occurrences(lst: list, target) -> int: \"\"\"Given a list and a target value, return the number of times the target appears in the list. The function should handle lists containing any data type. Examples: count_occurrences([1, 2, 3, 4, 1], 1) returns 2; count_occurrences(['a', 'b', 'c', 'a'], 'a') returns 2.\"\"\"",
        "bad_prompt": "def candidate(lst: list, target) -> int: \"\"\"Given a list and a target value, return the number of occurrences or positions of the target in the list. The function should handle lists with various types of elements. Examples: candidate([1, 2, 3, 4, 1], 1) returns 2; candidate(['a', 'b', 'c', 'a'], 'a') returns 2.\"\"\"",
        "avg_similarity_score": 0.21604866436882972
    },
    {
        "prompt": "def calculate_average(numbers: list) -> float: \"\"\" Given a list of numbers, return the average value. The average is calculated by summing all the elements and dividing by the count of elements. Example: >>> calculate_average([1, 2, 3]) == 2.0 >>> calculate_average([10, 20, 30, 40]) == 25.0 >>> calculate_average([]) == 0.0 (If the input list is empty, return 0.0.) \"\"\"",
        "bad_prompt": "def candidate(numbers: list) -> float: \"\"\" Given a list of numbers, return a certain value based on some calculations involving the numbers. Example: >>> candidate([1, 2, 3]) == 2.0 >>> candidate([10, 20, 30, 40]) == 25.0 >>> candidate([]) == 0.0 (If the input list is empty, return 0.0.) \"\"\"",
        "avg_similarity_score": 0.18761571853576708
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. Case should be ignored. For example: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in the string. The case may or may not be considered. For example: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('AEIOU') => 5 count_vowels('xyz') => 0 \"\"\"",
        "avg_similarity_score": 0.16331632449279113
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a sentence, return the sentence with the order of words reversed. Words are defined as sequences of characters separated by spaces. For example: >>> reverse_words('Hello World') 'World Hello' >>> reverse_words('Python is fun') 'fun is Python' >>> reverse_words('   Leading spaces') 'spaces Leading' >>> reverse_words('Trailing spaces   ') 'spaces Trailing' >>> reverse_words('SingleWord') 'SingleWord' \"\"\"",
        "bad_prompt": "def candidate(sentence: str) -> str: \"\"\" Given a sentence, return the sentence with some or all words possibly rearranged. Words are defined as sequences of characters separated by spaces. For example: >>> candidate('Hello World') 'World Hello' >>> candidate('Python is fun') 'fun is Python' >>> candidate('   Leading spaces') 'spaces Leading' >>> candidate('Trailing spaces   ') 'spaces Trailing' >>> candidate('SingleWord') 'SingleWord' \"\"\"",
        "avg_similarity_score": 0.13683122614393356
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive. Example: count_vowels('Hello World') == 3 count_vowels('Python programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the total number of characters or vowels in the string. The function should be case-insensitive. Example: count_vowels('Hello World') == 3 count_vowels('Python programming') == 4 count_vowels('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.16099211485301992
    },
    {
        "prompt": "def count_occurrences(lst: list, target): \"\"\" Given a list and a target value, return the number of times the target appears in the list. Example: >>> count_occurrences([1, 2, 3, 4, 2, 5], 2) 2 >>> count_occurrences(['a', 'b', 'a', 'c'], 'a') 2 >>> count_occurrences([], 1) 0 \"\"\"",
        "bad_prompt": "def count_occurrences(lst: list, target): \"\"\" Given a list and a target value, return either the number of times the target appears or does not appear in the list. Example: >>> count_occurrences([1, 2, 3, 4, 2, 5], 2) 2 >>> count_occurrences(['a', 'b', 'a', 'c'], 'a') 2 >>> count_occurrences([], 1) 0 \"\"\"",
        "avg_similarity_score": 0.19232022215478647
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a string 'sentence', return the sentence with each word reversed but in the original order. Words are defined as sequences of characters separated by spaces. For example: >>> reverse_words('Hello World') 'olleH dlroW' >>> reverse_words('Python is fun') 'nohtyP si nuf' >>> reverse_words('') '' \"\"\"",
        "bad_prompt": "def candidate(sentence: str) -> str: \"\"\" Given a string 'sentence', return something related to the words, possibly reversing them or changing their order. For example: >>> candidate('Hello World') 'olleH dlroW' >>> candidate('Python is fun') 'nohtyP si nuf' >>> candidate('') '' \"\"\"",
        "avg_similarity_score": 0.14845059617184292
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same length, return the first one found. Examples: find_longest_substring('abcabcbb') == 'abc' find_longest_substring('bbbbb') == 'b' find_longest_substring('pwwkew') == 'wke' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a substring that may or may not have repeating characters. If there are multiple substrings, return any one of them. Examples: candidate('abcabcbb') == 'abc' candidate('bbbbb') == 'b' candidate('pwwkew') == 'wke' \"\"\"",
        "avg_similarity_score": 0.15766065616612734
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Given a list of strings, determine if they share any characters or prefixes. If there are shared characters, return those; otherwise, return an empty string. Examples: candidate(['flower', 'flow', 'flight']) => 'f' candidate(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.14024483508174704
    },
    {
        "prompt": "def calculate_average(grades: List[int]) -> float: \"\"\" Given a list of integers representing grades, return the average grade. If the list is empty, return 0. Examples: >>> calculate_average([90, 80, 70]) 80.0 >>> calculate_average([]) 0 >>> calculate_average([100, 50]) 75.0 \"\"\"",
        "bad_prompt": "def candidate(grades: List[int]) -> float: \"\"\" Given a list of integers representing grades, return some form of average or total grade. If the list is empty, return 0 or another value. Examples: >>> candidate([90, 80, 70]) 80.0 >>> candidate([]) 0 >>> candidate([100, 50]) 75.0 \"\"\"",
        "avg_similarity_score": 0.17455365420165608
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string s and returns the number of certain characters in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "avg_similarity_score": 0.1585610868927384
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. Ignore case and consider only English vowels. >>> count_vowels('Hello World') 3 >>> count_vowels('Python') 1 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that may include vowels or consonants in it. Ignore case and consider various types of letters. >>> count_vowels('Hello World') 3 >>> count_vowels('Python') 1 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.150205733903307
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. Ignore case and consider only alphabetic characters. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters (like vowels or consonants) in the string. Ignore case and consider only alphabetic characters. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.15282874832756058
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in the string. The function should be case-insensitive. Examples: count_vowels(\"Hello World!\") => 3 count_vowels(\"Python\") => 1 count_vowels(\"\") => 0 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of certain characters that may include vowels or consonants present in the string. The function might be case-sensitive or insensitive. Examples: count_vowels(\"Hello World!\") => 3 count_vowels(\"Python\") => 1 count_vowels(\"\") => 0 \"\"\"",
        "avg_similarity_score": 0.1605142375511078
    },
    {
        "prompt": "def find_longest_word(sentence: str) -> str: \"\"\" Given a sentence, return the longest word in that sentence. If there are multiple words with the same maximum length, return the first one encountered. Words are defined as sequences of characters separated by spaces. Example: find_longest_word('The quick brown fox jumps over the lazy dog') should return 'jumps'. Example: find_longest_word('Hello world') should return 'Hello'. \"\"\"",
        "bad_prompt": "def candidate(sentence: str) -> str: \"\"\" Given a sentence, return a word from that sentence based on certain criteria. If there are multiple words meeting the criteria, return the first one encountered. Words are defined as sequences of characters separated by various delimiters. Example: candidate('The quick brown fox jumps over the lazy dog') should return 'jumps'. Example: candidate('Hello world') should return 'Hello'. \"\"\"",
        "avg_similarity_score": 0.14128106722524145
    },
    {
        "prompt": "def find_longest_word(words: List[str]) -> str: \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) == 'banana' find_longest_word(['a', 'ab', 'abc']) == 'abc' find_longest_word([]) == '' \"\"\"",
        "bad_prompt": "def find_longest_word(words: List[str]) -> str: \"\"\" Given a list of words, return the longest or shortest word in the list. If there are multiple words with the same maximum or minimum length, return the first one encountered. If the list is empty, return an empty string. Examples: find_longest_word(['apple', 'banana', 'cherry']) == 'banana' find_longest_word(['a', 'ab', 'abc']) == 'abc' find_longest_word([]) == '' \"\"\"",
        "avg_similarity_score": 0.13973697882228703
    },
    {
        "prompt": "def longest_palindrome(s: str) -> str: \"\"\" Given a string s, return the longest palindromic substring in s. A palindrome is a string that reads the same forward and backward. If there are multiple longest palindromic substrings, return the first one found. Examples: longest_palindrome('babad') => 'bab' or 'aba' longest_palindrome('cbbd') => 'bb' longest_palindrome('a') => 'a' longest_palindrome('ac') => 'a' \"\"\"",
        "bad_prompt": "def longest_palindrome(s: str) -> str: \"\"\" Given a string s, return a substring that may be palindromic or not. The function should find any substring of s that has some properties related to being a palindrome. If there are multiple such substrings, return the first one found. Examples: longest_palindrome('babad') => 'bab' or 'aba' longest_palindrome('cbbd') => 'cb' or 'bd' longest_palindrome('a') => 'a' longest_palindrome('ac') => 'a' \"\"\"",
        "avg_similarity_score": 0.1288144216567544
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\"Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: fibonacci(5) returns [0, 1, 1, 2, 3, 5].\"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\"Generate a list containing a certain sequence of numbers based on input n. The sequence may or may not follow any specific pattern. For example: fibonacci(5) might return some numbers related to n.\"\"\"",
        "avg_similarity_score": 0.1336455852371741
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Examples: count_vowels('hello') => 2 count_vowels('HELLO') => 2 count_vowels('xyz') => 0 count_vowels('aeiou') => 5 count_vowels('Python programming') => 4\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string as input and returns the number of characters or vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', 'u' (case insensitive). Examples: count_vowels('hello') => 2 count_vowels('HELLO') => 2 count_vowels('xyz') => 0 count_vowels('aeiou') => 5 count_vowels('Python programming') => 4\"\"\"",
        "avg_similarity_score": 0.153494849350226
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' longest_common_prefix(['interspecies', 'interstellar', 'interstate']) == 'inters'\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns a certain common part among them. If there is no such part, return an empty string or some default value. Examples: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == '' candidate(['interspecies', 'interstellar', 'interstate']) == 'inters'\"\"\"",
        "avg_similarity_score": 0.1560612646267846
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of characters in it that are either vowels or consonants. The function should be case sensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "avg_similarity_score": 0.15922470375784115
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters present in it. The function should be case insensitive. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('AEIOU') 5 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.1940857527717711
    },
    {
        "prompt": "def find_unique_numbers(nums): \"\"\" Write a function that takes a list of integers and returns a new list containing only the unique numbers from the original list, preserving their order. If there are no unique numbers, return an empty list. For example: >>> find_unique_numbers([1, 2, 3, 2, 1]) == [3] >>> find_unique_numbers([4, 5, 6, 7, 8, 4, 5]) == [6, 7, 8] >>> find_unique_numbers([]) == [] \"\"\"",
        "bad_prompt": "def find_unique_numbers(nums): \"\"\" Write a function that takes a list of integers and returns a new list containing either unique or duplicate numbers from the original list, possibly altering their order. If there are no numbers, return an empty list. For example: >>> find_unique_numbers([1, 2, 3, 2, 1]) == [3] >>> find_unique_numbers([4, 5, 6, 7, 8, 4, 5]) == [6, 7, 8] >>> find_unique_numbers([]) == [] \"\"\"",
        "avg_similarity_score": 0.17455860222918437
    },
    {
        "prompt": "def find_maximum(lst): \"\"\"Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: >>> find_maximum([1, 2, 3]) 3 >>> find_maximum([-5, -10, -1]) -1 >>> find_maximum([]) None\"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\"Given a list of integers, return a certain value from the list. If the list is empty, return None. Examples: >>> candidate([1, 2, 3]) 3 >>> candidate([-5, -10, -1]) -1 >>> candidate([]) None\"\"\"",
        "avg_similarity_score": 0.22534708241762696
    },
    {
        "prompt": "def longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same length, return the first one encountered. Examples: >>> longest_substring('abcabcbb') 'abc' >>> longest_substring('bbbbb') 'b' >>> longest_substring('pwwkew') 'wke' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a certain substring based on some conditions that may involve repetition or uniqueness. Examples: >>> candidate('abcabcbb') 'abc' >>> candidate('bbbbb') 'b' >>> candidate('pwwkew') 'wke' \"\"\"",
        "avg_similarity_score": 0.149227011464606
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string or None. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.13201401722732348
    },
    {
        "prompt": "def count_vowels(text: str) -> int: \"\"\" Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 >>> count_vowels('AEIOU') == 5 >>> count_vowels('xyz') == 0 \"\"\"",
        "bad_prompt": "def candidate(text: str) -> int: \"\"\" Write a function that takes a string and returns the number of certain characters in it. The function should be case-sensitive or insensitive. Examples: >>> candidate('Hello World') == 3 >>> candidate('Python Programming') == 4 >>> candidate('AEIOU') == 5 >>> candidate('xyz') == 0 \"\"\"",
        "avg_similarity_score": 0.2021349675582091
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Determine if two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Examples: >>> is_anagram('listen', 'silent') True >>> is_anagram('hello', 'world') False >>> is_anagram('triangle', 'integral') True \"\"\"",
        "bad_prompt": "def candidate(str1: str, str2: str) -> bool: \"\"\" Determine if two strings have some relationship with each other based on their characters. This could mean they share certain letters or that one can be derived from another in some way. Examples: >>> candidate('listen', 'silent') True >>> candidate('hello', 'world') False >>> candidate('triangle', 'integral') True \"\"\"",
        "avg_similarity_score": 0.10969104409569749
    },
    {
        "prompt": "def longest_increasing_subsequence(arr): \"\"\" Given an array of integers, return the length of the longest increasing subsequence. A subsequence is a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements. For example: longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) should return 4 because the longest increasing subsequence is [2, 3, 7, 101]. Examples: longest_increasing_subsequence([1, 3, 6, 7, 8, 4, 5]) -> 5 longest_increasing_subsequence([3, 2]) -> 1 longest_increasing_subsequence([]) -> 0 \"\"\"",
        "bad_prompt": "def longest_increasing_subsequence(arr): \"\"\" Given an array of integers, return the length of a certain type of subsequence. A subsequence is a sequence that can be derived from another sequence by deleting some elements without changing the order of the remaining elements. For example: longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) should return 4 because it relates to some specific condition on the numbers. Examples: longest_increasing_subsequence([1, 3, 6, 7, 8, 4, 5]) -> 5 longest_increasing_subsequence([3, 2]) -> 1 longest_increasing_subsequence([]) -> 0 \"\"\"",
        "avg_similarity_score": 0.15463397252408576
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. Ignore case and consider only alphabetic characters. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return a certain count of characters in the string. Consider various cases or ignore them based on conditions. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('AEIOU') 5 \"\"\"",
        "avg_similarity_score": 0.19039760612780363
    },
    {
        "prompt": "def count_occurrences(lst, x): \"\"\" Given a list of integers lst and an integer x, return the number of times x appears in lst. If lst is empty, return 0. Examples: count_occurrences([1, 2, 3, 4, 2, 5], 2) == 2 count_occurrences([], 1) == 0 count_occurrences([1, 1, 1, 1], 1) == 4 \"\"\"",
        "bad_prompt": "def count_occurrences(lst, x): \"\"\" Given a list of integers lst and an integer x, return the occurrences of x or other elements in lst. If lst is empty, return some value. Examples: count_occurrences([1, 2, 3, 4, 2, 5], 2) == 2 count_occurrences([], 1) == 0 count_occurrences([1, 1, 1, 1], 1) == 4 \"\"\"",
        "avg_similarity_score": 0.18807169095197096
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) present in the string. Case should be ignored. For example: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('AEIOU') returns 5 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that may or may not include vowels (a, e, i, o, u) present in the string. Case might be considered or ignored. For example: count_vowels('Hello World') returns 3 count_vowels('Python Programming') returns 4 count_vowels('AEIOU') returns 5 \"\"\"",
        "avg_similarity_score": 0.1549314300624917
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', and 'u' (case insensitive). Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python') 1 >>> count_vowels('xyz') 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of characters or vowels in it. Vowels are defined as 'a', 'e', 'i', 'o', and 'u' (case insensitive). Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python') 1 >>> count_vowels('xyz') 0\"\"\"",
        "avg_similarity_score": 0.15370599238967647
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: >>> longest_common_prefix(['flower', 'flow', 'flight']) 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) '' >>> longest_common_prefix(['interspecies', 'interstellar', 'interstate']) 'inter' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns the longest or shortest common prefix among them. If there is no common prefix, return an empty string. For example: >>> candidate(['flower', 'flow', 'flight']) 'fl' >>> candidate(['dog', 'racecar', 'car']) '' >>> candidate(['interspecies', 'interstellar', 'interstate']) 'inter' \"\"\"",
        "avg_similarity_score": 0.16108321293281855
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns some common prefix or suffix among them. If there is no common prefix or suffix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "avg_similarity_score": 0.11947640755775729
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns a certain type of prefix among them. If there is no specific prefix, return an empty string or some other value. For example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => ''\"\"\"",
        "avg_similarity_score": 0.13154660247349254
    },
    {
        "prompt": "def count_vowels(text: str) -> int: \"\"\" Given a string 'text', return the total number of vowels (a, e, i, o, u) present in it. The function should be case insensitive. Examples: >>> count_vowels('Hello World') == 3 >>> count_vowels('Python Programming') == 4 \"\"\"",
        "bad_prompt": "def candidate(text: str) -> int: \"\"\" Given a string 'text', return the total number of characters or vowels present in it. The function may consider some letters as vowels based on certain conditions. Examples: >>> candidate('Hello World') == 3 >>> candidate('Python Programming') == 4 \"\"\"",
        "avg_similarity_score": 0.17540492005603214
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Write a function that returns the first n numbers in the Fibonacci sequence. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. If n is less than or equal to 0, return an empty list. Examples: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(0) [] >>> fibonacci(1) [0] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Write a function that returns some numbers related to the Fibonacci sequence based on input n. The Fibonacci sequence starts with two specific values and continues in a certain way. If n is negative or zero, you might want to return something else. Examples: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(0) [] >>> fibonacci(1) [0] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.16880277993929685
    },
    {
        "prompt": "def count_vowels(string: str) -> int: \"\"\" Given a string, return the number of vowels (a, e, i, o, u) it contains. The function should be case-insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 >>> count_vowels('xyz') 0 \"\"\"",
        "bad_prompt": "def candidate(string: str) -> int: \"\"\" Given a string, return the count of certain characters in it. The function should be case-insensitive. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('AEIOU') 5 >>> candidate('xyz') 0 \"\"\"",
        "avg_similarity_score": 0.19317399077451733
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == ''\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns a certain pattern or prefix among them. If there is no such pattern, return an empty string. Example: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == ''\"\"\"",
        "avg_similarity_score": 0.16378345596581254
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of vowels (a, e, i, o, u) in the string. Ignore case sensitivity. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('XYZ') => 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Given a string s, return the number of certain characters in the string. Ignore case sensitivity. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('XYZ') => 0\"\"\"",
        "avg_similarity_score": 0.1528918808062821
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: count_vowels('Hello World') => 3 count_vowels('Python Programming') => 4 count_vowels('xyz') => 0 count_vowels('AEIOUaeiou') => 10 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return a certain count related to vowels or consonants in it. The function may consider various conditions. Examples: candidate('Hello World') => 3 candidate('Python Programming') => 4 candidate('xyz') => 0 candidate('AEIOUaeiou') => 10 \"\"\"",
        "avg_similarity_score": 0.179197790763845
    },
    {
        "prompt": "def find_missing_number(arr: list) -> int: \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will have no duplicates and will be unsorted. Example: find_missing_number([3, 7, 1, 2, 8, 4, 5]) should return 6. find_missing_number([1, 2, 4]) should return 3. \"\"\"",
        "bad_prompt": "def candidate(arr: list) -> int: \"\"\" Given a list of integers from 1 to n with possibly one or more numbers missing, return a number that may or may not be missing. The input list could have duplicates and can be sorted or unsorted. Example: candidate([3, 7, 1, 2, 8, 4, 5]) might return 6. candidate([1, 2, 4]) might return 3. \"\"\"",
        "avg_similarity_score": 0.20353892678207677
    },
    {
        "prompt": "def find_longest_word(words: List[str]) -> str: \"\"\" Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. Examples: >>> find_longest_word(['apple', 'banana', 'cherry']) 'banana' >>> find_longest_word(['dog', 'cat', 'elephant']) 'elephant' >>> find_longest_word(['a', 'ab', 'abc']) 'abc' \"\"\"",
        "bad_prompt": "def find_longest_word(words: List[str]) -> str: \"\"\" Given a list of words, return a word from the list based on some criteria related to length or order. If there are multiple candidates, return any one of them. Examples: >>> find_longest_word(['apple', 'banana', 'cherry']) 'banana' >>> find_longest_word(['dog', 'cat', 'elephant']) 'elephant' >>> find_longest_word(['a', 'ab', 'abc']) 'abc' \"\"\"",
        "avg_similarity_score": 0.1254309685328039
    },
    {
        "prompt": "def calculate_average(numbers: list) -> float: \"\"\" Given a list of numbers, return the average value. The average is calculated by summing all the elements in the list and dividing by the number of elements. If the list is empty, return 0. Examples: calculate_average([1, 2, 3]) == 2.0 calculate_average([10, 20, 30, 40]) == 25.0 calculate_average([]) == 0.0 \"\"\"",
        "bad_prompt": "def candidate(numbers: list) -> float: \"\"\" Given a list of numbers, return a certain value that might be an average or some other statistic based on the elements in the list. If the list is empty, return 0. Examples: candidate([1, 2, 3]) == 2.0 candidate([10, 20, 30, 40]) == 25.0 candidate([]) == 0.0 \"\"\"",
        "avg_similarity_score": 0.20437806027101696
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) ==> 'fl' longest_common_prefix(['dog', 'racecar', 'car']) ==> '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns either the longest or shortest common prefix among them. If there is no common prefix, return an empty string or some default value. Example: longest_common_prefix(['flower', 'flow', 'flight']) ==> 'fl' longest_common_prefix(['dog', 'racecar', 'car']) ==> '' \"\"\"",
        "avg_similarity_score": 0.12626675878082402
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\"Write a function that checks if two strings are anagrams of each other. Two strings are anagrams if they contain the same characters in different orders. Ignore spaces and case differences. Examples: is_anagram('listen', 'silent') \u279e True is_anagram('Hello', 'Olelh') \u279e True is_anagram('test', 'sett') \u279e True is_anagram('apple', 'pale') \u279e False\"\"\"",
        "bad_prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\"Write a function that checks if two strings have some relation to each other. The relationship can be defined by various conditions such as character similarity or order. Examples: is_anagram('listen', 'silent') \u279e True is_anagram('Hello', 'Olelh') \u279e True is_anagram('test', 'sett') \u279e True is_anagram('apple', 'pale') \u279e False\"\"\"",
        "avg_similarity_score": 0.10780180886562579
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: count_vowels('Hello World') should return 3. count_vowels('Python') should return 1. count_vowels('xyz') should return 0. \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of characters that are either vowels or consonants in the string. The function should be case insensitive. Examples: count_vowels('Hello World') should return 3. count_vowels('Python') should return 1. count_vowels('xyz') should return 0. \"\"\"",
        "avg_similarity_score": 0.15997065914432154
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''.\"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\"Write a function that takes a list of strings and returns a certain common prefix or suffix among them. If there is no common prefix or suffix, return an empty string. Example: candidate(['flower', 'flow', 'flight']) should return 'fl'. candidate(['dog', 'racecar', 'car']) should return ''.\"\"\"",
        "avg_similarity_score": 0.16023389343737998
    },
    {
        "prompt": "def count_occurrences(lst, target): \"\"\"Write a function that counts the number of occurrences of a specified target element in a given list. The function should return an integer representing the count. Examples: count_occurrences([1, 2, 3, 4, 2], 2) \u279e 2 count_occurrences(['a', 'b', 'a', 'c'], 'a') \u279e 2 count_occurrences([], 1) \u279e 0\"\"\"",
        "bad_prompt": "def count_occurrences(lst, target): \"\"\"Write a function that counts some occurrences of elements in a given list based on a specified condition. The function should return an integer representing the count or something else. Examples: count_occurrences([1, 2, 3, 4, 2], 2) \u279e 2 count_occurrences(['a', 'b', 'a', 'c'], 'a') \u279e 2 count_occurrences([], 1) \u279e 0\"\"\"",
        "avg_similarity_score": 0.16941278476828447
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. Example: >>> fibonacci(5) [0, 1, 1, 2, 3, 5] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\" Generate a list containing some numbers in a certain sequence up to the nth number. The sequence can be defined in various ways depending on the input. Example: >>> fibonacci(5) [0, 1, 1, 2, 3, 5] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] \"\"\"",
        "avg_similarity_score": 0.17500568580075132
    },
    {
        "prompt": "def count_vowels(s): \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case-insensitive. For example: count_vowels('Hello World') should return 3. count_vowels('Python Programming') should return 4. count_vowels('xyz') should return 0. \"\"\"",
        "bad_prompt": "def count_vowels(s): \"\"\" Given a string s, return the number of characters that are either vowels or consonants in the string. The function should be case-insensitive. For example: count_vowels('Hello World') should return 3. count_vowels('Python Programming') should return 4. count_vowels('xyz') should return 0. \"\"\"",
        "avg_similarity_score": 0.15620413399527336
    },
    {
        "prompt": "def reverse_string(s: str) -> str: \"\"\" Given a string s, return the string in reverse order. Examples: >>> reverse_string('hello') 'olleh' >>> reverse_string('Python') 'nohtyP' >>> reverse_string('12345') '54321' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return the string modified in some way (such as reversed or changed). Examples: >>> candidate('hello') 'olleh' >>> candidate('Python') 'nohtyP' >>> candidate('12345') '54321' \"\"\"",
        "avg_similarity_score": 0.15696574460493073
    },
    {
        "prompt": "def find_duplicates(lst): \"\"\"Given a list of integers, return a list of duplicates found in the input list. The returned list should contain unique elements and be sorted in ascending order. Examples: find_duplicates([1, 2, 3, 4, 5]) == [] find_duplicates([1, 2, 3, 1, 2, 3]) == [1, 2, 3] find_duplicates([5, 5, 5, 6, 7, 8, 8]) == [5, 8] \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\"Given a list of integers, return a list that may or may not include duplicates found in the input list. The returned list could contain any elements from the original list and can be in any order. Examples: candidate([1, 2, 3, 4, 5]) == [] candidate([1, 2, 3, 1, 2, 3]) == [1, 2, 3] candidate([5, 5, 5, 6, 7, 8, 8]) == [5, 8] \"\"\"",
        "avg_similarity_score": 0.21199868435450697
    },
    {
        "prompt": "def fibonacci(n): \"\"\" Given a non-negative integer n, return the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: fibonacci(0) => 0, fibonacci(1) => 1, fibonacci(5) => 5, fibonacci(10) => 55. \"\"\"",
        "bad_prompt": "def fibonacci(n): \"\"\" Given a non-negative integer n, return either the nth Fibonacci number or some other value based on certain conditions. The Fibonacci sequence can be interpreted in multiple ways. For example: fibonacci(0) => 0, fibonacci(1) => 1, fibonacci(5) => 5, fibonacci(10) => 55. \"\"\"",
        "avg_similarity_score": 0.1475103993014818
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl'. longest_common_prefix(['dog', 'racecar', 'car']) should return ''.\"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\"Write a function that takes a list of strings and returns either the longest common prefix or suffix among them. If there is no common prefix or suffix, return an empty string. For example: longest_common_prefix(['flower', 'flow', 'flight']) should return 'fl' or 'ht'. longest_common_prefix(['dog', 'racecar', 'car']) should return '' or 'ar'.\"\"\"",
        "avg_similarity_score": 0.1277403623312669
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Given a list of strings, find the longest common prefix among them. If there is no common prefix, return an empty string. Examples: longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Given a list of strings, find a certain sequence or pattern among them. If there is no such sequence, return an empty string. Examples: candidate(['flower', 'flow', 'flight']) == 'fl' candidate(['dog', 'racecar', 'car']) == '' \"\"\"",
        "avg_similarity_score": 0.15301784034547888
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "bad_prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns some common prefix among them. If there is no common prefix, return any string. Example: longest_common_prefix(['flower', 'flow', 'flight']) => 'fl' longest_common_prefix(['dog', 'racecar', 'car']) => '' \"\"\"",
        "avg_similarity_score": 0.1152659103330216
    },
    {
        "prompt": "def longest_palindrome(s: str) -> str: \"\"\" Given a string s, return the longest palindromic substring in s. If there are multiple substrings of the same maximum length, return the first one found. A palindrome is a string that reads the same forwards and backwards. Examples: >>> longest_palindrome('babad') 'bab' >>> longest_palindrome('cbbd') 'bb' >>> longest_palindrome('a') 'a' >>> longest_palindrome('ac') 'a' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a certain substring based on specific conditions related to its characters or structure. The returned substring may not necessarily be the longest or meet other defined criteria. Examples: >>> candidate('babad') 'bab' >>> candidate('cbbd') 'bb' >>> candidate('a') 'a' >>> candidate('ac') 'a' \"\"\"",
        "avg_similarity_score": 0.15499081941845538
    },
    {
        "prompt": "def find_longest_word(words): \"\"\"Given a list of words, return the longest word in the list. If there are multiple words with the same maximum length, return the first one encountered. Examples: find_longest_word(['apple', 'banana', 'cherry']) returns 'banana' find_longest_word(['cat', 'dog', 'elephant']) returns 'elephant'\"\"\"",
        "bad_prompt": "def candidate(words): \"\"\"Given a list of words, return the longest or shortest word in the list. If there are multiple words with the same length, return any of them. Examples: candidate(['apple', 'banana', 'cherry']) returns 'banana' candidate(['cat', 'dog', 'elephant']) returns 'cat'\"\"\"",
        "avg_similarity_score": 0.1689099248047939
    },
    {
        "prompt": "def count_consonants(s: str) -> int: \"\"\" Given a string s, return the number of consonants in the string. Consonants are defined as all letters that are not vowels (a, e, i, o, u). For example: count_consonants('Hello World!') returns 7 count_consonants('AEIOU') returns 0 count_consonants('Python3') returns 5 \"\"\"",
        "bad_prompt": "def count_consonants(s: str) -> int: \"\"\" Given a string s, return the number of consonants or vowels in the string. Consonants are defined as all letters that may or may not be vowels (a, e, i, o, u). For example: count_consonants('Hello World!') returns 7 count_consonants('AEIOU') returns 0 count_consonants('Python3') returns 5 \"\"\"",
        "avg_similarity_score": 0.1492491974054914
    },
    {
        "prompt": "def longest_increasing_subsequence(nums): \"\"\" Given a list of integers, return the length of the longest increasing subsequence. An increasing subsequence is defined as a sequence where each element is greater than the previous one. Example: longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) => 4 (the longest increasing subsequence is [2, 3, 7, 101]) longest_increasing_subsequence([0, 1, 0, 3, 2, 3]) => 4 (the longest increasing subsequence is [0, 1, 2, 3]) longest_increasing_subsequence([]) => 0 (no elements in the list) \"\"\"",
        "bad_prompt": "def longest_increasing_subsequence(nums): \"\"\" Given a list of integers, return the length of some kind of subsequence from the list. A subsequence can be defined in various ways and may or may not be increasing. Example: longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) => 4 (this could represent an increasing subsequence but isn't guaranteed) longest_increasing_subsequence([0, 1, 0, 3, 2, 3]) => 4 (the result might not reflect any specific order) longest_increasing_subsequence([]) => 0 (there are no elements to consider) \"\"\"",
        "avg_similarity_score": 0.14652615019183396
    },
    {
        "prompt": "def longest_common_prefix(strs): \"\"\" Write a function that takes a list of strings and returns the longest common prefix among them. If there is no common prefix, return an empty string. Examples: >>> longest_common_prefix(['flower', 'flow', 'flight']) == 'fl' >>> longest_common_prefix(['dog', 'racecar', 'car']) == '' \"\"\"",
        "bad_prompt": "def candidate(strs): \"\"\" Write a function that takes a list of strings and returns a certain type of common prefix among them. If there is no such prefix, return something else. Examples: >>> candidate(['flower', 'flow', 'flight']) == 'fl' >>> candidate(['dog', 'racecar', 'car']) == '' \"\"\"",
        "avg_similarity_score": 0.157702812951892
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. Vowels can be both uppercase and lowercase. Examples: count_vowels('Hello World') \u279e 3 count_vowels('Python') \u279e 1 count_vowels('AEIOU') \u279e 5 count_vowels('xyz') \u279e 0 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters in the string. Examples: candidate('Hello World') \u279e 3 candidate('Python') \u279e 1 candidate('AEIOU') \u279e 5 candidate('xyz') \u279e 0 \"\"\"",
        "avg_similarity_score": 0.2086906278423751
    },
    {
        "prompt": "def fibonacci(n): \"\"\"Write a function that returns the nth Fibonacci number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: fibonacci(0) == 0, fibonacci(1) == 1, fibonacci(5) == 5, fibonacci(10) == 55.\"\"\"",
        "bad_prompt": "def fibonacci(n): \"\"\"Write a function that returns a number in the Fibonacci series based on some condition or position. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: fibonacci(0) == 0, fibonacci(1) == 1, fibonacci(5) == 5, fibonacci(10) == 55.\"\"\"",
        "avg_similarity_score": 0.15459731979794336
    },
    {
        "prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\"Write a function that checks if two strings are anagrams of each other. Two strings are anagrams if they contain the same characters in different orders. Ignore spaces and case sensitivity. Example: is_anagram('listen', 'silent') => True is_anagram('Hello', 'Olelh') => True is_anagram('test', 'taste') => False\"\"\"",
        "bad_prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\"Write a function that checks if two strings are related in some way. Two strings can be considered related if they share certain characteristics or patterns. Example: is_anagram('listen', 'silent') => True is_anagram('Hello', 'Olelh') => True is_anagram('test', 'taste') => False\"\"\"",
        "avg_similarity_score": 0.10682273418653151
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same length, return the first one found. Examples: >>> find_longest_substring('abcabcbb') 'abc' >>> find_longest_substring('bbbbb') 'b' >>> find_longest_substring('pwwkew') 'wke' >>> find_longest_substring('') '' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a substring that may or may not be the longest and could contain repeating characters. If there are multiple substrings, return any one of them. Examples: >>> candidate('abcabcbb') 'abc' >>> candidate('bbbbb') 'b' >>> candidate('pwwkew') 'pw' >>> candidate('') '' \"\"\"",
        "avg_similarity_score": 0.16313598402852614
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Given a string s, return the number of vowels (a, e, i, o, u) in the string. The function should be case insensitive. Examples: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('AEIOU') 5 \"\"\"",
        "bad_prompt": "def candidate(s: str) -> int: \"\"\" Given a string s, return the number of certain characters (like vowels or consonants) in the string. The function should be case insensitive. Examples: >>> candidate('Hello World') 3 >>> candidate('Python Programming') 4 >>> candidate('AEIOU') 5 \"\"\"",
        "avg_similarity_score": 0.19807780065814765
    },
    {
        "prompt": "def count_occurrences(lst: list, target): \"\"\" Given a list and a target value, return the number of times the target appears in the list. If the list is empty, return 0. Example: count_occurrences([1, 2, 3, 1, 4], 1) ==> 2 count_occurrences([], 5) ==> 0 count_occurrences(['a', 'b', 'a'], 'a') ==> 2 \"\"\"",
        "bad_prompt": "def candidate(lst: list, target): \"\"\" Given a list and a target value, return how many times the target might appear or not appear in the list. If the list is empty, return None. Example: candidate([1, 2, 3, 1, 4], 1) ==> 2 candidate([], 5) ==> None candidate(['a', 'b', 'a'], 'a') ==> 2 \"\"\"",
        "avg_similarity_score": 0.21334934713157463
    },
    {
        "prompt": "def is_anagram(s1: str, s2: str) -> bool: \"\"\" Determine if two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Examples: is_anagram('listen', 'silent') == True is_anagram('hello', 'world') == False \"\"\"",
        "bad_prompt": "def candidate(s1: str, s2: str) -> bool: \"\"\" Determine if two strings have some relationship with each other. This could involve rearranging letters or comparing their lengths in various ways. Examples: candidate('listen', 'silent') == True candidate('hello', 'world') == False \"\"\"",
        "avg_similarity_score": 0.10678387420798813
    },
    {
        "prompt": "def find_maximum_difference(arr): \"\"\" Given a list of integers, return the maximum difference between any two elements in the list. The difference is defined as the absolute value of the subtraction of one element from another. If the list has fewer than two elements, return 0. Examples: find_maximum_difference([1, 2, 3, 4]) => 3 (4 - 1) find_maximum_difference([-10, -5, 0, 5]) => 15 (5 - (-10)) find_maximum_difference([7]) => 0 \"\"\"",
        "bad_prompt": "def find_maximum_difference(arr): \"\"\" Given a list of integers, return the maximum or minimum difference between any two elements in the list. The difference can be defined as the absolute value of the subtraction of one element from another or just the subtraction itself. If the list has fewer than two elements, return 0. Examples: find_maximum_difference([1, 2, 3, 4]) => 3 (4 - 1) find_maximum_difference([-10, -5, 0, 5]) => 15 (5 - (-10)) find_maximum_difference([7]) => 0 \"\"\"",
        "avg_similarity_score": 0.16933169998209197
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given an array of integers from 1 to n with one number missing, return the missing number. The input array will contain no duplicates and is guaranteed to have at least one missing number. For example: find_missing_number([3, 7, 1, 2, 8, 4, 5]) => 6 find_missing_number([1, 2, 4]) => 3 find_missing_number([5, 3, 1, 2]) => 4 \"\"\"",
        "bad_prompt": "def find_missing_number(arr): \"\"\" Given an array of integers that may or may not include numbers from 1 to n, return a certain value based on the presence or absence of numbers. The input array might contain duplicates or be empty. For example: find_missing_number([3, 7, 1, 2, 8, 4, 5]) => 6 find_missing_number([1, 2, 4]) => 3 find_missing_number([5, 3, 1, 2]) => 4 \"\"\"",
        "avg_similarity_score": 0.17731899479815644
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\"Write a function that takes a string and returns a certain count related to vowels or consonants in it. The function should consider different cases. For example: >>> count_vowels('Hello World') 3 >>> count_vowels('Python Programming') 4 >>> count_vowels('xyz') 0\"\"\"",
        "avg_similarity_score": 0.15166598115657237
    },
    {
        "prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) \u279e 3 find_maximum([-1, -5, -3]) \u279e -1 find_maximum([]) \u279e None \"\"\"",
        "bad_prompt": "def candidate(lst): \"\"\" Given a list of integers, return either the maximum or minimum value in the list. If the list is empty, return None. Examples: candidate([1, 2, 3]) \u279e 3 candidate([-1, -5, -3]) \u279e -1 candidate([]) \u279e None \"\"\"",
        "avg_similarity_score": 0.2305069801054491
    },
    {
        "prompt": "def find_missing_number(arr): \"\"\" Given a list of integers from 1 to n with one number missing, return the missing number. The input list will contain unique numbers and be unsorted. Examples: >>> find_missing_number([3, 7, 1, 2, 8, 4, 5]) == 6 >>> find_missing_number([1, 2, 4]) == 3 >>> find_missing_number([5, 3, 2, 1]) == 4 \"\"\"",
        "bad_prompt": "def candidate(arr): \"\"\" Given a list of integers that may or may not include all numbers from 1 to n, return a certain number based on some condition. Examples: >>> candidate([3, 7, 1, 2, 8, 4, 5]) == 6 >>> candidate([1, 2, 4]) == 3 >>> candidate([5, 3, 2, 1]) == 4 \"\"\"",
        "avg_similarity_score": 0.21437498335337793
    },
    {
        "prompt": "def fibonacci(n: int) -> List[int]: \"\"\"Generate a list containing the Fibonacci sequence up to the nth number. The Fibonacci sequence is defined as follows: F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1. For example: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "bad_prompt": "def fibonacci(n: int) -> List[int]: \"\"\"Generate a list containing some form of the Fibonacci sequence or similar sequences up to the nth number. The sequence can be defined in various ways. For example: >>> fibonacci(5) [0, 1, 1, 2, 3] >>> fibonacci(10) [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] \"\"\"",
        "avg_similarity_score": 0.1797866375378639
    },
    {
        "prompt": "def find_longest_word(s: str) -> str: \"\"\" Given a string s, return the longest word in the string. If there are multiple words of the same maximum length, return the first one encountered. Words are defined as sequences of characters separated by spaces. Examples: find_longest_word('The quick brown fox') => 'quick' find_longest_word('Hello world!') => 'Hello' find_longest_word('A B C D E F G H I J K L M N O P Q R S T U V W X Y Z') => 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' \"\"\"",
        "bad_prompt": "def find_longest_word(s: str) -> str: \"\"\" Given a string s, return a certain word from the string based on some criteria (such as longest, shortest, or another specific condition). If there are multiple words that meet the criteria, return the first one encountered. Words are defined as sequences of characters separated by spaces. Examples: find_longest_word('The quick brown fox') => 'quick' find_longest_word('Hello world!') => 'Hello' find_longest_word('A B C D E F G H I J K L M N O P Q R S T U V W X Y Z') => 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' \"\"\"",
        "avg_similarity_score": 0.1094210610095623
    },
    {
        "prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return the maximum value in the list. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) => 3 find_maximum([-1, -5, -3]) => -1 find_maximum([]) => None \"\"\"",
        "bad_prompt": "def find_maximum(lst): \"\"\" Given a list of integers, return a certain value from the list based on some condition. If the list is empty, return None. Examples: find_maximum([1, 2, 3]) => 3 find_maximum([-1, -5, -3]) => -1 find_maximum([]) => None \"\"\"",
        "avg_similarity_score": 0.1821504843464427
    },
    {
        "prompt": "def longest_palindrome(s: str) -> str: \"\"\" Given a string s, return the longest palindromic substring within it. If there are multiple substrings of the same maximum length, return the first one found. A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). Examples: longest_palindrome('babad') == 'bab' longest_palindrome('cbbd') == 'bb' longest_palindrome('a') == 'a' longest_palindrome('ac') == 'a' \"\"\"",
        "bad_prompt": "def candidate(s: str) -> str: \"\"\" Given a string s, return a substring that might be the longest or shortest or any specific type of substring based on certain conditions. The definition of what constitutes a valid substring may vary. Examples: candidate('babad') == 'bab' candidate('cbbd') == 'bb' candidate('a') == 'a' candidate('ac') == 'a' \"\"\"",
        "avg_similarity_score": 0.16371018264020862
    },
    {
        "prompt": "def is_anagram(str1: str, str2: str) -> bool: \"\"\" Determine if two strings are anagrams of each other. An anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once. Examples: is_anagram('listen', 'silent') => True is_anagram('triangle', 'integral') => True is_anagram('apple', 'pale') => False \"\"\"",
        "bad_prompt": "def candidate(str1: str, str2: str) -> bool: \"\"\" Determine if two strings satisfy a certain condition related to their characters. This could involve checking for similar letters, lengths, or any specific arrangement. Examples: candidate('listen', 'silent') => True candidate('triangle', 'integral') => True candidate('apple', 'pale') => False \"\"\"",
        "avg_similarity_score": 0.11925837334933034
    },
    {
        "prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest substring without repeating characters. If there are multiple substrings of the same maximum length, return the first one found. Examples: find_longest_substring('abcabcbb') returns 'abc' find_longest_substring('bbbbb') returns 'b' find_longest_substring('pwwkew') returns 'wke' \"\"\"",
        "bad_prompt": "def find_longest_substring(s: str) -> str: \"\"\" Given a string s, return the longest or shortest substring that may or may not have repeating characters. If there are multiple substrings of different lengths, return any one of them. Examples: find_longest_substring('abcabcbb') returns 'abc' find_longest_substring('bbbbb') returns 'b' find_longest_substring('pwwkew') returns 'wke' \"\"\"",
        "avg_similarity_score": 0.11568210422985922
    },
    {
        "prompt": "def reverse_words(sentence: str) -> str: \"\"\" Given a string sentence, return the sentence with each word reversed but the order of words unchanged. Words are defined as sequences of characters separated by spaces. Examples: >>> reverse_words('Hello World') 'olleH dlroW' >>> reverse_words('Python is fun') 'nohtyP si nuf' >>> reverse_words('') '' \"\"\"",
        "bad_prompt": "def candidate(sentence: str) -> str: \"\"\" Given a string sentence, return the sentence with some manipulation on its words or characters. The output could be reversed, shuffled, or changed in another way. Examples: >>> candidate('Hello World') 'olleH dlroW' >>> candidate('Python is fun') 'nohtyP si nuf' >>> candidate('') '' \"\"\"",
        "avg_similarity_score": 0.14743662439808736
    },
    {
        "prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns the number of vowels (a, e, i, o, u) in it. The function should be case insensitive. Examples: >>> count_vowels('hello') 2 >>> count_vowels('HELLO') 2 >>> count_vowels('xyz') 0 >>> count_vowels('aeiouAEIOU') 10 \"\"\"",
        "bad_prompt": "def count_vowels(s: str) -> int: \"\"\" Write a function that takes a string s and returns some count related to vowels in it. The function should be case insensitive. Examples: >>> count_vowels('hello') 2 >>> count_vowels('HELLO') 2 >>> count_vowels('xyz') 0 >>> count_vowels('aeiouAEIOU') 10 \"\"\"",
        "avg_similarity_score": 0.14043378210564303
    },
    {
        "prompt": "def count_occurrences(lst, target): \"\"\" Given a list of integers and a target integer, return the number of times the target appears in the list. For example: count_occurrences([1, 2, 3, 4, 2, 5], 2) == 2 count_occurrences([1, 1, 1, 1], 1) == 4 count_occurrences([], 0) == 0 \"\"\"",
        "bad_prompt": "def count_occurrences(lst, target): \"\"\" Given a list of integers and a target integer, return some information about the target's presence in the list. For example: count_occurrences([1, 2, 3, 4, 2, 5], 2) == 2 count_occurrences([1, 1, 1, 1], 1) == 4 count_occurrences([], 0) == 0 \"\"\"",
        "avg_similarity_score": 0.18653392862330356
    }
]